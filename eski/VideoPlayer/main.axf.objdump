
C:/Users/EE_BUMEMS01/Desktop/VideoPlayer/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 e8 18 02 00 ec 18 02 00 f0 18 02 00     @...............
      30:	f4 18 02 00 e4 18 02 00 00 f9 00 00 f8 18 02 00     ................

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0085cd 	bl	21810 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00022a18 	.word	0x00022a18

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffffc 	.word	0x3ffffffc
     120:	000234a4 	.word	0x000234a4

00000124 <__cs3_heap_start_ptr>:
     124:	26758c88 	.word	0x26758c88

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffffc 	.word	0x3ffffffc

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000234b0 	.word	0x000234b0
     170:	000234b3 	.word	0x000234b3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000234b0 	.word	0x000234b0
     1bc:	000234b0 	.word	0x000234b0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00024000 	.word	0x00024000
     200:	00000000 	.word	0x00000000
     204:	00021994 	.word	0x00021994

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00021994 	.word	0x00021994
     250:	00024004 	.word	0x00024004
     254:	00022a18 	.word	0x00022a18
     258:	00000000 	.word	0x00000000

0000025c <alt_pt_alloc>:
static uint32_t __attribute__ ((aligned (0x4000))) alt_pt_storage[4096];

static void *alt_pt_alloc(const size_t size, void *context)
{
	return context;
}
     25c:	e1a00001 	mov	r0, r1
     260:	e12fff1e 	bx	lr

00000264 <TimerISR>:
	alt_mmu_va_space_create(&ttb1, regions, sizeof(regions)/sizeof(regions[0]), alt_pt_alloc, alt_pt_storage);
	alt_mmu_va_space_enable(ttb1);
}

static void TimerISR(uint32_t icciar, void * context)
{
     264:	e92d4008 	push	{r3, lr}
	// Clear int source don't care about the return value
	alt_globaltmr_int_clear_pending();
     268:	eb001dd9 	bl	79d4 <alt_globaltmr_int_clear_pending>
	alt_globaltmr_comp_set64(alt_globaltmr_get64() + 230000*4);
     26c:	eb001d14 	bl	76c4 <alt_globaltmr_get64>
     270:	e3a02d27 	mov	r2, #2496	; 0x9c0
     274:	e3a03000 	mov	r3, #0
     278:	e340200e 	movt	r2, #14
     27c:	e0900002 	adds	r0, r0, r2
     280:	e0a11003 	adc	r1, r1, r3


	// Mustafa's Code
	//
	//
}
     284:	e8bd4008 	pop	{r3, lr}

static void TimerISR(uint32_t icciar, void * context)
{
	// Clear int source don't care about the return value
	alt_globaltmr_int_clear_pending();
	alt_globaltmr_comp_set64(alt_globaltmr_get64() + 230000*4);
     288:	ea001d3c 	b	7780 <alt_globaltmr_comp_set64>

0000028c <media_write>:
	return 1;
}

int media_write(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
	for (uint32_t i=0; i < sector_count; i++)
     28c:	e3520000 	cmp	r2, #0

	return 1;
}

int media_write(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
     290:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     294:	e1a05000 	mov	r5, r0
     298:	e1a04001 	mov	r4, r1
	for (uint32_t i=0; i < sector_count; i++)
     29c:	0a00000b 	beq	2d0 <media_write+0x44>
	}

	return 1;
}

int media_write(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
     2a0:	e0617480 	rsb	r7, r1, r0, lsl #9
     2a4:	e0826000 	add	r6, r2, r0
{
	for (uint32_t i=0; i < sector_count; i++)
	{
		alt_sdmmc_write(&Card_Info, (void*)(sector*FAT_SECTOR_SIZE), buffer, FAT_SECTOR_SIZE);
     2a8:	e3080000 	movw	r0, #32768	; 0x8000
     2ac:	e0841007 	add	r1, r4, r7
     2b0:	e1a02004 	mov	r2, r4
     2b4:	e3400002 	movt	r0, #2
     2b8:	e3a03c02 	mov	r3, #512	; 0x200

		sector++;
     2bc:	e2855001 	add	r5, r5, #1

int media_write(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
	for (uint32_t i=0; i < sector_count; i++)
	{
		alt_sdmmc_write(&Card_Info, (void*)(sector*FAT_SECTOR_SIZE), buffer, FAT_SECTOR_SIZE);
     2c0:	eb001a55 	bl	6c1c <alt_sdmmc_write>
	return 1;
}

int media_write(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
	for (uint32_t i=0; i < sector_count; i++)
     2c4:	e1550006 	cmp	r5, r6
	{
		alt_sdmmc_write(&Card_Info, (void*)(sector*FAT_SECTOR_SIZE), buffer, FAT_SECTOR_SIZE);

		sector++;
		buffer += FAT_SECTOR_SIZE;
     2c8:	e2844c02 	add	r4, r4, #512	; 0x200
	return 1;
}

int media_write(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
	for (uint32_t i=0; i < sector_count; i++)
     2cc:	1afffff5 	bne	2a8 <media_write+0x1c>
		sector++;
		buffer += FAT_SECTOR_SIZE;
	}

	return 1;
}
     2d0:	e3a00001 	mov	r0, #1
     2d4:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000002d8 <media_read>:
	return 1;
}

int media_read(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
	for (uint32_t i=0; i < sector_count; i++)
     2d8:	e3520000 	cmp	r2, #0
	init_mmc();
	return 1;
}

int media_read(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
     2dc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     2e0:	e1a05000 	mov	r5, r0
     2e4:	e1a04001 	mov	r4, r1
	for (uint32_t i=0; i < sector_count; i++)
     2e8:	0a00000b 	beq	31c <media_read+0x44>
{
	init_mmc();
	return 1;
}

int media_read(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
     2ec:	e0617480 	rsb	r7, r1, r0, lsl #9
     2f0:	e0826000 	add	r6, r2, r0
{
	for (uint32_t i=0; i < sector_count; i++)
	{
		alt_sdmmc_read(&Card_Info, buffer, (void*)(sector*FAT_SECTOR_SIZE), FAT_SECTOR_SIZE);
     2f4:	e3080000 	movw	r0, #32768	; 0x8000
     2f8:	e1a01004 	mov	r1, r4
     2fc:	e0842007 	add	r2, r4, r7
     300:	e3400002 	movt	r0, #2
     304:	e3a03c02 	mov	r3, #512	; 0x200

		sector++;
     308:	e2855001 	add	r5, r5, #1

int media_read(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
	for (uint32_t i=0; i < sector_count; i++)
	{
		alt_sdmmc_read(&Card_Info, buffer, (void*)(sector*FAT_SECTOR_SIZE), FAT_SECTOR_SIZE);
     30c:	eb001b73 	bl	70e0 <alt_sdmmc_read>
	return 1;
}

int media_read(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
	for (uint32_t i=0; i < sector_count; i++)
     310:	e1550006 	cmp	r5, r6
	{
		alt_sdmmc_read(&Card_Info, buffer, (void*)(sector*FAT_SECTOR_SIZE), FAT_SECTOR_SIZE);

		sector++;
		buffer += FAT_SECTOR_SIZE;
     314:	e2844c02 	add	r4, r4, #512	; 0x200
	return 1;
}

int media_read(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
	for (uint32_t i=0; i < sector_count; i++)
     318:	1afffff5 	bne	2f4 <media_read+0x1c>
		sector++;
		buffer += FAT_SECTOR_SIZE;
	}

	return 1;
}
     31c:	e3a00001 	mov	r0, #1
     320:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000324 <ShowVal>:
	0x7F, // 0111 / 1111
	0x6F  // 0110 / 1111
};

void ShowVal(const uint32_t val)
{
     324:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11}

	*pDISP0 = (d3 << 24) | (d2 << 16) | (d1 << 8) | d0;
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
     328:	e3053ac5 	movw	r3, #23237	; 0x5ac5
     32c:	e1a0a2a0 	lsr	r10, r0, #5
     330:	e3403a7c 	movt	r3, #2684	; 0xa7c
     334:	e30c2ccd 	movw	r2, #52429	; 0xcccd
     338:	e08a1a93 	umull	r1, r10, r3, r10
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
     33c:	e308651f 	movw	r6, #34079	; 0x851f

	*pDISP0 = (d3 << 24) | (d2 << 16) | (d1 << 8) | d0;
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
     340:	e34c2ccc 	movt	r2, #52428	; 0xcccc
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
     344:	e34561eb 	movt	r6, #20971	; 0x51eb
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
     348:	e3018759 	movw	r8, #5977	; 0x1759
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
     34c:	e3047dd3 	movw	r7, #19923	; 0x4dd3
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
     350:	e0861096 	umull	r1, r6, r6, r0
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
     354:	e34d81b7 	movt	r8, #53687	; 0xd1b7
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
     358:	e3417062 	movt	r7, #4194	; 0x1062
	0x7F, // 0111 / 1111
	0x6F  // 0110 / 1111
};

void ShowVal(const uint32_t val)
{
     35c:	e24dd018 	sub	sp, sp, #24

	*pDISP0 = (d3 << 24) | (d2 << 16) | (d1 << 8) | d0;
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
     360:	e1a0a3aa 	lsr	r10, r10, #7
	
	int counter=6;
	/* Display a null-terminated text string at coordinates x, y. Assume that the text fits on one line */
	offset = (y <<7) + x;
	while ( counter>=0 ){
		*(unsigned char *)(0xC9000000 + offset) = text_ptr[counter]; // write to the character buffer
     364:	e3a03a01 	mov	r3, #4096	; 0x1000
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
     368:	e081b092 	umull	r11, r1, r2, r0
	
	int counter=6;
	/* Display a null-terminated text string at coordinates x, y. Assume that the text fits on one line */
	offset = (y <<7) + x;
	while ( counter>=0 ){
		*(unsigned char *)(0xC9000000 + offset) = text_ptr[counter]; // write to the character buffer
     36c:	e34c3900 	movt	r3, #51456	; 0xc900
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
     370:	e1a062a6 	lsr	r6, r6, #5

	*pDISP0 = (d3 << 24) | (d2 << 16) | (d1 << 8) | d0;
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
     374:	e085ca92 	umull	r12, r5, r2, r10
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
     378:	e1a011a1 	lsr	r1, r1, #3
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
     37c:	e087c097 	umull	r12, r7, r7, r0
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
	d1 = d1 + '0';
	uint32_t d0 = (val) % 10;
     380:	e0819101 	add	r9, r1, r1, lsl #2

	*pDISP0 = (d3 << 24) | (d2 << 16) | (d1 << 8) | d0;
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
     384:	e1a051a5 	lsr	r5, r5, #3
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
     388:	e088b098 	umull	r11, r8, r8, r0
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
	d1 = d1 + '0';
	uint32_t d0 = (val) % 10;
     38c:	e0400089 	sub	r0, r0, r9, lsl #1

	*pDISP0 = (d3 << 24) | (d2 << 16) | (d1 << 8) | d0;
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
     390:	e0855105 	add	r5, r5, r5, lsl #2
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
     394:	e1a07327 	lsr	r7, r7, #6
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
	d1 = d1 + '0';
	uint32_t d0 = (val) % 10;
	d0 = d0 + '0';
     398:	e2809030 	add	r9, r0, #48	; 0x30

	*pDISP0 = (d3 << 24) | (d2 << 16) | (d1 << 8) | d0;
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
     39c:	e04a5085 	sub	r5, r10, r5, lsl #1
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
     3a0:	e080b692 	umull	r11, r0, r2, r6
	d0 = d0 + '0';
	
	int offset,x =5 ,y =55;
	
	char *text_ptr[6]; //notice that the data size is not dynamic, it is constant. It can be adjusted as in example code below.
	text_ptr[0]= d0;
     3a4:	e58d9000 	str	r9, [sp]
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
     3a8:	e1a086a8 	lsr	r8, r8, #13
	*pDISP0 = (d3 << 24) | (d2 << 16) | (d1 << 8) | d0;
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
     3ac:	e2855030 	add	r5, r5, #48	; 0x30
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
     3b0:	e08cb792 	umull	r11, r12, r2, r7
	text_ptr[0]= d0;
	text_ptr[1]= d1;
	text_ptr[2]= d2;
	text_ptr[3]= d3;
	text_ptr[4]= d4;
	text_ptr[5]= d5;
     3b4:	e58d5014 	str	r5, [sp, #20]
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
     3b8:	e1a001a0 	lsr	r0, r0, #3
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
     3bc:	e084b892 	umull	r11, r4, r2, r8
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
     3c0:	e0800100 	add	r0, r0, r0, lsl #2
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
     3c4:	e1a0c1ac 	lsr	r12, r12, #3
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
     3c8:	e082a192 	umull	r10, r2, r2, r1
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
     3cc:	e0460080 	sub	r0, r6, r0, lsl #1
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
     3d0:	e08cc10c 	add	r12, r12, r12, lsl #2
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
     3d4:	e1a041a4 	lsr	r4, r4, #3
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
     3d8:	e2800030 	add	r0, r0, #48	; 0x30
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
     3dc:	e047c08c 	sub	r12, r7, r12, lsl #1
	int offset,x =5 ,y =55;
	
	char *text_ptr[6]; //notice that the data size is not dynamic, it is constant. It can be adjusted as in example code below.
	text_ptr[0]= d0;
	text_ptr[1]= d1;
	text_ptr[2]= d2;
     3e0:	e58d0008 	str	r0, [sp, #8]
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
     3e4:	e0844104 	add	r4, r4, r4, lsl #2
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
     3e8:	e1a021a2 	lsr	r2, r2, #3
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
     3ec:	e28cc030 	add	r12, r12, #48	; 0x30
	*pDISP1 = (d5 << 8) | d4;
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
     3f0:	e0484084 	sub	r4, r8, r4, lsl #1
	
	char *text_ptr[6]; //notice that the data size is not dynamic, it is constant. It can be adjusted as in example code below.
	text_ptr[0]= d0;
	text_ptr[1]= d1;
	text_ptr[2]= d2;
	text_ptr[3]= d3;
     3f4:	e58dc00c 	str	r12, [sp, #12]
	d4 = d4 + '0';
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
     3f8:	e0822102 	add	r2, r2, r2, lsl #2
	*/
	
	uint32_t d5 = (val / 100000) % 10;
	d5 = d5 + '0';
	uint32_t d4 = (val / 10000) % 10;
	d4 = d4 + '0';
     3fc:	e2844030 	add	r4, r4, #48	; 0x30
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
     400:	e0412082 	sub	r2, r1, r2, lsl #1
	char *text_ptr[6]; //notice that the data size is not dynamic, it is constant. It can be adjusted as in example code below.
	text_ptr[0]= d0;
	text_ptr[1]= d1;
	text_ptr[2]= d2;
	text_ptr[3]= d3;
	text_ptr[4]= d4;
     404:	e58d4010 	str	r4, [sp, #16]
	uint32_t d3 = (val / 1000) % 10;
	d3 = d3 + '0';
	uint32_t d2 = (val / 100) % 10;
	d2 = d2 + '0';
	uint32_t d1 = (val / 10) % 10;
	d1 = d1 + '0';
     408:	e2822030 	add	r2, r2, #48	; 0x30
	
	int offset,x =5 ,y =55;
	
	char *text_ptr[6]; //notice that the data size is not dynamic, it is constant. It can be adjusted as in example code below.
	text_ptr[0]= d0;
	text_ptr[1]= d1;
     40c:	e58d2004 	str	r2, [sp, #4]
	
	int counter=6;
	/* Display a null-terminated text string at coordinates x, y. Assume that the text fits on one line */
	offset = (y <<7) + x;
	while ( counter>=0 ){
		*(unsigned char *)(0xC9000000 + offset) = text_ptr[counter]; // write to the character buffer
     410:	e59d2018 	ldr	r2, [sp, #24]
     414:	e5c32b85 	strb	r2, [r3, #2949]	; 0xb85
     418:	e59d2014 	ldr	r2, [sp, #20]
     41c:	e5c32b86 	strb	r2, [r3, #2950]	; 0xb86
     420:	e59d2010 	ldr	r2, [sp, #16]
     424:	e5c32b87 	strb	r2, [r3, #2951]	; 0xb87
     428:	e59d200c 	ldr	r2, [sp, #12]
     42c:	e5c32b88 	strb	r2, [r3, #2952]	; 0xb88
     430:	e59d2008 	ldr	r2, [sp, #8]
     434:	e5c32b89 	strb	r2, [r3, #2953]	; 0xb89
     438:	e59d2004 	ldr	r2, [sp, #4]
     43c:	e5c32b8a 	strb	r2, [r3, #2954]	; 0xb8a
     440:	e59d2000 	ldr	r2, [sp]
     444:	e5c32b8b 	strb	r2, [r3, #2955]	; 0xb8b
		counter--;
		offset++;
	}
}
     448:	e28dd018 	add	sp, sp, #24
     44c:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11}
     450:	e12fff1e 	bx	lr

00000454 <print_debug>:

int print_debug(const char *fmt, ...)
{
     454:	e92d000f 	push	{r0, r1, r2, r3}
     458:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     45c:	e24ddf83 	sub	sp, sp, #524	; 0x20c
    int ret;
    char buf[512];
	char* p = &buf[0];
    va_list ap;

    va_start(ap, fmt);
     460:	e28d3f85 	add	r3, sp, #532	; 0x214
    ret = vsprintf(buf, fmt, ap);
     464:	e28d0008 	add	r0, sp, #8
     468:	e1a02003 	mov	r2, r3
     46c:	e59d1210 	ldr	r1, [sp, #528]	; 0x210
    int ret;
    char buf[512];
	char* p = &buf[0];
    va_list ap;

    va_start(ap, fmt);
     470:	e58d3004 	str	r3, [sp, #4]
    ret = vsprintf(buf, fmt, ap);
     474:	eb0065a9 	bl	19b20 <vsprintf>
    va_end(ap);
	
    while((ret > 0) && *p)
     478:	e3500000 	cmp	r0, #0
     47c:	da00000a 	ble	4ac <print_debug+0x58>
	{
		if((*(JTAG_UART_ptr + 1)) & 0xFFFF0000)
     480:	e3a02a01 	mov	r2, #4096	; 0x1000
		counter--;
		offset++;
	}
}

int print_debug(const char *fmt, ...)
     484:	e28d1007 	add	r1, sp, #7
    ret = vsprintf(buf, fmt, ap);
    va_end(ap);
	
    while((ret > 0) && *p)
	{
		if((*(JTAG_UART_ptr + 1)) & 0xFFFF0000)
     488:	e34f2f20 	movt	r2, #65312	; 0xff20

    va_start(ap, fmt);
    ret = vsprintf(buf, fmt, ap);
    va_end(ap);
	
    while((ret > 0) && *p)
     48c:	e5f1c001 	ldrb	r12, [r1, #1]!
     490:	e35c0000 	cmp	r12, #0
     494:	0a000004 	beq	4ac <print_debug+0x58>
	{
		if((*(JTAG_UART_ptr + 1)) & 0xFFFF0000)
     498:	e5923004 	ldr	r3, [r2, #4]
     49c:	e1b03823 	lsrs	r3, r3, #16
     4a0:	0afffffc 	beq	498 <print_debug+0x44>
		{
			*(JTAG_UART_ptr) = *p++;
     4a4:	e582c000 	str	r12, [r2]
     4a8:	eafffff7 	b	48c <print_debug+0x38>
		}
    }
	
    return ret;
}
     4ac:	e28ddf83 	add	sp, sp, #524	; 0x20c
     4b0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     4b4:	e28dd010 	add	sp, sp, #16
     4b8:	e12fff1e 	bx	lr

000004bc <init_mmc>:

ALT_SDMMC_CARD_INFO_t Card_Info;

void init_mmc(void)
{
     4bc:	e92d4010 	push	{r4, lr}
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ALT_SDMMC_CARD_MISC_t card_misc_cfg;

    print_debug("MMC Initialization.\n");
     4c0:	e30109f0 	movw	r0, #6640	; 0x19f0

	alt_globaltmr_int_is_enabled();
	alt_sdmmc_init();
	alt_sdmmc_card_pwr_on();

	alt_sdmmc_card_identify(&Card_Info); // Card_Info.card_type == ALT_SDMMC_CARD_TYPE_SDHC
     4c4:	e3084000 	movw	r4, #32768	; 0x8000
}

ALT_SDMMC_CARD_INFO_t Card_Info;

void init_mmc(void)
{
     4c8:	e24dd018 	sub	sp, sp, #24

	alt_globaltmr_int_is_enabled();
	alt_sdmmc_init();
	alt_sdmmc_card_pwr_on();

	alt_sdmmc_card_identify(&Card_Info); // Card_Info.card_type == ALT_SDMMC_CARD_TYPE_SDHC
     4cc:	e3404002 	movt	r4, #2
void init_mmc(void)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ALT_SDMMC_CARD_MISC_t card_misc_cfg;

    print_debug("MMC Initialization.\n");
     4d0:	e3400002 	movt	r0, #2
     4d4:	ebffffde 	bl	454 <print_debug>

	alt_globaltmr_int_is_enabled();
     4d8:	eb001d39 	bl	79c4 <alt_globaltmr_int_is_enabled>
	alt_sdmmc_init();
     4dc:	eb001570 	bl	5aa4 <alt_sdmmc_init>
	alt_sdmmc_card_pwr_on();
     4e0:	eb0011ea 	bl	4c90 <alt_sdmmc_card_pwr_on>

	alt_sdmmc_card_identify(&Card_Info); // Card_Info.card_type == ALT_SDMMC_CARD_TYPE_SDHC
     4e4:	e1a00004 	mov	r0, r4
     4e8:	eb00189d 	bl	6764 <alt_sdmmc_card_identify>

	alt_sdmmc_card_bus_width_set(&Card_Info, ALT_SDMMC_BUS_WIDTH_4);
     4ec:	e1a00004 	mov	r0, r4
     4f0:	e3a01004 	mov	r1, #4
     4f4:	eb0014bf 	bl	57f8 <alt_sdmmc_card_bus_width_set>

	alt_sdmmc_fifo_param_set((ALT_SDMMC_FIFO_NUM_ENTRIES >> 3) - 1, (ALT_SDMMC_FIFO_NUM_ENTRIES >> 3), ALT_SDMMC_MULT_TRANS_TXMSIZE1);
     4f8:	e3a02000 	mov	r2, #0
     4fc:	e3a01080 	mov	r1, #128	; 0x80
     500:	e3a0007f 	mov	r0, #127	; 0x7f
     504:	eb00138b 	bl	5338 <alt_sdmmc_fifo_param_set>
	alt_sdmmc_card_misc_get(&card_misc_cfg);    
     508:	e28d0004 	add	r0, sp, #4
     50c:	eb001265 	bl	4ea8 <alt_sdmmc_card_misc_get>
    alt_sdmmc_dma_enable();
     510:	eb0013b1 	bl	53dc <alt_sdmmc_dma_enable>

	alt_sdmmc_card_speed_set(&Card_Info, (Card_Info.high_speed ? 2 : 1) * Card_Info.xfer_speed);
     514:	e5d43016 	ldrb	r3, [r4, #22]
     518:	e1a00004 	mov	r0, r4
     51c:	e5941008 	ldr	r1, [r4, #8]
     520:	e3530000 	cmp	r3, #0
     524:	03a03001 	moveq	r3, #1
     528:	13a03002 	movne	r3, #2
     52c:	e0010391 	mul	r1, r1, r3
     530:	eb001938 	bl	6a18 <alt_sdmmc_card_speed_set>

	#define printMMC(x)	print_debug(#x " = %d\n", x)
	printMMC(Card_Info.card_type);
     534:	e3010a08 	movw	r0, #6664	; 0x1a08
     538:	e5d41000 	ldrb	r1, [r4]
     53c:	e3400002 	movt	r0, #2
     540:	ebffffc3 	bl	454 <print_debug>
	printMMC(Card_Info.rca);
     544:	e3010a24 	movw	r0, #6692	; 0x1a24
     548:	e5941004 	ldr	r1, [r4, #4]
     54c:	e3400002 	movt	r0, #2
     550:	ebffffbf 	bl	454 <print_debug>
	printMMC(Card_Info.xfer_speed);
     554:	e3010a38 	movw	r0, #6712	; 0x1a38
     558:	e5941008 	ldr	r1, [r4, #8]
     55c:	e3400002 	movt	r0, #2
     560:	ebffffbb 	bl	454 <print_debug>
	printMMC(Card_Info.max_r_blkln);
     564:	e3010a54 	movw	r0, #6740	; 0x1a54
     568:	e594100c 	ldr	r1, [r4, #12]
     56c:	e3400002 	movt	r0, #2
     570:	ebffffb7 	bl	454 <print_debug>
	printMMC(Card_Info.max_w_blkln);
     574:	e3010a70 	movw	r0, #6768	; 0x1a70
     578:	e5941010 	ldr	r1, [r4, #16]
     57c:	e3400002 	movt	r0, #2
     580:	ebffffb3 	bl	454 <print_debug>
	printMMC(Card_Info.partial_r_allowed);
     584:	e3010a8c 	movw	r0, #6796	; 0x1a8c
     588:	e5d41014 	ldrb	r1, [r4, #20]
     58c:	e3400002 	movt	r0, #2
     590:	ebffffaf 	bl	454 <print_debug>
	printMMC(Card_Info.partial_w_allowed);
     594:	e3010ab0 	movw	r0, #6832	; 0x1ab0
     598:	e5d41015 	ldrb	r1, [r4, #21]
     59c:	e3400002 	movt	r0, #2
     5a0:	ebffffab 	bl	454 <print_debug>
	printMMC(Card_Info.high_speed);
     5a4:	e3010ad4 	movw	r0, #6868	; 0x1ad4
     5a8:	e5d41016 	ldrb	r1, [r4, #22]
     5ac:	e3400002 	movt	r0, #2
     5b0:	ebffffa7 	bl	454 <print_debug>
	printMMC(Card_Info.scr_sd_spec);
     5b4:	e3010af0 	movw	r0, #6896	; 0x1af0
     5b8:	e5941018 	ldr	r1, [r4, #24]
     5bc:	e3400002 	movt	r0, #2
     5c0:	ebffffa3 	bl	454 <print_debug>
	printMMC(Card_Info.csd_ccc);
     5c4:	e3010b0c 	movw	r0, #6924	; 0x1b0c
     5c8:	e594101c 	ldr	r1, [r4, #28]
     5cc:	e3400002 	movt	r0, #2
     5d0:	ebffff9f 	bl	454 <print_debug>
	printMMC(Card_Info.blk_number_high);
     5d4:	e3010b24 	movw	r0, #6948	; 0x1b24
     5d8:	e5941020 	ldr	r1, [r4, #32]
     5dc:	e3400002 	movt	r0, #2
     5e0:	ebffff9b 	bl	454 <print_debug>
	printMMC(Card_Info.blk_number_low);
     5e4:	e3010b44 	movw	r0, #6980	; 0x1b44
     5e8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
     5ec:	e3400002 	movt	r0, #2
     5f0:	ebffff97 	bl	454 <print_debug>
}
     5f4:	e28dd018 	add	sp, sp, #24
     5f8:	e8bd8010 	pop	{r4, pc}

000005fc <media_init>:


int media_init()
{
     5fc:	e92d4008 	push	{r3, lr}
	init_mmc();
     600:	ebffffad 	bl	4bc <init_mmc>
	return 1;
}
     604:	e3a00001 	mov	r0, #1
     608:	e8bd8008 	pop	{r3, pc}

0000060c <usleep>:

	return 1;
}

void usleep(uint64_t usecs_p)
{
     60c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     610:	e24dd008 	sub	sp, sp, #8
     614:	e1a07000 	mov	r7, r0
     618:	e1a06001 	mov	r6, r1
	uint64_t	startTime = alt_globaltmr_get64();
     61c:	eb001c28 	bl	76c4 <alt_globaltmr_get64>
     620:	e1a05001 	mov	r5, r1
     624:	e1a04000 	mov	r4, r0
	uint32_t	timerPrescaler = alt_globaltmr_prescaler_get() + 1;
     628:	eb001ca3 	bl	78bc <alt_globaltmr_prescaler_get>
	uint64_t	endTime;
	alt_freq_t	timerClkSrc;

	alt_clk_freq_get(ALT_CLK_MPU_PERIPH, &timerClkSrc);
     62c:	e28d1004 	add	r1, sp, #4
}

void usleep(uint64_t usecs_p)
{
	uint64_t	startTime = alt_globaltmr_get64();
	uint32_t	timerPrescaler = alt_globaltmr_prescaler_get() + 1;
     630:	e1a08000 	mov	r8, r0
	uint64_t	endTime;
	alt_freq_t	timerClkSrc;

	alt_clk_freq_get(ALT_CLK_MPU_PERIPH, &timerClkSrc);
     634:	e3a00015 	mov	r0, #21
     638:	eb00303b 	bl	c72c <alt_clk_freq_get>
	endTime = startTime + usecs_p * ((timerClkSrc / timerPrescaler) / 1000000);
     63c:	e2881001 	add	r1, r8, #1
     640:	e59d0004 	ldr	r0, [sp, #4]
     644:	eb0060bc 	bl	1893c <__aeabi_uidiv>
     648:	e30d3e83 	movw	r3, #56963	; 0xde83
     64c:	e344331b 	movt	r3, #17179	; 0x431b
     650:	e0832093 	umull	r2, r3, r3, r0
     654:	e1a03923 	lsr	r3, r3, #18
     658:	e0810793 	umull	r0, r1, r3, r7
     65c:	e0211693 	mla	r1, r3, r6, r1
     660:	e0944000 	adds	r4, r4, r0
     664:	e0a55001 	adc	r5, r5, r1

	while (alt_globaltmr_get64() < endTime);
     668:	eb001c15 	bl	76c4 <alt_globaltmr_get64>
     66c:	e1510005 	cmp	r1, r5
     670:	01500004 	cmpeq	r0, r4
     674:	3afffffb 	bcc	668 <usleep+0x5c>
}
     678:	e28dd008 	add	sp, sp, #8
     67c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000680 <TestClocks>:


void TestClocks(void)
{
     680:	e92d4010 	push	{r4, lr}
     684:	e24dd008 	sub	sp, sp, #8
	#define printCLK(x)	alt_clk_freq_get(x, &freq); print_debug(#x " = %d\n", freq);

	alt_freq_t freq = 0;
     688:	e28d4008 	add	r4, sp, #8
     68c:	e3a00000 	mov	r0, #0
     690:	e5240004 	str	r0, [r4, #-4]!

	printCLK(ALT_CLK_IN_PIN_OSC1);
     694:	e1a01004 	mov	r1, r4
     698:	eb003023 	bl	c72c <alt_clk_freq_get>
     69c:	e3010b64 	movw	r0, #7012	; 0x1b64
     6a0:	e59d1004 	ldr	r1, [sp, #4]
     6a4:	e3400002 	movt	r0, #2
     6a8:	ebffff69 	bl	454 <print_debug>
	printCLK(ALT_CLK_IN_PIN_OSC2);
     6ac:	e1a01004 	mov	r1, r4
     6b0:	e3a00001 	mov	r0, #1
     6b4:	eb00301c 	bl	c72c <alt_clk_freq_get>
     6b8:	e3010b80 	movw	r0, #7040	; 0x1b80
     6bc:	e59d1004 	ldr	r1, [sp, #4]
     6c0:	e3400002 	movt	r0, #2
     6c4:	ebffff62 	bl	454 <print_debug>
	printCLK(ALT_CLK_F2H_PERIPH_REF);
     6c8:	e1a01004 	mov	r1, r4
     6cc:	e3a00002 	mov	r0, #2
     6d0:	eb003015 	bl	c72c <alt_clk_freq_get>
     6d4:	e3010b9c 	movw	r0, #7068	; 0x1b9c
     6d8:	e59d1004 	ldr	r1, [sp, #4]
     6dc:	e3400002 	movt	r0, #2
     6e0:	ebffff5b 	bl	454 <print_debug>
	printCLK(ALT_CLK_F2H_SDRAM_REF);
     6e4:	e1a01004 	mov	r1, r4
     6e8:	e3a00003 	mov	r0, #3
     6ec:	eb00300e 	bl	c72c <alt_clk_freq_get>
     6f0:	e3010bbc 	movw	r0, #7100	; 0x1bbc
     6f4:	e59d1004 	ldr	r1, [sp, #4]
     6f8:	e3400002 	movt	r0, #2
     6fc:	ebffff54 	bl	454 <print_debug>
	printCLK(ALT_CLK_IN_PIN_JTAG);
     700:	e1a01004 	mov	r1, r4
     704:	e3a00004 	mov	r0, #4
     708:	eb003007 	bl	c72c <alt_clk_freq_get>
     70c:	e3010bd8 	movw	r0, #7128	; 0x1bd8
     710:	e59d1004 	ldr	r1, [sp, #4]
     714:	e3400002 	movt	r0, #2
     718:	ebffff4d 	bl	454 <print_debug>
	printCLK(ALT_CLK_IN_PIN_ULPI0);
     71c:	e1a01004 	mov	r1, r4
     720:	e3a00005 	mov	r0, #5
     724:	eb003000 	bl	c72c <alt_clk_freq_get>
     728:	e3010bf4 	movw	r0, #7156	; 0x1bf4
     72c:	e59d1004 	ldr	r1, [sp, #4]
     730:	e3400002 	movt	r0, #2
     734:	ebffff46 	bl	454 <print_debug>
	printCLK(ALT_CLK_IN_PIN_ULPI1);
     738:	e1a01004 	mov	r1, r4
     73c:	e3a00006 	mov	r0, #6
     740:	eb002ff9 	bl	c72c <alt_clk_freq_get>
     744:	e3010c10 	movw	r0, #7184	; 0x1c10
     748:	e59d1004 	ldr	r1, [sp, #4]
     74c:	e3400002 	movt	r0, #2
     750:	ebffff3f 	bl	454 <print_debug>
	printCLK(ALT_CLK_IN_PIN_EMAC0_RX);
     754:	e1a01004 	mov	r1, r4
     758:	e3a00007 	mov	r0, #7
     75c:	eb002ff2 	bl	c72c <alt_clk_freq_get>
     760:	e3010c2c 	movw	r0, #7212	; 0x1c2c
     764:	e59d1004 	ldr	r1, [sp, #4]
     768:	e3400002 	movt	r0, #2
     76c:	ebffff38 	bl	454 <print_debug>
	printCLK(ALT_CLK_IN_PIN_EMAC1_RX);
     770:	e1a01004 	mov	r1, r4
     774:	e3a00008 	mov	r0, #8
     778:	eb002feb 	bl	c72c <alt_clk_freq_get>
     77c:	e3010c4c 	movw	r0, #7244	; 0x1c4c
     780:	e59d1004 	ldr	r1, [sp, #4]
     784:	e3400002 	movt	r0, #2
     788:	ebffff31 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_PLL);
     78c:	e1a01004 	mov	r1, r4
     790:	e3a00009 	mov	r0, #9
     794:	eb002fe4 	bl	c72c <alt_clk_freq_get>
     798:	e3010c6c 	movw	r0, #7276	; 0x1c6c
     79c:	e59d1004 	ldr	r1, [sp, #4]
     7a0:	e3400002 	movt	r0, #2
     7a4:	ebffff2a 	bl	454 <print_debug>
	printCLK(ALT_CLK_PERIPHERAL_PLL);
     7a8:	e1a01004 	mov	r1, r4
     7ac:	e3a0000a 	mov	r0, #10
     7b0:	eb002fdd 	bl	c72c <alt_clk_freq_get>
     7b4:	e3010c84 	movw	r0, #7300	; 0x1c84
     7b8:	e59d1004 	ldr	r1, [sp, #4]
     7bc:	e3400002 	movt	r0, #2
     7c0:	ebffff23 	bl	454 <print_debug>
	printCLK(ALT_CLK_SDRAM_PLL);
     7c4:	e1a01004 	mov	r1, r4
     7c8:	e3a0000b 	mov	r0, #11
     7cc:	eb002fd6 	bl	c72c <alt_clk_freq_get>
     7d0:	e3010ca4 	movw	r0, #7332	; 0x1ca4
     7d4:	e59d1004 	ldr	r1, [sp, #4]
     7d8:	e3400002 	movt	r0, #2
     7dc:	ebffff1c 	bl	454 <print_debug>
	printCLK(ALT_CLK_OSC1);
     7e0:	e1a01004 	mov	r1, r4
     7e4:	e3a0000c 	mov	r0, #12
     7e8:	eb002fcf 	bl	c72c <alt_clk_freq_get>
     7ec:	e3010cbc 	movw	r0, #7356	; 0x1cbc
     7f0:	e59d1004 	ldr	r1, [sp, #4]
     7f4:	e3400002 	movt	r0, #2
     7f8:	ebffff15 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_PLL_C0);
     7fc:	e1a01004 	mov	r1, r4
     800:	e3a0000d 	mov	r0, #13
     804:	eb002fc8 	bl	c72c <alt_clk_freq_get>
     808:	e3010cd0 	movw	r0, #7376	; 0x1cd0
     80c:	e59d1004 	ldr	r1, [sp, #4]
     810:	e3400002 	movt	r0, #2
     814:	ebffff0e 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_PLL_C1);
     818:	e1a01004 	mov	r1, r4
     81c:	e3a0000e 	mov	r0, #14
     820:	eb002fc1 	bl	c72c <alt_clk_freq_get>
     824:	e3010cec 	movw	r0, #7404	; 0x1cec
     828:	e59d1004 	ldr	r1, [sp, #4]
     82c:	e3400002 	movt	r0, #2
     830:	ebffff07 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_PLL_C2);
     834:	e1a01004 	mov	r1, r4
     838:	e3a0000f 	mov	r0, #15
     83c:	eb002fba 	bl	c72c <alt_clk_freq_get>
     840:	e3010d08 	movw	r0, #7432	; 0x1d08
     844:	e59d1004 	ldr	r1, [sp, #4]
     848:	e3400002 	movt	r0, #2
     84c:	ebffff00 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_PLL_C3);
     850:	e1a01004 	mov	r1, r4
     854:	e3a00010 	mov	r0, #16
     858:	eb002fb3 	bl	c72c <alt_clk_freq_get>
     85c:	e3010d24 	movw	r0, #7460	; 0x1d24
     860:	e59d1004 	ldr	r1, [sp, #4]
     864:	e3400002 	movt	r0, #2
     868:	ebfffef9 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_PLL_C4);
     86c:	e1a01004 	mov	r1, r4
     870:	e3a00011 	mov	r0, #17
     874:	eb002fac 	bl	c72c <alt_clk_freq_get>
     878:	e3010d40 	movw	r0, #7488	; 0x1d40
     87c:	e59d1004 	ldr	r1, [sp, #4]
     880:	e3400002 	movt	r0, #2
     884:	ebfffef2 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_PLL_C5);
     888:	e1a01004 	mov	r1, r4
     88c:	e3a00012 	mov	r0, #18
     890:	eb002fa5 	bl	c72c <alt_clk_freq_get>
     894:	e3010d5c 	movw	r0, #7516	; 0x1d5c
     898:	e59d1004 	ldr	r1, [sp, #4]
     89c:	e3400002 	movt	r0, #2
     8a0:	ebfffeeb 	bl	454 <print_debug>
	printCLK(ALT_CLK_MPU);
     8a4:	e1a01004 	mov	r1, r4
     8a8:	e3a00013 	mov	r0, #19
     8ac:	eb002f9e 	bl	c72c <alt_clk_freq_get>
     8b0:	e3010d78 	movw	r0, #7544	; 0x1d78
     8b4:	e59d1004 	ldr	r1, [sp, #4]
     8b8:	e3400002 	movt	r0, #2
     8bc:	ebfffee4 	bl	454 <print_debug>
	printCLK(ALT_CLK_MPU_L2_RAM);
     8c0:	e1a01004 	mov	r1, r4
     8c4:	e3a00014 	mov	r0, #20
     8c8:	eb002f97 	bl	c72c <alt_clk_freq_get>
     8cc:	e3010d8c 	movw	r0, #7564	; 0x1d8c
     8d0:	e59d1004 	ldr	r1, [sp, #4]
     8d4:	e3400002 	movt	r0, #2
     8d8:	ebfffedd 	bl	454 <print_debug>
	printCLK(ALT_CLK_MPU_PERIPH);
     8dc:	e1a01004 	mov	r1, r4
     8e0:	e3a00015 	mov	r0, #21
     8e4:	eb002f90 	bl	c72c <alt_clk_freq_get>
     8e8:	e3010da8 	movw	r0, #7592	; 0x1da8
     8ec:	e59d1004 	ldr	r1, [sp, #4]
     8f0:	e3400002 	movt	r0, #2
     8f4:	ebfffed6 	bl	454 <print_debug>
	printCLK(ALT_CLK_L3_MAIN);
     8f8:	e1a01004 	mov	r1, r4
     8fc:	e3a00016 	mov	r0, #22
     900:	eb002f89 	bl	c72c <alt_clk_freq_get>
     904:	e3010dc4 	movw	r0, #7620	; 0x1dc4
     908:	e59d1004 	ldr	r1, [sp, #4]
     90c:	e3400002 	movt	r0, #2
     910:	ebfffecf 	bl	454 <print_debug>
	printCLK(ALT_CLK_L3_MP);
     914:	e1a01004 	mov	r1, r4
     918:	e3a00017 	mov	r0, #23
     91c:	eb002f82 	bl	c72c <alt_clk_freq_get>
     920:	e3010ddc 	movw	r0, #7644	; 0x1ddc
     924:	e59d1004 	ldr	r1, [sp, #4]
     928:	e3400002 	movt	r0, #2
     92c:	ebfffec8 	bl	454 <print_debug>
	printCLK(ALT_CLK_L3_SP);
     930:	e1a01004 	mov	r1, r4
     934:	e3a00018 	mov	r0, #24
     938:	eb002f7b 	bl	c72c <alt_clk_freq_get>
     93c:	e3010df0 	movw	r0, #7664	; 0x1df0
     940:	e59d1004 	ldr	r1, [sp, #4]
     944:	e3400002 	movt	r0, #2
     948:	ebfffec1 	bl	454 <print_debug>
	printCLK(ALT_CLK_L4_MAIN);
     94c:	e1a01004 	mov	r1, r4
     950:	e3a00019 	mov	r0, #25
     954:	eb002f74 	bl	c72c <alt_clk_freq_get>
     958:	e3010e04 	movw	r0, #7684	; 0x1e04
     95c:	e59d1004 	ldr	r1, [sp, #4]
     960:	e3400002 	movt	r0, #2
     964:	ebfffeba 	bl	454 <print_debug>
	printCLK(ALT_CLK_L4_MP);
     968:	e1a01004 	mov	r1, r4
     96c:	e3a0001a 	mov	r0, #26
     970:	eb002f6d 	bl	c72c <alt_clk_freq_get>
     974:	e3010e1c 	movw	r0, #7708	; 0x1e1c
     978:	e59d1004 	ldr	r1, [sp, #4]
     97c:	e3400002 	movt	r0, #2
     980:	ebfffeb3 	bl	454 <print_debug>
	printCLK(ALT_CLK_L4_SP);
     984:	e1a01004 	mov	r1, r4
     988:	e3a0001b 	mov	r0, #27
     98c:	eb002f66 	bl	c72c <alt_clk_freq_get>
     990:	e3010e30 	movw	r0, #7728	; 0x1e30
     994:	e59d1004 	ldr	r1, [sp, #4]
     998:	e3400002 	movt	r0, #2
     99c:	ebfffeac 	bl	454 <print_debug>
	printCLK(ALT_CLK_DBG_BASE);
     9a0:	e1a01004 	mov	r1, r4
     9a4:	e3a0001c 	mov	r0, #28
     9a8:	eb002f5f 	bl	c72c <alt_clk_freq_get>
     9ac:	e3010e44 	movw	r0, #7748	; 0x1e44
     9b0:	e59d1004 	ldr	r1, [sp, #4]
     9b4:	e3400002 	movt	r0, #2
     9b8:	ebfffea5 	bl	454 <print_debug>
	printCLK(ALT_CLK_DBG_AT);
     9bc:	e1a01004 	mov	r1, r4
     9c0:	e3a0001d 	mov	r0, #29
     9c4:	eb002f58 	bl	c72c <alt_clk_freq_get>
     9c8:	e3010e5c 	movw	r0, #7772	; 0x1e5c
     9cc:	e59d1004 	ldr	r1, [sp, #4]
     9d0:	e3400002 	movt	r0, #2
     9d4:	ebfffe9e 	bl	454 <print_debug>
	printCLK(ALT_CLK_DBG_TRACE);
     9d8:	e1a01004 	mov	r1, r4
     9dc:	e3a0001e 	mov	r0, #30
     9e0:	eb002f51 	bl	c72c <alt_clk_freq_get>
     9e4:	e3010e74 	movw	r0, #7796	; 0x1e74
     9e8:	e59d1004 	ldr	r1, [sp, #4]
     9ec:	e3400002 	movt	r0, #2
     9f0:	ebfffe97 	bl	454 <print_debug>
	printCLK(ALT_CLK_DBG_TIMER);
     9f4:	e1a01004 	mov	r1, r4
     9f8:	e3a0001f 	mov	r0, #31
     9fc:	eb002f4a 	bl	c72c <alt_clk_freq_get>
     a00:	e3010e8c 	movw	r0, #7820	; 0x1e8c
     a04:	e59d1004 	ldr	r1, [sp, #4]
     a08:	e3400002 	movt	r0, #2
     a0c:	ebfffe90 	bl	454 <print_debug>
	printCLK(ALT_CLK_DBG);
     a10:	e1a01004 	mov	r1, r4
     a14:	e3a00020 	mov	r0, #32
     a18:	eb002f43 	bl	c72c <alt_clk_freq_get>
     a1c:	e3010ea4 	movw	r0, #7844	; 0x1ea4
     a20:	e59d1004 	ldr	r1, [sp, #4]
     a24:	e3400002 	movt	r0, #2
     a28:	ebfffe89 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_QSPI);
     a2c:	e1a01004 	mov	r1, r4
     a30:	e3a00021 	mov	r0, #33	; 0x21
     a34:	eb002f3c 	bl	c72c <alt_clk_freq_get>
     a38:	e3010eb8 	movw	r0, #7864	; 0x1eb8
     a3c:	e59d1004 	ldr	r1, [sp, #4]
     a40:	e3400002 	movt	r0, #2
     a44:	ebfffe82 	bl	454 <print_debug>
	printCLK(ALT_CLK_MAIN_NAND_SDMMC);
     a48:	e1a01004 	mov	r1, r4
     a4c:	e3a00022 	mov	r0, #34	; 0x22
     a50:	eb002f35 	bl	c72c <alt_clk_freq_get>
     a54:	e3010ed0 	movw	r0, #7888	; 0x1ed0
     a58:	e59d1004 	ldr	r1, [sp, #4]
     a5c:	e3400002 	movt	r0, #2
     a60:	ebfffe7b 	bl	454 <print_debug>
	printCLK(ALT_CLK_CFG);
     a64:	e1a01004 	mov	r1, r4
     a68:	e3a00023 	mov	r0, #35	; 0x23
     a6c:	eb002f2e 	bl	c72c <alt_clk_freq_get>
     a70:	e3010ef0 	movw	r0, #7920	; 0x1ef0
     a74:	e59d1004 	ldr	r1, [sp, #4]
     a78:	e3400002 	movt	r0, #2
     a7c:	ebfffe74 	bl	454 <print_debug>
	printCLK(ALT_CLK_H2F_USER0);
     a80:	e1a01004 	mov	r1, r4
     a84:	e3a00024 	mov	r0, #36	; 0x24
     a88:	eb002f27 	bl	c72c <alt_clk_freq_get>
     a8c:	e3010f04 	movw	r0, #7940	; 0x1f04
     a90:	e59d1004 	ldr	r1, [sp, #4]
     a94:	e3400002 	movt	r0, #2
     a98:	ebfffe6d 	bl	454 <print_debug>
	printCLK(ALT_CLK_PERIPHERAL_PLL_C0);
     a9c:	e1a01004 	mov	r1, r4
     aa0:	e3a00025 	mov	r0, #37	; 0x25
     aa4:	eb002f20 	bl	c72c <alt_clk_freq_get>
     aa8:	e3010f1c 	movw	r0, #7964	; 0x1f1c
     aac:	e59d1004 	ldr	r1, [sp, #4]
     ab0:	e3400002 	movt	r0, #2
     ab4:	ebfffe66 	bl	454 <print_debug>
	printCLK(ALT_CLK_PERIPHERAL_PLL_C1);
     ab8:	e1a01004 	mov	r1, r4
     abc:	e3a00026 	mov	r0, #38	; 0x26
     ac0:	eb002f19 	bl	c72c <alt_clk_freq_get>
     ac4:	e3010f3c 	movw	r0, #7996	; 0x1f3c
     ac8:	e59d1004 	ldr	r1, [sp, #4]
     acc:	e3400002 	movt	r0, #2
     ad0:	ebfffe5f 	bl	454 <print_debug>
	printCLK(ALT_CLK_PERIPHERAL_PLL_C2);
     ad4:	e1a01004 	mov	r1, r4
     ad8:	e3a00027 	mov	r0, #39	; 0x27
     adc:	eb002f12 	bl	c72c <alt_clk_freq_get>
     ae0:	e3010f5c 	movw	r0, #8028	; 0x1f5c
     ae4:	e59d1004 	ldr	r1, [sp, #4]
     ae8:	e3400002 	movt	r0, #2
     aec:	ebfffe58 	bl	454 <print_debug>
	printCLK(ALT_CLK_PERIPHERAL_PLL_C3);
     af0:	e1a01004 	mov	r1, r4
     af4:	e3a00028 	mov	r0, #40	; 0x28
     af8:	eb002f0b 	bl	c72c <alt_clk_freq_get>
     afc:	e3010f7c 	movw	r0, #8060	; 0x1f7c
     b00:	e59d1004 	ldr	r1, [sp, #4]
     b04:	e3400002 	movt	r0, #2
     b08:	ebfffe51 	bl	454 <print_debug>
	printCLK(ALT_CLK_PERIPHERAL_PLL_C4);
     b0c:	e1a01004 	mov	r1, r4
     b10:	e3a00029 	mov	r0, #41	; 0x29
     b14:	eb002f04 	bl	c72c <alt_clk_freq_get>
     b18:	e3010f9c 	movw	r0, #8092	; 0x1f9c
     b1c:	e59d1004 	ldr	r1, [sp, #4]
     b20:	e3400002 	movt	r0, #2
     b24:	ebfffe4a 	bl	454 <print_debug>
	printCLK(ALT_CLK_PERIPHERAL_PLL_C5);
     b28:	e1a01004 	mov	r1, r4
     b2c:	e3a0002a 	mov	r0, #42	; 0x2a
     b30:	eb002efd 	bl	c72c <alt_clk_freq_get>
     b34:	e3010fbc 	movw	r0, #8124	; 0x1fbc
     b38:	e59d1004 	ldr	r1, [sp, #4]
     b3c:	e3400002 	movt	r0, #2
     b40:	ebfffe43 	bl	454 <print_debug>
	printCLK(ALT_CLK_USB_MP);
     b44:	e1a01004 	mov	r1, r4
     b48:	e3a0002b 	mov	r0, #43	; 0x2b
     b4c:	eb002ef6 	bl	c72c <alt_clk_freq_get>
     b50:	e3010fdc 	movw	r0, #8156	; 0x1fdc
     b54:	e59d1004 	ldr	r1, [sp, #4]
     b58:	e3400002 	movt	r0, #2
     b5c:	ebfffe3c 	bl	454 <print_debug>
	printCLK(ALT_CLK_SPI_M);
     b60:	e1a01004 	mov	r1, r4
     b64:	e3a0002c 	mov	r0, #44	; 0x2c
     b68:	eb002eef 	bl	c72c <alt_clk_freq_get>
     b6c:	e3010ff4 	movw	r0, #8180	; 0x1ff4
     b70:	e59d1004 	ldr	r1, [sp, #4]
     b74:	e3400002 	movt	r0, #2
     b78:	ebfffe35 	bl	454 <print_debug>
	printCLK(ALT_CLK_QSPI);
     b7c:	e1a01004 	mov	r1, r4
     b80:	e3a0002d 	mov	r0, #45	; 0x2d
     b84:	eb002ee8 	bl	c72c <alt_clk_freq_get>
     b88:	e3020008 	movw	r0, #8200	; 0x2008
     b8c:	e59d1004 	ldr	r1, [sp, #4]
     b90:	e3400002 	movt	r0, #2
     b94:	ebfffe2e 	bl	454 <print_debug>
	printCLK(ALT_CLK_NAND_X);
     b98:	e1a01004 	mov	r1, r4
     b9c:	e3a0002e 	mov	r0, #46	; 0x2e
     ba0:	eb002ee1 	bl	c72c <alt_clk_freq_get>
     ba4:	e302001c 	movw	r0, #8220	; 0x201c
     ba8:	e59d1004 	ldr	r1, [sp, #4]
     bac:	e3400002 	movt	r0, #2
     bb0:	ebfffe27 	bl	454 <print_debug>
	printCLK(ALT_CLK_NAND);
     bb4:	e1a01004 	mov	r1, r4
     bb8:	e3a0002f 	mov	r0, #47	; 0x2f
     bbc:	eb002eda 	bl	c72c <alt_clk_freq_get>
     bc0:	e3020034 	movw	r0, #8244	; 0x2034
     bc4:	e59d1004 	ldr	r1, [sp, #4]
     bc8:	e3400002 	movt	r0, #2
     bcc:	ebfffe20 	bl	454 <print_debug>
	printCLK(ALT_CLK_SDMMC);
     bd0:	e1a01004 	mov	r1, r4
     bd4:	e3a00030 	mov	r0, #48	; 0x30
     bd8:	eb002ed3 	bl	c72c <alt_clk_freq_get>
     bdc:	e3020048 	movw	r0, #8264	; 0x2048
     be0:	e59d1004 	ldr	r1, [sp, #4]
     be4:	e3400002 	movt	r0, #2
     be8:	ebfffe19 	bl	454 <print_debug>
	printCLK(ALT_CLK_EMAC0);
     bec:	e1a01004 	mov	r1, r4
     bf0:	e3a00031 	mov	r0, #49	; 0x31
     bf4:	eb002ecc 	bl	c72c <alt_clk_freq_get>
     bf8:	e302005c 	movw	r0, #8284	; 0x205c
     bfc:	e59d1004 	ldr	r1, [sp, #4]
     c00:	e3400002 	movt	r0, #2
     c04:	ebfffe12 	bl	454 <print_debug>
	printCLK(ALT_CLK_EMAC1);
     c08:	e1a01004 	mov	r1, r4
     c0c:	e3a00032 	mov	r0, #50	; 0x32
     c10:	eb002ec5 	bl	c72c <alt_clk_freq_get>
     c14:	e3020070 	movw	r0, #8304	; 0x2070
     c18:	e59d1004 	ldr	r1, [sp, #4]
     c1c:	e3400002 	movt	r0, #2
     c20:	ebfffe0b 	bl	454 <print_debug>
	printCLK(ALT_CLK_CAN0);
     c24:	e1a01004 	mov	r1, r4
     c28:	e3a00033 	mov	r0, #51	; 0x33
     c2c:	eb002ebe 	bl	c72c <alt_clk_freq_get>
     c30:	e3020084 	movw	r0, #8324	; 0x2084
     c34:	e59d1004 	ldr	r1, [sp, #4]
     c38:	e3400002 	movt	r0, #2
     c3c:	ebfffe04 	bl	454 <print_debug>
	printCLK(ALT_CLK_CAN1);
     c40:	e1a01004 	mov	r1, r4
     c44:	e3a00034 	mov	r0, #52	; 0x34
     c48:	eb002eb7 	bl	c72c <alt_clk_freq_get>
     c4c:	e3020098 	movw	r0, #8344	; 0x2098
     c50:	e59d1004 	ldr	r1, [sp, #4]
     c54:	e3400002 	movt	r0, #2
     c58:	ebfffdfd 	bl	454 <print_debug>
	printCLK(ALT_CLK_GPIO_DB);
     c5c:	e1a01004 	mov	r1, r4
     c60:	e3a00035 	mov	r0, #53	; 0x35
     c64:	eb002eb0 	bl	c72c <alt_clk_freq_get>
     c68:	e30200ac 	movw	r0, #8364	; 0x20ac
     c6c:	e59d1004 	ldr	r1, [sp, #4]
     c70:	e3400002 	movt	r0, #2
     c74:	ebfffdf6 	bl	454 <print_debug>
	printCLK(ALT_CLK_H2F_USER1);
     c78:	e1a01004 	mov	r1, r4
     c7c:	e3a00036 	mov	r0, #54	; 0x36
     c80:	eb002ea9 	bl	c72c <alt_clk_freq_get>
     c84:	e30200c4 	movw	r0, #8388	; 0x20c4
     c88:	e59d1004 	ldr	r1, [sp, #4]
     c8c:	e3400002 	movt	r0, #2
     c90:	ebfffdef 	bl	454 <print_debug>
	printCLK(ALT_CLK_SDRAM_PLL_C0);
     c94:	e1a01004 	mov	r1, r4
     c98:	e3a00037 	mov	r0, #55	; 0x37
     c9c:	eb002ea2 	bl	c72c <alt_clk_freq_get>
     ca0:	e30200dc 	movw	r0, #8412	; 0x20dc
     ca4:	e59d1004 	ldr	r1, [sp, #4]
     ca8:	e3400002 	movt	r0, #2
     cac:	ebfffde8 	bl	454 <print_debug>
	printCLK(ALT_CLK_SDRAM_PLL_C1);
     cb0:	e1a01004 	mov	r1, r4
     cb4:	e3a00038 	mov	r0, #56	; 0x38
     cb8:	eb002e9b 	bl	c72c <alt_clk_freq_get>
     cbc:	e30200f8 	movw	r0, #8440	; 0x20f8
     cc0:	e59d1004 	ldr	r1, [sp, #4]
     cc4:	e3400002 	movt	r0, #2
     cc8:	ebfffde1 	bl	454 <print_debug>
	printCLK(ALT_CLK_SDRAM_PLL_C2);
     ccc:	e1a01004 	mov	r1, r4
     cd0:	e3a00039 	mov	r0, #57	; 0x39
     cd4:	eb002e94 	bl	c72c <alt_clk_freq_get>
     cd8:	e3020114 	movw	r0, #8468	; 0x2114
     cdc:	e59d1004 	ldr	r1, [sp, #4]
     ce0:	e3400002 	movt	r0, #2
     ce4:	ebfffdda 	bl	454 <print_debug>
	printCLK(ALT_CLK_SDRAM_PLL_C3);
     ce8:	e1a01004 	mov	r1, r4
     cec:	e3a0003a 	mov	r0, #58	; 0x3a
     cf0:	eb002e8d 	bl	c72c <alt_clk_freq_get>
     cf4:	e3020130 	movw	r0, #8496	; 0x2130
     cf8:	e59d1004 	ldr	r1, [sp, #4]
     cfc:	e3400002 	movt	r0, #2
     d00:	ebfffdd3 	bl	454 <print_debug>
	printCLK(ALT_CLK_SDRAM_PLL_C4);
     d04:	e1a01004 	mov	r1, r4
     d08:	e3a0003b 	mov	r0, #59	; 0x3b
     d0c:	eb002e86 	bl	c72c <alt_clk_freq_get>
     d10:	e302014c 	movw	r0, #8524	; 0x214c
     d14:	e59d1004 	ldr	r1, [sp, #4]
     d18:	e3400002 	movt	r0, #2
     d1c:	ebfffdcc 	bl	454 <print_debug>
	printCLK(ALT_CLK_SDRAM_PLL_C5);
     d20:	e1a01004 	mov	r1, r4
     d24:	e3a0003c 	mov	r0, #60	; 0x3c
     d28:	eb002e7f 	bl	c72c <alt_clk_freq_get>
     d2c:	e3020168 	movw	r0, #8552	; 0x2168
     d30:	e59d1004 	ldr	r1, [sp, #4]
     d34:	e3400002 	movt	r0, #2
     d38:	ebfffdc5 	bl	454 <print_debug>
	printCLK(ALT_CLK_DDR_DQS);
     d3c:	e1a01004 	mov	r1, r4
     d40:	e3a0003d 	mov	r0, #61	; 0x3d
     d44:	eb002e78 	bl	c72c <alt_clk_freq_get>
     d48:	e3020184 	movw	r0, #8580	; 0x2184
     d4c:	e59d1004 	ldr	r1, [sp, #4]
     d50:	e3400002 	movt	r0, #2
     d54:	ebfffdbe 	bl	454 <print_debug>
	printCLK(ALT_CLK_DDR_2X_DQS);
     d58:	e1a01004 	mov	r1, r4
     d5c:	e3a0003e 	mov	r0, #62	; 0x3e
     d60:	eb002e71 	bl	c72c <alt_clk_freq_get>
     d64:	e302019c 	movw	r0, #8604	; 0x219c
     d68:	e59d1004 	ldr	r1, [sp, #4]
     d6c:	e3400002 	movt	r0, #2
     d70:	ebfffdb7 	bl	454 <print_debug>
	printCLK(ALT_CLK_DDR_DQ);
     d74:	e1a01004 	mov	r1, r4
     d78:	e3a0003f 	mov	r0, #63	; 0x3f
     d7c:	eb002e6a 	bl	c72c <alt_clk_freq_get>
     d80:	e30201b8 	movw	r0, #8632	; 0x21b8
     d84:	e59d1004 	ldr	r1, [sp, #4]
     d88:	e3400002 	movt	r0, #2
     d8c:	ebfffdb0 	bl	454 <print_debug>
	printCLK(ALT_CLK_H2F_USER2);
     d90:	e1a01004 	mov	r1, r4
     d94:	e3a00040 	mov	r0, #64	; 0x40
     d98:	eb002e63 	bl	c72c <alt_clk_freq_get>
     d9c:	e30201d0 	movw	r0, #8656	; 0x21d0
     da0:	e59d1004 	ldr	r1, [sp, #4]
     da4:	e3400002 	movt	r0, #2
     da8:	ebfffda9 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_EMAC0_TX);
     dac:	e1a01004 	mov	r1, r4
     db0:	e3a00041 	mov	r0, #65	; 0x41
     db4:	eb002e5c 	bl	c72c <alt_clk_freq_get>
     db8:	e30201e8 	movw	r0, #8680	; 0x21e8
     dbc:	e59d1004 	ldr	r1, [sp, #4]
     dc0:	e3400002 	movt	r0, #2
     dc4:	ebfffda2 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_EMAC1_TX);
     dc8:	e1a01004 	mov	r1, r4
     dcc:	e3a00042 	mov	r0, #66	; 0x42
     dd0:	eb002e55 	bl	c72c <alt_clk_freq_get>
     dd4:	e3020208 	movw	r0, #8712	; 0x2208
     dd8:	e59d1004 	ldr	r1, [sp, #4]
     ddc:	e3400002 	movt	r0, #2
     de0:	ebfffd9b 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_SDMMC);
     de4:	e1a01004 	mov	r1, r4
     de8:	e3a00043 	mov	r0, #67	; 0x43
     dec:	eb002e4e 	bl	c72c <alt_clk_freq_get>
     df0:	e3020228 	movw	r0, #8744	; 0x2228
     df4:	e59d1004 	ldr	r1, [sp, #4]
     df8:	e3400002 	movt	r0, #2
     dfc:	ebfffd94 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_I2C0_SCL);
     e00:	e1a01004 	mov	r1, r4
     e04:	e3a00044 	mov	r0, #68	; 0x44
     e08:	eb002e47 	bl	c72c <alt_clk_freq_get>
     e0c:	e3020244 	movw	r0, #8772	; 0x2244
     e10:	e59d1004 	ldr	r1, [sp, #4]
     e14:	e3400002 	movt	r0, #2
     e18:	ebfffd8d 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_I2C1_SCL);
     e1c:	e1a01004 	mov	r1, r4
     e20:	e3a00045 	mov	r0, #69	; 0x45
     e24:	eb002e40 	bl	c72c <alt_clk_freq_get>
     e28:	e3020264 	movw	r0, #8804	; 0x2264
     e2c:	e59d1004 	ldr	r1, [sp, #4]
     e30:	e3400002 	movt	r0, #2
     e34:	ebfffd86 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_I2C2_SCL);
     e38:	e1a01004 	mov	r1, r4
     e3c:	e3a00046 	mov	r0, #70	; 0x46
     e40:	eb002e39 	bl	c72c <alt_clk_freq_get>
     e44:	e3020284 	movw	r0, #8836	; 0x2284
     e48:	e59d1004 	ldr	r1, [sp, #4]
     e4c:	e3400002 	movt	r0, #2
     e50:	ebfffd7f 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_I2C3_SCL);
     e54:	e1a01004 	mov	r1, r4
     e58:	e3a00047 	mov	r0, #71	; 0x47
     e5c:	eb002e32 	bl	c72c <alt_clk_freq_get>
     e60:	e30202a4 	movw	r0, #8868	; 0x22a4
     e64:	e59d1004 	ldr	r1, [sp, #4]
     e68:	e3400002 	movt	r0, #2
     e6c:	ebfffd78 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_SPIM0);
     e70:	e1a01004 	mov	r1, r4
     e74:	e3a00048 	mov	r0, #72	; 0x48
     e78:	eb002e2b 	bl	c72c <alt_clk_freq_get>
     e7c:	e30202c4 	movw	r0, #8900	; 0x22c4
     e80:	e59d1004 	ldr	r1, [sp, #4]
     e84:	e3400002 	movt	r0, #2
     e88:	ebfffd71 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_SPIM1);
     e8c:	e1a01004 	mov	r1, r4
     e90:	e3a00049 	mov	r0, #73	; 0x49
     e94:	eb002e24 	bl	c72c <alt_clk_freq_get>
     e98:	e30202e0 	movw	r0, #8928	; 0x22e0
     e9c:	e59d1004 	ldr	r1, [sp, #4]
     ea0:	e3400002 	movt	r0, #2
     ea4:	ebfffd6a 	bl	454 <print_debug>
	printCLK(ALT_CLK_OUT_PIN_QSPI);
     ea8:	e1a01004 	mov	r1, r4
     eac:	e3a0004a 	mov	r0, #74	; 0x4a
     eb0:	eb002e1d 	bl	c72c <alt_clk_freq_get>
     eb4:	e30202fc 	movw	r0, #8956	; 0x22fc
     eb8:	e59d1004 	ldr	r1, [sp, #4]
     ebc:	e3400002 	movt	r0, #2
     ec0:	ebfffd63 	bl	454 <print_debug>
}
     ec4:	e28dd008 	add	sp, sp, #8
     ec8:	e8bd8010 	pop	{r4, pc}

00000ecc <mmu_init>:
void mmu_init(void)
{
	uint32_t *ttb1 = NULL;

	/* Populate the page table with sections (1 MiB regions). */
	ALT_MMU_MEM_REGION_t regions[] = 
     ecc:	e301c9a0 	movw	r12, #6560	; 0x19a0
{
	return context;
}

void mmu_init(void)
{
     ed0:	e92d4010 	push	{r4, lr}
	uint32_t *ttb1 = NULL;

	/* Populate the page table with sections (1 MiB regions). */
	ALT_MMU_MEM_REGION_t regions[] = 
     ed4:	e340c002 	movt	r12, #2
{
	return context;
}

void mmu_init(void)
{
     ed8:	e24dd038 	sub	sp, sp, #56	; 0x38
	uint32_t *ttb1 = NULL;

	/* Populate the page table with sections (1 MiB regions). */
	ALT_MMU_MEM_REGION_t regions[] = 
     edc:	e28de010 	add	lr, sp, #16
	return context;
}

void mmu_init(void)
{
	uint32_t *ttb1 = NULL;
     ee0:	e3a04000 	mov	r4, #0

	/* Populate the page table with sections (1 MiB regions). */
	ALT_MMU_MEM_REGION_t regions[] = 
     ee4:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
	return context;
}

void mmu_init(void)
{
	uint32_t *ttb1 = NULL;
     ee8:	e58d400c 	str	r4, [sp, #12]

	/* Populate the page table with sections (1 MiB regions). */
	ALT_MMU_MEM_REGION_t regions[] = 
     eec:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     ef0:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
     ef4:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     ef8:	e89c0003 	ldm	r12, {r0, r1}
     efc:	e88e0003 	stm	lr, {r0, r1}
			.execute = ALT_MMU_TTB_XN_ENABLE,
			.security = ALT_MMU_TTB_NS_SECURE
		}
	};

	alt_mmu_init();
     f00:	eb000753 	bl	2c54 <alt_mmu_init>
	alt_mmu_va_space_storage_required(regions, sizeof(regions)/sizeof(regions[0]));
     f04:	e3a01002 	mov	r1, #2
     f08:	e28d0010 	add	r0, sp, #16
     f0c:	eb000869 	bl	30b8 <alt_mmu_va_space_storage_required>
	alt_mmu_va_space_create(&ttb1, regions, sizeof(regions)/sizeof(regions[0]), alt_pt_alloc, alt_pt_storage);
     f10:	e59fc028 	ldr	r12, [pc, #40]	; f40 <mmu_init+0x74>
     f14:	e300325c 	movw	r3, #604	; 0x25c
     f18:	e28d000c 	add	r0, sp, #12
     f1c:	e28d1010 	add	r1, sp, #16
     f20:	e3a02002 	mov	r2, #2
     f24:	e3403000 	movt	r3, #0
     f28:	e58dc000 	str	r12, [sp]
     f2c:	eb000869 	bl	30d8 <alt_mmu_va_space_create>
	alt_mmu_va_space_enable(ttb1);
     f30:	e59d000c 	ldr	r0, [sp, #12]
     f34:	eb000cd2 	bl	4284 <alt_mmu_va_space_enable>
}
     f38:	e28dd038 	add	sp, sp, #56	; 0x38
     f3c:	e8bd8010 	pop	{r4, pc}
     f40:	0002c000 	.word	0x0002c000

00000f44 <timer_init>:
	//
	//
}

void timer_init(void)
{
     f44:	e92d4008 	push	{r3, lr}
	alt_globaltmr_init();
     f48:	eb0019a4 	bl	75e0 <alt_globaltmr_init>
	alt_int_global_init();
     f4c:	eb0037e9 	bl	eef8 <alt_int_global_init>
	alt_int_cpu_init();
     f50:	eb0039b7 	bl	f634 <alt_int_cpu_init>
	alt_int_dist_trigger_set(ALT_INT_INTERRUPT_PPI_TIMER_GLOBAL, ALT_INT_TRIGGER_AUTODETECT);
     f54:	e3a01003 	mov	r1, #3
     f58:	e3a0001b 	mov	r0, #27
     f5c:	eb003959 	bl	f4c8 <alt_int_dist_trigger_set>
	alt_int_dist_enable(ALT_INT_INTERRUPT_PPI_TIMER_GLOBAL);
     f60:	e3a0001b 	mov	r0, #27
     f64:	eb003880 	bl	f16c <alt_int_dist_enable>
	alt_int_cpu_enable();
     f68:	eb0039cd 	bl	f6a4 <alt_int_cpu_enable>
	alt_int_global_enable();
     f6c:	eb003818 	bl	efd4 <alt_int_global_enable>

	alt_globaltmr_start();
     f70:	eb0019af 	bl	7634 <alt_globaltmr_start>
	alt_int_isr_register(ALT_INT_INTERRUPT_PPI_TIMER_GLOBAL, TimerISR, NULL);
     f74:	e3001264 	movw	r1, #612	; 0x264
     f78:	e3a02000 	mov	r2, #0
     f7c:	e3401000 	movt	r1, #0
     f80:	e3a0001b 	mov	r0, #27
     f84:	eb003a41 	bl	f890 <alt_int_isr_register>
	alt_globaltmr_comp_set64(alt_globaltmr_get64() + 230000*4);
     f88:	eb0019cd 	bl	76c4 <alt_globaltmr_get64>
     f8c:	e3a02d27 	mov	r2, #2496	; 0x9c0
     f90:	e3a03000 	mov	r3, #0
     f94:	e340200e 	movt	r2, #14
     f98:	e0900002 	adds	r0, r0, r2
     f9c:	e0a11003 	adc	r1, r1, r3
     fa0:	eb0019f6 	bl	7780 <alt_globaltmr_comp_set64>
	alt_globaltmr_comp_mode_start();

	//alt_globaltmr_int_enable();
	//alt_globaltmr_int_disable();
}
     fa4:	e8bd4008 	pop	{r3, lr}
	alt_int_global_enable();

	alt_globaltmr_start();
	alt_int_isr_register(ALT_INT_INTERRUPT_PPI_TIMER_GLOBAL, TimerISR, NULL);
	alt_globaltmr_comp_set64(alt_globaltmr_get64() + 230000*4);
	alt_globaltmr_comp_mode_start();
     fa8:	ea001a33 	b	787c <alt_globaltmr_comp_mode_start>

00000fac <IsKeyPressed>:

bool IsKeyPressed(void)
{
	bool result = false;

	if(*pBUTTON == 1)
     fac:	e3023a20 	movw	r3, #10784	; 0x2a20
     fb0:	e3403002 	movt	r3, #2
     fb4:	e5933000 	ldr	r3, [r3]
     fb8:	e5930000 	ldr	r0, [r3]
	{
		result = true;
	}

	return(result);
}
     fbc:	e2503001 	subs	r3, r0, #1
     fc0:	e2730000 	rsbs	r0, r3, #0
     fc4:	e0b00003 	adcs	r0, r0, r3
     fc8:	e12fff1e 	bx	lr

00000fcc <TurnOnLed>:

void TurnOnLed(void)
{
	*pLED = 1;
     fcc:	e3023a20 	movw	r3, #10784	; 0x2a20
     fd0:	e3a02001 	mov	r2, #1
     fd4:	e3403002 	movt	r3, #2
     fd8:	e5933004 	ldr	r3, [r3, #4]
     fdc:	e5832000 	str	r2, [r3]
     fe0:	e12fff1e 	bx	lr

00000fe4 <TurnOffLed>:
}

void TurnOffLed(void)
{
	*pLED = 0;
     fe4:	e3023a20 	movw	r3, #10784	; 0x2a20
     fe8:	e3a02000 	mov	r2, #0
     fec:	e3403002 	movt	r3, #2
     ff0:	e5933004 	ldr	r3, [r3, #4]
     ff4:	e5832000 	str	r2, [r3]
     ff8:	e12fff1e 	bx	lr

00000ffc <main>:
}
void main(void)
{
     ffc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1000:	e24dd024 	sub	sp, sp, #36	; 0x24
	FL_FILE* file;

	mmu_init();
    1004:	ebffffb0 	bl	ecc <mmu_init>
	alt_cache_system_enable();
    1008:	eb00038a 	bl	1e38 <alt_cache_system_enable>
	
	timer_init();
    100c:	ebffffcc 	bl	f44 <timer_init>
}


int media_init()
{
	init_mmc();
    1010:	ebfffd29 	bl	4bc <init_mmc>
	alt_cache_system_enable();
	
	timer_init();

	media_init();
	fl_init();
    1014:	eb004778 	bl	12dfc <fl_init>

	// Attach media access functions to library
	if (fl_attach_media(media_read, media_write) != FAT_INIT_OK)
    1018:	e30002d8 	movw	r0, #728	; 0x2d8
    101c:	e300128c 	movw	r1, #652	; 0x28c
    1020:	e3400000 	movt	r0, #0
    1024:	e3401000 	movt	r1, #0
    1028:	eb004795 	bl	12e84 <fl_attach_media>
    102c:	e2508000 	subs	r8, r0, #0
    1030:	0a000004 	beq	1048 <main+0x4c>
	{
		print_debug("ERROR: Media attach failed\n");
    1034:	e3020318 	movw	r0, #8984	; 0x2318
    1038:	e3400002 	movt	r0, #2
	}

	fl_fclose(file);
	
	fl_shutdown();
}
    103c:	e28dd024 	add	sp, sp, #36	; 0x24
    1040:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	fl_init();

	// Attach media access functions to library
	if (fl_attach_media(media_read, media_write) != FAT_INIT_OK)
	{
		print_debug("ERROR: Media attach failed\n");
    1044:	eafffd02 	b	454 <print_debug>
		return; 
	}

	//TestClocks();

	file = fl_fopen("/test_raw.avi", "rb");
    1048:	e3020334 	movw	r0, #9012	; 0x2334
    104c:	e3021344 	movw	r1, #9028	; 0x2344
    1050:	e3401002 	movt	r1, #2
    1054:	e3400002 	movt	r0, #2
    1058:	eb0047e0 	bl	12fe0 <fl_fopen>
    105c:	e59f5498 	ldr	r5, [pc, #1176]	; 14fc <main+0x500>
    1060:	e1a07000 	mov	r7, r0

	fl_fseek(file, 0, SEEK_END); // seek to end of file
    1064:	e1a01008 	mov	r1, r8
    1068:	e3a02002 	mov	r2, #2
    106c:	eb004a44 	bl	13984 <fl_fseek>
	uint32_t size = fl_ftell(file); // get current file pointer
    1070:	e1a00007 	mov	r0, r7
	
	g_State = ST_BEFORE_PLAYING;

	//setting up double buffer vga
	uint8_t inActiveBuffer =1;
	*backBuffer =0xC8040000;
    1074:	e3024a20 	movw	r4, #10784	; 0x2a20
	//TestClocks();

	file = fl_fopen("/test_raw.avi", "rb");

	fl_fseek(file, 0, SEEK_END); // seek to end of file
	uint32_t size = fl_ftell(file); // get current file pointer
    1078:	eb004ab4 	bl	13b50 <fl_ftell>
	fl_fseek(file, 0, SEEK_SET);
    107c:	e1a01008 	mov	r1, r8
	//TestClocks();

	file = fl_fopen("/test_raw.avi", "rb");

	fl_fseek(file, 0, SEEK_END); // seek to end of file
	uint32_t size = fl_ftell(file); // get current file pointer
    1080:	e1a06000 	mov	r6, r0
	fl_fseek(file, 0, SEEK_SET);
    1084:	e1a02008 	mov	r2, r8
    1088:	e1a00007 	mov	r0, r7
    108c:	eb004a3c 	bl	13984 <fl_fseek>

	fl_fread(&g_Frame[0], 1, size, file);
    1090:	e1a02006 	mov	r2, r6
    1094:	e1a03007 	mov	r3, r7
    1098:	e3a01001 	mov	r1, #1
    109c:	e1a00005 	mov	r0, r5
    10a0:	eb00495d 	bl	1361c <fl_fread>

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    10a4:	e3a0cc67 	mov	r12, #26368	; 0x6700
	
	g_State = ST_BEFORE_PLAYING;

	//setting up double buffer vga
	uint8_t inActiveBuffer =1;
	*backBuffer =0xC8040000;
    10a8:	e3404002 	movt	r4, #2

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    10ac:	e340c002 	movt	r12, #2
	uint32_t size = fl_ftell(file); // get current file pointer
	fl_fseek(file, 0, SEEK_SET);

	fl_fread(&g_Frame[0], 1, size, file);
	
	g_State = ST_BEFORE_PLAYING;
    10b0:	e3a01001 	mov	r1, #1

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    10b4:	e58dc008 	str	r12, [sp, #8]
    10b8:	e3a0cdce 	mov	r12, #13184	; 0x3380
    10bc:	e340c001 	movt	r12, #1
	
	g_State = ST_BEFORE_PLAYING;

	//setting up double buffer vga
	uint8_t inActiveBuffer =1;
	*backBuffer =0xC8040000;
    10c0:	e5940008 	ldr	r0, [r4, #8]
	uint32_t size = fl_ftell(file); // get current file pointer
	fl_fseek(file, 0, SEEK_SET);

	fl_fread(&g_Frame[0], 1, size, file);
	
	g_State = ST_BEFORE_PLAYING;
    10c4:	e3006178 	movw	r6, #376	; 0x178

	//setting up double buffer vga
	uint8_t inActiveBuffer =1;
	*backBuffer =0xC8040000;
    10c8:	e3a02000 	mov	r2, #0

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    10cc:	e58dc004 	str	r12, [sp, #4]
	
	g_State = ST_BEFORE_PLAYING;

	//setting up double buffer vga
	uint8_t inActiveBuffer =1;
	*backBuffer =0xC8040000;
    10d0:	e1a03001 	mov	r3, r1
							}
						}
					}
				}

				if((g_FRAME_INDEX == 3290) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) >= 0x00800000)
    10d4:	e30fcfff 	movw	r12, #65535	; 0xffff
	fl_fread(&g_Frame[0], 1, size, file);
	
	g_State = ST_BEFORE_PLAYING;

	//setting up double buffer vga
	uint8_t inActiveBuffer =1;
    10d8:	e1a07001 	mov	r7, r1
	uint32_t size = fl_ftell(file); // get current file pointer
	fl_fseek(file, 0, SEEK_SET);

	fl_fread(&g_Frame[0], 1, size, file);
	
	g_State = ST_BEFORE_PLAYING;
    10dc:	e3426673 	movt	r6, #9843	; 0x2673
							}
						}
					}
				}

				if((g_FRAME_INDEX == 3290) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) >= 0x00800000)
    10e0:	e340c07f 	movt	r12, #127	; 0x7f
	
	g_State = ST_BEFORE_PLAYING;

	//setting up double buffer vga
	uint8_t inActiveBuffer =1;
	*backBuffer =0xC8040000;
    10e4:	e34c2804 	movt	r2, #51204	; 0xc804
	uint32_t size = fl_ftell(file); // get current file pointer
	fl_fseek(file, 0, SEEK_SET);

	fl_fread(&g_Frame[0], 1, size, file);
	
	g_State = ST_BEFORE_PLAYING;
    10e8:	e5461178 	strb	r1, [r6, #-376]	; 0xfffffe88
							}
						}
					}
				}

				if((g_FRAME_INDEX == 3290) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) >= 0x00800000)
    10ec:	e58dc010 	str	r12, [sp, #16]
	
	g_State = ST_BEFORE_PLAYING;

	//setting up double buffer vga
	uint8_t inActiveBuffer =1;
	*backBuffer =0xC8040000;
    10f0:	e5802000 	str	r2, [r0]
	while (true)
	{
		switch(g_State)
    10f4:	e3530003 	cmp	r3, #3
    10f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    10fc:	eafffffc 	b	10f4 <main+0xf8>
    1100:	00001110 	.word	0x00001110
    1104:	0000149c 	.word	0x0000149c
    1108:	00001140 	.word	0x00001140
    110c:	00001128 	.word	0x00001128

bool IsKeyPressed(void)
{
	bool result = false;

	if(*pBUTTON == 1)
    1110:	e5942000 	ldr	r2, [r4]
    1114:	e5922000 	ldr	r2, [r2]
    1118:	e3520001 	cmp	r2, #1
		{
			case ST_STOP:
			{
				if(IsKeyPressed())
				{
					g_State = ST_BEFORE_PLAYING;
    111c:	05462178 	strbeq	r2, [r6, #-376]	; 0xfffffe88
    1120:	01a03002 	moveq	r3, r2
    1124:	eafffff2 	b	10f4 <main+0xf8>
	*pLED = 1;
}

void TurnOffLed(void)
{
	*pLED = 0;
    1128:	e5942004 	ldr	r2, [r4, #4]
			case ST_AFTER_PLAYING:
			{
				TurnOffLed();
				g_State = ST_STOP;

				break;
    112c:	e3a03000 	mov	r3, #0
	*pLED = 1;
}

void TurnOffLed(void)
{
	*pLED = 0;
    1130:	e5823000 	str	r3, [r2]
			}

			case ST_AFTER_PLAYING:
			{
				TurnOffLed();
				g_State = ST_STOP;
    1134:	e3a02000 	mov	r2, #0
    1138:	e5462178 	strb	r2, [r6, #-376]	; 0xfffffe88

				break;
    113c:	eaffffec 	b	10f4 <main+0xf8>
				break;
			}

			case ST_PLAYING:
			{				
				ShowVal(g_FRAME_INDEX);
    1140:	e5160170 	ldr	r0, [r6, #-368]	; 0xfffffe90
    1144:	ebfffc76 	bl	324 <ShowVal>
    1148:	e516a174 	ldr	r10, [r6, #-372]	; 0xfffffe8c
    114c:	e5169170 	ldr	r9, [r6, #-368]	; 0xfffffe90
						}
					
					}
					
					inActiveBuffer= !(inActiveBuffer) & 0x1; //one bit toogle;
					*frontBuffer=1;
    1150:	e2840010 	add	r0, r4, #16
    1154:	e8900007 	ldm	r0, {r0, r1, r2}

			case ST_PLAYING:
			{				
				ShowVal(g_FRAME_INDEX);

				while((g_AUDIO_INDEX < 1920) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) > 0x00600000)
    1158:	e594e00c 	ldr	lr, [r4, #12]
    115c:	e58d4014 	str	r4, [sp, #20]
    1160:	e1a04007 	mov	r4, r7
    1164:	e58d001c 	str	r0, [sp, #28]
    1168:	e58d1018 	str	r1, [sp, #24]
						}
					
					}
					
					inActiveBuffer= !(inActiveBuffer) & 0x1; //one bit toogle;
					*frontBuffer=1;
    116c:	e58d200c 	str	r2, [sp, #12]

			case ST_PLAYING:
			{				
				ShowVal(g_FRAME_INDEX);

				while((g_AUDIO_INDEX < 1920) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) > 0x00600000)
    1170:	e300077f 	movw	r0, #1919	; 0x77f
    1174:	e15a0000 	cmp	r10, r0
    1178:	8a000075 	bhi	1354 <main+0x358>
    117c:	e59e3004 	ldr	r3, [lr, #4]
    1180:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
    1184:	e3530606 	cmp	r3, #6291456	; 0x600000
    1188:	9a000071 	bls	1354 <main+0x358>
				{
					if(g_AUDIO_INDEX == 0)
    118c:	e35a0000 	cmp	r10, #0
    1190:	1a00004c 	bne	12c8 <main+0x2cc>

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    1194:	e59d3008 	ldr	r3, [sp, #8]
				while((g_AUDIO_INDEX < 1920) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) > 0x00600000)
				{
					if(g_AUDIO_INDEX == 0)
					{
					
					if(inActiveBuffer==0){
    1198:	e3540000 	cmp	r4, #0

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    119c:	e0205993 	mla	r0, r3, r9, r5
				while((g_AUDIO_INDEX < 1920) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) > 0x00600000)
				{
					if(g_AUDIO_INDEX == 0)
					{
					
					if(inActiveBuffer==0){
    11a0:	0a000072 	beq	1370 <main+0x374>

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    11a4:	e59d2004 	ldr	r2, [sp, #4]
    11a8:	e2800e26 	add	r0, r0, #608	; 0x260
    11ac:	e59dc01c 	ldr	r12, [sp, #28]
    11b0:	e0090992 	mul	r9, r2, r9
    11b4:	e28c1e26 	add	r1, r12, #608	; 0x260
    11b8:	e089200a 	add	r2, r9, r10
    11bc:	e2822d1e 	add	r2, r2, #1920	; 0x780
    11c0:	e2413e26 	sub	r3, r1, #608	; 0x260
    11c4:	e0852082 	add	r2, r5, r2, lsl #1
    11c8:	e3a07000 	mov	r7, #0
					}else{
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGABACK[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    11cc:	e1d280b0 	ldrh	r8, [r2]
    11d0:	f5d3f028 	pld	[r3, #40]	; 0x28
    11d4:	e2822020 	add	r2, r2, #32
    11d8:	e2833020 	add	r3, r3, #32

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    11dc:	e08ab007 	add	r11, r10, r7
    11e0:	e267ce13 	rsb	r12, r7, #304	; 0x130
					}else{
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGABACK[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    11e4:	e14382b0 	strh	r8, [r3, #-32]	; 0xffffffe0

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    11e8:	e089b00b 	add	r11, r9, r11
					}else{
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGABACK[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    11ec:	e15281be 	ldrh	r8, [r2, #-30]	; 0xffffffe2
							}
						}
					}else{
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
    11f0:	e2877010 	add	r7, r7, #16

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    11f4:	e085b08b 	add	r11, r5, r11, lsl #1
    11f8:	e3570e13 	cmp	r7, #304	; 0x130
					}else{
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGABACK[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    11fc:	e14381be 	strh	r8, [r3, #-30]	; 0xffffffe2
    1200:	f5dbff28 	pld	[r11, #3880]	; 0xf28
    1204:	e15281bc 	ldrh	r8, [r2, #-28]	; 0xffffffe4
    1208:	e14381bc 	strh	r8, [r3, #-28]	; 0xffffffe4
    120c:	e15281ba 	ldrh	r8, [r2, #-26]	; 0xffffffe6
    1210:	e14381ba 	strh	r8, [r3, #-26]	; 0xffffffe6
    1214:	e15281b8 	ldrh	r8, [r2, #-24]	; 0xffffffe8
    1218:	e14381b8 	strh	r8, [r3, #-24]	; 0xffffffe8
    121c:	e15281b6 	ldrh	r8, [r2, #-22]	; 0xffffffea
    1220:	e14381b6 	strh	r8, [r3, #-22]	; 0xffffffea
    1224:	e15281b4 	ldrh	r8, [r2, #-20]	; 0xffffffec
    1228:	e14381b4 	strh	r8, [r3, #-20]	; 0xffffffec
    122c:	e15281b2 	ldrh	r8, [r2, #-18]	; 0xffffffee
    1230:	e14381b2 	strh	r8, [r3, #-18]	; 0xffffffee
    1234:	e15281b0 	ldrh	r8, [r2, #-16]
    1238:	e14381b0 	strh	r8, [r3, #-16]
    123c:	e15280be 	ldrh	r8, [r2, #-14]
    1240:	e14380be 	strh	r8, [r3, #-14]
    1244:	e15280bc 	ldrh	r8, [r2, #-12]
    1248:	e14380bc 	strh	r8, [r3, #-12]
    124c:	e15280ba 	ldrh	r8, [r2, #-10]
    1250:	e14380ba 	strh	r8, [r3, #-10]
    1254:	e15280b8 	ldrh	r8, [r2, #-8]
    1258:	e14380b8 	strh	r8, [r3, #-8]
    125c:	e15280b6 	ldrh	r8, [r2, #-6]
    1260:	e14380b6 	strh	r8, [r3, #-6]
    1264:	e15280b4 	ldrh	r8, [r2, #-4]
    1268:	e14380b4 	strh	r8, [r3, #-4]
    126c:	e15280b2 	ldrh	r8, [r2, #-2]
    1270:	e14380b2 	strh	r8, [r3, #-2]
    1274:	1affffd4 	bne	11cc <main+0x1d0>

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    1278:	e1a0c08c 	lsl	r12, r12, #1
    127c:	e3a03000 	mov	r3, #0
    1280:	e0802003 	add	r2, r0, r3
    1284:	e2822c0f 	add	r2, r2, #3840	; 0xf00
					}else{
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGABACK[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    1288:	e1d220b0 	ldrh	r2, [r2]
    128c:	e18120b3 	strh	r2, [r1, r3]
    1290:	e2833002 	add	r3, r3, #2
							}
						}
					}else{
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
    1294:	e153000c 	cmp	r3, r12
    1298:	1afffff8 	bne	1280 <main+0x284>
    129c:	e28aad05 	add	r10, r10, #320	; 0x140
    12a0:	e2811b01 	add	r1, r1, #1024	; 0x400
							{
								pVGA[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
							}
						}
					}else{
						for (uint32 y = 0; y < 240; y++)			
    12a4:	e35a0b4b 	cmp	r10, #76800	; 0x12c00
    12a8:	e2800d0a 	add	r0, r0, #640	; 0x280
    12ac:	1affffc1 	bne	11b8 <main+0x1bc>
						}
					
					}
					
					inActiveBuffer= !(inActiveBuffer) & 0x1; //one bit toogle;
					*frontBuffer=1;
    12b0:	e59d300c 	ldr	r3, [sp, #12]
    12b4:	e3a0c001 	mov	r12, #1
    12b8:	e024400c 	eor	r4, r4, r12
    12bc:	e583c000 	str	r12, [r3]
    12c0:	e516a174 	ldr	r10, [r6, #-372]	; 0xfffffe8c
    12c4:	e5169170 	ldr	r9, [r6, #-368]	; 0xfffffe90
						}
						
						*/
					}

					pAUDIO[AUDIO_LDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;
    12c8:	e59d1004 	ldr	r1, [sp, #4]
    12cc:	e30fcfe0 	movw	r12, #65504	; 0xffe0
    12d0:	e340c002 	movt	r12, #2
					pAUDIO[AUDIO_RDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;

					if(++g_AUDIO_INDEX >= 1920)
    12d4:	e300277f 	movw	r2, #1919	; 0x77f
						}
						
						*/
					}

					pAUDIO[AUDIO_LDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;
    12d8:	e023a991 	mla	r3, r1, r9, r10
					pAUDIO[AUDIO_RDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;

					if(++g_AUDIO_INDEX >= 1920)
    12dc:	e28aa001 	add	r10, r10, #1
    12e0:	e15a0002 	cmp	r10, r2
    12e4:	e506a174 	str	r10, [r6, #-372]	; 0xfffffe8c
						}
						
						*/
					}

					pAUDIO[AUDIO_LDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;
    12e8:	e08c3083 	add	r3, r12, r3, lsl #1
    12ec:	e1d332f0 	ldrsh	r3, [r3, #32]
    12f0:	e1a03403 	lsl	r3, r3, #8
    12f4:	e58e3008 	str	r3, [lr, #8]
					pAUDIO[AUDIO_RDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;
    12f8:	e58e300c 	str	r3, [lr, #12]

					if(++g_AUDIO_INDEX >= 1920)
    12fc:	9affff9b 	bls	1170 <main+0x174>
					{
						g_AUDIO_INDEX = 0;

						if(++g_FRAME_INDEX >= 3290)
    1300:	e2899001 	add	r9, r9, #1
    1304:	e3002cd9 	movw	r2, #3289	; 0xcd9
					pAUDIO[AUDIO_LDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;
					pAUDIO[AUDIO_RDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;

					if(++g_AUDIO_INDEX >= 1920)
					{
						g_AUDIO_INDEX = 0;
    1308:	e3000178 	movw	r0, #376	; 0x178

						if(++g_FRAME_INDEX >= 3290)
    130c:	e1590002 	cmp	r9, r2
					pAUDIO[AUDIO_LDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;
					pAUDIO[AUDIO_RDATA] = (int32_t)g_Frame[g_FRAME_INDEX].Audio[g_AUDIO_INDEX]*256;

					if(++g_AUDIO_INDEX >= 1920)
					{
						g_AUDIO_INDEX = 0;
    1310:	e3420673 	movt	r0, #9843	; 0x2673
    1314:	e3a01000 	mov	r1, #0
    1318:	e5001174 	str	r1, [r0, #-372]	; 0xfffffe8c

						if(++g_FRAME_INDEX >= 3290)
    131c:	e5009170 	str	r9, [r0, #-368]	; 0xfffffe90
    1320:	9a00005b 	bls	1494 <main+0x498>
						{
							g_FRAME_INDEX = 0;
							if(inActiveBuffer==0)    //setting double buffer to initial condition in which the buffer controller points pVGA address
    1324:	e1540001 	cmp	r4, r1
					{
						g_AUDIO_INDEX = 0;

						if(++g_FRAME_INDEX >= 3290)
						{
							g_FRAME_INDEX = 0;
    1328:	e5001170 	str	r1, [r0, #-368]	; 0xfffffe90
							if(inActiveBuffer==0)    //setting double buffer to initial condition in which the buffer controller points pVGA address
    132c:	1a000054 	bne	1484 <main+0x488>
							{
							*frontBuffer=1;
    1330:	e59d300c 	ldr	r3, [sp, #12]
    1334:	e3a0c001 	mov	r12, #1
							inActiveBuffer=1;
    1338:	e1a0400c 	mov	r4, r12
						if(++g_FRAME_INDEX >= 3290)
						{
							g_FRAME_INDEX = 0;
							if(inActiveBuffer==0)    //setting double buffer to initial condition in which the buffer controller points pVGA address
							{
							*frontBuffer=1;
    133c:	e583c000 	str	r12, [r3]
    1340:	e510a174 	ldr	r10, [r0, #-372]	; 0xfffffe8c
    1344:	e5109170 	ldr	r9, [r0, #-368]	; 0xfffffe90

			case ST_PLAYING:
			{				
				ShowVal(g_FRAME_INDEX);

				while((g_AUDIO_INDEX < 1920) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) > 0x00600000)
    1348:	e300077f 	movw	r0, #1919	; 0x77f
    134c:	e15a0000 	cmp	r10, r0
    1350:	9affff89 	bls	117c <main+0x180>
							}
						}
					}
				}

				if((g_FRAME_INDEX == 3290) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) >= 0x00800000)
    1354:	e3003cda 	movw	r3, #3290	; 0xcda
    1358:	e1a07004 	mov	r7, r4
    135c:	e1590003 	cmp	r9, r3
    1360:	e59d4014 	ldr	r4, [sp, #20]
    1364:	0a00005b 	beq	14d8 <main+0x4dc>
    1368:	e5563178 	ldrb	r3, [r6, #-376]	; 0xfffffe88
    136c:	eaffff60 	b	10f4 <main+0xf8>

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    1370:	e59d2004 	ldr	r2, [sp, #4]
    1374:	e1a0a004 	mov	r10, r4
    1378:	e59dc018 	ldr	r12, [sp, #24]
    137c:	e2800e26 	add	r0, r0, #608	; 0x260
    1380:	e0090992 	mul	r9, r2, r9
    1384:	e28c1e26 	add	r1, r12, #608	; 0x260
    1388:	e089200a 	add	r2, r9, r10
    138c:	e2822d1e 	add	r2, r2, #1920	; 0x780
    1390:	e2413e26 	sub	r3, r1, #608	; 0x260
    1394:	e0852082 	add	r2, r5, r2, lsl #1
    1398:	e3a07000 	mov	r7, #0
					if(inActiveBuffer==0){
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGA[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    139c:	e1d280b0 	ldrh	r8, [r2]
    13a0:	f5d3f028 	pld	[r3, #40]	; 0x28
    13a4:	e2822020 	add	r2, r2, #32
    13a8:	e2833020 	add	r3, r3, #32

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    13ac:	e08ab007 	add	r11, r10, r7
    13b0:	e267ce13 	rsb	r12, r7, #304	; 0x130
					if(inActiveBuffer==0){
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGA[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    13b4:	e14382b0 	strh	r8, [r3, #-32]	; 0xffffffe0

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    13b8:	e089b00b 	add	r11, r9, r11
					if(inActiveBuffer==0){
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGA[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    13bc:	e15281be 	ldrh	r8, [r2, #-30]	; 0xffffffe2
					{
					
					if(inActiveBuffer==0){
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
    13c0:	e2877010 	add	r7, r7, #16

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    13c4:	e085b08b 	add	r11, r5, r11, lsl #1
    13c8:	e3570e13 	cmp	r7, #304	; 0x130
					if(inActiveBuffer==0){
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGA[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    13cc:	e14381be 	strh	r8, [r3, #-30]	; 0xffffffe2
    13d0:	f5dbff28 	pld	[r11, #3880]	; 0xf28
    13d4:	e15281bc 	ldrh	r8, [r2, #-28]	; 0xffffffe4
    13d8:	e14381bc 	strh	r8, [r3, #-28]	; 0xffffffe4
    13dc:	e15281ba 	ldrh	r8, [r2, #-26]	; 0xffffffe6
    13e0:	e14381ba 	strh	r8, [r3, #-26]	; 0xffffffe6
    13e4:	e15281b8 	ldrh	r8, [r2, #-24]	; 0xffffffe8
    13e8:	e14381b8 	strh	r8, [r3, #-24]	; 0xffffffe8
    13ec:	e15281b6 	ldrh	r8, [r2, #-22]	; 0xffffffea
    13f0:	e14381b6 	strh	r8, [r3, #-22]	; 0xffffffea
    13f4:	e15281b4 	ldrh	r8, [r2, #-20]	; 0xffffffec
    13f8:	e14381b4 	strh	r8, [r3, #-20]	; 0xffffffec
    13fc:	e15281b2 	ldrh	r8, [r2, #-18]	; 0xffffffee
    1400:	e14381b2 	strh	r8, [r3, #-18]	; 0xffffffee
    1404:	e15281b0 	ldrh	r8, [r2, #-16]
    1408:	e14381b0 	strh	r8, [r3, #-16]
    140c:	e15280be 	ldrh	r8, [r2, #-14]
    1410:	e14380be 	strh	r8, [r3, #-14]
    1414:	e15280bc 	ldrh	r8, [r2, #-12]
    1418:	e14380bc 	strh	r8, [r3, #-12]
    141c:	e15280ba 	ldrh	r8, [r2, #-10]
    1420:	e14380ba 	strh	r8, [r3, #-10]
    1424:	e15280b8 	ldrh	r8, [r2, #-8]
    1428:	e14380b8 	strh	r8, [r3, #-8]
    142c:	e15280b6 	ldrh	r8, [r2, #-6]
    1430:	e14380b6 	strh	r8, [r3, #-6]
    1434:	e15280b4 	ldrh	r8, [r2, #-4]
    1438:	e14380b4 	strh	r8, [r3, #-4]
    143c:	e15280b2 	ldrh	r8, [r2, #-2]
    1440:	e14380b2 	strh	r8, [r3, #-2]
    1444:	1affffd4 	bne	139c <main+0x3a0>

void TurnOffLed(void)
{
	*pLED = 0;
}
void main(void)
    1448:	e1a0c08c 	lsl	r12, r12, #1
    144c:	e3a03000 	mov	r3, #0
    1450:	e0802003 	add	r2, r0, r3
    1454:	e2822c0f 	add	r2, r2, #3840	; 0xf00
					if(inActiveBuffer==0){
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
							{
								pVGA[y*512 + x] = g_Frame[g_FRAME_INDEX].Video[y*320 + x];
    1458:	e1d220b0 	ldrh	r2, [r2]
    145c:	e18120b3 	strh	r2, [r1, r3]
    1460:	e2833002 	add	r3, r3, #2
					{
					
					if(inActiveBuffer==0){
						for (uint32 y = 0; y < 240; y++)			
						{	
							for (uint32 x = 0; x < 320; x++)
    1464:	e153000c 	cmp	r3, r12
    1468:	1afffff8 	bne	1450 <main+0x454>
    146c:	e28aad05 	add	r10, r10, #320	; 0x140
    1470:	e2811b01 	add	r1, r1, #1024	; 0x400
				{
					if(g_AUDIO_INDEX == 0)
					{
					
					if(inActiveBuffer==0){
						for (uint32 y = 0; y < 240; y++)			
    1474:	e35a0b4b 	cmp	r10, #76800	; 0x12c00
    1478:	e2800d0a 	add	r0, r0, #640	; 0x280
    147c:	1affffc1 	bne	1388 <main+0x38c>
    1480:	eaffff8a 	b	12b0 <main+0x2b4>
						g_AUDIO_INDEX = 0;

						if(++g_FRAME_INDEX >= 3290)
						{
							g_FRAME_INDEX = 0;
							if(inActiveBuffer==0)    //setting double buffer to initial condition in which the buffer controller points pVGA address
    1484:	e3a09000 	mov	r9, #0
    1488:	e3a04001 	mov	r4, #1
    148c:	e1a0a009 	mov	r10, r9
    1490:	eaffff39 	b	117c <main+0x180>

					if(++g_AUDIO_INDEX >= 1920)
					{
						g_AUDIO_INDEX = 0;

						if(++g_FRAME_INDEX >= 3290)
    1494:	e3a0a000 	mov	r10, #0
    1498:	eaffff37 	b	117c <main+0x180>
	return(result);
}

void TurnOnLed(void)
{
	*pLED = 1;
    149c:	e5940004 	ldr	r0, [r4, #4]
    14a0:	e3a0c001 	mov	r12, #1

				g_AUDIO_INDEX = 0;
				g_FRAME_INDEX = 0;

				// flush FIFO content, just to be sure
				pAUDIO[AUDIO_CONTROL] = 0x0C;
    14a4:	e594100c 	ldr	r1, [r4, #12]
				pAUDIO[AUDIO_CONTROL] = 0x00;

				g_State = ST_PLAYING;
    14a8:	e3a02002 	mov	r2, #2

				break;
    14ac:	e1a03002 	mov	r3, r2
	return(result);
}

void TurnOnLed(void)
{
	*pLED = 1;
    14b0:	e580c000 	str	r12, [r0]

			case ST_BEFORE_PLAYING:
			{
				TurnOnLed();

				g_AUDIO_INDEX = 0;
    14b4:	e3a00000 	mov	r0, #0
    14b8:	e5060174 	str	r0, [r6, #-372]	; 0xfffffe8c
				g_FRAME_INDEX = 0;

				// flush FIFO content, just to be sure
				pAUDIO[AUDIO_CONTROL] = 0x0C;
				pAUDIO[AUDIO_CONTROL] = 0x00;
    14bc:	e3a0c000 	mov	r12, #0
			case ST_BEFORE_PLAYING:
			{
				TurnOnLed();

				g_AUDIO_INDEX = 0;
				g_FRAME_INDEX = 0;
    14c0:	e5060170 	str	r0, [r6, #-368]	; 0xfffffe90

				// flush FIFO content, just to be sure
				pAUDIO[AUDIO_CONTROL] = 0x0C;
    14c4:	e3a0000c 	mov	r0, #12
    14c8:	e5810000 	str	r0, [r1]
				pAUDIO[AUDIO_CONTROL] = 0x00;
    14cc:	e581c000 	str	r12, [r1]

				g_State = ST_PLAYING;
    14d0:	e5462178 	strb	r2, [r6, #-376]	; 0xfffffe88

				break;
    14d4:	eaffff06 	b	10f4 <main+0xf8>
							}
						}
					}
				}

				if((g_FRAME_INDEX == 3290) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) >= 0x00800000)
    14d8:	e594300c 	ldr	r3, [r4, #12]
    14dc:	e59d1010 	ldr	r1, [sp, #16]
    14e0:	e5933004 	ldr	r3, [r3, #4]
    14e4:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
    14e8:	e1530001 	cmp	r3, r1
				{
					g_State = ST_AFTER_PLAYING;
    14ec:	83a03003 	movhi	r3, #3
    14f0:	85463178 	strbhi	r3, [r6, #-376]	; 0xfffffe88
							}
						}
					}
				}

				if((g_FRAME_INDEX == 3290) && (pAUDIO[AUDIO_FIFO_STATUS] & 0x00FF0000) >= 0x00800000)
    14f4:	8afffefe 	bhi	10f4 <main+0xf8>
    14f8:	eaffff9a 	b	1368 <main+0x36c>
    14fc:	00030000 	.word	0x00030000

00001500 <alt_cache_system_invalidate>:
    char * va = vaddress;
#endif

    /* Verify preconditions:
     /  - address and length are on the cache boundaries */
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    1500:	e310001f 	tst	r0, #31
static ALT_STATUS_CODE alt_cache_l2_invalidate_helper(uintptr_t paddress, size_t length);
static ALT_STATUS_CODE alt_cache_l2_clean_helper(uintptr_t paddress, size_t length);
static ALT_STATUS_CODE alt_cache_l2_purge_helper(uintptr_t paddress, size_t length);

ALT_STATUS_CODE alt_cache_system_invalidate(void * vaddress, size_t length)
{
    1504:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    char * va = vaddress;
#endif

    /* Verify preconditions:
     /  - address and length are on the cache boundaries */
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    1508:	e1a02000 	mov	r2, r0
    150c:	1a00002f 	bne	15d0 <alt_cache_system_invalidate+0xd0>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    1510:	e311001f 	tst	r1, #31
    1514:	1a00002d 	bne	15d0 <alt_cache_system_invalidate+0xd0>

        va     += seg_size;
        length -= seg_size;
    }
#else
    if (length)
    1518:	e3510000 	cmp	r1, #0
        alt_cache_l1_data_invalidate_helper(vaddress, length);
        /* __asm("dsb") handled by l1_data_invalidate(). */
    }
#endif

    return ALT_E_SUCCESS;
    151c:	01a00001 	moveq	r0, r1

        va     += seg_size;
        length -= seg_size;
    }
#else
    if (length)
    1520:	0a000028 	beq	15c8 <alt_cache_system_invalidate+0xc8>
    uintptr_t pa;

    /* For each stride: Issue invalidate line by PA command, then wait for it
     / to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    1524:	e0801001 	add	r1, r0, r1
    1528:	e1500001 	cmp	r0, r1
    152c:	31a03000 	movcc	r3, r0
    {
        alt_write_word(ALT_MPUL2_INV_PA_ADDR, pa);
    1530:	33e0c801 	mvncc	r12, #65536	; 0x10000
    uintptr_t pa;

    /* For each stride: Issue invalidate line by PA command, then wait for it
     / to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    1534:	2a000003 	bcs	1548 <alt_cache_system_invalidate+0x48>
    {
        alt_write_word(ALT_MPUL2_INV_PA_ADDR, pa);
    1538:	e50c388f 	str	r3, [r12, #-2191]	; 0xfffff771
    uintptr_t pa;

    /* For each stride: Issue invalidate line by PA command, then wait for it
     / to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    153c:	e2833020 	add	r3, r3, #32
    1540:	e1530001 	cmp	r3, r1
    1544:	3afffffb 	bcc	1538 <alt_cache_system_invalidate+0x38>
        alt_write_word(ALT_MPUL2_INV_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_INV_PA_ADDR))
    1548:	e3e04801 	mvn	r4, #65536	; 0x10000
    154c:	e514388f 	ldr	r3, [r4, #-2191]	; 0xfffff771
    1550:	e3530000 	cmp	r3, #0
    1554:	13a03080 	movne	r3, #128	; 0x80
    1558:	1a000002 	bne	1568 <alt_cache_system_invalidate+0x68>
    155c:	ea000004 	b	1574 <alt_cache_system_invalidate+0x74>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ADDR_TIMEOUT)
    1560:	e2533001 	subs	r3, r3, #1
    1564:	0a000002 	beq	1574 <alt_cache_system_invalidate+0x74>
        alt_write_word(ALT_MPUL2_INV_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_INV_PA_ADDR))
    1568:	e514c88f 	ldr	r12, [r4, #-2191]	; 0xfffff771
    156c:	e35c0000 	cmp	r12, #0
    1570:	1afffffa 	bne	1560 <alt_cache_system_invalidate+0x60>
    int i = 0;

    /* Issue cache sync command, then wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CACHE_SYNC_ADDR, 0);
    1574:	e3e04801 	mvn	r4, #65536	; 0x10000
    1578:	e3a03000 	mov	r3, #0
    157c:	e50438cf 	str	r3, [r4, #-2255]	; 0xfffff731

    while (alt_read_word(ALT_MPUL2_CACHE_SYNC_ADDR))
    1580:	e51438cf 	ldr	r3, [r4, #-2255]	; 0xfffff731
    1584:	e3530000 	cmp	r3, #0
    1588:	13a03080 	movne	r3, #128	; 0x80
    158c:	1a000002 	bne	159c <alt_cache_system_invalidate+0x9c>
    1590:	ea000004 	b	15a8 <alt_cache_system_invalidate+0xa8>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_SYNC_TIMEOUT)
    1594:	e2533001 	subs	r3, r3, #1
    1598:	0a000002 	beq	15a8 <alt_cache_system_invalidate+0xa8>
    /* Issue cache sync command, then wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CACHE_SYNC_ADDR, 0);

    while (alt_read_word(ALT_MPUL2_CACHE_SYNC_ADDR))
    159c:	e514c8cf 	ldr	r12, [r4, #-2255]	; 0xfffff731
    15a0:	e35c0000 	cmp	r12, #0
    15a4:	1afffffa 	bne	1594 <alt_cache_system_invalidate+0x94>
     / segment.*/

    /* The DCIMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    15a8:	e1500001 	cmp	r0, r1
    15ac:	2a000003 	bcs	15c0 <alt_cache_system_invalidate+0xc0>
        __asm("MCR p15, 0, %[va], c7, c6, 1" : : [va] "r" (va));
#elif defined(__ARMCC_VERSION)
        __asm("MCR p15, 0, va, c7, c6, 1");
#elif defined(_MSC_VER)
#else
        __asm("MCR p15, 0, %0, c7, c6, 1" : : "r" (va));
    15b0:	ee072f36 	mcr	15, 0, r2, cr7, cr6, {1}
     / segment.*/

    /* The DCIMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    15b4:	e2822020 	add	r2, r2, #32
    15b8:	e1520001 	cmp	r2, r1
    15bc:	3afffffb 	bcc	15b0 <alt_cache_system_invalidate+0xb0>
#endif
    }

#if !defined(_MSC_VER)
    /* Ensure all cache maintenance operations complete before returning. */
    __asm("dsb");
    15c0:	f57ff04f 	dsb	sy
        alt_cache_l1_data_invalidate_helper(vaddress, length);
        /* __asm("dsb") handled by l1_data_invalidate(). */
    }
#endif

    return ALT_E_SUCCESS;
    15c4:	e3a00000 	mov	r0, #0
}
    15c8:	e8bd0010 	ldmfd	sp!, {r4}
    15cc:	e12fff1e 	bx	lr

    /* Verify preconditions:
     /  - address and length are on the cache boundaries */
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    {
        return ALT_E_BAD_ARG;
    15d0:	e3e00008 	mvn	r0, #8
    15d4:	eafffffb 	b	15c8 <alt_cache_system_invalidate+0xc8>

000015d8 <alt_cache_system_clean>:
    char * va = vaddress;
#endif

    /* Verify preconditions:
     /  - address and length are on the cache boundaries */
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    15d8:	e310001f 	tst	r0, #31
    15dc:	e1a03000 	mov	r3, r0
    15e0:	1a00002d 	bne	169c <alt_cache_system_clean+0xc4>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    15e4:	e311001f 	tst	r1, #31
    15e8:	1a00002b 	bne	169c <alt_cache_system_clean+0xc4>

        va     += seg_size;
        length -= seg_size;
    }
#else
    if (length)
    15ec:	e3510000 	cmp	r1, #0
    15f0:	0a000027 	beq	1694 <alt_cache_system_clean+0xbc>
     / point of Coherency) and loop for the length of the segment. */

    /* The DCCMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    15f4:	e0801001 	add	r1, r0, r1
    15f8:	e1500001 	cmp	r0, r1
    15fc:	2a000004 	bcs	1614 <alt_cache_system_clean+0x3c>
    1600:	e1a02000 	mov	r2, r0
        __asm("MCR p15, 0, %[va], c7, c10, 1" : : [va] "r" (va));
#elif defined(__ARMCC_VERSION)
        __asm("MCR p15, 0, va, c7, c10, 1");
#elif defined(_MSC_VER)
#else
        __asm("MCR p15, 0, %0, c7, c10, 1" : : "r" (va));
    1604:	ee072f3a 	mcr	15, 0, r2, cr7, cr10, {1}
     / point of Coherency) and loop for the length of the segment. */

    /* The DCCMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    1608:	e2822020 	add	r2, r2, #32
    160c:	e1520001 	cmp	r2, r1
    1610:	3afffffb 	bcc	1604 <alt_cache_system_clean+0x2c>
#endif
    }

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    1614:	f57ff04f 	dsb	sy
    uintptr_t pa;

    /* For each stride: Issue clean line by PA command, then wait for it to
     / complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    1618:	e1500001 	cmp	r0, r1
    161c:	2a000004 	bcs	1634 <alt_cache_system_clean+0x5c>
    {
        alt_write_word(ALT_MPUL2_CLEAN_PA_ADDR, pa);
    1620:	e3e02801 	mvn	r2, #65536	; 0x10000
    1624:	e502384f 	str	r3, [r2, #-2127]	; 0xfffff7b1
    uintptr_t pa;

    /* For each stride: Issue clean line by PA command, then wait for it to
     / complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    1628:	e2833020 	add	r3, r3, #32
    162c:	e1530001 	cmp	r3, r1
    1630:	3afffffb 	bcc	1624 <alt_cache_system_clean+0x4c>
        alt_write_word(ALT_MPUL2_CLEAN_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_CLEAN_PA_ADDR) & ALT_MPUL2_COMMON_PA_C_SET_MSK)
    1634:	e3e01801 	mvn	r1, #65536	; 0x10000
    1638:	e511384f 	ldr	r3, [r1, #-2127]	; 0xfffff7b1
    163c:	e3130001 	tst	r3, #1
    1640:	13a03080 	movne	r3, #128	; 0x80
    1644:	1a000002 	bne	1654 <alt_cache_system_clean+0x7c>
    1648:	ea000004 	b	1660 <alt_cache_system_clean+0x88>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_CLEAN_ADDR_TIMEOUT)
    164c:	e2533001 	subs	r3, r3, #1
    1650:	0a000002 	beq	1660 <alt_cache_system_clean+0x88>
        alt_write_word(ALT_MPUL2_CLEAN_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_CLEAN_PA_ADDR) & ALT_MPUL2_COMMON_PA_C_SET_MSK)
    1654:	e511284f 	ldr	r2, [r1, #-2127]	; 0xfffff7b1
    1658:	e3120001 	tst	r2, #1
    165c:	1afffffa 	bne	164c <alt_cache_system_clean+0x74>
    int i = 0;

    /* Issue cache sync command, then wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CACHE_SYNC_ADDR, 0);
    1660:	e3e01801 	mvn	r1, #65536	; 0x10000
    1664:	e3a03000 	mov	r3, #0
    1668:	e50138cf 	str	r3, [r1, #-2255]	; 0xfffff731

    while (alt_read_word(ALT_MPUL2_CACHE_SYNC_ADDR))
    166c:	e51138cf 	ldr	r3, [r1, #-2255]	; 0xfffff731
    1670:	e3530000 	cmp	r3, #0
    1674:	13a03080 	movne	r3, #128	; 0x80
    1678:	1a000002 	bne	1688 <alt_cache_system_clean+0xb0>
    167c:	ea000004 	b	1694 <alt_cache_system_clean+0xbc>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_SYNC_TIMEOUT)
    1680:	e2533001 	subs	r3, r3, #1
    1684:	0a000002 	beq	1694 <alt_cache_system_clean+0xbc>
    /* Issue cache sync command, then wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CACHE_SYNC_ADDR, 0);

    while (alt_read_word(ALT_MPUL2_CACHE_SYNC_ADDR))
    1688:	e51128cf 	ldr	r2, [r1, #-2255]	; 0xfffff731
    168c:	e3520000 	cmp	r2, #0
    1690:	1afffffa 	bne	1680 <alt_cache_system_clean+0xa8>
        alt_cache_l2_clean_helper((uintptr_t)vaddress, length);
        alt_cache_l2_sync();
    }
#endif

    return ALT_E_SUCCESS;
    1694:	e3a00000 	mov	r0, #0
    1698:	e12fff1e 	bx	lr

    /* Verify preconditions:
     /  - address and length are on the cache boundaries */
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    {
        return ALT_E_BAD_ARG;
    169c:	e3e00008 	mvn	r0, #8
    16a0:	e12fff1e 	bx	lr

000016a4 <alt_cache_system_purge>:
    char * va = vaddress;
#endif

    /* Verify preconditions: 
     /  - address and length are on the cache boundaries */
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    16a4:	e310001f 	tst	r0, #31

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_system_purge(void * vaddress, size_t length)
{
    16a8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    char * va = vaddress;
#endif

    /* Verify preconditions: 
     /  - address and length are on the cache boundaries */
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    16ac:	e1a02000 	mov	r2, r0
    16b0:	1a000036 	bne	1790 <alt_cache_system_purge+0xec>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    16b4:	e311001f 	tst	r1, #31
    16b8:	1a000034 	bne	1790 <alt_cache_system_purge+0xec>

        va     += seg_size;
        length -= seg_size;
    }
#else
    if (length)
    16bc:	e3510000 	cmp	r1, #0
    16c0:	0a00002f 	beq	1784 <alt_cache_system_purge+0xe0>
     / point of Coherency) and loop for the length of the segment. */

    /* The DCCMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    16c4:	e0801001 	add	r1, r0, r1
    16c8:	e1500001 	cmp	r0, r1
    16cc:	2a000004 	bcs	16e4 <alt_cache_system_purge+0x40>
    16d0:	e1a03000 	mov	r3, r0
        __asm("MCR p15, 0, %[va], c7, c10, 1" : : [va] "r" (va));
#elif defined(__ARMCC_VERSION)
        __asm("MCR p15, 0, va, c7, c10, 1");
#elif defined(_MSC_VER)
#else
        __asm("MCR p15, 0, %0, c7, c10, 1" : : "r" (va));
    16d4:	ee073f3a 	mcr	15, 0, r3, cr7, cr10, {1}
     / point of Coherency) and loop for the length of the segment. */

    /* The DCCMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    16d8:	e2833020 	add	r3, r3, #32
    16dc:	e1530001 	cmp	r3, r1
    16e0:	3afffffb 	bcc	16d4 <alt_cache_system_purge+0x30>
#endif
    }

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    16e4:	f57ff04f 	dsb	sy
    uintptr_t pa;

    /* For each stride: Issue clean and invalidate line by PA command, then
     / wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    16e8:	e1500001 	cmp	r0, r1
    16ec:	2a000005 	bcs	1708 <alt_cache_system_purge+0x64>
    16f0:	e1a03000 	mov	r3, r0
    {
        alt_write_word(ALT_MPUL2_CLEAN_INV_PA_ADDR, pa);
    16f4:	e3e0c801 	mvn	r12, #65536	; 0x10000
    16f8:	e50c380f 	str	r3, [r12, #-2063]	; 0xfffff7f1
    uintptr_t pa;

    /* For each stride: Issue clean and invalidate line by PA command, then
     / wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    16fc:	e2833020 	add	r3, r3, #32
    1700:	e1530001 	cmp	r3, r1
    1704:	3afffffb 	bcc	16f8 <alt_cache_system_purge+0x54>
        alt_write_word(ALT_MPUL2_CLEAN_INV_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_PA_ADDR) & ALT_MPUL2_COMMON_PA_C_SET_MSK)
    1708:	e3e04801 	mvn	r4, #65536	; 0x10000
    170c:	e514380f 	ldr	r3, [r4, #-2063]	; 0xfffff7f1
    1710:	e3130001 	tst	r3, #1
    1714:	13a03080 	movne	r3, #128	; 0x80
    1718:	1a000002 	bne	1728 <alt_cache_system_purge+0x84>
    171c:	ea000004 	b	1734 <alt_cache_system_purge+0x90>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ADDR_TIMEOUT)
    1720:	e2533001 	subs	r3, r3, #1
    1724:	0a000002 	beq	1734 <alt_cache_system_purge+0x90>
        alt_write_word(ALT_MPUL2_CLEAN_INV_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_PA_ADDR) & ALT_MPUL2_COMMON_PA_C_SET_MSK)
    1728:	e514c80f 	ldr	r12, [r4, #-2063]	; 0xfffff7f1
    172c:	e31c0001 	tst	r12, #1
    1730:	1afffffa 	bne	1720 <alt_cache_system_purge+0x7c>
    int i = 0;

    /* Issue cache sync command, then wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CACHE_SYNC_ADDR, 0);
    1734:	e3e04801 	mvn	r4, #65536	; 0x10000
    1738:	e3a03000 	mov	r3, #0
    173c:	e50438cf 	str	r3, [r4, #-2255]	; 0xfffff731

    while (alt_read_word(ALT_MPUL2_CACHE_SYNC_ADDR))
    1740:	e51438cf 	ldr	r3, [r4, #-2255]	; 0xfffff731
    1744:	e3530000 	cmp	r3, #0
    1748:	13a03080 	movne	r3, #128	; 0x80
    174c:	1a000002 	bne	175c <alt_cache_system_purge+0xb8>
    1750:	ea000004 	b	1768 <alt_cache_system_purge+0xc4>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_SYNC_TIMEOUT)
    1754:	e2533001 	subs	r3, r3, #1
    1758:	0a000002 	beq	1768 <alt_cache_system_purge+0xc4>
    /* Issue cache sync command, then wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CACHE_SYNC_ADDR, 0);

    while (alt_read_word(ALT_MPUL2_CACHE_SYNC_ADDR))
    175c:	e514c8cf 	ldr	r12, [r4, #-2255]	; 0xfffff731
    1760:	e35c0000 	cmp	r12, #0
    1764:	1afffffa 	bne	1754 <alt_cache_system_purge+0xb0>
     / segment.*/

    /* The DCIMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    1768:	e1500001 	cmp	r0, r1
    176c:	2a000003 	bcs	1780 <alt_cache_system_purge+0xdc>
        __asm("MCR p15, 0, %[va], c7, c6, 1" : : [va] "r" (va));
#elif defined(__ARMCC_VERSION)
        __asm("MCR p15, 0, va, c7, c6, 1");
#elif defined(_MSC_VER)
#else
        __asm("MCR p15, 0, %0, c7, c6, 1" : : "r" (va));
    1770:	ee072f36 	mcr	15, 0, r2, cr7, cr6, {1}
     / segment.*/

    /* The DCIMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    1774:	e2822020 	add	r2, r2, #32
    1778:	e1520001 	cmp	r2, r1
    177c:	3afffffb 	bcc	1770 <alt_cache_system_purge+0xcc>
#endif
    }

#if !defined(_MSC_VER)
    /* Ensure all cache maintenance operations complete before returning. */
    __asm("dsb");
    1780:	f57ff04f 	dsb	sy
        alt_cache_l1_data_invalidate_helper(vaddress, length);
        /* __asm("dsb") handled by l1_data_invalidate(). */
    }
#endif

    return ALT_E_SUCCESS;
    1784:	e3a00000 	mov	r0, #0
}
    1788:	e8bd0010 	ldmfd	sp!, {r4}
    178c:	e12fff1e 	bx	lr

    /* Verify preconditions: 
     /  - address and length are on the cache boundaries */
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    {
        return ALT_E_BAD_ARG;
    1790:	e3e00008 	mvn	r0, #8
    1794:	eafffffb 	b	1788 <alt_cache_system_purge+0xe4>

00001798 <alt_cache_l1_instruction_enable>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1798:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_I_SET_MSK) == 0)
    179c:	e2132a01 	ands	r2, r3, #4096	; 0x1000
    17a0:	1a000002 	bne	17b0 <alt_cache_l1_instruction_enable+0x18>
    __asm("MCR p15, 0, %[dummy], c7, c1, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 0" : : "r" (dummy));
    17a4:	ee072f11 	mcr	15, 0, r2, cr7, cr1, {0}
    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_I_SET_MSK) == 0)
    {
        alt_cache_l1_instruction_invalidate();

        sctlr |= ALT_CPU_SCTLR_I_SET_MSK;
    17a8:	e3833a01 	orr	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    17ac:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
        sctlr |= ALT_CPU_SCTLR_I_SET_MSK;
        sctlr_write_helper(sctlr);
    }

    return ALT_E_SUCCESS;
}
    17b0:	e3a00000 	mov	r0, #0
    17b4:	e12fff1e 	bx	lr

000017b8 <alt_cache_l1_instruction_disable>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    17b8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_I_SET_MSK;
    17bc:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    17c0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_I_SET_MSK;
    sctlr_write_helper(sctlr);

    return ALT_E_SUCCESS;
}
    17c4:	e3a00000 	mov	r0, #0
    17c8:	e12fff1e 	bx	lr

000017cc <alt_cache_l1_instruction_is_enabled>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    17cc:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    }
    else
    {
        return false;
    }
}
    17d0:	e7e00650 	ubfx	r0, r0, #12, #1
    17d4:	e12fff1e 	bx	lr

000017d8 <alt_cache_l1_instruction_invalidate>:
    __asm("MCR p15, 0, %[dummy], c7, c1, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 0" : : "r" (dummy));
    17d8:	e3a03000 	mov	r3, #0
    17dc:	ee073f11 	mcr	15, 0, r3, cr7, cr1, {0}
#endif

    return ALT_E_SUCCESS;
}
    17e0:	e3a00000 	mov	r0, #0
    17e4:	e12fff1e 	bx	lr

000017e8 <alt_cache_l1_data_is_enabled>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    17e8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    }
    else
    {
        return false;
    }
}
    17ec:	e7e00150 	ubfx	r0, r0, #2, #1
    17f0:	e12fff1e 	bx	lr

000017f4 <alt_cache_l1_data_invalidate>:
ALT_STATUS_CODE alt_cache_l1_data_invalidate(void * vaddress, size_t length)
{
    /* Verify preconditions:
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if (length == 0)
    17f4:	e3510000 	cmp	r1, #0
    17f8:	0a00000d 	beq	1834 <alt_cache_l1_data_invalidate+0x40>
    {
        return ALT_E_BAD_ARG;
    }
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    17fc:	e310001f 	tst	r0, #31
    1800:	1a00000b 	bne	1834 <alt_cache_l1_data_invalidate+0x40>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    1804:	e311001f 	tst	r1, #31
    1808:	1a000009 	bne	1834 <alt_cache_l1_data_invalidate+0x40>
     / segment.*/

    /* The DCIMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    180c:	e0803001 	add	r3, r0, r1
    1810:	e1500003 	cmp	r0, r3
    1814:	2a000003 	bcs	1828 <alt_cache_l1_data_invalidate+0x34>
        __asm("MCR p15, 0, %[va], c7, c6, 1" : : [va] "r" (va));
#elif defined(__ARMCC_VERSION)
        __asm("MCR p15, 0, va, c7, c6, 1");
#elif defined(_MSC_VER)
#else
        __asm("MCR p15, 0, %0, c7, c6, 1" : : "r" (va));
    1818:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
     / segment.*/

    /* The DCIMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    181c:	e2800020 	add	r0, r0, #32
    1820:	e1500003 	cmp	r0, r3
    1824:	3afffffb 	bcc	1818 <alt_cache_l1_data_invalidate+0x24>
#endif
    }

#if !defined(_MSC_VER)
    /* Ensure all cache maintenance operations complete before returning. */
    __asm("dsb");
    1828:	f57ff04f 	dsb	sy
        return ALT_E_BAD_ARG;
    }

    alt_cache_l1_data_invalidate_helper(vaddress, length);

    return ALT_E_SUCCESS;
    182c:	e3a00000 	mov	r0, #0
    1830:	e12fff1e 	bx	lr
    /* Verify preconditions:
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if (length == 0)
    {
        return ALT_E_BAD_ARG;
    1834:	e3e00008 	mvn	r0, #8
    }

    alt_cache_l1_data_invalidate_helper(vaddress, length);

    return ALT_E_SUCCESS;
}
    1838:	e12fff1e 	bx	lr

0000183c <alt_cache_l1_data_invalidate_all>:

ALT_STATUS_CODE alt_cache_l1_data_invalidate_all(void)
{
    183c:	e92d0070 	push	{r4, r5, r6}
    __asm("ISB");
    __asm("MRC p15, 1, cssidr, c0, c0, 0");
#elif defined(_MSC_VER)
	cssidr = 0;
#else
    __asm("MCR p15, 2, %0, c0, c0, 0" : : "r" (csselr));
    1840:	e3a03000 	mov	r3, #0
    1844:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
    __asm("ISB");
    1848:	f57ff06f 	isb	sy
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
    184c:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    1850:	e7e921d3 	ubfx	r2, r3, #3, #10
    __asm("ISB");
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
    1854:	e203c007 	and	r12, r3, #7
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    1858:	e2822001 	add	r2, r2, #1
    int numsets       = ALT_CPU_CCSIDR_NUMSETS_VALUE_GET(cssidr) + 1;
    185c:	e7ee36d3 	ubfx	r3, r3, #13, #15
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    1860:	e3520001 	cmp	r2, #1
    __asm("ISB");
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
    1864:	e28cc004 	add	r12, r12, #4
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    int numsets       = ALT_CPU_CCSIDR_NUMSETS_VALUE_GET(cssidr) + 1;
    1868:	e2830001 	add	r0, r3, #1
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    186c:	0a00001d 	beq	18e8 <alt_cache_l1_data_invalidate_all+0xac>
    1870:	e3a03000 	mov	r3, #0
    1874:	e3a01001 	mov	r1, #1
    {
        ++A;
    1878:	e2833001 	add	r3, r3, #1
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    187c:	e1a05311 	lsl	r5, r1, r3
    1880:	e1520005 	cmp	r2, r5
    1884:	cafffffb 	bgt	1878 <alt_cache_l1_data_invalidate_all+0x3c>
    {
        ++A;
    }

    while ((1 << S) < numsets)
    1888:	e3500001 	cmp	r0, #1
    188c:	e2636020 	rsb	r6, r3, #32
    1890:	0a000018 	beq	18f8 <alt_cache_l1_data_invalidate_all+0xbc>
    1894:	e3a02000 	mov	r2, #0
    1898:	e3a03001 	mov	r3, #1
    {
        ++S;
    189c:	e2822001 	add	r2, r2, #1
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    18a0:	e1a01213 	lsl	r1, r3, r2
    18a4:	e1500001 	cmp	r0, r1
    18a8:	cafffffb 	bgt	189c <alt_cache_l1_data_invalidate_all+0x60>

    cssidr_decode_helper(false, &L, &A, &S);

    /* Repeatedly call DCISW and loop for every cache way and set. */

    for (way = 0; way < (1 << A); ++way)
    18ac:	e3a04000 	mov	r4, #0
    18b0:	e1a00614 	lsl	r0, r4, r6
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    18b4:	e3a03000 	mov	r3, #0
        int set;
        for (set = 0; set < (1 << S); ++set)
        {
            uint32_t way_set_info = 0;
            way_set_info |= way << (32 - A);
            way_set_info |= set << (L);
    18b8:	e1802c13 	orr	r2, r0, r3, lsl r12
#elif defined(__ARMCC_VERSION)
            __asm("MCR p15, 0, way_set_info,    c7, c6, 2");
#elif defined(_MSC_VER)

#else
            __asm("MCR p15, 0, %0,              c7, c6, 2" : : "r" (way_set_info));
    18bc:	ee072f56 	mcr	15, 0, r2, cr7, cr6, {2}
    /* Repeatedly call DCISW and loop for every cache way and set. */

    for (way = 0; way < (1 << A); ++way)
    {
        int set;
        for (set = 0; set < (1 << S); ++set)
    18c0:	e2833001 	add	r3, r3, #1
    18c4:	e1510003 	cmp	r1, r3
    18c8:	cafffffa 	bgt	18b8 <alt_cache_l1_data_invalidate_all+0x7c>

    cssidr_decode_helper(false, &L, &A, &S);

    /* Repeatedly call DCISW and loop for every cache way and set. */

    for (way = 0; way < (1 << A); ++way)
    18cc:	e2844001 	add	r4, r4, #1
    18d0:	e1550004 	cmp	r5, r4
    18d4:	cafffff5 	bgt	18b0 <alt_cache_l1_data_invalidate_all+0x74>
        }
    }

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    18d8:	f57ff04f 	dsb	sy
#endif

    return ALT_E_SUCCESS;
}
    18dc:	e3a00000 	mov	r0, #0
    18e0:	e8bd0070 	pop	{r4, r5, r6}
    18e4:	e12fff1e 	bx	lr
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    18e8:	e3500001 	cmp	r0, #1
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    18ec:	e3a06020 	mov	r6, #32
    18f0:	e1a05002 	mov	r5, r2
    {
        ++A;
    }

    while ((1 << S) < numsets)
    18f4:	1affffe6 	bne	1894 <alt_cache_l1_data_invalidate_all+0x58>
    18f8:	e1a01000 	mov	r1, r0
    18fc:	eaffffea 	b	18ac <alt_cache_l1_data_invalidate_all+0x70>

00001900 <alt_cache_l1_data_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l1_data_enable(void)
{
    1900:	e92d4010 	push	{r4, lr}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1904:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
{
    /* Update SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_C_SET_MSK) == 0)
    1908:	e3140004 	tst	r4, #4
    190c:	1a000002 	bne	191c <alt_cache_l1_data_enable+0x1c>
    {
        alt_cache_l1_data_invalidate_all();
    1910:	ebffffc9 	bl	183c <alt_cache_l1_data_invalidate_all>

        sctlr |= ALT_CPU_SCTLR_C_SET_MSK;
    1914:	e3844004 	orr	r4, r4, #4
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1918:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
        sctlr |= ALT_CPU_SCTLR_C_SET_MSK;
        sctlr_write_helper(sctlr);
    }

    return ALT_E_SUCCESS;
}
    191c:	e3a00000 	mov	r0, #0
    1920:	e8bd8010 	pop	{r4, pc}

00001924 <alt_cache_l1_data_clean>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1924:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Query SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0 )
    1928:	e3130004 	tst	r3, #4
    192c:	1a000001 	bne	1938 <alt_cache_l1_data_clean+0x14>
     /  - l1 data cache is turned on before we start trying to clear it
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if ( ! alt_cache_l1_data_is_enabled())
    {
        return ALT_E_BAD_OPERATION;
    1930:	e3e00009 	mvn	r0, #9
    1934:	e12fff1e 	bx	lr
    }
    if (length == 0)
    1938:	e3510000 	cmp	r1, #0
    193c:	0a00000d 	beq	1978 <alt_cache_l1_data_clean+0x54>
    {
        return ALT_E_BAD_ARG;
    }
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    1940:	e310001f 	tst	r0, #31
    1944:	1a00000b 	bne	1978 <alt_cache_l1_data_clean+0x54>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    1948:	e311001f 	tst	r1, #31
    194c:	1a000009 	bne	1978 <alt_cache_l1_data_clean+0x54>
     / point of Coherency) and loop for the length of the segment. */

    /* The DCCMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    1950:	e0801001 	add	r1, r0, r1
    1954:	e1500001 	cmp	r0, r1
    1958:	2a000003 	bcs	196c <alt_cache_l1_data_clean+0x48>
        __asm("MCR p15, 0, %[va], c7, c10, 1" : : [va] "r" (va));
#elif defined(__ARMCC_VERSION)
        __asm("MCR p15, 0, va, c7, c10, 1");
#elif defined(_MSC_VER)
#else
        __asm("MCR p15, 0, %0, c7, c10, 1" : : "r" (va));
    195c:	ee070f3a 	mcr	15, 0, r0, cr7, cr10, {1}
     / point of Coherency) and loop for the length of the segment. */

    /* The DCCMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    1960:	e2800020 	add	r0, r0, #32
    1964:	e1510000 	cmp	r1, r0
    1968:	8afffffb 	bhi	195c <alt_cache_l1_data_clean+0x38>
#endif
    }

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    196c:	f57ff04f 	dsb	sy
        return ALT_E_BAD_ARG;
    }

    alt_cache_l1_data_clean_helper(vaddress, length);

    return ALT_E_SUCCESS;
    1970:	e3a00000 	mov	r0, #0
    1974:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    {
        return ALT_E_BAD_ARG;
    1978:	e3e00008 	mvn	r0, #8
    197c:	e12fff1e 	bx	lr

00001980 <alt_cache_l1_data_clean_all>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1980:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Query SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0 )
    1984:	e3130004 	tst	r3, #4

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l1_data_clean_all(void)
{
    1988:	e92d0070 	push	{r4, r5, r6}
    int way;

    /* Ensure that it is turned on before we start trying to clear it */
    if ( ! alt_cache_l1_data_is_enabled())
    {
        return ALT_E_BAD_OPERATION;
    198c:	03e00009 	mvneq	r0, #9
{
    /* Query SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0 )
    1990:	0a000029 	beq	1a3c <alt_cache_l1_data_clean_all+0xbc>
    __asm("ISB");
    __asm("MRC p15, 1, cssidr, c0, c0, 0");
#elif defined(_MSC_VER)
	cssidr = 0;
#else
    __asm("MCR p15, 2, %0, c0, c0, 0" : : "r" (csselr));
    1994:	e3a03000 	mov	r3, #0
    1998:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
    __asm("ISB");
    199c:	f57ff06f 	isb	sy
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
    19a0:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    19a4:	e7e921d3 	ubfx	r2, r3, #3, #10
    __asm("ISB");
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
    19a8:	e203c007 	and	r12, r3, #7
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    19ac:	e2822001 	add	r2, r2, #1
    int numsets       = ALT_CPU_CCSIDR_NUMSETS_VALUE_GET(cssidr) + 1;
    19b0:	e7ee36d3 	ubfx	r3, r3, #13, #15
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    19b4:	e3520001 	cmp	r2, #1
    __asm("ISB");
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
    19b8:	e28cc004 	add	r12, r12, #4
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    int numsets       = ALT_CPU_CCSIDR_NUMSETS_VALUE_GET(cssidr) + 1;
    19bc:	e2830001 	add	r0, r3, #1
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    19c0:	03a06020 	moveq	r6, #32
    19c4:	01a05002 	moveq	r5, r2
    19c8:	0a000006 	beq	19e8 <alt_cache_l1_data_clean_all+0x68>
    19cc:	e3a03000 	mov	r3, #0
    19d0:	e3a01001 	mov	r1, #1
    {
        ++A;
    19d4:	e2833001 	add	r3, r3, #1
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    19d8:	e1a05311 	lsl	r5, r1, r3
    19dc:	e1520005 	cmp	r2, r5
    19e0:	cafffffb 	bgt	19d4 <alt_cache_l1_data_clean_all+0x54>
    19e4:	e2636020 	rsb	r6, r3, #32
    {
        ++A;
    }

    while ((1 << S) < numsets)
    19e8:	e3500001 	cmp	r0, #1
    19ec:	0a000014 	beq	1a44 <alt_cache_l1_data_clean_all+0xc4>
    19f0:	e3a02000 	mov	r2, #0
    19f4:	e3a03001 	mov	r3, #1
    {
        ++S;
    19f8:	e2822001 	add	r2, r2, #1
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    19fc:	e1a01213 	lsl	r1, r3, r2
    1a00:	e1500001 	cmp	r0, r1
    1a04:	cafffffb 	bgt	19f8 <alt_cache_l1_data_clean_all+0x78>
    }
    cssidr_decode_helper(false, &L, &A, &S);

    /* Repeatedly call DCCSW and loop for every cache way and set. */

    for (way = 0; way < (1 << A); ++way)
    1a08:	e3a04000 	mov	r4, #0
    1a0c:	e1a00614 	lsl	r0, r4, r6
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    1a10:	e3a03000 	mov	r3, #0
        int set;
        for (set = 0; set < (1 << S); ++set)
        {
            uint32_t way_set_info = 0;
            way_set_info |= way << (32 - A);
            way_set_info |= set << (L);
    1a14:	e1802c13 	orr	r2, r0, r3, lsl r12
            __asm("MCR p15, 0, %[way_set_info], c7, c10, 2" : : [way_set_info] "r" (way_set_info));
#elif defined(__ARMCC_VERSION)
            __asm("MCR p15, 0, way_set_info,    c7, c10, 2");
#elif defined(_MSC_VER)
#else
            __asm("MCR p15, 0, %0,              c7, c10, 2" : : "r" (way_set_info));
    1a18:	ee072f5a 	mcr	15, 0, r2, cr7, cr10, {2}
    /* Repeatedly call DCCSW and loop for every cache way and set. */

    for (way = 0; way < (1 << A); ++way)
    {
        int set;
        for (set = 0; set < (1 << S); ++set)
    1a1c:	e2833001 	add	r3, r3, #1
    1a20:	e1510003 	cmp	r1, r3
    1a24:	cafffffa 	bgt	1a14 <alt_cache_l1_data_clean_all+0x94>
    }
    cssidr_decode_helper(false, &L, &A, &S);

    /* Repeatedly call DCCSW and loop for every cache way and set. */

    for (way = 0; way < (1 << A); ++way)
    1a28:	e2844001 	add	r4, r4, #1
    1a2c:	e1550004 	cmp	r5, r4
    1a30:	cafffff5 	bgt	1a0c <alt_cache_l1_data_clean_all+0x8c>
        }
    }

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    1a34:	f57ff04f 	dsb	sy
#endif

    return ALT_E_SUCCESS;
    1a38:	e3a00000 	mov	r0, #0
}
    1a3c:	e8bd0070 	pop	{r4, r5, r6}
    1a40:	e12fff1e 	bx	lr
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    1a44:	e1a01000 	mov	r1, r0
    1a48:	eaffffee 	b	1a08 <alt_cache_l1_data_clean_all+0x88>

00001a4c <alt_cache_l1_data_disable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l1_data_disable(void)
{
    1a4c:	e92d4010 	push	{r4, lr}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1a50:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
{
    /* Update SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0)
    1a54:	e3140004 	tst	r4, #4
    1a58:	0a000002 	beq	1a68 <alt_cache_l1_data_disable+0x1c>
    {
        alt_cache_l1_data_clean_all();
    1a5c:	ebffffc7 	bl	1980 <alt_cache_l1_data_clean_all>

        sctlr &= ~ALT_CPU_SCTLR_C_SET_MSK;
    1a60:	e3c44004 	bic	r4, r4, #4
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1a64:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}

        sctlr_write_helper(sctlr);
    }

    return ALT_E_SUCCESS;
}
    1a68:	e3a00000 	mov	r0, #0
    1a6c:	e8bd8010 	pop	{r4, pc}

00001a70 <alt_cache_l1_disable_all>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l1_disable_all(void)
{
    1a70:	e92d4010 	push	{r4, lr}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1a74:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_parity_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_PARITYON_SET_MSK;
    1a78:	e3c33c02 	bic	r3, r3, #512	; 0x200
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1a7c:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1a80:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_I_SET_MSK;
    1a84:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1a88:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1a8c:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
{
    /* Update SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0)
    1a90:	e3140004 	tst	r4, #4
    1a94:	0a000002 	beq	1aa4 <alt_cache_l1_disable_all+0x34>
    {
        alt_cache_l1_data_clean_all();
    1a98:	ebffffb8 	bl	1980 <alt_cache_l1_data_clean_all>

        sctlr &= ~ALT_CPU_SCTLR_C_SET_MSK;
    1a9c:	e3c44004 	bic	r4, r4, #4
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1aa0:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1aa4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
}

ALT_STATUS_CODE alt_cache_l1_branch_disable(void)
{
    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_Z_SET_MSK;
    1aa8:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1aac:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1ab0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_prefetch_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    1ab4:	e3c33004 	bic	r3, r3, #4
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1ab8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    alt_cache_l1_data_disable();
    alt_cache_l1_branch_disable();
    alt_cache_l1_prefetch_disable();

    return ALT_E_SUCCESS;
}
    1abc:	e3a00000 	mov	r0, #0
    1ac0:	e8bd8010 	pop	{r4, pc}

00001ac4 <alt_cache_system_disable>:
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    1ac4:	e3e01801 	mvn	r1, #65536	; 0x10000

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_system_disable(void)
{
    1ac8:	e92d4010 	push	{r4, lr}
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    1acc:	e5113eff 	ldr	r3, [r1, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    1ad0:	e3130001 	tst	r3, #1
    1ad4:	0a00000a 	beq	1b04 <alt_cache_system_disable+0x40>
    int i = 0;

    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);
    1ad8:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    1adc:	e3403002 	movt	r3, #2
    1ae0:	e5933000 	ldr	r3, [r3]
    1ae4:	e5013803 	str	r3, [r1, #-2051]	; 0xfffff7fd

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    1ae8:	e5113803 	ldr	r3, [r1, #-2051]	; 0xfffff7fd
    1aec:	e3530000 	cmp	r3, #0
    1af0:	13a03801 	movne	r3, #65536	; 0x10000
    1af4:	1a00001f 	bne	1b78 <alt_cache_system_disable+0xb4>
ALT_STATUS_CODE alt_cache_l2_disable(void)
{
    if (alt_cache_l2_is_enabled())
    {
        alt_cache_l2_purge_all();
        alt_write_word(ALT_MPUL2_CONTROL_ADDR, 0);
    1af8:	e3a02000 	mov	r2, #0
    1afc:	e3e03801 	mvn	r3, #65536	; 0x10000
    1b00:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l2_parity_disable(void)
{
    alt_clrbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_PARITY_EN_SET_MSK);
    1b04:	e3e03801 	mvn	r3, #65536	; 0x10000
    1b08:	e5131efb 	ldr	r1, [r3, #-3835]	; 0xfffff105
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1b0c:	ee112f30 	mrc	15, 0, r2, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_parity_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_PARITYON_SET_MSK;
    1b10:	e3c22c02 	bic	r2, r2, #512	; 0x200
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l2_parity_disable(void)
{
    alt_clrbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_PARITY_EN_SET_MSK);
    1b14:	e3c11602 	bic	r1, r1, #2097152	; 0x200000
    1b18:	e5031efb 	str	r1, [r3, #-3835]	; 0xfffff105
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_clrbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    1b1c:	e513109f 	ldr	r1, [r3, #-159]	; 0xffffff61
    1b20:	e3c11203 	bic	r1, r1, #805306368	; 0x30000000
    1b24:	e503109f 	str	r1, [r3, #-159]	; 0xffffff61
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1b28:	ee012f30 	mcr	15, 0, r2, cr1, cr0, {1}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1b2c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_I_SET_MSK;
    1b30:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1b34:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1b38:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
{
    /* Update SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0)
    1b3c:	e3140004 	tst	r4, #4
    1b40:	0a000002 	beq	1b50 <alt_cache_system_disable+0x8c>
    {
        alt_cache_l1_data_clean_all();
    1b44:	ebffff8d 	bl	1980 <alt_cache_l1_data_clean_all>

        sctlr &= ~ALT_CPU_SCTLR_C_SET_MSK;
    1b48:	e3c44004 	bic	r4, r4, #4
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1b4c:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1b50:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
}

ALT_STATUS_CODE alt_cache_l1_branch_disable(void)
{
    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_Z_SET_MSK;
    1b54:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1b58:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1b5c:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_prefetch_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    1b60:	e3c33004 	bic	r3, r3, #4
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1b64:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    alt_cache_l2_uninit();

    alt_cache_l1_disable_all();

    return ALT_E_SUCCESS;
}
    1b68:	e3a00000 	mov	r0, #0
    1b6c:	e8bd8010 	pop	{r4, pc}

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ALL_TIMEOUT)
    1b70:	e2533001 	subs	r3, r3, #1
    1b74:	0affffdf 	beq	1af8 <alt_cache_system_disable+0x34>
    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    1b78:	e5112803 	ldr	r2, [r1, #-2051]	; 0xfffff7fd
    1b7c:	e3520000 	cmp	r2, #0
    1b80:	1afffffa 	bne	1b70 <alt_cache_system_disable+0xac>
    1b84:	eaffffdb 	b	1af8 <alt_cache_system_disable+0x34>

00001b88 <alt_cache_l1_data_purge>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1b88:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Query SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0 )
    1b8c:	e3130004 	tst	r3, #4
    1b90:	1a000001 	bne	1b9c <alt_cache_l1_data_purge+0x14>
     /  - l1 data cache is turned on before we start trying to clear it
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if ( ! alt_cache_l1_data_is_enabled())
    {
        return ALT_E_BAD_OPERATION;
    1b94:	e3e00009 	mvn	r0, #9
    1b98:	e12fff1e 	bx	lr
    }
    if (length == 0)
    1b9c:	e3510000 	cmp	r1, #0
    1ba0:	0a00000d 	beq	1bdc <alt_cache_l1_data_purge+0x54>
    {
        return ALT_E_BAD_ARG;
    }
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    1ba4:	e310001f 	tst	r0, #31
    1ba8:	1a00000b 	bne	1bdc <alt_cache_l1_data_purge+0x54>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    1bac:	e311001f 	tst	r1, #31
    1bb0:	1a000009 	bne	1bdc <alt_cache_l1_data_purge+0x54>
     / segment. */

    /* The DCCIMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    1bb4:	e0801001 	add	r1, r0, r1
    1bb8:	e1500001 	cmp	r0, r1
    1bbc:	2a000003 	bcs	1bd0 <alt_cache_l1_data_purge+0x48>
        __asm("MCR p15, 0, %[va], c7, c14, 1" : : [va] "r" (va));
#elif defined(__ARMCC_VERSION)
        __asm("MCR p15, 0, va,    c7, c14, 1");
#elif defined(_MSC_VER)
#else
        __asm("MCR p15, 0, %0,    c7, c14, 1" : : "r" (va));
    1bc0:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
     / segment. */

    /* The DCCIMVAC uses the MVA format for the register. This is simply the
     / virtual address of the line to be invalidated.
     / See ARMv7-A,R, section B4.2.1. */
    for (va = (uintptr_t)vaddress; va < (uintptr_t)vaddress + length; va += ALT_CACHE_LINE_SIZE)
    1bc4:	e2800020 	add	r0, r0, #32
    1bc8:	e1510000 	cmp	r1, r0
    1bcc:	8afffffb 	bhi	1bc0 <alt_cache_l1_data_purge+0x38>
#endif
    }

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    1bd0:	f57ff04f 	dsb	sy
        return ALT_E_BAD_ARG;
    }

    alt_cache_l1_data_purge_helper(vaddress, length);

    return ALT_E_SUCCESS;
    1bd4:	e3a00000 	mov	r0, #0
    1bd8:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }
    if (((uintptr_t)vaddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    {
        return ALT_E_BAD_ARG;
    1bdc:	e3e00008 	mvn	r0, #8
    1be0:	e12fff1e 	bx	lr

00001be4 <alt_cache_l1_data_purge_all>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1be4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Query SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0 )
    1be8:	e3130004 	tst	r3, #4
    return ALT_E_SUCCESS;

}

ALT_STATUS_CODE alt_cache_l1_data_purge_all(void)
{
    1bec:	e92d0070 	push	{r4, r5, r6}
    int way;

    /* Ensure that it is turned on before we start trying to clear it */
    if ( ! alt_cache_l1_data_is_enabled())
    {
        return ALT_E_BAD_OPERATION;
    1bf0:	03e00009 	mvneq	r0, #9
{
    /* Query SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0 )
    1bf4:	0a000029 	beq	1ca0 <alt_cache_l1_data_purge_all+0xbc>
    __asm("ISB");
    __asm("MRC p15, 1, cssidr, c0, c0, 0");
#elif defined(_MSC_VER)
	cssidr = 0;
#else
    __asm("MCR p15, 2, %0, c0, c0, 0" : : "r" (csselr));
    1bf8:	e3a03000 	mov	r3, #0
    1bfc:	ee403f10 	mcr	15, 2, r3, cr0, cr0, {0}
    __asm("ISB");
    1c00:	f57ff06f 	isb	sy
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
    1c04:	ee303f10 	mrc	15, 1, r3, cr0, cr0, {0}
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    1c08:	e7e921d3 	ubfx	r2, r3, #3, #10
    __asm("ISB");
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
    1c0c:	e203c007 	and	r12, r3, #7
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    1c10:	e2822001 	add	r2, r2, #1
    int numsets       = ALT_CPU_CCSIDR_NUMSETS_VALUE_GET(cssidr) + 1;
    1c14:	e7ee36d3 	ubfx	r3, r3, #13, #15
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    1c18:	e3520001 	cmp	r2, #1
    __asm("ISB");
    __asm("MRC p15, 1, %0, c0, c0, 0" : "=r" (cssidr));
#endif
    {
    /* Extract the associativity, line length, and number of sets. */
    int linesize      = ALT_CPU_CCSIDR_LINESIZE_VALUE_GET(cssidr) + 2 + 2; 
    1c1c:	e28cc004 	add	r12, r12, #4
		/* {log2(line length in words) - 2} + 2 + 2 => (... in bytes) */
    int associativity = ALT_CPU_CCSIDR_ASSOCIATIVITY_VALUE_GET(cssidr) + 1;
    int numsets       = ALT_CPU_CCSIDR_NUMSETS_VALUE_GET(cssidr) + 1;
    1c20:	e2830001 	add	r0, r3, #1
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    1c24:	03a06020 	moveq	r6, #32
    1c28:	01a05002 	moveq	r5, r2
    1c2c:	0a000006 	beq	1c4c <alt_cache_l1_data_purge_all+0x68>
    1c30:	e3a03000 	mov	r3, #0
    1c34:	e3a01001 	mov	r1, #1
    {
        ++A;
    1c38:	e2833001 	add	r3, r3, #1
    /* Determine the log2 of the associativity and numsets, rounded up */
    int L = linesize; /* log2(line length in bytes) */
    int A = 0;        /* log2(associativity) rounded up */
    int S = 0;        /* log2(number of sets) rounded up */

    while ((1 << A) < associativity)
    1c3c:	e1a05311 	lsl	r5, r1, r3
    1c40:	e1520005 	cmp	r2, r5
    1c44:	cafffffb 	bgt	1c38 <alt_cache_l1_data_purge_all+0x54>
    1c48:	e2636020 	rsb	r6, r3, #32
    {
        ++A;
    }

    while ((1 << S) < numsets)
    1c4c:	e3500001 	cmp	r0, #1
    1c50:	0a000014 	beq	1ca8 <alt_cache_l1_data_purge_all+0xc4>
    1c54:	e3a02000 	mov	r2, #0
    1c58:	e3a03001 	mov	r3, #1
    {
        ++S;
    1c5c:	e2822001 	add	r2, r2, #1
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    1c60:	e1a01213 	lsl	r1, r3, r2
    1c64:	e1500001 	cmp	r0, r1
    1c68:	cafffffb 	bgt	1c5c <alt_cache_l1_data_purge_all+0x78>
        return ALT_E_BAD_OPERATION;
    }
    cssidr_decode_helper(false, &L, &A, &S);

    /* Repeatedly call DCCISW and loop for every cache way and set. */
    for (way = 0; way < (1 << A); ++way)
    1c6c:	e3a04000 	mov	r4, #0
    1c70:	e1a00614 	lsl	r0, r4, r6
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    1c74:	e3a03000 	mov	r3, #0
        int set; 
        for (set = 0; set < (1 << S); ++set)
        {
            uint32_t way_set_info = 0;
            way_set_info |= way << (32 - A);
            way_set_info |= set << (L);
    1c78:	e1802c13 	orr	r2, r0, r3, lsl r12
            __asm("MCR p15, 0, %[way_set_info], c7, c14, 2" : : [way_set_info] "r" (way_set_info));
#elif defined(__ARMCC_VERSION)
            __asm("MCR p15, 0, way_set_info,    c7, c14, 2");
#elif defined(_MSC_VER)
#else
            __asm("MCR p15, 0, %0,              c7, c14, 2" : : "r" (way_set_info));
    1c7c:	ee072f5e 	mcr	15, 0, r2, cr7, cr14, {2}

    /* Repeatedly call DCCISW and loop for every cache way and set. */
    for (way = 0; way < (1 << A); ++way)
    {
        int set; 
        for (set = 0; set < (1 << S); ++set)
    1c80:	e2833001 	add	r3, r3, #1
    1c84:	e1510003 	cmp	r1, r3
    1c88:	cafffffa 	bgt	1c78 <alt_cache_l1_data_purge_all+0x94>
        return ALT_E_BAD_OPERATION;
    }
    cssidr_decode_helper(false, &L, &A, &S);

    /* Repeatedly call DCCISW and loop for every cache way and set. */
    for (way = 0; way < (1 << A); ++way)
    1c8c:	e2844001 	add	r4, r4, #1
    1c90:	e1550004 	cmp	r5, r4
    1c94:	cafffff5 	bgt	1c70 <alt_cache_l1_data_purge_all+0x8c>
        }
    }

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    1c98:	f57ff04f 	dsb	sy
#endif

    return ALT_E_SUCCESS;
    1c9c:	e3a00000 	mov	r0, #0
}
    1ca0:	e8bd0070 	pop	{r4, r5, r6}
    1ca4:	e12fff1e 	bx	lr
    while ((1 << A) < associativity)
    {
        ++A;
    }

    while ((1 << S) < numsets)
    1ca8:	e1a01000 	mov	r1, r0
    1cac:	eaffffee 	b	1c6c <alt_cache_l1_data_purge_all+0x88>

00001cb0 <alt_cache_l1_parity_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l1_parity_enable(void)
{
    1cb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1cb4:	ee114f30 	mrc	15, 0, r4, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_parity_enable(void)
{
    uint32_t actlr = actlr_read_helper();
    if ((actlr & ALT_CPU_ACTLR_PARITYON_SET_MSK) == 0)
    1cb8:	e3140c02 	tst	r4, #512	; 0x200
    1cbc:	1a000022 	bne	1d4c <alt_cache_l1_parity_enable+0x9c>
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1cc0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Query SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_I_SET_MSK) != 0 )
    1cc4:	e7e07653 	ubfx	r7, r3, #12, #1
{
    /* Query SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0 )
    1cc8:	e7e06153 	ubfx	r6, r3, #2, #1
        bool dcache_en = alt_cache_l1_data_is_enabled();
        bool icache_en = alt_cache_l1_instruction_is_enabled();
        bool branch_en = alt_cache_l1_branch_is_enabled();

        /* For those caches, disable them temporarily */
        if (icache_en == true)
    1ccc:	e3570000 	cmp	r7, #0
}

bool alt_cache_l1_branch_is_enabled(void)
{
    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_Z_SET_MSK) != 0)
    1cd0:	e7e055d3 	ubfx	r5, r3, #11, #1
        bool dcache_en = alt_cache_l1_data_is_enabled();
        bool icache_en = alt_cache_l1_instruction_is_enabled();
        bool branch_en = alt_cache_l1_branch_is_enabled();

        /* For those caches, disable them temporarily */
        if (icache_en == true)
    1cd4:	0a000001 	beq	1ce0 <alt_cache_l1_parity_enable+0x30>
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_I_SET_MSK;
    1cd8:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1cdc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
        /* For those caches, disable them temporarily */
        if (icache_en == true)
        {
            alt_cache_l1_instruction_disable();
        }
        if (dcache_en == true)
    1ce0:	e3560000 	cmp	r6, #0
    1ce4:	1a000021 	bne	1d70 <alt_cache_l1_parity_enable+0xc0>
        {
            alt_cache_l1_data_disable();
        }
        if (branch_en == true)
    1ce8:	e3550000 	cmp	r5, #0
    1cec:	0a000002 	beq	1cfc <alt_cache_l1_parity_enable+0x4c>
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1cf0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
}

ALT_STATUS_CODE alt_cache_l1_branch_disable(void)
{
    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_Z_SET_MSK;
    1cf4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1cf8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
        {
            alt_cache_l1_branch_disable();
        }

        /* Turn on parity in the L1. */
        actlr |= ALT_CPU_ACTLR_PARITYON_SET_MSK;
    1cfc:	e3844c02 	orr	r4, r4, #512	; 0x200
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1d00:	ee014f30 	mcr	15, 0, r4, cr1, cr0, {1}
        /* Turn on parity in the L1. */
        actlr |= ALT_CPU_ACTLR_PARITYON_SET_MSK;
        actlr_write_helper(actlr);

        /* Now enable them again. */
        if (icache_en == true)
    1d04:	e3570000 	cmp	r7, #0
    1d08:	0a000005 	beq	1d24 <alt_cache_l1_parity_enable+0x74>
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1d0c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_I_SET_MSK) == 0)
    1d10:	e2132a01 	ands	r2, r3, #4096	; 0x1000
    1d14:	1a000002 	bne	1d24 <alt_cache_l1_parity_enable+0x74>
    __asm("MCR p15, 0, %[dummy], c7, c1, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 0" : : "r" (dummy));
    1d18:	ee072f11 	mcr	15, 0, r2, cr7, cr1, {0}
    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_I_SET_MSK) == 0)
    {
        alt_cache_l1_instruction_invalidate();

        sctlr |= ALT_CPU_SCTLR_I_SET_MSK;
    1d1c:	e3833a01 	orr	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1d20:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
        /* Now enable them again. */
        if (icache_en == true)
        {
            alt_cache_l1_instruction_enable();
        }
        if (dcache_en == true)
    1d24:	e3560000 	cmp	r6, #0
    1d28:	1a000009 	bne	1d54 <alt_cache_l1_parity_enable+0xa4>
        {
            alt_cache_l1_data_enable();
        }
        if (branch_en == true)
    1d2c:	e3550000 	cmp	r5, #0
    1d30:	0a000005 	beq	1d4c <alt_cache_l1_parity_enable+0x9c>
    __asm("MCR p15, 0, %[dummy], c7, c1, 6" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 6");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 6" : : "r" (dummy));
    1d34:	e3a03000 	mov	r3, #0
    1d38:	ee073fd1 	mcr	15, 0, r3, cr7, cr1, {6}
#endif

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    1d3c:	f57ff04f 	dsb	sy
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1d40:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
ALT_STATUS_CODE alt_cache_l1_branch_enable(void)
{
    uint32_t sctlr; 
    alt_cache_l1_branch_invalidate();
    sctlr = sctlr_read_helper();
    sctlr |= ALT_CPU_SCTLR_Z_SET_MSK;
    1d44:	e3833b02 	orr	r3, r3, #2048	; 0x800
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1d48:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
            alt_cache_l1_branch_enable();
        }
    }

    return ALT_E_SUCCESS;
}
    1d4c:	e3a00000 	mov	r0, #0
    1d50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1d54:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
{
    /* Update SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_C_SET_MSK) == 0)
    1d58:	e3140004 	tst	r4, #4
    1d5c:	1afffff2 	bne	1d2c <alt_cache_l1_parity_enable+0x7c>
    {
        alt_cache_l1_data_invalidate_all();
    1d60:	ebfffeb5 	bl	183c <alt_cache_l1_data_invalidate_all>

        sctlr |= ALT_CPU_SCTLR_C_SET_MSK;
    1d64:	e3844004 	orr	r4, r4, #4
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1d68:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
    1d6c:	eaffffee 	b	1d2c <alt_cache_l1_parity_enable+0x7c>
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1d70:	ee118f10 	mrc	15, 0, r8, cr1, cr0, {0}
{
    /* Update SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0)
    1d74:	e3180004 	tst	r8, #4
    1d78:	0affffda 	beq	1ce8 <alt_cache_l1_parity_enable+0x38>
    {
        alt_cache_l1_data_clean_all();
    1d7c:	ebfffeff 	bl	1980 <alt_cache_l1_data_clean_all>

        sctlr &= ~ALT_CPU_SCTLR_C_SET_MSK;
    1d80:	e3c88004 	bic	r8, r8, #4
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1d84:	ee018f10 	mcr	15, 0, r8, cr1, cr0, {0}
    1d88:	eaffffd6 	b	1ce8 <alt_cache_l1_parity_enable+0x38>

00001d8c <alt_cache_l1_enable_all>:
    *log2_S = S;
    }
}

ALT_STATUS_CODE alt_cache_l1_enable_all(void)
{
    1d8c:	e92d4010 	push	{r4, lr}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1d90:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_parity_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_PARITYON_SET_MSK;
    1d94:	e3c33c02 	bic	r3, r3, #512	; 0x200
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1d98:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1d9c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_I_SET_MSK;
    1da0:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1da4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1da8:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
{
    /* Update SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_C_SET_MSK) != 0)
    1dac:	e3140004 	tst	r4, #4
    1db0:	0a000002 	beq	1dc0 <alt_cache_l1_enable_all+0x34>
    {
        alt_cache_l1_data_clean_all();
    1db4:	ebfffef1 	bl	1980 <alt_cache_l1_data_clean_all>

        sctlr &= ~ALT_CPU_SCTLR_C_SET_MSK;
    1db8:	e3c44004 	bic	r4, r4, #4
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1dbc:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1dc0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
}

ALT_STATUS_CODE alt_cache_l1_branch_disable(void)
{
    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_Z_SET_MSK;
    1dc4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1dc8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1dcc:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_prefetch_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    1dd0:	e3c33004 	bic	r3, r3, #4
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1dd4:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
ALT_STATUS_CODE alt_cache_l1_enable_all(void)
{
    alt_cache_l1_disable_all();

    /* Parity should be turned on before anything else. */
    alt_cache_l1_parity_enable();
    1dd8:	ebffffb4 	bl	1cb0 <alt_cache_l1_parity_enable>
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1ddc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_I_SET_MSK) == 0)
    1de0:	e2132a01 	ands	r2, r3, #4096	; 0x1000
    1de4:	1a000002 	bne	1df4 <alt_cache_l1_enable_all+0x68>
    __asm("MCR p15, 0, %[dummy], c7, c1, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 0" : : "r" (dummy));
    1de8:	ee072f11 	mcr	15, 0, r2, cr7, cr1, {0}
    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_I_SET_MSK) == 0)
    {
        alt_cache_l1_instruction_invalidate();

        sctlr |= ALT_CPU_SCTLR_I_SET_MSK;
    1dec:	e3833a01 	orr	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1df0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1df4:	ee114f10 	mrc	15, 0, r4, cr1, cr0, {0}
{
    /* Update SCTLR.C bit (bit 2)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_C_SET_MSK) == 0)
    1df8:	e3140004 	tst	r4, #4
    1dfc:	1a000002 	bne	1e0c <alt_cache_l1_enable_all+0x80>
    {
        alt_cache_l1_data_invalidate_all();
    1e00:	ebfffe8d 	bl	183c <alt_cache_l1_data_invalidate_all>

        sctlr |= ALT_CPU_SCTLR_C_SET_MSK;
    1e04:	e3844004 	orr	r4, r4, #4
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1e08:	ee014f10 	mcr	15, 0, r4, cr1, cr0, {0}
    __asm("MCR p15, 0, %[dummy], c7, c1, 6" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 6");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 6" : : "r" (dummy));
    1e0c:	e3a03000 	mov	r3, #0
    1e10:	ee073fd1 	mcr	15, 0, r3, cr7, cr1, {6}
#endif

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    1e14:	f57ff04f 	dsb	sy
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1e18:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
ALT_STATUS_CODE alt_cache_l1_branch_enable(void)
{
    uint32_t sctlr; 
    alt_cache_l1_branch_invalidate();
    sctlr = sctlr_read_helper();
    sctlr |= ALT_CPU_SCTLR_Z_SET_MSK;
    1e1c:	e3833b02 	orr	r3, r3, #2048	; 0x800
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1e20:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1e24:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_prefetch_enable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr |= ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    1e28:	e3833004 	orr	r3, r3, #4
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1e2c:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    alt_cache_l1_data_enable();
    alt_cache_l1_branch_enable();
    alt_cache_l1_prefetch_enable();

    return ALT_E_SUCCESS;
}
    1e30:	e3a00000 	mov	r0, #0
    1e34:	e8bd8010 	pop	{r4, pc}

00001e38 <alt_cache_system_enable>:
#endif

/* System Level API here */

ALT_STATUS_CODE alt_cache_system_enable(void)
{
    1e38:	e92d4008 	push	{r3, lr}
    alt_cache_l1_enable_all();
    1e3c:	ebffffd2 	bl	1d8c <alt_cache_l1_enable_all>
{


    /* Query the cache characteristics */

    uint32_t auxctrl = alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR);
    1e40:	e3e03801 	mvn	r3, #65536	; 0x10000
    1e44:	e3020a3c 	movw	r0, #10812	; 0x2a3c
    1e48:	e5132efb 	ldr	r2, [r3, #-3835]	; 0xfffff105
     * (Not needed as the associated lines are by default set to the instantiation parameters) */

    /* Invalidate by way all cache entries
     * (Not needed as it will be invalidated when L2 is enabled) */

    alt_write_word(ALT_MPUL2_TAG_RAM_CONTROL_ADDR,
    1e4c:	e3a01000 	mov	r1, #0
    1e50:	e3400002 	movt	r0, #2

    uint32_t auxctrl = alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR);

    if (auxctrl & ALT_MPUL2_AUX_CONTROL_ASSOCIATIVITY_SET_MSK)
    {
        alt_cache_l2_waymask = 0x0000ffff;
    1e54:	e3120801 	tst	r2, #65536	; 0x10000
    1e58:	e30f2fff 	movw	r2, #65535	; 0xffff
    1e5c:	03a020ff 	moveq	r2, #255	; 0xff
    1e60:	e5802000 	str	r2, [r0]
     * (Not needed as the associated lines are by default set to the instantiation parameters) */

    /* Invalidate by way all cache entries
     * (Not needed as it will be invalidated when L2 is enabled) */

    alt_write_word(ALT_MPUL2_TAG_RAM_CONTROL_ADDR,
    1e64:	e5031ef7 	str	r1, [r3, #-3831]	; 0xfffff109
                     ALT_MPUL2_TAG_RAM_CONTROL_WRITE_LATENCY_VALUE_SET(0)
                   | ALT_MPUL2_TAG_RAM_CONTROL_READ_LATENCY_VALUE_SET(0)
                   | ALT_MPUL2_TAG_RAM_CONTROL_SETUP_LATENCY_VALUE_SET(0));

    alt_write_word(ALT_MPUL2_DATA_RAM_CONTROL_ADDR,
    1e68:	e3a01010 	mov	r1, #16
    1e6c:	e5031ef3 	str	r1, [r3, #-3827]	; 0xfffff10d
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    {
        return ALT_E_BAD_ARG;
    }

    alt_write_word(ALT_MPUL2_INT_CLEAR_ADDR, interrupt);
    1e70:	e30011ff 	movw	r1, #511	; 0x1ff
    1e74:	e5031ddf 	str	r1, [r3, #-3551]	; 0xfffff221
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_setbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    1e78:	e513109f 	ldr	r1, [r3, #-159]	; 0xffffff61
    1e7c:	e3811203 	orr	r1, r1, #805306368	; 0x30000000
    1e80:	e503109f 	str	r1, [r3, #-159]	; 0xffffff61
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    1e84:	e5131eff 	ldr	r1, [r3, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    1e88:	e3110001 	tst	r1, #1
    1e8c:	0a000027 	beq	1f30 <alt_cache_system_enable+0xf8>
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    1e90:	e5131eff 	ldr	r1, [r3, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    1e94:	e3110001 	tst	r1, #1
    1e98:	0a00000d 	beq	1ed4 <alt_cache_system_enable+0x9c>
    int i = 0;

    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);
    1e9c:	e5032803 	str	r2, [r3, #-2051]	; 0xfffff7fd

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    1ea0:	e5132803 	ldr	r2, [r3, #-2051]	; 0xfffff7fd
    1ea4:	e3520000 	cmp	r2, #0
    1ea8:	13a02801 	movne	r2, #65536	; 0x10000
    1eac:	1a000002 	bne	1ebc <alt_cache_system_enable+0x84>
    1eb0:	ea000004 	b	1ec8 <alt_cache_system_enable+0x90>
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ALL_TIMEOUT)
    1eb4:	e2522001 	subs	r2, r2, #1
    1eb8:	0a000002 	beq	1ec8 <alt_cache_system_enable+0x90>
    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    1ebc:	e5131803 	ldr	r1, [r3, #-2051]	; 0xfffff7fd
    1ec0:	e3510000 	cmp	r1, #0
    1ec4:	1afffffa 	bne	1eb4 <alt_cache_system_enable+0x7c>
ALT_STATUS_CODE alt_cache_l2_disable(void)
{
    if (alt_cache_l2_is_enabled())
    {
        alt_cache_l2_purge_all();
        alt_write_word(ALT_MPUL2_CONTROL_ADDR, 0);
    1ec8:	e3a02000 	mov	r2, #0
    1ecc:	e3e03801 	mvn	r3, #65536	; 0x10000
    1ed0:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    if (l2_enabled)
    {
        alt_cache_l2_disable();
    }

    alt_setbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_PARITY_EN_SET_MSK);
    1ed4:	e3e01801 	mvn	r1, #65536	; 0x10000
    1ed8:	e5113efb 	ldr	r3, [r1, #-3835]	; 0xfffff105
    1edc:	e3833602 	orr	r3, r3, #2097152	; 0x200000
    1ee0:	e5013efb 	str	r3, [r1, #-3835]	; 0xfffff105
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    1ee4:	e5113eff 	ldr	r3, [r1, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    1ee8:	e3130001 	tst	r3, #1
    1eec:	1a000012 	bne	1f3c <alt_cache_system_enable+0x104>
    int i = 0;

    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);
    1ef0:	e5903000 	ldr	r3, [r0]
    1ef4:	e5013883 	str	r3, [r1, #-2179]	; 0xfffff77d

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    1ef8:	e5113883 	ldr	r3, [r1, #-2179]	; 0xfffff77d
    1efc:	e3530000 	cmp	r3, #0
    1f00:	13a03a01 	movne	r3, #4096	; 0x1000
    1f04:	1a000002 	bne	1f14 <alt_cache_system_enable+0xdc>
    1f08:	ea000004 	b	1f20 <alt_cache_system_enable+0xe8>
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ALL_TIMEOUT)
    1f0c:	e2533001 	subs	r3, r3, #1
    1f10:	0a000002 	beq	1f20 <alt_cache_system_enable+0xe8>
    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    1f14:	e5112883 	ldr	r2, [r1, #-2179]	; 0xfffff77d
    1f18:	e3520000 	cmp	r2, #0
    1f1c:	1afffffa 	bne	1f0c <alt_cache_system_enable+0xd4>
ALT_STATUS_CODE alt_cache_l2_enable(void)
{
    if (!alt_cache_l2_is_enabled())
    {
        alt_cache_l2_invalidate_all();
        alt_write_word(ALT_MPUL2_CONTROL_ADDR, ALT_MPUL2_CONTROL_EN_SET_MSK);
    1f20:	e3a02001 	mov	r2, #1
    1f24:	e3e03801 	mvn	r3, #65536	; 0x10000
    1f28:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    1f2c:	ea000002 	b	1f3c <alt_cache_system_enable+0x104>
    if (l2_enabled)
    {
        alt_cache_l2_disable();
    }

    alt_setbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_PARITY_EN_SET_MSK);
    1f30:	e5132efb 	ldr	r2, [r3, #-3835]	; 0xfffff105
    1f34:	e3822602 	orr	r2, r2, #2097152	; 0x200000
    1f38:	e5032efb 	str	r2, [r3, #-3835]	; 0xfffff105
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    1f3c:	e3e01801 	mvn	r1, #65536	; 0x10000
    1f40:	e5113eff 	ldr	r3, [r1, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    1f44:	e3130001 	tst	r3, #1
    1f48:	1a000008 	bne	1f70 <alt_cache_system_enable+0x138>
    int i = 0;

    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);
    1f4c:	e5903000 	ldr	r3, [r0]
    1f50:	e5013883 	str	r3, [r1, #-2179]	; 0xfffff77d

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    1f54:	e5113883 	ldr	r3, [r1, #-2179]	; 0xfffff77d
    1f58:	e3530000 	cmp	r3, #0
    1f5c:	13a03a01 	movne	r3, #4096	; 0x1000
    1f60:	1a000006 	bne	1f80 <alt_cache_system_enable+0x148>
ALT_STATUS_CODE alt_cache_l2_enable(void)
{
    if (!alt_cache_l2_is_enabled())
    {
        alt_cache_l2_invalidate_all();
        alt_write_word(ALT_MPUL2_CONTROL_ADDR, ALT_MPUL2_CONTROL_EN_SET_MSK);
    1f64:	e3a02001 	mov	r2, #1
    1f68:	e3e03801 	mvn	r3, #65536	; 0x10000
    1f6c:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    alt_cache_l2_prefetch_enable();
    alt_cache_l2_parity_enable();
    alt_cache_l2_enable();

    return ALT_E_SUCCESS;
}
    1f70:	e3a00000 	mov	r0, #0
    1f74:	e8bd8008 	pop	{r3, pc}

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ALL_TIMEOUT)
    1f78:	e2533001 	subs	r3, r3, #1
    1f7c:	0afffff8 	beq	1f64 <alt_cache_system_enable+0x12c>
    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    1f80:	e5112883 	ldr	r2, [r1, #-2179]	; 0xfffff77d
    1f84:	e3520000 	cmp	r2, #0
    1f88:	1afffffa 	bne	1f78 <alt_cache_system_enable+0x140>
    1f8c:	eafffff4 	b	1f64 <alt_cache_system_enable+0x12c>

00001f90 <alt_cache_l1_parity_disable>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1f90:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_parity_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_PARITYON_SET_MSK;
    1f94:	e3c33c02 	bic	r3, r3, #512	; 0x200
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    1f98:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_PARITYON_SET_MSK;
    actlr_write_helper(actlr);

    return ALT_E_SUCCESS;
}
    1f9c:	e3a00000 	mov	r0, #0
    1fa0:	e12fff1e 	bx	lr

00001fa4 <alt_cache_l1_parity_is_enabled>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    1fa4:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
    }
    else
    {
        return false;
    }
}
    1fa8:	e7e004d0 	ubfx	r0, r0, #9, #1
    1fac:	e12fff1e 	bx	lr

00001fb0 <alt_cache_l1_branch_enable>:
    __asm("MCR p15, 0, %[dummy], c7, c1, 6" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 6");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 6" : : "r" (dummy));
    1fb0:	e3a03000 	mov	r3, #0
    1fb4:	ee073fd1 	mcr	15, 0, r3, cr7, cr1, {6}
#endif

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    1fb8:	f57ff04f 	dsb	sy
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1fbc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
ALT_STATUS_CODE alt_cache_l1_branch_enable(void)
{
    uint32_t sctlr; 
    alt_cache_l1_branch_invalidate();
    sctlr = sctlr_read_helper();
    sctlr |= ALT_CPU_SCTLR_Z_SET_MSK;
    1fc0:	e3833b02 	orr	r3, r3, #2048	; 0x800
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1fc4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    sctlr = sctlr_read_helper();
    sctlr |= ALT_CPU_SCTLR_Z_SET_MSK;
    sctlr_write_helper(sctlr);

    return ALT_E_SUCCESS;
}
    1fc8:	e3a00000 	mov	r0, #0
    1fcc:	e12fff1e 	bx	lr

00001fd0 <alt_cache_l1_branch_disable>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1fd0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
}

ALT_STATUS_CODE alt_cache_l1_branch_disable(void)
{
    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_Z_SET_MSK;
    1fd4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    1fd8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_Z_SET_MSK;
    sctlr_write_helper(sctlr);

    return ALT_E_SUCCESS;
}
    1fdc:	e3a00000 	mov	r0, #0
    1fe0:	e12fff1e 	bx	lr

00001fe4 <alt_cache_l1_branch_invalidate>:
    __asm("MCR p15, 0, %[dummy], c7, c1, 6" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 6");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 6" : : "r" (dummy));
    1fe4:	e3a03000 	mov	r3, #0
    1fe8:	ee073fd1 	mcr	15, 0, r3, cr7, cr1, {6}
#endif

#if !defined(_MSC_VER)
	/* Ensure all cache maintenance operations complete before returning. */
	__asm("dsb");
    1fec:	f57ff04f 	dsb	sy
#endif

    return ALT_E_SUCCESS;
}
    1ff0:	e3a00000 	mov	r0, #0
    1ff4:	e12fff1e 	bx	lr

00001ff8 <alt_cache_l1_branch_is_enabled>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    1ff8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    }
    else
    {
        return false;
    }
}
    1ffc:	e7e005d0 	ubfx	r0, r0, #11, #1
    2000:	e12fff1e 	bx	lr

00002004 <alt_cache_l1_prefetch_enable>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    2004:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_prefetch_enable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr |= ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    2008:	e3833004 	orr	r3, r3, #4
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    200c:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    uint32_t actlr = actlr_read_helper();
    actlr |= ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    actlr_write_helper(actlr);

    return ALT_E_SUCCESS;
}
    2010:	e3a00000 	mov	r0, #0
    2014:	e12fff1e 	bx	lr

00002018 <alt_cache_l1_prefetch_disable>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    2018:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_prefetch_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    201c:	e3c33004 	bic	r3, r3, #4
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    2020:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    actlr_write_helper(actlr);

    return ALT_E_SUCCESS;
}
    2024:	e3a00000 	mov	r0, #0
    2028:	e12fff1e 	bx	lr

0000202c <alt_cache_l1_prefetch_is_enabled>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    202c:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
    }
    else
    {
        return false;
    }
}
    2030:	e7e00150 	ubfx	r0, r0, #2, #1
    2034:	e12fff1e 	bx	lr

00002038 <alt_cache_l2_init>:
{


    /* Query the cache characteristics */

    uint32_t auxctrl = alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR);
    2038:	e3e03801 	mvn	r3, #65536	; 0x10000
    203c:	e3022a3c 	movw	r2, #10812	; 0x2a3c
    2040:	e5130efb 	ldr	r0, [r3, #-3835]	; 0xfffff105

    if (auxctrl & ALT_MPUL2_AUX_CONTROL_ASSOCIATIVITY_SET_MSK)
    {
        alt_cache_l2_waymask = 0x0000ffff;
    2044:	e30fcfff 	movw	r12, #65535	; 0xffff
    2048:	e3402002 	movt	r2, #2
     * (Not needed as the associated lines are by default set to the instantiation parameters) */

    /* Invalidate by way all cache entries
     * (Not needed as it will be invalidated when L2 is enabled) */

    alt_write_word(ALT_MPUL2_TAG_RAM_CONTROL_ADDR,
    204c:	e3a01000 	mov	r1, #0

    /* Query the cache characteristics */

    uint32_t auxctrl = alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR);

    if (auxctrl & ALT_MPUL2_AUX_CONTROL_ASSOCIATIVITY_SET_MSK)
    2050:	e3100801 	tst	r0, #65536	; 0x10000
    
    /* Clear interrupts just in case. */
    alt_cache_l2_int_status_clear(ALT_CACHE_L2_INTERRUPT_ALL);

    return ALT_E_SUCCESS;
}
    2054:	e1a00001 	mov	r0, r1

    uint32_t auxctrl = alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR);

    if (auxctrl & ALT_MPUL2_AUX_CONTROL_ASSOCIATIVITY_SET_MSK)
    {
        alt_cache_l2_waymask = 0x0000ffff;
    2058:	03a0c0ff 	moveq	r12, #255	; 0xff
    205c:	e582c000 	str	r12, [r2]
    alt_write_word(ALT_MPUL2_TAG_RAM_CONTROL_ADDR,
                     ALT_MPUL2_TAG_RAM_CONTROL_WRITE_LATENCY_VALUE_SET(0)
                   | ALT_MPUL2_TAG_RAM_CONTROL_READ_LATENCY_VALUE_SET(0)
                   | ALT_MPUL2_TAG_RAM_CONTROL_SETUP_LATENCY_VALUE_SET(0));

    alt_write_word(ALT_MPUL2_DATA_RAM_CONTROL_ADDR,
    2060:	e3a02010 	mov	r2, #16
     * (Not needed as the associated lines are by default set to the instantiation parameters) */

    /* Invalidate by way all cache entries
     * (Not needed as it will be invalidated when L2 is enabled) */

    alt_write_word(ALT_MPUL2_TAG_RAM_CONTROL_ADDR,
    2064:	e5031ef7 	str	r1, [r3, #-3831]	; 0xfffff109
                     ALT_MPUL2_TAG_RAM_CONTROL_WRITE_LATENCY_VALUE_SET(0)
                   | ALT_MPUL2_TAG_RAM_CONTROL_READ_LATENCY_VALUE_SET(0)
                   | ALT_MPUL2_TAG_RAM_CONTROL_SETUP_LATENCY_VALUE_SET(0));

    alt_write_word(ALT_MPUL2_DATA_RAM_CONTROL_ADDR,
    2068:	e5032ef3 	str	r2, [r3, #-3827]	; 0xfffff10d
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    {
        return ALT_E_BAD_ARG;
    }

    alt_write_word(ALT_MPUL2_INT_CLEAR_ADDR, interrupt);
    206c:	e30021ff 	movw	r2, #511	; 0x1ff
    2070:	e5032ddf 	str	r2, [r3, #-3551]	; 0xfffff221
    
    /* Clear interrupts just in case. */
    alt_cache_l2_int_status_clear(ALT_CACHE_L2_INTERRUPT_ALL);

    return ALT_E_SUCCESS;
}
    2074:	e12fff1e 	bx	lr

00002078 <alt_cache_l2_uninit>:

ALT_STATUS_CODE alt_cache_l2_uninit(void)
{
    return ALT_E_SUCCESS;
}
    2078:	e3a00000 	mov	r0, #0
    207c:	e12fff1e 	bx	lr

00002080 <alt_cache_l2_prefetch_enable>:
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_setbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    2080:	e3e03801 	mvn	r3, #65536	; 0x10000

    return ALT_E_SUCCESS;
}
    2084:	e3a00000 	mov	r0, #0
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_setbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    2088:	e513209f 	ldr	r2, [r3, #-159]	; 0xffffff61
    208c:	e3822203 	orr	r2, r2, #805306368	; 0x30000000
    2090:	e503209f 	str	r2, [r3, #-159]	; 0xffffff61

    return ALT_E_SUCCESS;
}
    2094:	e12fff1e 	bx	lr

00002098 <alt_cache_l2_prefetch_disable>:
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_clrbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    2098:	e3e03801 	mvn	r3, #65536	; 0x10000

    return ALT_E_SUCCESS;
}
    209c:	e3a00000 	mov	r0, #0
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_clrbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    20a0:	e513209f 	ldr	r2, [r3, #-159]	; 0xffffff61
    20a4:	e3c22203 	bic	r2, r2, #805306368	; 0x30000000
    20a8:	e503209f 	str	r2, [r3, #-159]	; 0xffffff61

    return ALT_E_SUCCESS;
}
    20ac:	e12fff1e 	bx	lr

000020b0 <alt_cache_l2_prefetch_is_enabled>:
bool alt_cache_l2_prefetch_is_enabled(void)
{
    /* Query the Prefetch Control Register.
     / For more information, see L2C-310, section 3.3.14. */

    uint32_t pfctrl = alt_read_word(ALT_MPUL2_PREFETCH_CTRL_ADDR);
    20b0:	e3e03801 	mvn	r3, #65536	; 0x10000
    20b4:	e513009f 	ldr	r0, [r3, #-159]	; 0xffffff61

    if ((pfctrl & ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK) == ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK)
    20b8:	e2000203 	and	r0, r0, #805306368	; 0x30000000
    }
    else
    {
        return false;
    }
}
    20bc:	e2503203 	subs	r3, r0, #805306368	; 0x30000000
    20c0:	e2730000 	rsbs	r0, r3, #0
    20c4:	e0b00003 	adcs	r0, r0, r3
    20c8:	e12fff1e 	bx	lr

000020cc <alt_cache_l2_parity_enable>:
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    20cc:	e3e02801 	mvn	r2, #65536	; 0x10000
    20d0:	e5123eff 	ldr	r3, [r2, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    20d4:	e3130001 	tst	r3, #1
    20d8:	0a00002e 	beq	2198 <alt_cache_l2_parity_enable+0xcc>
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    20dc:	e5123eff 	ldr	r3, [r2, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    20e0:	e3130001 	tst	r3, #1
    20e4:	0a000011 	beq	2130 <alt_cache_l2_parity_enable+0x64>
    int i = 0;

    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);
    20e8:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    20ec:	e3403002 	movt	r3, #2
    20f0:	e5933000 	ldr	r3, [r3]
    20f4:	e5023803 	str	r3, [r2, #-2051]	; 0xfffff7fd

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    20f8:	e5123803 	ldr	r3, [r2, #-2051]	; 0xfffff7fd
    20fc:	e3530000 	cmp	r3, #0
    2100:	13a03801 	movne	r3, #65536	; 0x10000
    2104:	11a01002 	movne	r1, r2
    2108:	1a000002 	bne	2118 <alt_cache_l2_parity_enable+0x4c>
    210c:	ea000004 	b	2124 <alt_cache_l2_parity_enable+0x58>
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ALL_TIMEOUT)
    2110:	e2533001 	subs	r3, r3, #1
    2114:	0a000002 	beq	2124 <alt_cache_l2_parity_enable+0x58>
    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    2118:	e5112803 	ldr	r2, [r1, #-2051]	; 0xfffff7fd
    211c:	e3520000 	cmp	r2, #0
    2120:	1afffffa 	bne	2110 <alt_cache_l2_parity_enable+0x44>
ALT_STATUS_CODE alt_cache_l2_disable(void)
{
    if (alt_cache_l2_is_enabled())
    {
        alt_cache_l2_purge_all();
        alt_write_word(ALT_MPUL2_CONTROL_ADDR, 0);
    2124:	e3a02000 	mov	r2, #0
    2128:	e3e03801 	mvn	r3, #65536	; 0x10000
    212c:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    if (l2_enabled)
    {
        alt_cache_l2_disable();
    }

    alt_setbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_PARITY_EN_SET_MSK);
    2130:	e3e01801 	mvn	r1, #65536	; 0x10000
    2134:	e5113efb 	ldr	r3, [r1, #-3835]	; 0xfffff105
    2138:	e3833602 	orr	r3, r3, #2097152	; 0x200000
    213c:	e5013efb 	str	r3, [r1, #-3835]	; 0xfffff105
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    2140:	e5113eff 	ldr	r3, [r1, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    2144:	e3130001 	tst	r3, #1
    2148:	1a000015 	bne	21a4 <alt_cache_l2_parity_enable+0xd8>
    int i = 0;

    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);
    214c:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    2150:	e3403002 	movt	r3, #2
    2154:	e5933000 	ldr	r3, [r3]
    2158:	e5013883 	str	r3, [r1, #-2179]	; 0xfffff77d

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    215c:	e5113883 	ldr	r3, [r1, #-2179]	; 0xfffff77d
    2160:	e3530000 	cmp	r3, #0
    2164:	13a03a01 	movne	r3, #4096	; 0x1000
    2168:	1a000002 	bne	2178 <alt_cache_l2_parity_enable+0xac>
    216c:	ea000004 	b	2184 <alt_cache_l2_parity_enable+0xb8>
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ALL_TIMEOUT)
    2170:	e2533001 	subs	r3, r3, #1
    2174:	0a000002 	beq	2184 <alt_cache_l2_parity_enable+0xb8>
    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    2178:	e5112883 	ldr	r2, [r1, #-2179]	; 0xfffff77d
    217c:	e3520000 	cmp	r2, #0
    2180:	1afffffa 	bne	2170 <alt_cache_l2_parity_enable+0xa4>
ALT_STATUS_CODE alt_cache_l2_enable(void)
{
    if (!alt_cache_l2_is_enabled())
    {
        alt_cache_l2_invalidate_all();
        alt_write_word(ALT_MPUL2_CONTROL_ADDR, ALT_MPUL2_CONTROL_EN_SET_MSK);
    2184:	e3a02001 	mov	r2, #1
    2188:	e3e03801 	mvn	r3, #65536	; 0x10000
    218c:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    {
        alt_cache_l2_enable();
    }

    return ALT_E_SUCCESS;
}
    2190:	e3a00000 	mov	r0, #0
    2194:	e12fff1e 	bx	lr
    if (l2_enabled)
    {
        alt_cache_l2_disable();
    }

    alt_setbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_PARITY_EN_SET_MSK);
    2198:	e5123efb 	ldr	r3, [r2, #-3835]	; 0xfffff105
    219c:	e3833602 	orr	r3, r3, #2097152	; 0x200000
    21a0:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
    {
        alt_cache_l2_enable();
    }

    return ALT_E_SUCCESS;
}
    21a4:	e3a00000 	mov	r0, #0
    21a8:	e12fff1e 	bx	lr

000021ac <alt_cache_l2_parity_disable>:

ALT_STATUS_CODE alt_cache_l2_parity_disable(void)
{
    alt_clrbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_PARITY_EN_SET_MSK);
    21ac:	e3e03801 	mvn	r3, #65536	; 0x10000
    return ALT_E_SUCCESS;
}
    21b0:	e3a00000 	mov	r0, #0
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l2_parity_disable(void)
{
    alt_clrbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_PARITY_EN_SET_MSK);
    21b4:	e5132efb 	ldr	r2, [r3, #-3835]	; 0xfffff105
    21b8:	e3c22602 	bic	r2, r2, #2097152	; 0x200000
    21bc:	e5032efb 	str	r2, [r3, #-3835]	; 0xfffff105
    return ALT_E_SUCCESS;
}
    21c0:	e12fff1e 	bx	lr

000021c4 <alt_cache_l2_parity_is_enabled>:

bool alt_cache_l2_parity_is_enabled(void)
{
    uint32_t auxctrl = alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR);
    21c4:	e3e03801 	mvn	r3, #65536	; 0x10000
    21c8:	e5130efb 	ldr	r0, [r3, #-3835]	; 0xfffff105
    }
    else
    {
        return false;
    }
}
    21cc:	e7e00ad0 	ubfx	r0, r0, #21, #1
    21d0:	e12fff1e 	bx	lr

000021d4 <alt_cache_l2_enable>:
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    21d4:	e3e01801 	mvn	r1, #65536	; 0x10000
    21d8:	e5113eff 	ldr	r3, [r1, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    21dc:	e3130001 	tst	r3, #1
    21e0:	1a00000a 	bne	2210 <alt_cache_l2_enable+0x3c>
    int i = 0;

    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);
    21e4:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    21e8:	e3403002 	movt	r3, #2
    21ec:	e5933000 	ldr	r3, [r3]
    21f0:	e5013883 	str	r3, [r1, #-2179]	; 0xfffff77d

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    21f4:	e5113883 	ldr	r3, [r1, #-2179]	; 0xfffff77d
    21f8:	e3530000 	cmp	r3, #0
    21fc:	13a03a01 	movne	r3, #4096	; 0x1000
    2200:	1a000006 	bne	2220 <alt_cache_l2_enable+0x4c>
ALT_STATUS_CODE alt_cache_l2_enable(void)
{
    if (!alt_cache_l2_is_enabled())
    {
        alt_cache_l2_invalidate_all();
        alt_write_word(ALT_MPUL2_CONTROL_ADDR, ALT_MPUL2_CONTROL_EN_SET_MSK);
    2204:	e3a02001 	mov	r2, #1
    2208:	e3e03801 	mvn	r3, #65536	; 0x10000
    220c:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    }

    return ALT_E_SUCCESS;
}
    2210:	e3a00000 	mov	r0, #0
    2214:	e12fff1e 	bx	lr

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ALL_TIMEOUT)
    2218:	e2533001 	subs	r3, r3, #1
    221c:	0afffff8 	beq	2204 <alt_cache_l2_enable+0x30>
    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    2220:	e5112883 	ldr	r2, [r1, #-2179]	; 0xfffff77d
    2224:	e3520000 	cmp	r2, #0
    2228:	1afffffa 	bne	2218 <alt_cache_l2_enable+0x44>
    222c:	eafffff4 	b	2204 <alt_cache_l2_enable+0x30>

00002230 <alt_cache_l2_disable>:
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    2230:	e3e01801 	mvn	r1, #65536	; 0x10000
    2234:	e5113eff 	ldr	r3, [r1, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    2238:	e3130001 	tst	r3, #1
    223c:	0a00000a 	beq	226c <alt_cache_l2_disable+0x3c>
    int i = 0;

    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);
    2240:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    2244:	e3403002 	movt	r3, #2
    2248:	e5933000 	ldr	r3, [r3]
    224c:	e5013803 	str	r3, [r1, #-2051]	; 0xfffff7fd

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    2250:	e5113803 	ldr	r3, [r1, #-2051]	; 0xfffff7fd
    2254:	e3530000 	cmp	r3, #0
    2258:	13a03801 	movne	r3, #65536	; 0x10000
    225c:	1a000006 	bne	227c <alt_cache_l2_disable+0x4c>
ALT_STATUS_CODE alt_cache_l2_disable(void)
{
    if (alt_cache_l2_is_enabled())
    {
        alt_cache_l2_purge_all();
        alt_write_word(ALT_MPUL2_CONTROL_ADDR, 0);
    2260:	e3a02000 	mov	r2, #0
    2264:	e3e03801 	mvn	r3, #65536	; 0x10000
    2268:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    }

    return ALT_E_SUCCESS;
}
    226c:	e3a00000 	mov	r0, #0
    2270:	e12fff1e 	bx	lr

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ALL_TIMEOUT)
    2274:	e2533001 	subs	r3, r3, #1
    2278:	0afffff8 	beq	2260 <alt_cache_l2_disable+0x30>
    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    227c:	e5112803 	ldr	r2, [r1, #-2051]	; 0xfffff7fd
    2280:	e3520000 	cmp	r2, #0
    2284:	1afffffa 	bne	2274 <alt_cache_l2_disable+0x44>
    2288:	eafffff4 	b	2260 <alt_cache_l2_disable+0x30>

0000228c <alt_cache_l2_is_enabled>:
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    228c:	e3e03801 	mvn	r3, #65536	; 0x10000
    2290:	e5130eff 	ldr	r0, [r3, #-3839]	; 0xfffff101
    }
    else
    {
        return false;
    }
}
    2294:	e2000001 	and	r0, r0, #1
    2298:	e12fff1e 	bx	lr

0000229c <alt_cache_l2_sync>:
    int i = 0;

    /* Issue cache sync command, then wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CACHE_SYNC_ADDR, 0);
    229c:	e3a03000 	mov	r3, #0
    22a0:	e3e02801 	mvn	r2, #65536	; 0x10000
    22a4:	e50238cf 	str	r3, [r2, #-2255]	; 0xfffff731

    while (alt_read_word(ALT_MPUL2_CACHE_SYNC_ADDR))
    22a8:	e51208cf 	ldr	r0, [r2, #-2255]	; 0xfffff731
    22ac:	e1500003 	cmp	r0, r3
    22b0:	13a03080 	movne	r3, #128	; 0x80
    22b4:	1a000002 	bne	22c4 <alt_cache_l2_sync+0x28>
    22b8:	ea000007 	b	22dc <alt_cache_l2_sync+0x40>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_SYNC_TIMEOUT)
    22bc:	e2533001 	subs	r3, r3, #1
    22c0:	0a000003 	beq	22d4 <alt_cache_l2_sync+0x38>
    /* Issue cache sync command, then wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CACHE_SYNC_ADDR, 0);

    while (alt_read_word(ALT_MPUL2_CACHE_SYNC_ADDR))
    22c4:	e51208cf 	ldr	r0, [r2, #-2255]	; 0xfffff731
    22c8:	e3500000 	cmp	r0, #0
    22cc:	1afffffa 	bne	22bc <alt_cache_l2_sync+0x20>
    22d0:	e12fff1e 	bx	lr
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_SYNC_TIMEOUT)
        {
            return ALT_E_TMO;
    22d4:	e3e0000b 	mvn	r0, #11
    }

    dprintf("CACHE[L2]: Sync time = %d.\n", i);

    return ALT_E_SUCCESS;
}
    22d8:	e12fff1e 	bx	lr
    22dc:	e12fff1e 	bx	lr

000022e0 <alt_cache_l2_invalidate>:
ALT_STATUS_CODE alt_cache_l2_invalidate(void * paddress, size_t length)
{
    /* Verify preconditions:
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if (length == 0)
    22e0:	e3510000 	cmp	r1, #0
    22e4:	0a00001a 	beq	2354 <alt_cache_l2_invalidate+0x74>
    {
        return ALT_E_BAD_ARG;
    }
    if (((uintptr_t)paddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    22e8:	e310001f 	tst	r0, #31
    22ec:	1a000018 	bne	2354 <alt_cache_l2_invalidate+0x74>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    22f0:	e311001f 	tst	r1, #31
    22f4:	1a000016 	bne	2354 <alt_cache_l2_invalidate+0x74>
    uintptr_t pa;

    /* For each stride: Issue invalidate line by PA command, then wait for it
     / to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    22f8:	e0803001 	add	r3, r0, r1
    22fc:	e1500003 	cmp	r0, r3
    2300:	2a000004 	bcs	2318 <alt_cache_l2_invalidate+0x38>
    {
        alt_write_word(ALT_MPUL2_INV_PA_ADDR, pa);
    2304:	e3e02801 	mvn	r2, #65536	; 0x10000
    2308:	e502088f 	str	r0, [r2, #-2191]	; 0xfffff771
    uintptr_t pa;

    /* For each stride: Issue invalidate line by PA command, then wait for it
     / to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    230c:	e2800020 	add	r0, r0, #32
    2310:	e1500003 	cmp	r0, r3
    2314:	3afffffb 	bcc	2308 <alt_cache_l2_invalidate+0x28>
        alt_write_word(ALT_MPUL2_INV_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_INV_PA_ADDR))
    2318:	e3e02801 	mvn	r2, #65536	; 0x10000
    231c:	e512088f 	ldr	r0, [r2, #-2191]	; 0xfffff771
    2320:	e3500000 	cmp	r0, #0
    2324:	13a03080 	movne	r3, #128	; 0x80
    2328:	1a000002 	bne	2338 <alt_cache_l2_invalidate+0x58>
    232c:	ea000005 	b	2348 <alt_cache_l2_invalidate+0x68>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ADDR_TIMEOUT)
    2330:	e2533001 	subs	r3, r3, #1
    2334:	0a000004 	beq	234c <alt_cache_l2_invalidate+0x6c>
        alt_write_word(ALT_MPUL2_INV_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_INV_PA_ADDR))
    2338:	e512088f 	ldr	r0, [r2, #-2191]	; 0xfffff771
    233c:	e3500000 	cmp	r0, #0
    2340:	1afffffa 	bne	2330 <alt_cache_l2_invalidate+0x50>
    2344:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }

    return alt_cache_l2_invalidate_helper((uintptr_t)paddress, length);
}
    2348:	e12fff1e 	bx	lr
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ADDR_TIMEOUT)
        {
            return ALT_E_TMO;
    234c:	e3e0000b 	mvn	r0, #11
    2350:	e12fff1e 	bx	lr
    /* Verify preconditions:
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if (length == 0)
    {
        return ALT_E_BAD_ARG;
    2354:	e3e00008 	mvn	r0, #8
    2358:	e12fff1e 	bx	lr

0000235c <alt_cache_l2_invalidate_all>:
    int i = 0;

    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);
    235c:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    2360:	e3e02801 	mvn	r2, #65536	; 0x10000
    2364:	e3403002 	movt	r3, #2
    2368:	e5933000 	ldr	r3, [r3]
    236c:	e5023883 	str	r3, [r2, #-2179]	; 0xfffff77d

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    2370:	e5120883 	ldr	r0, [r2, #-2179]	; 0xfffff77d
    2374:	e3500000 	cmp	r0, #0
    2378:	13a03a01 	movne	r3, #4096	; 0x1000
    237c:	1a000002 	bne	238c <alt_cache_l2_invalidate_all+0x30>
    2380:	ea000007 	b	23a4 <alt_cache_l2_invalidate_all+0x48>
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ALL_TIMEOUT)
    2384:	e2533001 	subs	r3, r3, #1
    2388:	0a000003 	beq	239c <alt_cache_l2_invalidate_all+0x40>
    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    238c:	e5120883 	ldr	r0, [r2, #-2179]	; 0xfffff77d
    2390:	e3500000 	cmp	r0, #0
    2394:	1afffffa 	bne	2384 <alt_cache_l2_invalidate_all+0x28>
    2398:	e12fff1e 	bx	lr
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ALL_TIMEOUT)
        {
            return ALT_E_TMO;
    239c:	e3e0000b 	mvn	r0, #11
    }

    dprintf("CACHE[L2]: Invalidate All time = %d.\n", i);

    return ALT_E_SUCCESS;
}
    23a0:	e12fff1e 	bx	lr
    23a4:	e12fff1e 	bx	lr

000023a8 <alt_cache_l2_clean>:
ALT_STATUS_CODE alt_cache_l2_clean(void * paddress, size_t length)
{
    /* Verify preconditions:
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if (length == 0)
    23a8:	e3510000 	cmp	r1, #0
    23ac:	0a00001a 	beq	241c <alt_cache_l2_clean+0x74>
    {
        return ALT_E_BAD_ARG;
    }
    if (((uintptr_t)paddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    23b0:	e310001f 	tst	r0, #31
    23b4:	1a000018 	bne	241c <alt_cache_l2_clean+0x74>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    23b8:	e311001f 	tst	r1, #31
    23bc:	1a000016 	bne	241c <alt_cache_l2_clean+0x74>
    uintptr_t pa;

    /* For each stride: Issue clean line by PA command, then wait for it to
     / complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    23c0:	e0803001 	add	r3, r0, r1
    23c4:	e1500003 	cmp	r0, r3
    23c8:	2a000004 	bcs	23e0 <alt_cache_l2_clean+0x38>
    {
        alt_write_word(ALT_MPUL2_CLEAN_PA_ADDR, pa);
    23cc:	e3e02801 	mvn	r2, #65536	; 0x10000
    23d0:	e502084f 	str	r0, [r2, #-2127]	; 0xfffff7b1
    uintptr_t pa;

    /* For each stride: Issue clean line by PA command, then wait for it to
     / complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    23d4:	e2800020 	add	r0, r0, #32
    23d8:	e1500003 	cmp	r0, r3
    23dc:	3afffffb 	bcc	23d0 <alt_cache_l2_clean+0x28>
        alt_write_word(ALT_MPUL2_CLEAN_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_CLEAN_PA_ADDR) & ALT_MPUL2_COMMON_PA_C_SET_MSK)
    23e0:	e3e02801 	mvn	r2, #65536	; 0x10000
    23e4:	e512084f 	ldr	r0, [r2, #-2127]	; 0xfffff7b1
    23e8:	e2100001 	ands	r0, r0, #1
    23ec:	13a03080 	movne	r3, #128	; 0x80
    23f0:	1a000002 	bne	2400 <alt_cache_l2_clean+0x58>
    23f4:	ea000005 	b	2410 <alt_cache_l2_clean+0x68>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_CLEAN_ADDR_TIMEOUT)
    23f8:	e2533001 	subs	r3, r3, #1
    23fc:	0a000004 	beq	2414 <alt_cache_l2_clean+0x6c>
        alt_write_word(ALT_MPUL2_CLEAN_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_CLEAN_PA_ADDR) & ALT_MPUL2_COMMON_PA_C_SET_MSK)
    2400:	e512084f 	ldr	r0, [r2, #-2127]	; 0xfffff7b1
    2404:	e2100001 	ands	r0, r0, #1
    2408:	1afffffa 	bne	23f8 <alt_cache_l2_clean+0x50>
    240c:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }

    return alt_cache_l2_clean_helper((uintptr_t)paddress, length);
}
    2410:	e12fff1e 	bx	lr
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_CLEAN_ADDR_TIMEOUT)
        {
            return ALT_E_TMO;
    2414:	e3e0000b 	mvn	r0, #11
    2418:	e12fff1e 	bx	lr
    /* Verify preconditions:
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if (length == 0)
    {
        return ALT_E_BAD_ARG;
    241c:	e3e00008 	mvn	r0, #8
    2420:	e12fff1e 	bx	lr

00002424 <alt_cache_l2_clean_all>:
    int i = 0;

    /* Clean by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_WAY_ADDR, alt_cache_l2_waymask);
    2424:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    2428:	e3e02801 	mvn	r2, #65536	; 0x10000
    242c:	e3403002 	movt	r3, #2
    2430:	e5933000 	ldr	r3, [r3]
    2434:	e5023843 	str	r3, [r2, #-2115]	; 0xfffff7bd

    while (alt_read_word(ALT_MPUL2_CLEAN_WAY_ADDR))
    2438:	e5120843 	ldr	r0, [r2, #-2115]	; 0xfffff7bd
    243c:	e3500000 	cmp	r0, #0
    2440:	13a03801 	movne	r3, #65536	; 0x10000
    2444:	1a000002 	bne	2454 <alt_cache_l2_clean_all+0x30>
    2448:	ea000007 	b	246c <alt_cache_l2_clean_all+0x48>
    {
        /*Background operation still in progress. */

        if (i == ALT_CACHE_L2_CLEAN_ALL_TIMEOUT)
    244c:	e2533001 	subs	r3, r3, #1
    2450:	0a000003 	beq	2464 <alt_cache_l2_clean_all+0x40>
    /* Clean by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_CLEAN_WAY_ADDR))
    2454:	e5120843 	ldr	r0, [r2, #-2115]	; 0xfffff7bd
    2458:	e3500000 	cmp	r0, #0
    245c:	1afffffa 	bne	244c <alt_cache_l2_clean_all+0x28>
    2460:	e12fff1e 	bx	lr
    {
        /*Background operation still in progress. */

        if (i == ALT_CACHE_L2_CLEAN_ALL_TIMEOUT)
        {
            return ALT_E_TMO;
    2464:	e3e0000b 	mvn	r0, #11
    }

    dprintf("CACHE[L2]: Invalidate All time = %d.\n", i);

    return ALT_E_SUCCESS;
}
    2468:	e12fff1e 	bx	lr
    246c:	e12fff1e 	bx	lr

00002470 <alt_cache_l2_purge>:
ALT_STATUS_CODE alt_cache_l2_purge(void * paddress, size_t length)
{
    /* Verify preconditions:
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if (length == 0)
    2470:	e3510000 	cmp	r1, #0
    2474:	0a00001a 	beq	24e4 <alt_cache_l2_purge+0x74>
    {
        return ALT_E_BAD_ARG;
    }
    if (((uintptr_t)paddress & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    2478:	e310001f 	tst	r0, #31
    247c:	1a000018 	bne	24e4 <alt_cache_l2_purge+0x74>
    {
        return ALT_E_BAD_ARG;
    }
    if ((length & (ALT_CACHE_LINE_SIZE - 1)) != 0)
    2480:	e311001f 	tst	r1, #31
    2484:	1a000016 	bne	24e4 <alt_cache_l2_purge+0x74>
    uintptr_t pa;

    /* For each stride: Issue clean and invalidate line by PA command, then
     / wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    2488:	e0803001 	add	r3, r0, r1
    248c:	e1500003 	cmp	r0, r3
    2490:	2a000004 	bcs	24a8 <alt_cache_l2_purge+0x38>
    {
        alt_write_word(ALT_MPUL2_CLEAN_INV_PA_ADDR, pa);
    2494:	e3e02801 	mvn	r2, #65536	; 0x10000
    2498:	e502080f 	str	r0, [r2, #-2063]	; 0xfffff7f1
    uintptr_t pa;

    /* For each stride: Issue clean and invalidate line by PA command, then
     / wait for it to complete by polling the same register.
     / For more information, see L2C-310, section 3.3.10. */
    for (pa = paddress; pa < paddress + length; pa += ALT_CACHE_LINE_SIZE)
    249c:	e2800020 	add	r0, r0, #32
    24a0:	e1500003 	cmp	r0, r3
    24a4:	3afffffb 	bcc	2498 <alt_cache_l2_purge+0x28>
        alt_write_word(ALT_MPUL2_CLEAN_INV_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_PA_ADDR) & ALT_MPUL2_COMMON_PA_C_SET_MSK)
    24a8:	e3e02801 	mvn	r2, #65536	; 0x10000
    24ac:	e512080f 	ldr	r0, [r2, #-2063]	; 0xfffff7f1
    24b0:	e2100001 	ands	r0, r0, #1
    24b4:	13a03080 	movne	r3, #128	; 0x80
    24b8:	1a000002 	bne	24c8 <alt_cache_l2_purge+0x58>
    24bc:	ea000005 	b	24d8 <alt_cache_l2_purge+0x68>
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ADDR_TIMEOUT)
    24c0:	e2533001 	subs	r3, r3, #1
    24c4:	0a000004 	beq	24dc <alt_cache_l2_purge+0x6c>
        alt_write_word(ALT_MPUL2_CLEAN_INV_PA_ADDR, pa);

        ++seg;
    }

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_PA_ADDR) & ALT_MPUL2_COMMON_PA_C_SET_MSK)
    24c8:	e512080f 	ldr	r0, [r2, #-2063]	; 0xfffff7f1
    24cc:	e2100001 	ands	r0, r0, #1
    24d0:	1afffffa 	bne	24c0 <alt_cache_l2_purge+0x50>
    24d4:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }

    return alt_cache_l2_purge_helper((uintptr_t)paddress, length);
}
    24d8:	e12fff1e 	bx	lr
    {
        /* Atomic operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ADDR_TIMEOUT)
        {
            return ALT_E_TMO;
    24dc:	e3e0000b 	mvn	r0, #11
    24e0:	e12fff1e 	bx	lr
    /* Verify preconditions:
     /  - length is non-zero
     /  - address and length are on the cache boundaries */
    if (length == 0)
    {
        return ALT_E_BAD_ARG;
    24e4:	e3e00008 	mvn	r0, #8
    24e8:	e12fff1e 	bx	lr

000024ec <alt_cache_l2_purge_all>:
    int i = 0;

    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);
    24ec:	e3023a3c 	movw	r3, #10812	; 0x2a3c
    24f0:	e3e02801 	mvn	r2, #65536	; 0x10000
    24f4:	e3403002 	movt	r3, #2
    24f8:	e5933000 	ldr	r3, [r3]
    24fc:	e5023803 	str	r3, [r2, #-2051]	; 0xfffff7fd

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    2500:	e5120803 	ldr	r0, [r2, #-2051]	; 0xfffff7fd
    2504:	e3500000 	cmp	r0, #0
    2508:	13a03801 	movne	r3, #65536	; 0x10000
    250c:	1a000002 	bne	251c <alt_cache_l2_purge_all+0x30>
    2510:	ea000007 	b	2534 <alt_cache_l2_purge_all+0x48>
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ALL_TIMEOUT)
    2514:	e2533001 	subs	r3, r3, #1
    2518:	0a000003 	beq	252c <alt_cache_l2_purge_all+0x40>
    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    251c:	e5120803 	ldr	r0, [r2, #-2051]	; 0xfffff7fd
    2520:	e3500000 	cmp	r0, #0
    2524:	1afffffa 	bne	2514 <alt_cache_l2_purge_all+0x28>
    2528:	e12fff1e 	bx	lr
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ALL_TIMEOUT)
        {
            return ALT_E_TMO;
    252c:	e3e0000b 	mvn	r0, #11
    }

    dprintf("CACHE[L2]: Purge All time = %d.\n", i);

    return ALT_E_SUCCESS;
}
    2530:	e12fff1e 	bx	lr
    2534:	e12fff1e 	bx	lr

00002538 <alt_cache_l2_int_enable>:

ALT_STATUS_CODE alt_cache_l2_int_enable(uint32_t interrupt)
{
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    2538:	e1a03b80 	lsl	r3, r0, #23

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l2_int_enable(uint32_t interrupt)
{
    253c:	e1a02000 	mov	r2, r0
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    2540:	e1a03ba3 	lsr	r3, r3, #23
    2544:	e3530000 	cmp	r3, #0
    {
        return ALT_E_BAD_ARG;
    }

    alt_setbits_word(ALT_MPUL2_INT_MASK_ADDR, interrupt);
    2548:	13e03801 	mvnne	r3, #65536	; 0x10000
    return ALT_E_SUCCESS;
    254c:	13a00000 	movne	r0, #0
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    {
        return ALT_E_BAD_ARG;
    }

    alt_setbits_word(ALT_MPUL2_INT_MASK_ADDR, interrupt);
    2550:	15131deb 	ldrne	r1, [r3, #-3563]	; 0xfffff215
ALT_STATUS_CODE alt_cache_l2_int_enable(uint32_t interrupt)
{
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    {
        return ALT_E_BAD_ARG;
    2554:	03e00008 	mvneq	r0, #8
    }

    alt_setbits_word(ALT_MPUL2_INT_MASK_ADDR, interrupt);
    2558:	11822001 	orrne	r2, r2, r1
    255c:	15032deb 	strne	r2, [r3, #-3563]	; 0xfffff215
    return ALT_E_SUCCESS;
}
    2560:	e12fff1e 	bx	lr

00002564 <alt_cache_l2_int_disable>:

ALT_STATUS_CODE alt_cache_l2_int_disable(uint32_t interrupt)
{
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    2564:	e1a03b80 	lsl	r3, r0, #23
    alt_setbits_word(ALT_MPUL2_INT_MASK_ADDR, interrupt);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_cache_l2_int_disable(uint32_t interrupt)
{
    2568:	e1a02000 	mov	r2, r0
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    256c:	e1a03ba3 	lsr	r3, r3, #23
    2570:	e3530000 	cmp	r3, #0
    {
        return ALT_E_BAD_ARG;
    }

    alt_clrbits_word(ALT_MPUL2_INT_MASK_ADDR, interrupt);
    2574:	13e03801 	mvnne	r3, #65536	; 0x10000
    return ALT_E_SUCCESS;
    2578:	13a00000 	movne	r0, #0
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    {
        return ALT_E_BAD_ARG;
    }

    alt_clrbits_word(ALT_MPUL2_INT_MASK_ADDR, interrupt);
    257c:	15131deb 	ldrne	r1, [r3, #-3563]	; 0xfffff215
ALT_STATUS_CODE alt_cache_l2_int_disable(uint32_t interrupt)
{
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    {
        return ALT_E_BAD_ARG;
    2580:	03e00008 	mvneq	r0, #8
    }

    alt_clrbits_word(ALT_MPUL2_INT_MASK_ADDR, interrupt);
    2584:	11c12002 	bicne	r2, r1, r2
    2588:	15032deb 	strne	r2, [r3, #-3563]	; 0xfffff215
    return ALT_E_SUCCESS;
}
    258c:	e12fff1e 	bx	lr

00002590 <alt_cache_l2_int_status_get>:

uint32_t alt_cache_l2_int_status_get(void)
{
    return alt_read_word(ALT_MPUL2_INT_MASK_STATUS_ADDR);
    2590:	e3e03801 	mvn	r3, #65536	; 0x10000
    2594:	e5130de7 	ldr	r0, [r3, #-3559]	; 0xfffff219
}
    2598:	e12fff1e 	bx	lr

0000259c <alt_cache_l2_int_raw_status_get>:

uint32_t alt_cache_l2_int_raw_status_get(void)
{
    return alt_read_word(ALT_MPUL2_INT_RAW_STATUS_ADDR);
    259c:	e3e03801 	mvn	r3, #65536	; 0x10000
    25a0:	e5130de3 	ldr	r0, [r3, #-3555]	; 0xfffff21d
}
    25a4:	e12fff1e 	bx	lr

000025a8 <alt_cache_l2_int_status_clear>:

ALT_STATUS_CODE alt_cache_l2_int_status_clear(uint32_t interrupt)
{
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    25a8:	e1a03b80 	lsl	r3, r0, #23
{
    return alt_read_word(ALT_MPUL2_INT_RAW_STATUS_ADDR);
}

ALT_STATUS_CODE alt_cache_l2_int_status_clear(uint32_t interrupt)
{
    25ac:	e1a02000 	mov	r2, r0
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    25b0:	e1a03ba3 	lsr	r3, r3, #23
    25b4:	e3530000 	cmp	r3, #0
    {
        return ALT_E_BAD_ARG;
    }

    alt_write_word(ALT_MPUL2_INT_CLEAR_ADDR, interrupt);
    25b8:	13e03801 	mvnne	r3, #65536	; 0x10000
    return ALT_E_SUCCESS;
    25bc:	13a00000 	movne	r0, #0
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    {
        return ALT_E_BAD_ARG;
    }

    alt_write_word(ALT_MPUL2_INT_CLEAR_ADDR, interrupt);
    25c0:	15032ddf 	strne	r2, [r3, #-3551]	; 0xfffff221
ALT_STATUS_CODE alt_cache_l2_int_status_clear(uint32_t interrupt)
{
    /* Validate the interrupt mask */
    if ((interrupt & ALT_CACHE_L2_INTERRUPT_ALL) == 0)
    {
        return ALT_E_BAD_ARG;
    25c4:	03e00008 	mvneq	r0, #8
    }

    alt_write_word(ALT_MPUL2_INT_CLEAR_ADDR, interrupt);
    return ALT_E_SUCCESS;
}
    25c8:	e12fff1e 	bx	lr

#if !defined(_MSC_VER)
__attribute__((weak)) ALT_STATUS_CODE alt_int_dist_pending_clear(ALT_INT_INTERRUPT_t int_id)
{
    return ALT_E_SUCCESS;
}
    25cc:	e3a00000 	mov	r0, #0
    25d0:	e12fff1e 	bx	lr

000025d4 <alt_cache_l2_ecc_start>:

ALT_STATUS_CODE alt_cache_l2_ecc_start(void * block, size_t size)
{
#if defined(soc_cv_av)
    
    uint32_t way_size = (8 * 1024) << ALT_MPUL2_AUX_CONTROL_WAYSIZE_VALUE_GET(alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR));
    25d4:	e3e03801 	mvn	r3, #65536	; 0x10000
    return affinity & 0xFF;
}
#endif

ALT_STATUS_CODE alt_cache_l2_ecc_start(void * block, size_t size)
{
    25d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
#if defined(soc_cv_av)
    
    uint32_t way_size = (8 * 1024) << ALT_MPUL2_AUX_CONTROL_WAYSIZE_VALUE_GET(alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR));
    25dc:	e5132efb 	ldr	r2, [r3, #-3835]	; 0xfffff105
    25e0:	e3a04a02 	mov	r4, #8192	; 0x2000
    return affinity & 0xFF;
}
#endif

ALT_STATUS_CODE alt_cache_l2_ecc_start(void * block, size_t size)
{
    25e4:	e24dd014 	sub	sp, sp, #20
    25e8:	e58d0000 	str	r0, [sp]
#if defined(soc_cv_av)
    
    uint32_t way_size = (8 * 1024) << ALT_MPUL2_AUX_CONTROL_WAYSIZE_VALUE_GET(alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR));
    25ec:	e7e228d2 	ubfx	r2, r2, #17, #3
    25f0:	e1a04214 	lsl	r4, r4, r2

    /* Add 32 KiB to the scrubbing size to account for effects of the L1 on scrubbing. */
    uint32_t scrub_way_size = way_size + (32 * 1024);
    25f4:	e2844902 	add	r4, r4, #32768	; 0x8000

    uint32_t cpu_affinity;
    int way_count;
    int way_lock;

    if (size < scrub_way_size)
    25f8:	e1540001 	cmp	r4, r1
    25fc:	8a000074 	bhi	27d4 <alt_cache_l2_ecc_start+0x200>
    return ALT_E_SUCCESS;
}

bool alt_cache_l2_is_enabled(void)
{
    uint32_t ctrl = alt_read_word(ALT_MPUL2_CONTROL_ADDR);
    2600:	e5133eff 	ldr	r3, [r3, #-3839]	; 0xfffff101
    if ((ctrl & ALT_MPUL2_CONTROL_EN_SET_MSK) != 0)
    2604:	e3130001 	tst	r3, #1
    2608:	0a000071 	beq	27d4 <alt_cache_l2_ecc_start+0x200>
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    260c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Query SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_I_SET_MSK) != 0 )
    2610:	e2132a01 	ands	r2, r3, #4096	; 0x1000
    uint32_t way_size = (8 * 1024) << ALT_MPUL2_AUX_CONTROL_WAYSIZE_VALUE_GET(alt_read_word(ALT_MPUL2_AUX_CONTROL_ADDR));

    /* Add 32 KiB to the scrubbing size to account for effects of the L1 on scrubbing. */
    uint32_t scrub_way_size = way_size + (32 * 1024);

    bool l1_icache   = false;
    2614:	058d200c 	streq	r2, [sp, #12]
{
    /* Query SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ( (sctlr & ALT_CPU_SCTLR_I_SET_MSK) != 0 )
    2618:	0a000003 	beq	262c <alt_cache_l2_ecc_start+0x58>
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    sctlr &= ~ALT_CPU_SCTLR_I_SET_MSK;
    261c:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    2620:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
        return ALT_E_ERROR;
    }

    if (alt_cache_l1_instruction_is_enabled() == true)
    {
        l1_icache = true;
    2624:	e3a01001 	mov	r1, #1
    2628:	e58d100c 	str	r1, [sp, #12]
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    262c:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

bool alt_cache_l1_prefetch_is_enabled(void)
{
    uint32_t actlr = actlr_read_helper();
    if ((actlr & ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK) != 0)
    2630:	e2132004 	ands	r2, r3, #4
    2634:	1a000090 	bne	287c <alt_cache_l2_ecc_start+0x2a8>

    /* Add 32 KiB to the scrubbing size to account for effects of the L1 on scrubbing. */
    uint32_t scrub_way_size = way_size + (32 * 1024);

    bool l1_icache   = false;
    bool l1_prefetch = false;
    2638:	e58d2004 	str	r2, [sp, #4]
bool alt_cache_l2_prefetch_is_enabled(void)
{
    /* Query the Prefetch Control Register.
     / For more information, see L2C-310, section 3.3.14. */

    uint32_t pfctrl = alt_read_word(ALT_MPUL2_PREFETCH_CTRL_ADDR);
    263c:	e3e03801 	mvn	r3, #65536	; 0x10000
    2640:	e513209f 	ldr	r2, [r3, #-159]	; 0xffffff61

    if ((pfctrl & ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK) == ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK)
    2644:	e2022203 	and	r2, r2, #805306368	; 0x30000000
    2648:	e3520203 	cmp	r2, #805306368	; 0x30000000
    264c:	0a00008f 	beq	2890 <alt_cache_l2_ecc_start+0x2bc>
    /* Add 32 KiB to the scrubbing size to account for effects of the L1 on scrubbing. */
    uint32_t scrub_way_size = way_size + (32 * 1024);

    bool l1_icache   = false;
    bool l1_prefetch = false;
    bool l2_prefetch = false;
    2650:	e3a01000 	mov	r1, #0
    2654:	e58d1008 	str	r1, [sp, #8]
    int i = 0;

    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);
    2658:	e3027a3c 	movw	r7, #10812	; 0x2a3c
    265c:	e3e01801 	mvn	r1, #65536	; 0x10000
    2660:	e3407002 	movt	r7, #2
    2664:	e5973000 	ldr	r3, [r7]
    2668:	e5013803 	str	r3, [r1, #-2051]	; 0xfffff7fd

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    266c:	e5113803 	ldr	r3, [r1, #-2051]	; 0xfffff7fd
    2670:	e3530000 	cmp	r3, #0
    2674:	13a03801 	movne	r3, #65536	; 0x10000
    2678:	1a000002 	bne	2688 <alt_cache_l2_ecc_start+0xb4>
    267c:	ea000004 	b	2694 <alt_cache_l2_ecc_start+0xc0>
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_PURGE_ALL_TIMEOUT)
    2680:	e2533001 	subs	r3, r3, #1
    2684:	0a000002 	beq	2694 <alt_cache_l2_ecc_start+0xc0>
    /*Clean and invalidate by way, all ways.
    /  For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_CLEAN_INV_WAY_ADDR))
    2688:	e5112803 	ldr	r2, [r1, #-2051]	; 0xfffff7fd
    268c:	e3520000 	cmp	r2, #0
    2690:	1afffffa 	bne	2680 <alt_cache_l2_ecc_start+0xac>
        alt_cache_l2_prefetch_disable();
    }

    /* inline'ed alt_cache_l2_disable(); // This will invalidate all L2 entries */
    alt_cache_l2_purge_all();
    alt_write_word(ALT_MPUL2_CONTROL_ADDR, 0);
    2694:	e3e03801 	mvn	r3, #65536	; 0x10000
    2698:	e3a02000 	mov	r2, #0
    269c:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    /* Enable "Full line of zero" feature of the L2C.
     * See L2C-310, section 2.5.5, "Full line of zero write". */
    alt_setbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_FULLLINEOFZERO_EN_SET_MSK);

    /* ECC should be enabled before L2 is enabled. (NPP MPU, section 4.3, item 1) */
    alt_write_word(ALT_SYSMGR_ECC_L2_ADDR, ALT_SYSMGR_ECC_L2_EN_SET_MSK);
    26a0:	e3081fff 	movw	r1, #36863	; 0x8fff
    alt_cache_l2_purge_all();
    alt_write_word(ALT_MPUL2_CONTROL_ADDR, 0);

    /* Enable "Full line of zero" feature of the L2C.
     * See L2C-310, section 2.5.5, "Full line of zero write". */
    alt_setbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_FULLLINEOFZERO_EN_SET_MSK);
    26a4:	e513cefb 	ldr	r12, [r3, #-3835]	; 0xfffff105

    /* ECC should be enabled before L2 is enabled. (NPP MPU, section 4.3, item 1) */
    alt_write_word(ALT_SYSMGR_ECC_L2_ADDR, ALT_SYSMGR_ECC_L2_EN_SET_MSK);
    26a8:	e3a02001 	mov	r2, #1
    26ac:	e34f1fd0 	movt	r1, #65488	; 0xffd0
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    26b0:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
    alt_cache_l2_purge_all();
    alt_write_word(ALT_MPUL2_CONTROL_ADDR, 0);

    /* Enable "Full line of zero" feature of the L2C.
     * See L2C-310, section 2.5.5, "Full line of zero write". */
    alt_setbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_FULLLINEOFZERO_EN_SET_MSK);
    26b4:	e18cc002 	orr	r12, r12, r2
     * No need to invalidate all; the previous L2 disable should have purged everything. */
    alt_write_word(ALT_MPUL2_CONTROL_ADDR, ALT_MPUL2_CONTROL_EN_SET_MSK);

    /* Enable "Full line of zero" feature of the A9.
     * See Cortex-A9 TRM, section 4.3.10. */
    actlr_write_helper(actlr_read_helper() | ALT_CPU_ACTLR_WRITEFULLLINEZEROS_SET_MSK);
    26b8:	e3800008 	orr	r0, r0, #8
    alt_cache_l2_purge_all();
    alt_write_word(ALT_MPUL2_CONTROL_ADDR, 0);

    /* Enable "Full line of zero" feature of the L2C.
     * See L2C-310, section 2.5.5, "Full line of zero write". */
    alt_setbits_word(ALT_MPUL2_AUX_CONTROL_ADDR, ALT_MPUL2_AUX_CONTROL_FULLLINEOFZERO_EN_SET_MSK);
    26bc:	e503cefb 	str	r12, [r3, #-3835]	; 0xfffff105

    /* ECC should be enabled before L2 is enabled. (NPP MPU, section 4.3, item 1) */
    alt_write_word(ALT_SYSMGR_ECC_L2_ADDR, ALT_SYSMGR_ECC_L2_EN_SET_MSK);
    26c0:	e5012ebf 	str	r2, [r1, #-3775]	; 0xfffff141

    /* inline'ed alt_cache_l2_enable();
     * No need to invalidate all; the previous L2 disable should have purged everything. */
    alt_write_word(ALT_MPUL2_CONTROL_ADDR, ALT_MPUL2_CONTROL_EN_SET_MSK);
    26c4:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    26c8:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, affinity,    c0, c0, 5");
#elif defined(_MSC_VER)
	affinity = 0;
#else
    __asm("MRC p15, 0, %0,          c0, c0, 5" : "=r" (affinity));
    26cc:	ee102fb0 	mrc	15, 0, r2, cr0, cr0, {5}
#endif

    return affinity & 0xFF;
    26d0:	e6ef2072 	uxtb	r2, r2
    actlr_write_helper(actlr_read_helper() | ALT_CPU_ACTLR_WRITEFULLLINEZEROS_SET_MSK);

    cpu_affinity = get_current_cpu_num();

    /* Loop through all ways for the lock by master configuration. */
    way_count = (alt_cache_l2_waymask == 0x0000ffff) ? 16 : 8;
    26d4:	e5973000 	ldr	r3, [r7]
    26d8:	e30fbfff 	movw	r11, #65535	; 0xffff
    26dc:	e1a04124 	lsr	r4, r4, #2
    26e0:	e1a08182 	lsl	r8, r2, #3
    26e4:	e2822e12 	add	r2, r2, #288	; 0x120
    26e8:	e1a0a182 	lsl	r10, r2, #3
    26ec:	e153000b 	cmp	r3, r11
    26f0:	e2888c09 	add	r8, r8, #2304	; 0x900

    for (way_lock = 0; way_lock < way_count; ++way_lock)
    26f4:	e3a06000 	mov	r6, #0
    26f8:	e2888004 	add	r8, r8, #4
    actlr_write_helper(actlr_read_helper() | ALT_CPU_ACTLR_WRITEFULLLINEZEROS_SET_MSK);

    cpu_affinity = get_current_cpu_num();

    /* Loop through all ways for the lock by master configuration. */
    way_count = (alt_cache_l2_waymask == 0x0000ffff) ? 16 : 8;
    26fc:	03a0b010 	moveq	r11, #16
    2700:	13a0b008 	movne	r11, #8
    2704:	e24aaa11 	sub	r10, r10, #69632	; 0x11000
    2708:	e2488a11 	sub	r8, r8, #69632	; 0x11000
    {
        register uint32_t * block2;
        register int i;

        /* Lock the current way for Data and Instruction. */
        alt_write_word(ALT_MPUL2_D_LOCKDOWNx_ADDR(cpu_affinity), ~(1 << way_lock) & alt_cache_l2_waymask);
    270c:	e3a09001 	mov	r9, #1
    int i = 0;

    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);
    2710:	e3e0c801 	mvn	r12, #65536	; 0x10000

    return affinity & 0xFF;
}
#endif

ALT_STATUS_CODE alt_cache_l2_ecc_start(void * block, size_t size)
    2714:	e2445007 	sub	r5, r4, #7

        /* Loop through all words in the block */
        block2 = block;
        for (i = 0; i < (scrub_way_size / sizeof(*block2)); i++)
        {
            *block2 = 0;
    2718:	e1a02006 	mov	r2, r6
    {
        register uint32_t * block2;
        register int i;

        /* Lock the current way for Data and Instruction. */
        alt_write_word(ALT_MPUL2_D_LOCKDOWNx_ADDR(cpu_affinity), ~(1 << way_lock) & alt_cache_l2_waymask);
    271c:	e1c31619 	bic	r1, r3, r9, lsl r6
    2720:	e58a1000 	str	r1, [r10]
        alt_write_word(ALT_MPUL2_I_LOCKDOWNx_ADDR(cpu_affinity), ~(1 << way_lock) & alt_cache_l2_waymask);
    2724:	e5881000 	str	r1, [r8]
    int i = 0;

    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);
    2728:	e50c3883 	str	r3, [r12, #-2179]	; 0xfffff77d

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    272c:	e51c3883 	ldr	r3, [r12, #-2179]	; 0xfffff77d
    2730:	e3530000 	cmp	r3, #0
    2734:	13a03a01 	movne	r3, #4096	; 0x1000
    2738:	1a000002 	bne	2748 <alt_cache_l2_ecc_start+0x174>
    273c:	ea000004 	b	2754 <alt_cache_l2_ecc_start+0x180>
    {
        /* Background operation still in progress. */

        if (i == ALT_CACHE_L2_INVALIDATE_ALL_TIMEOUT)
    2740:	e2533001 	subs	r3, r3, #1
    2744:	0a000002 	beq	2754 <alt_cache_l2_ecc_start+0x180>
    /* Invalidate by way, all ways.
     / For more information, see L2C-310, section 3.3.10. */

    alt_write_word(ALT_MPUL2_INV_WAY_ADDR, alt_cache_l2_waymask);

    while (alt_read_word(ALT_MPUL2_INV_WAY_ADDR))
    2748:	e51c1883 	ldr	r1, [r12, #-2179]	; 0xfffff77d
    274c:	e3510000 	cmp	r1, #0
    2750:	1afffffa 	bne	2740 <alt_cache_l2_ecc_start+0x16c>
        /* Invalidate All. This will ensure that scrubbing RAM contents does not exist in a different way. */
        alt_cache_l2_invalidate_all();

        /* Loop through all words in the block */
        block2 = block;
        for (i = 0; i < (scrub_way_size / sizeof(*block2)); i++)
    2754:	e3540000 	cmp	r4, #0
    2758:	0a000017 	beq	27bc <alt_cache_l2_ecc_start+0x1e8>
    275c:	e3540008 	cmp	r4, #8
    2760:	9a00003e 	bls	2860 <alt_cache_l2_ecc_start+0x28c>

    return affinity & 0xFF;
}
#endif

ALT_STATUS_CODE alt_cache_l2_ecc_start(void * block, size_t size)
    2764:	e59d1000 	ldr	r1, [sp]
    2768:	e3a0e000 	mov	lr, #0
    276c:	e2813020 	add	r3, r1, #32
    2770:	e28ee008 	add	lr, lr, #8
    2774:	f5d3f080 	pld	[r3, #128]	; 0x80
    2778:	e28e1001 	add	r1, lr, #1
    277c:	e1a00003 	mov	r0, r3
    2780:	e1510005 	cmp	r1, r5

        /* Loop through all words in the block */
        block2 = block;
        for (i = 0; i < (scrub_way_size / sizeof(*block2)); i++)
        {
            *block2 = 0;
    2784:	e5032020 	str	r2, [r3, #-32]	; 0xffffffe0
    2788:	e503201c 	str	r2, [r3, #-28]	; 0xffffffe4
    278c:	e2833020 	add	r3, r3, #32
    2790:	e5032038 	str	r2, [r3, #-56]	; 0xffffffc8
    2794:	e5032034 	str	r2, [r3, #-52]	; 0xffffffcc
    2798:	e5032030 	str	r2, [r3, #-48]	; 0xffffffd0
    279c:	e503202c 	str	r2, [r3, #-44]	; 0xffffffd4
    27a0:	e5032028 	str	r2, [r3, #-40]	; 0xffffffd8
    27a4:	e5032024 	str	r2, [r3, #-36]	; 0xffffffdc
    27a8:	3afffff0 	bcc	2770 <alt_cache_l2_ecc_start+0x19c>
        /* Invalidate All. This will ensure that scrubbing RAM contents does not exist in a different way. */
        alt_cache_l2_invalidate_all();

        /* Loop through all words in the block */
        block2 = block;
        for (i = 0; i < (scrub_way_size / sizeof(*block2)); i++)
    27ac:	e1540001 	cmp	r4, r1
        {
            *block2 = 0;
    27b0:	e4802004 	str	r2, [r0], #4
    27b4:	e2811001 	add	r1, r1, #1
        /* Invalidate All. This will ensure that scrubbing RAM contents does not exist in a different way. */
        alt_cache_l2_invalidate_all();

        /* Loop through all words in the block */
        block2 = block;
        for (i = 0; i < (scrub_way_size / sizeof(*block2)); i++)
    27b8:	8afffffb 	bhi	27ac <alt_cache_l2_ecc_start+0x1d8>
            ++block2;
        }

        /* Don't put the DSB inside the loop. It will disallow the [full line of zero] optimization. */
#if !defined(_MSC_VER)
		__asm("dsb");
    27bc:	f57ff04f 	dsb	sy
    cpu_affinity = get_current_cpu_num();

    /* Loop through all ways for the lock by master configuration. */
    way_count = (alt_cache_l2_waymask == 0x0000ffff) ? 16 : 8;

    for (way_lock = 0; way_lock < way_count; ++way_lock)
    27c0:	e2866001 	add	r6, r6, #1
    27c4:	e15b0006 	cmp	r11, r6
    27c8:	da000004 	ble	27e0 <alt_cache_l2_ecc_start+0x20c>
    27cc:	e5973000 	ldr	r3, [r7]
    27d0:	eaffffd1 	b	271c <alt_cache_l2_ecc_start+0x148>
    int way_lock;

    if (size < scrub_way_size)
    {
        dprintf("CACHE[ecc:en]: Buffer too small.\n");
        return ALT_E_ERROR;
    27d4:	e3e00000 	mvn	r0, #0
    alt_cache_l2_enable();
    
#endif

    return ALT_E_SUCCESS;
}
    27d8:	e28dd014 	add	sp, sp, #20
    27dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

    /* Unlock the way lock by master for the current CPU. */
    alt_write_word(ALT_MPUL2_D_LOCKDOWNx_ADDR(cpu_affinity), 0);
    alt_write_word(ALT_MPUL2_I_LOCKDOWNx_ADDR(cpu_affinity), 0);

    if (l1_icache)
    27e0:	e59d300c 	ldr	r3, [sp, #12]
    27e4:	e3530000 	cmp	r3, #0
		__asm("dsb");
#endif
    }

    /* Unlock the way lock by master for the current CPU. */
    alt_write_word(ALT_MPUL2_D_LOCKDOWNx_ADDR(cpu_affinity), 0);
    27e8:	e3a03000 	mov	r3, #0
    27ec:	e58a3000 	str	r3, [r10]
    alt_write_word(ALT_MPUL2_I_LOCKDOWNx_ADDR(cpu_affinity), 0);
    27f0:	e5883000 	str	r3, [r8]

    if (l1_icache)
    27f4:	0a000005 	beq	2810 <alt_cache_l2_ecc_start+0x23c>
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
	sctlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    27f8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    /* Update SCTLR.I bit (bit 12)
     / See Cortex-A9 TRM, section 4.3.9 */

    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_I_SET_MSK) == 0)
    27fc:	e2132a01 	ands	r2, r3, #4096	; 0x1000
    2800:	1a000002 	bne	2810 <alt_cache_l2_ecc_start+0x23c>
    __asm("MCR p15, 0, %[dummy], c7, c1, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c7, c1, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c7, c1, 0" : : "r" (dummy));
    2804:	ee072f11 	mcr	15, 0, r2, cr7, cr1, {0}
    uint32_t sctlr = sctlr_read_helper();
    if ((sctlr & ALT_CPU_SCTLR_I_SET_MSK) == 0)
    {
        alt_cache_l1_instruction_invalidate();

        sctlr |= ALT_CPU_SCTLR_I_SET_MSK;
    2808:	e3833a01 	orr	r3, r3, #4096	; 0x1000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    280c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    if (l1_icache)
    {
        alt_cache_l1_instruction_enable();
    }

    if (l1_prefetch)
    2810:	e59d1004 	ldr	r1, [sp, #4]
    2814:	e3510000 	cmp	r1, #0
    2818:	0a000002 	beq	2828 <alt_cache_l2_ecc_start+0x254>
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
	actlr = 0;
#else
    __asm("MRC p15, 0, %0,       c1, c0, 1" : "=r" (actlr));
    281c:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
}

ALT_STATUS_CODE alt_cache_l1_prefetch_enable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr |= ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    2820:	e3833004 	orr	r3, r3, #4
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    2824:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    if (l1_prefetch)
    {
        alt_cache_l1_prefetch_enable();
    }

    if (l2_prefetch)
    2828:	e59d3008 	ldr	r3, [sp, #8]
    {
        alt_cache_l2_prefetch_enable();
    }

    alt_int_dist_pending_clear(ALT_INT_INTERRUPT_L2_ECC_BYTE_WR_IRQ);
    282c:	e3a00043 	mov	r0, #67	; 0x43
    if (l1_prefetch)
    {
        alt_cache_l1_prefetch_enable();
    }

    if (l2_prefetch)
    2830:	e3530000 	cmp	r3, #0
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_setbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    2834:	13e03801 	mvnne	r3, #65536	; 0x10000
    2838:	1513209f 	ldrne	r2, [r3, #-159]	; 0xffffff61
    283c:	13822203 	orrne	r2, r2, #805306368	; 0x30000000
    2840:	1503209f 	strne	r2, [r3, #-159]	; 0xffffff61
    if (l2_prefetch)
    {
        alt_cache_l2_prefetch_enable();
    }

    alt_int_dist_pending_clear(ALT_INT_INTERRUPT_L2_ECC_BYTE_WR_IRQ);
    2844:	eb00328f 	bl	f288 <alt_int_dist_pending_clear>
    alt_int_dist_pending_clear(ALT_INT_INTERRUPT_L2_ECC_CORRECTED_IRQ);
    2848:	e3a00044 	mov	r0, #68	; 0x44
    284c:	eb00328d 	bl	f288 <alt_int_dist_pending_clear>
    alt_int_dist_pending_clear(ALT_INT_INTERRUPT_L2_ECC_UNCORRECTED_IRQ);
    2850:	e3a00045 	mov	r0, #69	; 0x45
    2854:	eb00328b 	bl	f288 <alt_int_dist_pending_clear>

    alt_cache_l2_enable();
    
#endif

    return ALT_E_SUCCESS;
    2858:	e3a00000 	mov	r0, #0
    285c:	eaffffdd 	b	27d8 <alt_cache_l2_ecc_start+0x204>
    2860:	e3a01001 	mov	r1, #1

    return affinity & 0xFF;
}
#endif

ALT_STATUS_CODE alt_cache_l2_ecc_start(void * block, size_t size)
    2864:	e59d0000 	ldr	r0, [sp]
        /* Invalidate All. This will ensure that scrubbing RAM contents does not exist in a different way. */
        alt_cache_l2_invalidate_all();

        /* Loop through all words in the block */
        block2 = block;
        for (i = 0; i < (scrub_way_size / sizeof(*block2)); i++)
    2868:	e1540001 	cmp	r4, r1
    286c:	e2811001 	add	r1, r1, #1
        {
            *block2 = 0;
    2870:	e4802004 	str	r2, [r0], #4
        /* Invalidate All. This will ensure that scrubbing RAM contents does not exist in a different way. */
        alt_cache_l2_invalidate_all();

        /* Loop through all words in the block */
        block2 = block;
        for (i = 0; i < (scrub_way_size / sizeof(*block2)); i++)
    2874:	8affffcc 	bhi	27ac <alt_cache_l2_ecc_start+0x1d8>
    2878:	eaffffcf 	b	27bc <alt_cache_l2_ecc_start+0x1e8>
}

ALT_STATUS_CODE alt_cache_l1_prefetch_disable(void)
{
    uint32_t actlr = actlr_read_helper();
    actlr &= ~ALT_CPU_ACTLR_L1PREFETCHEN_SET_MSK;
    287c:	e3c33004 	bic	r3, r3, #4
    __asm("MCR p15, 0, %[actlr], c1, c0, 1" : : [actlr] "r" (actlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, actlr,    c1, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 1" : : "r" (actlr));
    2880:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
        alt_cache_l1_instruction_disable();
    }

    if (alt_cache_l1_prefetch_is_enabled() == true)
    {
        l1_prefetch = true;
    2884:	e3a03001 	mov	r3, #1
    2888:	e58d3004 	str	r3, [sp, #4]
    288c:	eaffff6a 	b	263c <alt_cache_l2_ecc_start+0x68>
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_clrbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    2890:	e513209f 	ldr	r2, [r3, #-159]	; 0xffffff61
        alt_cache_l1_prefetch_disable();
    }

    if (alt_cache_l2_prefetch_is_enabled() == true)
    {
        l2_prefetch = true;
    2894:	e3a01001 	mov	r1, #1
    2898:	e58d1008 	str	r1, [sp, #8]
{
    /* Use the Prefetch Control Register instead of Aux Control. This is
     / because the Prefetch Control can be changed while the L2 is enabled.
     / For more information, see L2C-310, section 3.3.14. */

    alt_clrbits_word(ALT_MPUL2_PREFETCH_CTRL_ADDR, ALT_MPUL2_PREFETCH_CTRL_PF_EN_SET_MSK);
    289c:	e3c22203 	bic	r2, r2, #805306368	; 0x30000000
    28a0:	e503209f 	str	r2, [r3, #-159]	; 0xffffff61
    28a4:	eaffff6b 	b	2658 <alt_cache_l2_ecc_start+0x84>

000028a8 <alt_mmu_va_space_storage_required_internal>:
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
    28a8:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11}
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    28ac:	e2623000 	rsb	r3, r2, #0
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
    28b0:	e24dd020 	sub	sp, sp, #32
    28b4:	e58d100c 	str	r1, [sp, #12]
    28b8:	e2131003 	ands	r1, r3, #3
    28bc:	e58d0000 	str	r0, [sp]
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    28c0:	03a0ca01 	moveq	r12, #4096	; 0x1000
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    28c4:	01a03001 	moveq	r3, r1
    28c8:	0a000006 	beq	28e8 <alt_mmu_va_space_storage_required_internal+0x40>
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    28cc:	e3a03000 	mov	r3, #0
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    {
        vregion[i] = ALT_VREGION_1MIB;
    28d0:	e3a00002 	mov	r0, #2
    28d4:	e7c20003 	strb	r0, [r2, r3]
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    28d8:	e2833001 	add	r3, r3, #1
    28dc:	e1510003 	cmp	r1, r3
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    28e0:	e263ca01 	rsb	r12, r3, #4096	; 0x1000
    28e4:	8afffffa 	bhi	28d4 <alt_mmu_va_space_storage_required_internal+0x2c>
    28e8:	e2610a01 	rsb	r0, r1, #4096	; 0x1000
    28ec:	e1a05120 	lsr	r5, r0, #2
    28f0:	e58d0008 	str	r0, [sp, #8]
    28f4:	e1b04105 	lsls	r4, r5, #2
    28f8:	e58d4004 	str	r4, [sp, #4]
    28fc:	0a000037 	beq	29e0 <alt_mmu_va_space_storage_required_internal+0x138>
    2900:	e0821001 	add	r1, r2, r1
    2904:	e2450007 	sub	r0, r5, #7
    2908:	e281a020 	add	r10, r1, #32
    290c:	e3a09000 	mov	r9, #0
    2910:	e1a0b000 	mov	r11, r0
    2914:	e58d5010 	str	r5, [sp, #16]
    2918:	e58d3014 	str	r3, [sp, #20]
    291c:	e58dc018 	str	r12, [sp, #24]
    2920:	e58d201c 	str	r2, [sp, #28]
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    {
        vregion[i] = ALT_VREGION_1MIB;
    2924:	e3008202 	movw	r8, #514	; 0x202
    2928:	e2891009 	add	r1, r9, #9
    292c:	e1a07008 	mov	r7, r8
    2930:	e1a06008 	mov	r6, r8
    2934:	e1a05008 	mov	r5, r8
    2938:	e1a04008 	mov	r4, r8
    293c:	e1a0c008 	mov	r12, r8
    2940:	e1a02008 	mov	r2, r8
    2944:	e1a03008 	mov	r3, r8
    2948:	e151000b 	cmp	r1, r11
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    294c:	e1a0000a 	mov	r0, r10
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    {
        vregion[i] = ALT_VREGION_1MIB;
    2950:	e7df8818 	bfi	r8, r8, #16, #16
    2954:	e7df7817 	bfi	r7, r7, #16, #16
    2958:	e7df6816 	bfi	r6, r6, #16, #16
    295c:	e7df5815 	bfi	r5, r5, #16, #16
    2960:	e7df4814 	bfi	r4, r4, #16, #16
    2964:	e7dfc81c 	bfi	r12, r12, #16, #16
    2968:	e7df2812 	bfi	r2, r2, #16, #16
    296c:	e7df3813 	bfi	r3, r3, #16, #16
    2970:	e2891008 	add	r1, r9, #8
    2974:	e50a8020 	str	r8, [r10, #-32]	; 0xffffffe0
    2978:	f5daf080 	pld	[r10, #128]	; 0x80
    297c:	e50a701c 	str	r7, [r10, #-28]	; 0xffffffe4
    2980:	e1a09001 	mov	r9, r1
    2984:	e28aa020 	add	r10, r10, #32
    2988:	e5006018 	str	r6, [r0, #-24]	; 0xffffffe8
    298c:	e5005014 	str	r5, [r0, #-20]	; 0xffffffec
    2990:	e5004010 	str	r4, [r0, #-16]
    2994:	e500c00c 	str	r12, [r0, #-12]
    2998:	e900000c 	stmdb	r0, {r2, r3}
    299c:	3affffe0 	bcc	2924 <alt_mmu_va_space_storage_required_internal+0x7c>
    29a0:	e59d5010 	ldr	r5, [sp, #16]
    29a4:	e59d3014 	ldr	r3, [sp, #20]
    29a8:	e59dc018 	ldr	r12, [sp, #24]
    29ac:	e59d201c 	ldr	r2, [sp, #28]
    29b0:	e2811001 	add	r1, r1, #1
    29b4:	e3004202 	movw	r4, #514	; 0x202
    29b8:	e1550001 	cmp	r5, r1
    29bc:	e7df4814 	bfi	r4, r4, #16, #16
    29c0:	e4804004 	str	r4, [r0], #4
    29c4:	8afffff9 	bhi	29b0 <alt_mmu_va_space_storage_required_internal+0x108>
    29c8:	e59d1004 	ldr	r1, [sp, #4]
    29cc:	e59d0008 	ldr	r0, [sp, #8]
    29d0:	e0833001 	add	r3, r3, r1
    29d4:	e061c00c 	rsb	r12, r1, r12
    29d8:	e1500001 	cmp	r0, r1
    29dc:	0a000034 	beq	2ab4 <alt_mmu_va_space_storage_required_internal+0x20c>
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    29e0:	e24c1001 	sub	r1, r12, #1
    29e4:	e351001f 	cmp	r1, #31
    29e8:	9a00008d 	bls	2c24 <alt_mmu_va_space_storage_required_internal+0x37c>
    29ec:	e0821003 	add	r1, r2, r3
    29f0:	e2826022 	add	r6, r2, #34	; 0x22
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    {
        vregion[i] = ALT_VREGION_1MIB;
    29f4:	e3a00002 	mov	r0, #2
    29f8:	e24c5021 	sub	r5, r12, #33	; 0x21
    29fc:	e7c20003 	strb	r0, [r2, r3]
    2a00:	e355001f 	cmp	r5, #31
    2a04:	e5c10001 	strb	r0, [r1, #1]
    2a08:	e5c10002 	strb	r0, [r1, #2]
    2a0c:	e24c4020 	sub	r4, r12, #32
    2a10:	e5c10003 	strb	r0, [r1, #3]
    2a14:	e2811020 	add	r1, r1, #32
    2a18:	e541001c 	strb	r0, [r1, #-28]	; 0xffffffe4
    2a1c:	f7d6f003 	pld	[r6, r3]
    2a20:	e1a0c004 	mov	r12, r4
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    2a24:	e2833020 	add	r3, r3, #32
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    {
        vregion[i] = ALT_VREGION_1MIB;
    2a28:	e541001b 	strb	r0, [r1, #-27]	; 0xffffffe5
    2a2c:	e541001a 	strb	r0, [r1, #-26]	; 0xffffffe6
    2a30:	e5410019 	strb	r0, [r1, #-25]	; 0xffffffe7
    2a34:	e5410018 	strb	r0, [r1, #-24]	; 0xffffffe8
    2a38:	e5410017 	strb	r0, [r1, #-23]	; 0xffffffe9
    2a3c:	e5410016 	strb	r0, [r1, #-22]	; 0xffffffea
    2a40:	e5410015 	strb	r0, [r1, #-21]	; 0xffffffeb
    2a44:	e5410014 	strb	r0, [r1, #-20]	; 0xffffffec
    2a48:	e5410013 	strb	r0, [r1, #-19]	; 0xffffffed
    2a4c:	e5410012 	strb	r0, [r1, #-18]	; 0xffffffee
    2a50:	e5410011 	strb	r0, [r1, #-17]	; 0xffffffef
    2a54:	e5410010 	strb	r0, [r1, #-16]
    2a58:	e541000f 	strb	r0, [r1, #-15]
    2a5c:	e541000e 	strb	r0, [r1, #-14]
    2a60:	e541000d 	strb	r0, [r1, #-13]
    2a64:	e541000c 	strb	r0, [r1, #-12]
    2a68:	e541000b 	strb	r0, [r1, #-11]
    2a6c:	e541000a 	strb	r0, [r1, #-10]
    2a70:	e5410009 	strb	r0, [r1, #-9]
    2a74:	e5410008 	strb	r0, [r1, #-8]
    2a78:	e5410007 	strb	r0, [r1, #-7]
    2a7c:	e5410006 	strb	r0, [r1, #-6]
    2a80:	e5410005 	strb	r0, [r1, #-5]
    2a84:	e5410004 	strb	r0, [r1, #-4]
    2a88:	e5410003 	strb	r0, [r1, #-3]
    2a8c:	e5410002 	strb	r0, [r1, #-2]
    2a90:	e5410001 	strb	r0, [r1, #-1]
    2a94:	8affffd7 	bhi	29f8 <alt_mmu_va_space_storage_required_internal+0x150>
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    2a98:	e0824004 	add	r4, r2, r4
    2a9c:	e0821003 	add	r1, r2, r3
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    {
        vregion[i] = ALT_VREGION_1MIB;
    2aa0:	e3a00002 	mov	r0, #2
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    2aa4:	e0843003 	add	r3, r4, r3
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    {
        vregion[i] = ALT_VREGION_1MIB;
    2aa8:	e4c10001 	strb	r0, [r1], #1
                                                         const size_t num_mem_regions,
                                                         char * vregion)
{
    size_t reqsize;
    int i;
    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    2aac:	e1510003 	cmp	r1, r3
    2ab0:	1afffffc 	bne	2aa8 <alt_mmu_va_space_storage_required_internal+0x200>
    }

    /* For each region entry, mark the TTB1 as either fault, section, pagetable.
     * The total space required is the space required for the TTB1 (16 KiB) + pagetables * (1 KiB) */

    for (i = 0; i < num_mem_regions; ++i)
    2ab4:	e59d300c 	ldr	r3, [sp, #12]
    2ab8:	e3530000 	cmp	r3, #0
    2abc:	0a00005a 	beq	2c2c <alt_mmu_va_space_storage_required_internal+0x384>
    {
        uintptr_t        va       = (uintptr_t)mem_regions[i].va;
    2ac0:	e59d4000 	ldr	r4, [sp]
    2ac4:	e5943000 	ldr	r3, [r4]
        uintptr_t        pa       = (uintptr_t)mem_regions[i].pa;
        uint32_t         size     = mem_regions[i].size;
    2ac8:	e9940003 	ldmib	r4, {r0, r1}
        ALT_MMU_TTB_NS_t security = mem_regions[i].security;
    2acc:	e5d4c010 	ldrb	r12, [r4, #16]

        /* Verify [va] aligns to 4 KiB */
        if (va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
    2ad0:	e1a04a03 	lsl	r4, r3, #20
    2ad4:	e1a04a24 	lsr	r4, r4, #20
    2ad8:	e3540000 	cmp	r4, #0
    2adc:	1a000011 	bne	2b28 <alt_mmu_va_space_storage_required_internal+0x280>
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    2ae0:	e1807001 	orr	r7, r0, r1
    2ae4:	e1a07a07 	lsl	r7, r7, #20
    2ae8:	e1a07a27 	lsr	r7, r7, #20
        {
            return 0;
        }

        /* Verify [size] aligns to 4 KiB */
        if (size & (ALT_MMU_SMALL_PAGE_SIZE - 1))
    2aec:	e3570000 	cmp	r7, #0
    2af0:	1a00000c 	bne	2b28 <alt_mmu_va_space_storage_required_internal+0x280>
    2af4:	e59d5000 	ldr	r5, [sp]

        if (pa & (ALT_MMU_SECTION_SIZE - 1))
        {
            /* PA is not 1 MiB aligned. Everything must use pagetables. */

            while (size >= ALT_MMU_SECTION_SIZE)
    2af8:	e30f4fff 	movw	r4, #65535	; 0xffff
    2afc:	e59d800c 	ldr	r8, [sp, #12]
    2b00:	e340400f 	movt	r4, #15
            return 0;
        }

        /* Mark the regions at the start of an unaligned 1 MiB as pagetable.
         * Align the [va] to 1 MiB and subtract that from the [size] left to describe. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
    2b04:	e3c364ff 	bic	r6, r3, #-16777216	; 0xff000000
    2b08:	e3d6660f 	bics	r6, r6, #15728640	; 0xf00000
    2b0c:	0a00000f 	beq	2b50 <alt_mmu_va_space_storage_required_internal+0x2a8>
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
    if (*vregion == ALT_VREGION_1MIB)
    2b10:	e7d2aa23 	ldrb	r10, [r2, r3, lsr #20]
    2b14:	e35a0002 	cmp	r10, #2
    {
        *vregion = (int)security;
    2b18:	07c2ca23 	strbeq	r12, [r2, r3, lsr #20]
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
    if (*vregion == ALT_VREGION_1MIB)
    2b1c:	0a000005 	beq	2b38 <alt_mmu_va_space_storage_required_internal+0x290>
    {
        *vregion = (int)security;
    }
    else if (*vregion != (int)security)
    2b20:	e15c000a 	cmp	r12, r10
    2b24:	0a000003 	beq	2b38 <alt_mmu_va_space_storage_required_internal+0x290>
        ALT_MMU_TTB_NS_t security = mem_regions[i].security;

        /* Verify [va] aligns to 4 KiB */
        if (va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
        {
            return 0;
    2b28:	e3a00000 	mov	r0, #0
            reqsize += ALT_MMU_TTB2_SIZE;
        }
    }

    return reqsize;
}
    2b2c:	e28dd020 	add	sp, sp, #32
    2b30:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11}
    2b34:	e12fff1e 	bx	lr

        /* Mark the regions at the start of an unaligned 1 MiB as pagetable.
         * Align the [va] to 1 MiB and subtract that from the [size] left to describe. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
        {
            uint32_t segment = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
    2b38:	e2666601 	rsb	r6, r6, #1048576	; 0x100000
    2b3c:	e1560001 	cmp	r6, r1
    2b40:	21a06001 	movcs	r6, r1
                                           security) != ALT_E_SUCCESS)
            {
                return 0;
            }

            va   += segment;
    2b44:	e0833006 	add	r3, r3, r6
            pa   += segment;
    2b48:	e0800006 	add	r0, r0, r6
            size -= segment;
    2b4c:	e0661001 	rsb	r1, r6, r1
        /* Skip each 1 MiB aligned segment of size 1 MiB. These regions require
         * pagetable if the PA is not 1 MiB aligned. */

        /* [pa] is not used after this point. */

        if (pa & (ALT_MMU_SECTION_SIZE - 1))
    2b50:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    2b54:	e3c0060f 	bic	r0, r0, #15728640	; 0xf00000
    2b58:	e3500000 	cmp	r0, #0
    2b5c:	1a000023 	bne	2bf0 <alt_mmu_va_space_storage_required_internal+0x348>
        }
        else
        {
            /* PA is 1 MiB aligned. Sections or supersections can be used. */

            while (size >= ALT_MMU_SECTION_SIZE)
    2b60:	e1510004 	cmp	r1, r4
    2b64:	9a000005 	bls	2b80 <alt_mmu_va_space_storage_required_internal+0x2d8>
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    2b68:	e2410601 	sub	r0, r1, #1048576	; 0x100000
    2b6c:	e2833601 	add	r3, r3, #1048576	; 0x100000
    2b70:	e1a00a20 	lsr	r0, r0, #20
    2b74:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    2b78:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    2b7c:	e0833a00 	add	r3, r3, r0, lsl #20
                size -= ALT_MMU_SECTION_SIZE;
            }
        }

        /* The remainder should be a 1 MiB aligned segment of less than 1 MiB. Mark that region as pagetable. */
        if (size)
    2b80:	e3510000 	cmp	r1, #0
    2b84:	0a000005 	beq	2ba0 <alt_mmu_va_space_storage_required_internal+0x2f8>
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
    if (*vregion == ALT_VREGION_1MIB)
    2b88:	e7d21a23 	ldrb	r1, [r2, r3, lsr #20]
    2b8c:	e3510002 	cmp	r1, #2
    {
        *vregion = (int)security;
    2b90:	07c2ca23 	strbeq	r12, [r2, r3, lsr #20]
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
    if (*vregion == ALT_VREGION_1MIB)
    2b94:	0a000001 	beq	2ba0 <alt_mmu_va_space_storage_required_internal+0x2f8>
    {
        *vregion = (int)security;
    }
    else if (*vregion != (int)security)
    2b98:	e15c0001 	cmp	r12, r1
    2b9c:	1affffe1 	bne	2b28 <alt_mmu_va_space_storage_required_internal+0x280>
    }

    /* For each region entry, mark the TTB1 as either fault, section, pagetable.
     * The total space required is the space required for the TTB1 (16 KiB) + pagetables * (1 KiB) */

    for (i = 0; i < num_mem_regions; ++i)
    2ba0:	e2877001 	add	r7, r7, #1
    2ba4:	e1570008 	cmp	r7, r8
    2ba8:	0a00001f 	beq	2c2c <alt_mmu_va_space_storage_required_internal+0x384>
    {
        uintptr_t        va       = (uintptr_t)mem_regions[i].va;
    2bac:	e5953014 	ldr	r3, [r5, #20]
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    2bb0:	e2856014 	add	r6, r5, #20
    2bb4:	f5d5f054 	pld	[r5, #84]	; 0x54
     * The total space required is the space required for the TTB1 (16 KiB) + pagetables * (1 KiB) */

    for (i = 0; i < num_mem_regions; ++i)
    {
        uintptr_t        va       = (uintptr_t)mem_regions[i].va;
        uintptr_t        pa       = (uintptr_t)mem_regions[i].pa;
    2bb8:	e5950018 	ldr	r0, [r5, #24]
        uint32_t         size     = mem_regions[i].size;
    2bbc:	e595101c 	ldr	r1, [r5, #28]
        ALT_MMU_TTB_NS_t security = mem_regions[i].security;
    2bc0:	e5d5c024 	ldrb	r12, [r5, #36]	; 0x24

        /* Verify [va] aligns to 4 KiB */
        if (va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
    2bc4:	e1a05a03 	lsl	r5, r3, #20
    2bc8:	e1a05a25 	lsr	r5, r5, #20
    2bcc:	e3550000 	cmp	r5, #0
    2bd0:	1affffd4 	bne	2b28 <alt_mmu_va_space_storage_required_internal+0x280>
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    2bd4:	e1805001 	orr	r5, r0, r1
    2bd8:	e1a05a05 	lsl	r5, r5, #20
    2bdc:	e1a05a25 	lsr	r5, r5, #20
        {
            return 0;
        }

        /* Verify [size] aligns to 4 KiB */
        if (size & (ALT_MMU_SMALL_PAGE_SIZE - 1))
    2be0:	e3550000 	cmp	r5, #0
    2be4:	1affffcf 	bne	2b28 <alt_mmu_va_space_storage_required_internal+0x280>
    2be8:	e1a05006 	mov	r5, r6
    2bec:	eaffffc4 	b	2b04 <alt_mmu_va_space_storage_required_internal+0x25c>

        if (pa & (ALT_MMU_SECTION_SIZE - 1))
        {
            /* PA is not 1 MiB aligned. Everything must use pagetables. */

            while (size >= ALT_MMU_SECTION_SIZE)
    2bf0:	e1510004 	cmp	r1, r4
    2bf4:	9affffe1 	bls	2b80 <alt_mmu_va_space_storage_required_internal+0x2d8>
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
    if (*vregion == ALT_VREGION_1MIB)
    2bf8:	e7d20a23 	ldrb	r0, [r2, r3, lsr #20]
    2bfc:	e3500002 	cmp	r0, #2
    {
        *vregion = (int)security;
    2c00:	07c2ca23 	strbeq	r12, [r2, r3, lsr #20]
#define ALT_VREGION_PAGETABLE_S  ((int)ALT_MMU_TTB_NS_SECURE)     /* 0 */
#define ALT_VREGION_PAGETABLE_NS ((int)ALT_MMU_TTB_NS_NON_SECURE) /* 1 */

static ALT_STATUS_CODE alt_vregion_mark_pagetable(char * vregion, ALT_MMU_TTB_NS_t security)
{
    if (*vregion == ALT_VREGION_1MIB)
    2c04:	0a000001 	beq	2c10 <alt_mmu_va_space_storage_required_internal+0x368>
    {
        *vregion = (int)security;
    }
    else if (*vregion != (int)security)
    2c08:	e15c0000 	cmp	r12, r0
    2c0c:	1affffc5 	bne	2b28 <alt_mmu_va_space_storage_required_internal+0x280>
                    return 0;
                }

                va   += ALT_MMU_SECTION_SIZE;
                /* pa   += ALT_MMU_SECTION_SIZE; */
                size -= ALT_MMU_SECTION_SIZE;
    2c10:	e2411601 	sub	r1, r1, #1048576	; 0x100000
                                               security) != ALT_E_SUCCESS)
                {
                    return 0;
                }

                va   += ALT_MMU_SECTION_SIZE;
    2c14:	e2833601 	add	r3, r3, #1048576	; 0x100000

        if (pa & (ALT_MMU_SECTION_SIZE - 1))
        {
            /* PA is not 1 MiB aligned. Everything must use pagetables. */

            while (size >= ALT_MMU_SECTION_SIZE)
    2c18:	e1510004 	cmp	r1, r4
    2c1c:	8afffff5 	bhi	2bf8 <alt_mmu_va_space_storage_required_internal+0x350>
    2c20:	eaffffd6 	b	2b80 <alt_mmu_va_space_storage_required_internal+0x2d8>
    }

    return ALT_E_SUCCESS;
}

static size_t alt_mmu_va_space_storage_required_internal(const ALT_MMU_MEM_REGION_t* mem_regions,
    2c24:	e1a0400c 	mov	r4, r12
    2c28:	eaffff9a 	b	2a98 <alt_mmu_va_space_storage_required_internal+0x1f0>
    2c2c:	e3a03000 	mov	r3, #0
    2c30:	e3a00901 	mov	r0, #16384	; 0x4000
    2c34:	e7d2c003 	ldrb	r12, [r2, r3]

    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    {
        if (vregion[i] != ALT_VREGION_1MIB)
        {
            reqsize += ALT_MMU_TTB2_SIZE;
    2c38:	e2801b01 	add	r1, r0, #1024	; 0x400
    }

    /* Calculate the size as 16 KiB (TTB1) + 1 KiB * (TTB2 or the number of pagetables) */
    reqsize = ALT_MMU_TTB1_SIZE;

    for (i = 0; i < ALT_MMU_TTB1_SECTION_COUNT; ++i)
    2c3c:	e2833001 	add	r3, r3, #1
    2c40:	e35c0002 	cmp	r12, #2
    2c44:	11a00001 	movne	r0, r1
    2c48:	e3530a01 	cmp	r3, #4096	; 0x1000
    2c4c:	1afffff8 	bne	2c34 <alt_mmu_va_space_storage_required_internal+0x38c>
    2c50:	eaffffb5 	b	2b2c <alt_mmu_va_space_storage_required_internal+0x284>

00002c54 <alt_mmu_init>:
}

ALT_STATUS_CODE alt_mmu_init(void)
{
    return ALT_E_SUCCESS;
}
    2c54:	e3a00000 	mov	r0, #0
    2c58:	e12fff1e 	bx	lr

00002c5c <alt_mmu_uninit>:

ALT_STATUS_CODE alt_mmu_uninit(void)
{
    return ALT_E_SUCCESS;
}
    2c5c:	e3a00000 	mov	r0, #0
    2c60:	e12fff1e 	bx	lr

00002c64 <alt_mmu_ttb1_init>:

ALT_STATUS_CODE alt_mmu_ttb1_init(uint32_t* ttb1)
{
    2c64:	e92d4010 	push	{r4, lr}
    uint32_t ttbcr = ttbcr_get_helper();
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    2c68:	e3e02000 	mvn	r2, #0
    __asm("MRC p15, 0, %[ttbcr], c2, c0, 2" : [ttbcr] "=r" (ttbcr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, ttbcr,    c2, c0, 2");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
    2c6c:	ee124f50 	mrc	15, 0, r4, cr2, cr0, {2}
}

ALT_STATUS_CODE alt_mmu_ttb1_init(uint32_t* ttb1)
{
    uint32_t ttbcr = ttbcr_get_helper();
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
    2c70:	e2044007 	and	r4, r4, #7

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    2c74:	e2843012 	add	r3, r4, #18
    2c78:	e264400e 	rsb	r4, r4, #14
    2c7c:	e1e03312 	mvn	r3, r2, lsl r3
    2c80:	e1c04413 	bic	r4, r0, r3, lsl r4
    2c84:	e3540000 	cmp	r4, #0
    2c88:	1a000004 	bne	2ca0 <alt_mmu_ttb1_init+0x3c>

    /* The TTB1 size really depends on TTBCR.N value and if it will be used for
     / TTBR0 or TTBR1. The documentation just states that it should be 16 KiB.
     / See ARMv7-A,R, section B3.5.4. */

    memset(ttb1, 0, ALT_MMU_TTB1_SIZE);
    2c8c:	e1a01004 	mov	r1, r4
    2c90:	e3a02901 	mov	r2, #16384	; 0x4000
    2c94:	eb005aa6 	bl	19734 <memset>

    return ALT_E_SUCCESS;
    2c98:	e1a00004 	mov	r0, r4
    2c9c:	e8bd8010 	pop	{r4, pc}

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
    2ca0:	e3e00008 	mvn	r0, #8
     / See ARMv7-A,R, section B3.5.4. */

    memset(ttb1, 0, ALT_MMU_TTB1_SIZE);

    return ALT_E_SUCCESS;
}
    2ca4:	e8bd8010 	pop	{r4, pc}

00002ca8 <alt_mmu_ttb1_desc_set>:

ALT_STATUS_CODE alt_mmu_ttb1_desc_set(uint32_t* ttb1,
                                      const void* va,
                                      const uint32_t desc)
{
    2ca8:	e1a0c002 	mov	r12, r2
    2cac:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11}
    /* Validate the [va] parameter alignment based on the entry [desc] is describing.
     /  - Fault, Page Table, or section: 1 MiB.
     /  - Supersection: 16 MiB
     /  - Other: error. */

    switch (ALT_MMU_TTB1_TYPE_GET(desc))
    2cb0:	e20c3003 	and	r3, r12, #3
}

ALT_STATUS_CODE alt_mmu_ttb1_desc_set(uint32_t* ttb1,
                                      const void* va,
                                      const uint32_t desc)
{
    2cb4:	e24dd018 	sub	sp, sp, #24
    /* Validate the [va] parameter alignment based on the entry [desc] is describing.
     /  - Fault, Page Table, or section: 1 MiB.
     /  - Supersection: 16 MiB
     /  - Other: error. */

    switch (ALT_MMU_TTB1_TYPE_GET(desc))
    2cb8:	e3530002 	cmp	r3, #2
}

ALT_STATUS_CODE alt_mmu_ttb1_desc_set(uint32_t* ttb1,
                                      const void* va,
                                      const uint32_t desc)
{
    2cbc:	e1a02000 	mov	r2, r0
    /* Validate the [va] parameter alignment based on the entry [desc] is describing.
     /  - Fault, Page Table, or section: 1 MiB.
     /  - Supersection: 16 MiB
     /  - Other: error. */

    switch (ALT_MMU_TTB1_TYPE_GET(desc))
    2cc0:	0a00000c 	beq	2cf8 <alt_mmu_ttb1_desc_set+0x50>
    2cc4:	e3530003 	cmp	r3, #3
    2cc8:	0a000008 	beq	2cf0 <alt_mmu_ttb1_desc_set+0x48>
            /* Section, fall through. */
        }
    case ALT_MMU_TTB1_TYPE_SET(0x0): /* Fault */
    case ALT_MMU_TTB1_TYPE_SET(0x1): /* Page Table */
        /* Section, Fault, or Page Table: check for 1 MiB alignment */
        if ((uintptr_t)va & (ALT_MMU_SECTION_SIZE - 1))
    2ccc:	e3c134ff 	bic	r3, r1, #-16777216	; 0xff000000
    2cd0:	e3d3360f 	bics	r3, r3, #15728640	; 0xf00000
    }

    /* The [va] looks good! Add entry into the TTB1. */

    /* TTB1 is indexed by va[31-N:20]. This function assumes N = 0. */
    index = (uintptr_t)va >> 20;
    2cd4:	01a01a21 	lsreq	r1, r1, #20
        {
            ttb1[index + i] = desc;
        }
    }

    return ALT_E_SUCCESS;
    2cd8:	01a00003 	moveq	r0, r3
    /* TTB1 is indexed by va[31-N:20]. This function assumes N = 0. */
    index = (uintptr_t)va >> 20;

    if (supersection == false)
    {
        ttb1[index] = desc;
    2cdc:	0782c101 	streq	r12, [r2, r1, lsl #2]
            /* Section, fall through. */
        }
    case ALT_MMU_TTB1_TYPE_SET(0x0): /* Fault */
    case ALT_MMU_TTB1_TYPE_SET(0x1): /* Page Table */
        /* Section, Fault, or Page Table: check for 1 MiB alignment */
        if ((uintptr_t)va & (ALT_MMU_SECTION_SIZE - 1))
    2ce0:	1a000002 	bne	2cf0 <alt_mmu_ttb1_desc_set+0x48>
            ttb1[index + i] = desc;
        }
    }

    return ALT_E_SUCCESS;
}
    2ce4:	e28dd018 	add	sp, sp, #24
    2ce8:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11}
    2cec:	e12fff1e 	bx	lr
            supersection = true;

            /* Supersection: Check for 16 MiB alignment */
            if ((uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1))
            {
                return ALT_E_BAD_ARG;
    2cf0:	e3e00008 	mvn	r0, #8
    2cf4:	eafffffa 	b	2ce4 <alt_mmu_ttb1_desc_set+0x3c>

    switch (ALT_MMU_TTB1_TYPE_GET(desc))
    {
    case ALT_MMU_TTB1_TYPE_SET(0x2): /* Section or Supersection sans Physical Address Extension */
        /* Check bit 18, which determines if it is a regular or super variant */
        if (desc & (1 << 18))
    2cf8:	e31c0701 	tst	r12, #262144	; 0x40000
    2cfc:	0afffff2 	beq	2ccc <alt_mmu_ttb1_desc_set+0x24>
        {
            /* Mark that we are describing a supersection. */
            supersection = true;

            /* Supersection: Check for 16 MiB alignment */
            if ((uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1))
    2d00:	e3d134ff 	bics	r3, r1, #-16777216	; 0xff000000
    2d04:	1afffff9 	bne	2cf0 <alt_mmu_ttb1_desc_set+0x48>
    }

    /* The [va] looks good! Add entry into the TTB1. */

    /* TTB1 is indexed by va[31-N:20]. This function assumes N = 0. */
    index = (uintptr_t)va >> 20;
    2d08:	e1a01a21 	lsr	r1, r1, #20
        {
            ttb1[index + i] = desc;
        }
    }

    return ALT_E_SUCCESS;
    2d0c:	e1a00003 	mov	r0, r3
    else
    {
        /* Supersection needs the entry to be repeated 16x. */
        for (i = 0; i < 16; ++i)
        {
            ttb1[index + i] = desc;
    2d10:	e2813009 	add	r3, r1, #9
    2d14:	e782c101 	str	r12, [r2, r1, lsl #2]
    2d18:	e58d3000 	str	r3, [sp]
    2d1c:	e281300a 	add	r3, r1, #10
    2d20:	e58d3004 	str	r3, [sp, #4]
    2d24:	e281300b 	add	r3, r1, #11
    2d28:	e58d3008 	str	r3, [sp, #8]
    2d2c:	e281300c 	add	r3, r1, #12
    2d30:	e58d300c 	str	r3, [sp, #12]
    2d34:	e281300d 	add	r3, r1, #13
    2d38:	e58d3010 	str	r3, [sp, #16]
    2d3c:	e281300e 	add	r3, r1, #14
    2d40:	e281b001 	add	r11, r1, #1
    2d44:	e2819002 	add	r9, r1, #2
    2d48:	e281a003 	add	r10, r1, #3
    2d4c:	e2818004 	add	r8, r1, #4
    2d50:	e2817005 	add	r7, r1, #5
    2d54:	e2816006 	add	r6, r1, #6
    2d58:	e2815007 	add	r5, r1, #7
    2d5c:	e2814008 	add	r4, r1, #8
    2d60:	e58d3014 	str	r3, [sp, #20]
    2d64:	e281300f 	add	r3, r1, #15
    2d68:	e59d1000 	ldr	r1, [sp]
    2d6c:	e782c10b 	str	r12, [r2, r11, lsl #2]
    2d70:	e782c109 	str	r12, [r2, r9, lsl #2]
    2d74:	e782c10a 	str	r12, [r2, r10, lsl #2]
    2d78:	e782c108 	str	r12, [r2, r8, lsl #2]
    2d7c:	e782c107 	str	r12, [r2, r7, lsl #2]
    2d80:	e782c106 	str	r12, [r2, r6, lsl #2]
    2d84:	e782c105 	str	r12, [r2, r5, lsl #2]
    2d88:	e782c104 	str	r12, [r2, r4, lsl #2]
    2d8c:	e782c101 	str	r12, [r2, r1, lsl #2]
    2d90:	e59d1004 	ldr	r1, [sp, #4]
    2d94:	e782c101 	str	r12, [r2, r1, lsl #2]
    2d98:	e59d1008 	ldr	r1, [sp, #8]
    2d9c:	e782c101 	str	r12, [r2, r1, lsl #2]
    2da0:	e59d100c 	ldr	r1, [sp, #12]
    2da4:	e782c101 	str	r12, [r2, r1, lsl #2]
    2da8:	e59d1010 	ldr	r1, [sp, #16]
    2dac:	e782c101 	str	r12, [r2, r1, lsl #2]
    2db0:	e59d1014 	ldr	r1, [sp, #20]
    2db4:	e782c101 	str	r12, [r2, r1, lsl #2]
    2db8:	e782c103 	str	r12, [r2, r3, lsl #2]
    2dbc:	eaffffc8 	b	2ce4 <alt_mmu_ttb1_desc_set+0x3c>

00002dc0 <alt_mmu_ttb2_desc_set>:

    /* Validate the [va] parameter alignment based on the entry [desc] is describing.
     /  - Fault, Small Page: 4 KiB
     /  - Large Page: 64 KiB */

    switch (ALT_MMU_TTB2_TYPE_GET(desc))
    2dc0:	e2023003 	and	r3, r2, #3
}

ALT_STATUS_CODE alt_mmu_ttb2_desc_set(const uint32_t* ttb1,
                                      const void* va,
                                      const uint32_t desc)
{
    2dc4:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11}

    /* Validate the [va] parameter alignment based on the entry [desc] is describing.
     /  - Fault, Small Page: 4 KiB
     /  - Large Page: 64 KiB */

    switch (ALT_MMU_TTB2_TYPE_GET(desc))
    2dc8:	e3530001 	cmp	r3, #1
}

ALT_STATUS_CODE alt_mmu_ttb2_desc_set(const uint32_t* ttb1,
                                      const void* va,
                                      const uint32_t desc)
{
    2dcc:	e24dd018 	sub	sp, sp, #24

    /* Validate the [va] parameter alignment based on the entry [desc] is describing.
     /  - Fault, Small Page: 4 KiB
     /  - Large Page: 64 KiB */

    switch (ALT_MMU_TTB2_TYPE_GET(desc))
    2dd0:	0a00003d 	beq	2ecc <alt_mmu_ttb2_desc_set+0x10c>
    {
    case ALT_MMU_TTB2_TYPE_SET(0x0): /* Fault */
    case ALT_MMU_TTB2_TYPE_SET(0x2): /* Small Page, XN = 0 */
    case ALT_MMU_TTB2_TYPE_SET(0x3): /* Small Page, XN = 1 */
        if ((uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
    2dd4:	e1a04a01 	lsl	r4, r1, #20
    2dd8:	e1a04a24 	lsr	r4, r4, #20
    2ddc:	e3540000 	cmp	r4, #0
    2de0:	1a00003d 	bne	2edc <alt_mmu_ttb2_desc_set+0x11c>
    }

    /* The [va] looks good! Add entry into TTB1->TTB2. */

    /* Locate the TTB1 entry */
    ttb1_desc = ttb1[(uintptr_t)va >> 20];
    2de4:	e1a0ca21 	lsr	r12, r1, #20
    2de8:	e790310c 	ldr	r3, [r0, r12, lsl #2]

    /* Verify that [ttb1_desc] is a pagetable. */
    if (ALT_MMU_TTB1_TYPE_GET(ttb1_desc) != ALT_MMU_TTB1_TYPE_SET(0x1))
    2dec:	e2030003 	and	r0, r3, #3
    2df0:	e3500001 	cmp	r0, #1
    2df4:	1a000038 	bne	2edc <alt_mmu_ttb2_desc_set+0x11c>
    /* Locate TTB2 given [ttb1_desc] */
    ttb2 = (uint32_t *)(ttb1_desc & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);

    /* TTB2 is indexed by va[19:12]. */
    index = ALT_MMU_PAGE_TABLE_INDEX(va);
    if (largepage == false)
    2df8:	e3540000 	cmp	r4, #0
    {
        return ALT_E_BAD_ARG;
    }
    
    /* Locate TTB2 given [ttb1_desc] */
    ttb2 = (uint32_t *)(ttb1_desc & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    2dfc:	e3c33fff 	bic	r3, r3, #1020	; 0x3fc

    /* TTB2 is indexed by va[19:12]. */
    index = ALT_MMU_PAGE_TABLE_INDEX(va);
    2e00:	e7e71651 	ubfx	r1, r1, #12, #8
    {
        return ALT_E_BAD_ARG;
    }
    
    /* Locate TTB2 given [ttb1_desc] */
    ttb2 = (uint32_t *)(ttb1_desc & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    2e04:	e3c33003 	bic	r3, r3, #3

    /* TTB2 is indexed by va[19:12]. */
    index = ALT_MMU_PAGE_TABLE_INDEX(va);
    if (largepage == false)
    {
        ttb2[index] = desc;
    2e08:	07832101 	streq	r2, [r3, r1, lsl #2]
        {
            ttb2[index + i] = desc;
        }
    }

    return ALT_E_SUCCESS;
    2e0c:	01a01004 	moveq	r1, r4
    /* Locate TTB2 given [ttb1_desc] */
    ttb2 = (uint32_t *)(ttb1_desc & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);

    /* TTB2 is indexed by va[19:12]. */
    index = ALT_MMU_PAGE_TABLE_INDEX(va);
    if (largepage == false)
    2e10:	0a000029 	beq	2ebc <alt_mmu_ttb2_desc_set+0xfc>
    {
        int i; 
        /* Large page needs the entry to be repeated 16x. */
        for (i = 0; i < 16; ++i)
        {
            ttb2[index + i] = desc;
    2e14:	e281c007 	add	r12, r1, #7
    2e18:	e2810001 	add	r0, r1, #1
    2e1c:	e58dc004 	str	r12, [sp, #4]
    2e20:	e281c008 	add	r12, r1, #8
    2e24:	e7832101 	str	r2, [r3, r1, lsl #2]
    2e28:	e281b002 	add	r11, r1, #2
    2e2c:	e7832100 	str	r2, [r3, r0, lsl #2]
    2e30:	e2819003 	add	r9, r1, #3
    2e34:	e59d0004 	ldr	r0, [sp, #4]
    2e38:	e281a004 	add	r10, r1, #4
    2e3c:	e2818005 	add	r8, r1, #5
    2e40:	e2817006 	add	r7, r1, #6
    2e44:	e58dc008 	str	r12, [sp, #8]
    2e48:	e281c009 	add	r12, r1, #9
    2e4c:	e783210b 	str	r2, [r3, r11, lsl #2]
    2e50:	e281600c 	add	r6, r1, #12
    2e54:	e7832109 	str	r2, [r3, r9, lsl #2]
    2e58:	e281500d 	add	r5, r1, #13
    2e5c:	e783210a 	str	r2, [r3, r10, lsl #2]
    2e60:	e281400e 	add	r4, r1, #14
    2e64:	e7832108 	str	r2, [r3, r8, lsl #2]
    2e68:	e7832107 	str	r2, [r3, r7, lsl #2]
    2e6c:	e7832100 	str	r2, [r3, r0, lsl #2]
    2e70:	e59d0008 	ldr	r0, [sp, #8]
    2e74:	e58dc00c 	str	r12, [sp, #12]
    2e78:	e281c00a 	add	r12, r1, #10
    2e7c:	e58dc010 	str	r12, [sp, #16]
    2e80:	e281c00b 	add	r12, r1, #11
    2e84:	e7832100 	str	r2, [r3, r0, lsl #2]
    2e88:	e59d000c 	ldr	r0, [sp, #12]
    2e8c:	e58dc014 	str	r12, [sp, #20]
    2e90:	e281c00f 	add	r12, r1, #15
        }
    }

    return ALT_E_SUCCESS;
    2e94:	e3a01000 	mov	r1, #0
    {
        int i; 
        /* Large page needs the entry to be repeated 16x. */
        for (i = 0; i < 16; ++i)
        {
            ttb2[index + i] = desc;
    2e98:	e7832100 	str	r2, [r3, r0, lsl #2]
    2e9c:	e59d0010 	ldr	r0, [sp, #16]
    2ea0:	e7832100 	str	r2, [r3, r0, lsl #2]
    2ea4:	e59d0014 	ldr	r0, [sp, #20]
    2ea8:	e7832100 	str	r2, [r3, r0, lsl #2]
    2eac:	e7832106 	str	r2, [r3, r6, lsl #2]
    2eb0:	e7832105 	str	r2, [r3, r5, lsl #2]
    2eb4:	e7832104 	str	r2, [r3, r4, lsl #2]
    2eb8:	e783210c 	str	r2, [r3, r12, lsl #2]
        }
    }

    return ALT_E_SUCCESS;
}
    2ebc:	e1a00001 	mov	r0, r1
    2ec0:	e28dd018 	add	sp, sp, #24
    2ec4:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11}
    2ec8:	e12fff1e 	bx	lr
        {
            return ALT_E_BAD_ARG;
        }
        break;
    case ALT_MMU_TTB2_TYPE_SET(0x1): /* Large Page */
        if ((uintptr_t)va & (ALT_MMU_LARGE_PAGE_SIZE - 1))
    2ecc:	e6ffc071 	uxth	r12, r1
    2ed0:	e35c0000 	cmp	r12, #0
        {
            return ALT_E_BAD_ARG;
        }
        largepage = true;
    2ed4:	01a04003 	moveq	r4, r3
    2ed8:	0affffc1 	beq	2de4 <alt_mmu_ttb2_desc_set+0x24>
    case ALT_MMU_TTB2_TYPE_SET(0x0): /* Fault */
    case ALT_MMU_TTB2_TYPE_SET(0x2): /* Small Page, XN = 0 */
    case ALT_MMU_TTB2_TYPE_SET(0x3): /* Small Page, XN = 1 */
        if ((uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1))
        {
            return ALT_E_BAD_ARG;
    2edc:	e3e01008 	mvn	r1, #8
    2ee0:	eafffff5 	b	2ebc <alt_mmu_ttb2_desc_set+0xfc>

00002ee4 <alt_mmu_disable>:
    __asm("MRC p15, 0, %[sctlr], c1, c0, 0" : [sctlr] "=r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    2ee4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    uint32_t sctlr = sctlr_get_helper();
    if (sctlr & ALT_CPU_SCTLR_C_SET_MSK)
    {
        dprintf("WARN[MMU]: Data cache still active.\n");
    }
    sctlr &= ~ALT_CPU_SCTLR_M_SET_MSK;
    2ee8:	e3c33001 	bic	r3, r3, #1
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    2eec:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    }
    sctlr &= ~ALT_CPU_SCTLR_M_SET_MSK;
    sctlr_set_helper(sctlr);

    return ALT_E_SUCCESS;
}
    2ef0:	e3a00000 	mov	r0, #0
    2ef4:	e12fff1e 	bx	lr

00002ef8 <alt_mmu_enable>:
    __asm("MCR p15, 0, %[dummy], c8, c3, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c8, c3, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c8, c3, 0" : : "r" (dummy));
    2ef8:	e3a03000 	mov	r3, #0
    2efc:	ee083f13 	mcr	15, 0, r3, cr8, cr3, {0}
#endif

#if !defined(_MSC_VER)
    /* Ensure all TLB maintenance operations complete before returning. */
    __asm("dsb");
    2f00:	f57ff04f 	dsb	sy
    __asm("MRC p15, 0, %[sctlr], c1, c0, 0" : [sctlr] "=r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    2f04:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    uint32_t sctlr;
    alt_mmu_tlb_invalidate();

    sctlr = sctlr_get_helper();
    sctlr |= ALT_CPU_SCTLR_M_SET_MSK;
    2f08:	e3833001 	orr	r3, r3, #1
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    2f0c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    sctlr = sctlr_get_helper();
    sctlr |= ALT_CPU_SCTLR_M_SET_MSK;
    sctlr_set_helper(sctlr);

    return ALT_E_SUCCESS;
}
    2f10:	e3a00000 	mov	r0, #0
    2f14:	e12fff1e 	bx	lr

00002f18 <alt_mmu_TTBR0_get>:
    __asm("MRC p15, 0, %[ttbcr], c2, c0, 2" : [ttbcr] "=r" (ttbcr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, ttbcr,    c2, c0, 2");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
    2f18:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
}

void * alt_mmu_TTBR0_get(void)
{
    uint32_t ttbcr = ttbcr_get_helper();
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
    2f1c:	e2033007 	and	r3, r3, #7
    uint32_t ttbr0 = ttbr0_get_helper();

    return (void *)(ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n) & ttbr0);
    2f20:	e3e00000 	mvn	r0, #0
    2f24:	e2832012 	add	r2, r3, #18
    2f28:	e263300e 	rsb	r3, r3, #14
    2f2c:	e1e00210 	mvn	r0, r0, lsl r2
    __asm("MRC p15, 0, %[ttbr0], c2, c0, 0" : [ttbr0] "=r" (ttbr0));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, ttbr0,    c2, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c2, c0, 0" : "=r" (ttbr0));
    2f30:	ee122f10 	mrc	15, 0, r2, cr2, cr0, {0}
    uint32_t ttbcr = ttbcr_get_helper();
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
    uint32_t ttbr0 = ttbr0_get_helper();

    return (void *)(ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n) & ttbr0);
}
    2f34:	e0020310 	and	r0, r2, r0, lsl r3
    2f38:	e12fff1e 	bx	lr

00002f3c <alt_mmu_TTBR0_set>:
    __asm("MRC p15, 0, %[ttbcr], c2, c0, 2" : [ttbcr] "=r" (ttbcr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, ttbcr,    c2, c0, 2");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
    2f3c:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
}

ALT_STATUS_CODE alt_mmu_TTBR0_set(const void* addr)
{
    uint32_t ttbcr = ttbcr_get_helper();
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
    2f40:	e2033007 	and	r3, r3, #7
    uint32_t ttbr0; 

    if ((uintptr_t)addr & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    2f44:	e3e01000 	mvn	r1, #0
    2f48:	e2832012 	add	r2, r3, #18
    2f4c:	e263300e 	rsb	r3, r3, #14
    2f50:	e1e02211 	mvn	r2, r1, lsl r2
    2f54:	e1e03312 	mvn	r3, r2, lsl r3
    2f58:	e1100003 	tst	r0, r3
    2f5c:	1a000004 	bne	2f74 <alt_mmu_TTBR0_set+0x38>

    /* The Translation table must reside in Normal Memory, so pick the most
     / performant attributes. */
    ttbr0 =   ALT_CPU_TTBR0_RGN_WBA   /* Translation table is WBA for outer cacheability */
              | ALT_CPU_TTBR0_IRGN_WBA; /* Translation table is WBA for inner cacheability */
    ttbr0 &= ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n);
    2f60:	e2033048 	and	r3, r3, #72	; 0x48
    ttbr0 |= (uint32_t)addr;
    2f64:	e1830000 	orr	r0, r3, r0
    __asm("MCR p15, 0, %[ttbr0], c2, c0, 0" : : [ttbr0] "r" (ttbr0));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, ttbr0,    c2, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c2, c0, 0" : : "r" (ttbr0));
    2f68:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    ttbr0 &= ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n);
    ttbr0 |= (uint32_t)addr;

    ttbr0_set_helper(ttbr0);

    return ALT_E_SUCCESS;
    2f6c:	e3a00000 	mov	r0, #0
    2f70:	e12fff1e 	bx	lr
    uint32_t ttbr0; 

    if ((uintptr_t)addr & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
    2f74:	e3e00008 	mvn	r0, #8
    ttbr0 |= (uint32_t)addr;

    ttbr0_set_helper(ttbr0);

    return ALT_E_SUCCESS;
}
    2f78:	e12fff1e 	bx	lr

00002f7c <alt_mmu_TTBR1_get>:
    __asm("MRC p15, 0, %[ttbr1], c2, c0, 1" : [ttbr1] "=r" (ttbr1));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, ttbr1,    c2, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c2, c0, 1" : "=r" (ttbr1));
    2f7c:	ee120f30 	mrc	15, 0, r0, cr2, cr0, {1}
void * alt_mmu_TTBR1_get(void)
{
    uint32_t ttbr1 = ttbr1_get_helper();

    return (void *)(ALT_CPU_TTBR1_TTB1BASEADDR_SET_MSK & ttbr1);
}
    2f80:	e3c00dff 	bic	r0, r0, #16320	; 0x3fc0
    2f84:	e3c0003f 	bic	r0, r0, #63	; 0x3f
    2f88:	e12fff1e 	bx	lr

00002f8c <alt_mmu_TTBR1_set>:

ALT_STATUS_CODE alt_mmu_TTBR1_set(const void* addr)
{
    uint32_t ttbr1;

    if ((uintptr_t)addr & ~ALT_CPU_TTBR1_TTB1BASEADDR_SET_MSK)
    2f8c:	e1a03900 	lsl	r3, r0, #18
    2f90:	e1a03923 	lsr	r3, r3, #18
    2f94:	e3530000 	cmp	r3, #0
    2f98:	1a000006 	bne	2fb8 <alt_mmu_TTBR1_set+0x2c>
    __asm("MRC p15, 0, %[ttbr1], c2, c0, 1" : [ttbr1] "=r" (ttbr1));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, ttbr1,    c2, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c2, c0, 1" : "=r" (ttbr1));
    2f9c:	ee123f30 	mrc	15, 0, r3, cr2, cr0, {1}
        /* addr must align to 16 KiB. */
        return ALT_E_BAD_ARG;
    }

    ttbr1 = ttbr1_get_helper();
    ttbr1 &= ~ALT_CPU_TTBR1_TTB1BASEADDR_SET_MSK;
    2fa0:	e1a03903 	lsl	r3, r3, #18
    2fa4:	e1a03923 	lsr	r3, r3, #18
    ttbr1 |= (uint32_t)addr;
    2fa8:	e1833000 	orr	r3, r3, r0
    __asm("MCR p15, 0, %[ttbr1], c2, c0, 1" : : [ttbr1] "r" (ttbr1));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, ttbr1,    c2, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c2, c0, 1" : : "r" (ttbr1));
    2fac:	ee023f30 	mcr	15, 0, r3, cr2, cr0, {1}
    ttbr1 &= ~ALT_CPU_TTBR1_TTB1BASEADDR_SET_MSK;
    ttbr1 |= (uint32_t)addr;

    ttbr1_set_helper(ttbr1);

    return ALT_E_SUCCESS;
    2fb0:	e3a00000 	mov	r0, #0
    2fb4:	e12fff1e 	bx	lr
    uint32_t ttbr1;

    if ((uintptr_t)addr & ~ALT_CPU_TTBR1_TTB1BASEADDR_SET_MSK)
    {
        /* addr must align to 16 KiB. */
        return ALT_E_BAD_ARG;
    2fb8:	e3e00008 	mvn	r0, #8
    ttbr1 |= (uint32_t)addr;

    ttbr1_set_helper(ttbr1);

    return ALT_E_SUCCESS;
}
    2fbc:	e12fff1e 	bx	lr

00002fc0 <alt_mmu_TTBCR_set>:

ALT_STATUS_CODE alt_mmu_TTBCR_set(const bool enable_ttbr0_walk,
                                  const bool enable_ttbr1_walk,
                                  const uint32_t base_addr_width)
{
    uint32_t ttbcr = 0;
    2fc0:	e3500000 	cmp	r0, #0
    2fc4:	03a00010 	moveq	r0, #16
    2fc8:	13a00000 	movne	r0, #0
    if (!enable_ttbr0_walk)
    {
        ttbcr |= ALT_CPU_TTBCR_PD0_SET_MSK;
    }

    if (!enable_ttbr1_walk)
    2fcc:	e3510000 	cmp	r1, #0
    {
        ttbcr |= ALT_CPU_TTBCR_PD1_SET_MSK;
    2fd0:	03800020 	orreq	r0, r0, #32
    }

    if (base_addr_width > 7)
    2fd4:	e3520007 	cmp	r2, #7
    2fd8:	8a000003 	bhi	2fec <alt_mmu_TTBCR_set+0x2c>
    {
        return ALT_E_BAD_ARG;
    }

    ttbcr |= base_addr_width;
    2fdc:	e1800002 	orr	r0, r0, r2
    __asm("MCR p15, 0, %[ttbcr], c2, c0, 2" : : [ttbcr] "r" (ttbcr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, ttbcr,    c2, c0, 2");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c2, c0, 2" : : "r" (ttbcr));
    2fe0:	ee020f50 	mcr	15, 0, r0, cr2, cr0, {2}

    ttbcr |= base_addr_width;

    ttbcr_set_helper(ttbcr);

    return ALT_E_SUCCESS;
    2fe4:	e3a00000 	mov	r0, #0
    2fe8:	e12fff1e 	bx	lr
        ttbcr |= ALT_CPU_TTBCR_PD1_SET_MSK;
    }

    if (base_addr_width > 7)
    {
        return ALT_E_BAD_ARG;
    2fec:	e3e00008 	mvn	r0, #8
    ttbcr |= base_addr_width;

    ttbcr_set_helper(ttbcr);

    return ALT_E_SUCCESS;
}
    2ff0:	e12fff1e 	bx	lr

00002ff4 <alt_mmu_DACR_set>:
                                 const size_t num_elem)
{
    uint32_t dacr = 0;
    int i;

    if (num_elem > 16)
    2ff4:	e3510010 	cmp	r1, #16
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_DACR_set(const ALT_MMU_DAP_t domain_ap[],
                                 const size_t num_elem)
{
    2ff8:	e92d00f0 	push	{r4, r5, r6, r7}
    uint32_t dacr = 0;
    int i;

    if (num_elem > 16)
    2ffc:	8a000014 	bhi	3054 <alt_mmu_DACR_set+0x60>
    {
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    3000:	e3510000 	cmp	r1, #0
    3004:	0a000015 	beq	3060 <alt_mmu_DACR_set+0x6c>
    3008:	e3a0c000 	mov	r12, #0
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    300c:	e3a0720d 	mov	r7, #-805306368	; 0xd0000000
    ttbcr_set_helper(ttbcr);

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_DACR_set(const ALT_MMU_DAP_t domain_ap[],
    3010:	e1a0300c 	mov	r3, r12
    3014:	e1a0400c 	mov	r4, r12
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    3018:	e7d0200c 	ldrb	r2, [r0, r12]
    ttbcr_set_helper(ttbcr);

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_DACR_set(const ALT_MMU_DAP_t domain_ap[],
    301c:	e1a05083 	lsl	r5, r3, #1
    if (num_elem > 16)
    {
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    3020:	e2833001 	add	r3, r3, #1
    3024:	e1a0c003 	mov	r12, r3
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    3028:	e3520003 	cmp	r2, #3
    302c:	e6af6072 	sxtb	r6, r2
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    3030:	e1844512 	orr	r4, r4, r2, lsl r5

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    3034:	8a000006 	bhi	3054 <alt_mmu_DACR_set+0x60>
    3038:	e1b06617 	lsls	r6, r7, r6
    303c:	5a000004 	bpl	3054 <alt_mmu_DACR_set+0x60>
    if (num_elem > 16)
    {
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    3040:	e1530001 	cmp	r3, r1
    3044:	1afffff3 	bne	3018 <alt_mmu_DACR_set+0x24>
    __asm("MCR p15, 0, %[dacr], c3, c0, 0" : : [dacr] "r" (dacr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dacr,    c3, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,      c3, c0, 0" : : "r" (dacr));
    3048:	ee034f10 	mcr	15, 0, r4, cr3, cr0, {0}
        }
    }

    dacr_set_helper(dacr);

    return ALT_E_SUCCESS;
    304c:	e3a00000 	mov	r0, #0
    3050:	ea000000 	b	3058 <alt_mmu_DACR_set+0x64>
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
            break;
        default:
        case ALT_MMU_DAP_RESERVED:
            return ALT_E_BAD_ARG;
    3054:	e3e00008 	mvn	r0, #8
    }

    dacr_set_helper(dacr);

    return ALT_E_SUCCESS;
}
    3058:	e8bd00f0 	pop	{r4, r5, r6, r7}
    305c:	e12fff1e 	bx	lr
    if (num_elem > 16)
    {
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    3060:	e1a04001 	mov	r4, r1
    3064:	eafffff7 	b	3048 <alt_mmu_DACR_set+0x54>

00003068 <alt_mmu_CONTEXTIDR_set>:

ALT_STATUS_CODE alt_mmu_CONTEXTIDR_set(const uint32_t procid, const uint32_t asid)
{
    uint32_t contextidr = (procid << 8) | (asid << 0);

    if (procid > 0x00ffffff)
    3068:	e3500401 	cmp	r0, #16777216	; 0x1000000
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_CONTEXTIDR_set(const uint32_t procid, const uint32_t asid)
{
    uint32_t contextidr = (procid << 8) | (asid << 0);
    306c:	e1810400 	orr	r0, r1, r0, lsl #8

    if (procid > 0x00ffffff)
    3070:	2a000004 	bcs	3088 <alt_mmu_CONTEXTIDR_set+0x20>
    {
        return ALT_E_BAD_ARG;
    }

    if (asid > 0xff)
    3074:	e35100ff 	cmp	r1, #255	; 0xff
    3078:	8a000002 	bhi	3088 <alt_mmu_CONTEXTIDR_set+0x20>
    __asm("MCR p15, 0, %[contextidr], c13, c0, 1" : : [contextidr] "r" (contextidr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, contextidr,    c13, c0, 1");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,            c13, c0, 1" : : "r" (contextidr));
    307c:	ee0d0f30 	mcr	15, 0, r0, cr13, cr0, {1}
        return ALT_E_BAD_ARG;
    }

    contextidr_set_helper(contextidr);

    return ALT_E_SUCCESS;
    3080:	e3a00000 	mov	r0, #0
    3084:	e12fff1e 	bx	lr
{
    uint32_t contextidr = (procid << 8) | (asid << 0);

    if (procid > 0x00ffffff)
    {
        return ALT_E_BAD_ARG;
    3088:	e3e00008 	mvn	r0, #8
    }

    contextidr_set_helper(contextidr);

    return ALT_E_SUCCESS;
}
    308c:	e12fff1e 	bx	lr

00003090 <alt_mmu_tlb_invalidate>:
    __asm("MCR p15, 0, %[dummy], c8, c3, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c8, c3, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c8, c3, 0" : : "r" (dummy));
    3090:	e3a03000 	mov	r3, #0
    3094:	ee083f13 	mcr	15, 0, r3, cr8, cr3, {0}
#endif

#if !defined(_MSC_VER)
    /* Ensure all TLB maintenance operations complete before returning. */
    __asm("dsb");
    3098:	f57ff04f 	dsb	sy
#endif

    return ALT_E_SUCCESS;
}
    309c:	e3a00000 	mov	r0, #0
    30a0:	e12fff1e 	bx	lr

000030a4 <alt_mmu_tlb_invalidate_is>:
    __asm("MCR p15, 0, %[dummy],    c8, c7, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy, c8, c7, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,    c8, c7, 0" : : "r" (dummy));
    30a4:	e3a03000 	mov	r3, #0
    30a8:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
#endif

#if !defined(_MSC_VER)
	/* Ensure all TLB maintenance operations complete before returning. */
	__asm("dsb");
    30ac:	f57ff04f 	dsb	sy
#endif

    return ALT_E_SUCCESS;
}
    30b0:	e3a00000 	mov	r0, #0
    30b4:	e12fff1e 	bx	lr

000030b8 <alt_mmu_va_space_storage_required>:
    return reqsize;
}

size_t alt_mmu_va_space_storage_required(const ALT_MMU_MEM_REGION_t* mem_regions,
                                         const size_t num_mem_regions)
{
    30b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    30bc:	e24dda01 	sub	sp, sp, #4096	; 0x1000
    30c0:	e24dd004 	sub	sp, sp, #4
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    return alt_mmu_va_space_storage_required_internal(mem_regions,
    30c4:	e1a0200d 	mov	r2, sp
    30c8:	ebfffdf6 	bl	28a8 <alt_mmu_va_space_storage_required_internal>
                                                      num_mem_regions,
                                                      vregion);
}
    30cc:	e28dd004 	add	sp, sp, #4
    30d0:	e28dda01 	add	sp, sp, #4096	; 0x1000
    30d4:	e8bd8000 	ldmfd	sp!, {pc}

000030d8 <alt_mmu_va_space_create>:
ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
                                        const ALT_MMU_MEM_REGION_t* mem_regions,
                                        const size_t num_mem_regions,
                                        alt_mmu_ttb_alloc_t ttb_alloc,
                                        void * ttb_alloc_context)
{
    30d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    30dc:	e24dda01 	sub	sp, sp, #4096	; 0x1000
    30e0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    30e4:	e1a07001 	mov	r7, r1
    30e8:	e1a0b000 	mov	r11, r0
    int k;
    size_t i;
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    size_t reqsize = alt_mmu_va_space_storage_required_internal(mem_regions,
    30ec:	e1a01002 	mov	r1, r2
ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
                                        const ALT_MMU_MEM_REGION_t* mem_regions,
                                        const size_t num_mem_regions,
                                        alt_mmu_ttb_alloc_t ttb_alloc,
                                        void * ttb_alloc_context)
{
    30f0:	e58d2008 	str	r2, [sp, #8]
    int k;
    size_t i;
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    size_t reqsize = alt_mmu_va_space_storage_required_internal(mem_regions,
    30f4:	e1a00007 	mov	r0, r7
    30f8:	e28d2028 	add	r2, sp, #40	; 0x28
ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
                                        const ALT_MMU_MEM_REGION_t* mem_regions,
                                        const size_t num_mem_regions,
                                        alt_mmu_ttb_alloc_t ttb_alloc,
                                        void * ttb_alloc_context)
{
    30fc:	e1a04003 	mov	r4, r3
    int k;
    size_t i;
    char vregion[ALT_MMU_TTB1_SECTION_COUNT];

    size_t reqsize = alt_mmu_va_space_storage_required_internal(mem_regions,
    3100:	ebfffde8 	bl	28a8 <alt_mmu_va_space_storage_required_internal>
                                                                num_mem_regions,
                                                                vregion);
    char * memory;
    size_t allocated = 0;
    if (reqsize == 0)
    3104:	e2508000 	subs	r8, r0, #0
    3108:	0a000036 	beq	31e8 <alt_mmu_va_space_create+0x110>
    {
        return ALT_E_ERROR;
    }

    memory    = ttb_alloc(reqsize, ttb_alloc_context);
    310c:	e28d3a02 	add	r3, sp, #8192	; 0x2000
    3110:	e5131fb0 	ldr	r1, [r3, #-4016]	; 0xfffff050
    3114:	e12fff34 	blx	r4

    /* Verify allocation */

    if (memory == NULL)
    3118:	e2506000 	subs	r6, r0, #0
    311c:	0a000031 	beq	31e8 <alt_mmu_va_space_create+0x110>
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    /* The stricter of the two alignment is 16 KiB. */

    if ((uintptr_t)memory & ((1 << 14) - 1))
    3120:	e1a03906 	lsl	r3, r6, #18
    3124:	e1a03923 	lsr	r3, r3, #18
    3128:	e3530000 	cmp	r3, #0
    312c:	1a0001c4 	bne	3844 <alt_mmu_va_space_create+0x76c>
    {
        return ALT_E_BAD_ARG;
    }

    /* "allocate" space for the TTB1. */
    if (allocated + ALT_MMU_TTB1_SIZE > reqsize)
    3130:	e3580901 	cmp	r8, #16384	; 0x4000
    3134:	3a00002b 	bcc	31e8 <alt_mmu_va_space_create+0x110>
    __asm("MRC p15, 0, %[ttbcr], c2, c0, 2" : [ttbcr] "=r" (ttbcr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, ttbcr,    c2, c0, 2");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
    3138:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
}

ALT_STATUS_CODE alt_mmu_ttb1_init(uint32_t* ttb1)
{
    uint32_t ttbcr = ttbcr_get_helper();
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
    313c:	e2033007 	and	r3, r3, #7

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    3140:	e3e01000 	mvn	r1, #0
    3144:	e2832012 	add	r2, r3, #18
    3148:	e263300e 	rsb	r3, r3, #14
    314c:	e1e01211 	mvn	r1, r1, lsl r2
    /* "allocate" space for the TTB1. */
    if (allocated + ALT_MMU_TTB1_SIZE > reqsize)
    {
        return ALT_E_ERROR;
    }
    *ttb1 = (uint32_t *)memory;
    3150:	e58b6000 	str	r6, [r11]
{
    uint32_t ttbcr = ttbcr_get_helper();
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);

    /* Verify ttb1 buffer alignment. */
    if ((uintptr_t)ttb1 & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    3154:	e1c61311 	bic	r1, r6, r1, lsl r3
    3158:	e3510000 	cmp	r1, #0
    315c:	1a000021 	bne	31e8 <alt_mmu_va_space_create+0x110>

    /* The TTB1 size really depends on TTBCR.N value and if it will be used for
     / TTBR0 or TTBR1. The documentation just states that it should be 16 KiB.
     / See ARMv7-A,R, section B3.5.4. */

    memset(ttb1, 0, ALT_MMU_TTB1_SIZE);
    3160:	e3a0a901 	mov	r10, #16384	; 0x4000
    3164:	e1a04001 	mov	r4, r1
    3168:	e1a0200a 	mov	r2, r10
    316c:	eb005970 	bl	19734 <memset>
    3170:	ea00000f 	b	31b4 <alt_mmu_va_space_create+0xdc>
{
    /* For TTB2 (page tables), the page table base address in TTB1 is
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
    3174:	e3530000 	cmp	r3, #0
    3178:	1a000002 	bne	3188 <alt_mmu_va_space_create+0xb0>
    317c:	e28d9028 	add	r9, sp, #40	; 0x28
    {
        return ALT_E_BAD_ARG;
    }

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    3180:	eb00596b 	bl	19734 <memset>
    3184:	e7d9c004 	ldrb	r12, [r9, r4]

    return 
          ALT_MMU_TTB1_TYPE_SET(0x1)
        | ALT_MMU_TTB1_PAGE_TBL_NS_SET(mem->security)
        | ALT_MMU_TTB1_PAGE_TBL_DOMAIN_SET(0)
        | ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_SET(pagetable >> 10);
    3188:	e3c55fff 	bic	r5, r5, #1020	; 0x3fc
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x1)
        | ALT_MMU_TTB1_PAGE_TBL_NS_SET(mem->security)
    318c:	e1a0c18c 	lsl	r12, r12, #3

            mem_region.attributes = ALT_MMU_ATTR_STRONG; /* Any non-FAULT will work. */
            mem_region.security   = (ALT_MMU_TTB_NS_t)vregion[k];
            desc = alt_mmu_va_space_gen_pagetable((uintptr_t)pagetable, &mem_region);

            (*ttb1)[k] = desc;
    3190:	e59b3000 	ldr	r3, [r11]

    return 
          ALT_MMU_TTB1_TYPE_SET(0x1)
        | ALT_MMU_TTB1_PAGE_TBL_NS_SET(mem->security)
        | ALT_MMU_TTB1_PAGE_TBL_DOMAIN_SET(0)
        | ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_SET(pagetable >> 10);
    3194:	e3c55003 	bic	r5, r5, #3
    3198:	e3855001 	orr	r5, r5, #1
    319c:	e20cc008 	and	r12, r12, #8
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    {
        return 0;
    }

    return 
    31a0:	e185c00c 	orr	r12, r5, r12

            mem_region.attributes = ALT_MMU_ATTR_STRONG; /* Any non-FAULT will work. */
            mem_region.security   = (ALT_MMU_TTB_NS_t)vregion[k];
            desc = alt_mmu_va_space_gen_pagetable((uintptr_t)pagetable, &mem_region);

            (*ttb1)[k] = desc;
    31a4:	e783c104 	str	r12, [r3, r4, lsl #2]
    {
        return ALT_E_ERROR;
    }

    /* "allocate" space for each pagetable in [vregion] */
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
    31a8:	e2844001 	add	r4, r4, #1
    31ac:	e3540a01 	cmp	r4, #4096	; 0x1000
    31b0:	0a000010 	beq	31f8 <alt_mmu_va_space_create+0x120>
    {
        if (vregion[k] != ALT_VREGION_1MIB)
    31b4:	e28d5028 	add	r5, sp, #40	; 0x28
    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
    {
        return ALT_E_BAD_ARG;
    }

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    31b8:	e3a02b01 	mov	r2, #1024	; 0x400
    }

    /* "allocate" space for each pagetable in [vregion] */
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
    {
        if (vregion[k] != ALT_VREGION_1MIB)
    31bc:	e7d5c004 	ldrb	r12, [r5, r4]
        {
            uint32_t desc;
            ALT_MMU_MEM_REGION_t mem_region;
            uint32_t * pagetable = (uint32_t *)(memory + allocated);
    31c0:	e086500a 	add	r5, r6, r10
{
    /* For TTB2 (page tables), the page table base address in TTB1 is
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
    31c4:	e1a03b05 	lsl	r3, r5, #22
    {
        return ALT_E_BAD_ARG;
    }

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    31c8:	e1a00005 	mov	r0, r5
    }

    /* "allocate" space for each pagetable in [vregion] */
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
    {
        if (vregion[k] != ALT_VREGION_1MIB)
    31cc:	e35c0002 	cmp	r12, #2
{
    /* For TTB2 (page tables), the page table base address in TTB1 is
     * bits[31:10]. Thus it must be 2^10 byte aligned or 1 KiB.
     * Source: ARMv7-A,R, section B3.5.1. */

    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
    31d0:	e1a03b23 	lsr	r3, r3, #22
    }

    /* "allocate" space for each pagetable in [vregion] */
    for (k = 0; k < ALT_MMU_TTB1_SECTION_COUNT; ++k)
    {
        if (vregion[k] != ALT_VREGION_1MIB)
    31d4:	0afffff3 	beq	31a8 <alt_mmu_va_space_create+0xd0>
        {
            uint32_t desc;
            ALT_MMU_MEM_REGION_t mem_region;
            uint32_t * pagetable = (uint32_t *)(memory + allocated);
            if (allocated + ALT_MMU_TTB2_SIZE > reqsize)
    31d8:	e08aa002 	add	r10, r10, r2
    if ((uintptr_t)ttb2 & ((1 << 10) - 1))
    {
        return ALT_E_BAD_ARG;
    }

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    31dc:	e1a01003 	mov	r1, r3
        if (vregion[k] != ALT_VREGION_1MIB)
        {
            uint32_t desc;
            ALT_MMU_MEM_REGION_t mem_region;
            uint32_t * pagetable = (uint32_t *)(memory + allocated);
            if (allocated + ALT_MMU_TTB2_SIZE > reqsize)
    31e0:	e158000a 	cmp	r8, r10
    31e4:	2affffe2 	bcs	3174 <alt_mmu_va_space_create+0x9c>

    /* The stricter of the two alignment is 16 KiB. */

    if ((uintptr_t)memory & ((1 << 14) - 1))
    {
        return ALT_E_BAD_ARG;
    31e8:	e3e00000 	mvn	r0, #0
        }

    } /* for (size_t i = 0; i < num_mem_regions; ++i) */

    return ALT_E_SUCCESS;
}
    31ec:	e28dd02c 	add	sp, sp, #44	; 0x2c
    31f0:	e28dda01 	add	sp, sp, #4096	; 0x1000
    31f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    }

    /* The allocated size should match the requested size. If not, this means
     * that the regions descriptor changed between calling
     * alt_mmu_va_space_storage_required() and alt_mmu_va_space_create(). */
    if (reqsize != allocated)
    31f8:	e15a0008 	cmp	r10, r8
    31fc:	1afffff9 	bne	31e8 <alt_mmu_va_space_create+0x110>
        return ALT_E_ERROR;
    }

    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
    3200:	e59da008 	ldr	r10, [sp, #8]
    3204:	e35a0000 	cmp	r10, #0
    3208:	0a0002d6 	beq	3d68 <alt_mmu_va_space_create+0xc90>
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
            }
        }
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
                 && (size     >= ALT_MMU_SECTION_SIZE))
    320c:	e30fcfff 	movw	r12, #65535	; 0xffff
    3210:	e1a02007 	mov	r2, r7
        return ALT_E_ERROR;
    }

    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
    3214:	e3a00000 	mov	r0, #0
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
            }
        }
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
                 && (size     >= ALT_MMU_SECTION_SIZE))
    3218:	e340c00f 	movt	r12, #15
        return ALT_E_ERROR;
    }

    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
    321c:	e58d0024 	str	r0, [sp, #36]	; 0x24
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
            }
        }
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
                 && (size     >= ALT_MMU_SECTION_SIZE))
    3220:	e58dc018 	str	r12, [sp, #24]
    3224:	e58db020 	str	r11, [sp, #32]

    for (i = 0; i < num_mem_regions; ++i)
    {
        uintptr_t va   = (uintptr_t)mem_regions[i].va;
        uintptr_t pa   = (uintptr_t)mem_regions[i].pa;
        uint32_t  size = mem_regions[i].size;
    3228:	e5921008 	ldr	r1, [r2, #8]
    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
    {
        uintptr_t va   = (uintptr_t)mem_regions[i].va;
        uintptr_t pa   = (uintptr_t)mem_regions[i].pa;
    322c:	e8920208 	ldm	r2, {r3, r9}
        uint32_t  size = mem_regions[i].size;
    3230:	e58d1004 	str	r1, [sp, #4]
        /* Relative alignment of [va] and [pa]. */
        int relalign = ALT_MMU_SMALL_PAGE_SIZE;

        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
        {
            if ( (va & (alignopt[j] - 1)) ==
    3234:	e0291003 	eor	r1, r9, r3
    3238:	e3d104ff 	bics	r0, r1, #-16777216	; 0xff000000
    323c:	0a0003c5 	beq	4158 <alt_mmu_va_space_create+0x1080>
    3240:	e3c0060f 	bic	r0, r0, #15728640	; 0xf00000
    3244:	e3500000 	cmp	r0, #0
    3248:	0a0003c5 	beq	4164 <alt_mmu_va_space_create+0x108c>
    324c:	e6ff1071 	uxth	r1, r1
    3250:	e3510000 	cmp	r1, #0
    3254:	13a01a01 	movne	r1, #4096	; 0x1000
    3258:	03a01801 	moveq	r1, #65536	; 0x10000
    325c:	e58d101c 	str	r1, [sp, #28]
        }

        /* Page the 1 MiB unaligned segment of [va]. Areas requiring page tables
         * should already have those page tables created previously in this
         * function. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
    3260:	e3c314ff 	bic	r1, r3, #-16777216	; 0xff000000
    3264:	e3d1160f 	bics	r1, r1, #15728640	; 0xf00000
    3268:	0a000060 	beq	33f0 <alt_mmu_va_space_create+0x318>
        {
            /* This is the size of the memory segment after paging which will cause the [va] to align to a 1 MiB,
             * or up to the size of the region being processed, whichever is smaller. */
            uint32_t segsize = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
    326c:	e59d6004 	ldr	r6, [sp, #4]
    3270:	e2611601 	rsb	r1, r1, #1048576	; 0x100000

            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
    3274:	e59d701c 	ldr	r7, [sp, #28]
    3278:	e30f8fff 	movw	r8, #65535	; 0xffff
         * function. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
        {
            /* This is the size of the memory segment after paging which will cause the [va] to align to a 1 MiB,
             * or up to the size of the region being processed, whichever is smaller. */
            uint32_t segsize = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
    327c:	e1510006 	cmp	r1, r6
    3280:	21a01006 	movcs	r1, r6

            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
    3284:	e1570008 	cmp	r7, r8
    3288:	9a0000e4 	bls	3620 <alt_mmu_va_space_create+0x548>
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
    328c:	e6ff0073 	uxth	r0, r3
    3290:	e3500000 	cmp	r0, #0
    3294:	0a0003f5 	beq	4270 <alt_mmu_va_space_create+0x1198>
    3298:	e300cfff 	movw	r12, #4095	; 0xfff
    329c:	e151000c 	cmp	r1, r12
    32a0:	9a0003ef 	bls	4264 <alt_mmu_va_space_create+0x118c>
    32a4:	e5d2000d 	ldrb	r0, [r2, #13]
    32a8:	e59d4020 	ldr	r4, [sp, #32]
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    32ac:	e200c001 	and	r12, r0, #1
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    32b0:	e7e0a0d0 	ubfx	r10, r0, #1, #1
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    32b4:	e1a0c10c 	lsl	r12, r12, #2
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    32b8:	e1a0a18a 	lsl	r10, r10, #3
    32bc:	e594b000 	ldr	r11, [r4]
    32c0:	e35000ff 	cmp	r0, #255	; 0xff
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    32c4:	e7e20250 	ubfx	r0, r0, #4, #3
    32c8:	e1a00300 	lsl	r0, r0, #6

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    32cc:	e20aa008 	and	r10, r10, #8
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    32d0:	e20cc004 	and	r12, r12, #4
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    32d4:	e58da010 	str	r10, [sp, #16]
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    32d8:	e58dc00c 	str	r12, [sp, #12]
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    32dc:	e1a0a001 	mov	r10, r1
    32e0:	e58d0014 	str	r0, [sp, #20]
    32e4:	1a000008 	bne	330c <alt_mmu_va_space_create+0x234>
    32e8:	ea00036f 	b	40ac <alt_mmu_va_space_create+0xfd4>
            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
    32ec:	e3580000 	cmp	r8, #0
                    if (pagetable[ptindex] != 0)
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;
    32f0:	e784010c 	str	r0, [r4, r12, lsl #2]

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
    32f4:	e2899a01 	add	r9, r9, #4096	; 0x1000

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    32f8:	e0616006 	rsb	r6, r1, r6
            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
    32fc:	0a0002df 	beq	3e80 <alt_mmu_va_space_create+0xda8>
    3300:	e3008fff 	movw	r8, #4095	; 0xfff
    3304:	e15a0008 	cmp	r10, r8
    3308:	9a00029a 	bls	3d78 <alt_mmu_va_space_create+0xca0>
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    330c:	e5d2000c 	ldrb	r0, [r2, #12]
                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    3310:	e1a04a23 	lsr	r4, r3, #20
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    3314:	e5d2700e 	ldrb	r7, [r2, #14]
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    3318:	e7e7c653 	ubfx	r12, r3, #12, #8
                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    331c:	e79b4104 	ldr	r4, [r11, r4, lsl #2]
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
    3320:	e2833a01 	add	r3, r3, #4096	; 0x1000

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    3324:	e5d2500f 	ldrb	r5, [r2, #15]

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
    3328:	e24aaa01 	sub	r10, r10, #4096	; 0x1000
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    332c:	e1a06380 	lsl	r6, r0, #7
    3330:	e1a00200 	lsl	r0, r0, #4
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    3334:	e1a07507 	lsl	r7, r7, #10
            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
    3338:	e6ff8073 	uxth	r8, r3
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    333c:	e3c44fff 	bic	r4, r4, #1020	; 0x3fc
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    3340:	e2077b01 	and	r7, r7, #1024	; 0x400
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3344:	e2066c02 	and	r6, r6, #512	; 0x200

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    3348:	e2055001 	and	r5, r5, #1
                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    334c:	e3c44003 	bic	r4, r4, #3
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3350:	e1866007 	orr	r6, r6, r7

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    3354:	e3855002 	orr	r5, r5, #2
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    /* Detect if an existing non-fault region has already been created.
                     * We cannot detect if a fault region is requested and a region description is already a fault,
                     * which it is by default. */
                    if (pagetable[ptindex] != 0)
    3358:	e794710c 	ldr	r7, [r4, r12, lsl #2]

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    335c:	e1866005 	orr	r6, r6, r5
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3360:	e2000030 	and	r0, r0, #48	; 0x30
    3364:	e1860000 	orr	r0, r6, r0
    3368:	e59d600c 	ldr	r6, [sp, #12]
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    /* Detect if an existing non-fault region has already been created.
                     * We cannot detect if a fault region is requested and a region description is already a fault,
                     * which it is by default. */
                    if (pagetable[ptindex] != 0)
    336c:	e3570000 	cmp	r7, #0
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3370:	e59d7010 	ldr	r7, [sp, #16]
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
    3374:	e3c95eff 	bic	r5, r9, #4080	; 0xff0
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3378:	e1800006 	orr	r0, r0, r6
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
    337c:	e59d6014 	ldr	r6, [sp, #20]
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3380:	e1800007 	orr	r0, r0, r7

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    3384:	e59d7004 	ldr	r7, [sp, #4]
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
    3388:	e3c5500f 	bic	r5, r5, #15
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
    338c:	e1800006 	orr	r0, r0, r6
        return 0;
    }

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
    3390:	e1850000 	orr	r0, r5, r0

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    3394:	e087600a 	add	r6, r7, r10
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    /* Detect if an existing non-fault region has already been created.
                     * We cannot detect if a fault region is requested and a region description is already a fault,
                     * which it is by default. */
                    if (pagetable[ptindex] != 0)
    3398:	0affffd3 	beq	32ec <alt_mmu_va_space_create+0x214>
    339c:	eaffff91 	b	31e8 <alt_mmu_va_space_create+0x110>

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    33a0:	e0636009 	rsb	r6, r3, r9
    33a4:	e1a01008 	mov	r1, r8
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    33a8:	e1a00a23 	lsr	r0, r3, #20
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    33ac:	e7e7c653 	ubfx	r12, r3, #12, #8
                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
    33b0:	e2411a01 	sub	r1, r1, #4096	; 0x1000
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    33b4:	e79b0100 	ldr	r0, [r11, r0, lsl #2]

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    33b8:	e08a7001 	add	r7, r10, r1
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
    33bc:	e2833a01 	add	r3, r3, #4096	; 0x1000
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    33c0:	e0687007 	rsb	r7, r8, r7

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    33c4:	e0864003 	add	r4, r6, r3
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    33c8:	e3c00fff 	bic	r0, r0, #1020	; 0x3fc
    33cc:	e3c00003 	bic	r0, r0, #3
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    if (pagetable[ptindex] != 0)
    33d0:	e790510c 	ldr	r5, [r0, r12, lsl #2]
    33d4:	e3550000 	cmp	r5, #0
    33d8:	1affff82 	bne	31e8 <alt_mmu_va_space_create+0x110>
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    33dc:	e3009fff 	movw	r9, #4095	; 0xfff
    33e0:	e1570009 	cmp	r7, r9
    33e4:	8affffef 	bhi	33a8 <alt_mmu_va_space_create+0x2d0>
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
    33e8:	e1a09004 	mov	r9, r4
    33ec:	e58d1004 	str	r1, [sp, #4]
        /* If [va] and [pa] are relatively 1 MiB aligned and the size remaining
         * to be described is greater than 1 MiB, use sections. */

        /* Otherwise use pagetables for everything remaining. */

        if (   (relalign >= ALT_MMU_SUPERSECTION_SIZE)
    33f0:	e59da004 	ldr	r10, [sp, #4]
    33f4:	e3e0c4ff 	mvn	r12, #-16777216	; 0xff000000
    33f8:	e59d001c 	ldr	r0, [sp, #28]
    33fc:	e15a000c 	cmp	r10, r12
    3400:	8150000c 	cmphi	r0, r12
    3404:	9a000040 	bls	350c <alt_mmu_va_space_create+0x434>
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
    3408:	e003100c 	and	r1, r3, r12
    340c:	e3510000 	cmp	r1, #0
    3410:	0a000383 	beq	4224 <alt_mmu_va_space_create+0x114c>
    3414:	e5d2100d 	ldrb	r1, [r2, #13]
    3418:	e59d4020 	ldr	r4, [sp, #32]
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    341c:	e201c001 	and	r12, r1, #1
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3420:	e7e000d1 	ubfx	r0, r1, #1, #1
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3424:	e1a0c10c 	lsl	r12, r12, #2
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3428:	e1a00180 	lsl	r0, r0, #3
    342c:	e594b000 	ldr	r11, [r4]
    3430:	e35100ff 	cmp	r1, #255	; 0xff
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3434:	e20cc004 	and	r12, r12, #4
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    3438:	e7e21251 	ubfx	r1, r1, #4, #3
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    343c:	e2000008 	and	r0, r0, #8
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3440:	e58dc00c 	str	r12, [sp, #12]
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    3444:	e1a0a601 	lsl	r10, r1, #12
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3448:	e58d0010 	str	r0, [sp, #16]
    344c:	0a0000eb 	beq	3800 <alt_mmu_va_space_create+0x728>
    3450:	e59dc004 	ldr	r12, [sp, #4]
    3454:	e58da014 	str	r10, [sp, #20]
    3458:	ea000006 	b	3478 <alt_mmu_va_space_create+0x3a0>
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
    345c:	e59d1004 	ldr	r1, [sp, #4]
                if ((*ttb1)[va >> 20] != 0)
                {
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;
    3460:	e78b4100 	str	r4, [r11, r0, lsl #2]
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
    3464:	e3510000 	cmp	r1, #0
    3468:	0a000177 	beq	3a4c <alt_mmu_va_space_create+0x974>
    346c:	e59d4018 	ldr	r4, [sp, #24]
    3470:	e15c0004 	cmp	r12, r4
    3474:	9a000232 	bls	3d44 <alt_mmu_va_space_create+0xc6c>
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3478:	e5d2100c 	ldrb	r1, [r2, #12]
            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    347c:	e1a00a23 	lsr	r0, r3, #20

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    3480:	e5d2800f 	ldrb	r8, [r2, #15]
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
    3484:	e2833601 	add	r3, r3, #1048576	; 0x100000
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
    3488:	e3c354ff 	bic	r5, r3, #-16777216	; 0xff000000
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    348c:	e5d2600e 	ldrb	r6, [r2, #14]
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
    3490:	e58d5004 	str	r5, [sp, #4]
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
        | ALT_MMU_TTB1_SECTION_BASE_ADDR_SET(pa >> 20);
    3494:	e1a04a29 	lsr	r4, r9, #20
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3498:	e1a07681 	lsl	r7, r1, #13
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    349c:	e5d25010 	ldrb	r5, [r2, #16]

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    34a0:	e1a08208 	lsl	r8, r8, #4
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    34a4:	e1a01501 	lsl	r1, r1, #10
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    34a8:	e1a06806 	lsl	r6, r6, #16
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    34ac:	e59da014 	ldr	r10, [sp, #20]

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    34b0:	e2088010 	and	r8, r8, #16
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    34b4:	e2077902 	and	r7, r7, #32768	; 0x8000
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    34b8:	e1a05985 	lsl	r5, r5, #19
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    34bc:	e1887007 	orr	r7, r8, r7
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
    34c0:	e59d8010 	ldr	r8, [sp, #16]
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    34c4:	e3877002 	orr	r7, r7, #2
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    34c8:	e2011b03 	and	r1, r1, #3072	; 0xc00
    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
    34cc:	e1871001 	orr	r1, r7, r1
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    34d0:	e2066801 	and	r6, r6, #65536	; 0x10000
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    34d4:	e59d700c 	ldr	r7, [sp, #12]
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    34d8:	e1811006 	orr	r1, r1, r6
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    34dc:	e2055702 	and	r5, r5, #524288	; 0x80000
            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    34e0:	e79b6100 	ldr	r6, [r11, r0, lsl #2]
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    34e4:	e1811005 	orr	r1, r1, r5

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
    34e8:	e24cc601 	sub	r12, r12, #1048576	; 0x100000
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    34ec:	e1811007 	orr	r1, r1, r7
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    {
        return 0;
    }

    return 
    34f0:	e2899601 	add	r9, r9, #1048576	; 0x100000
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
    34f4:	e1811008 	orr	r1, r1, r8
            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    34f8:	e3560000 	cmp	r6, #0
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    34fc:	e181100a 	orr	r1, r1, r10
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    {
        return 0;
    }

    return 
    3500:	e1814a04 	orr	r4, r1, r4, lsl #20
            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    3504:	0affffd4 	beq	345c <alt_mmu_va_space_create+0x384>
    3508:	eaffff36 	b	31e8 <alt_mmu_va_space_create+0x110>
                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
            }
        }
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
    350c:	e59dc018 	ldr	r12, [sp, #24]
    3510:	e15a000c 	cmp	r10, r12
    3514:	8150000c 	cmphi	r0, r12
    3518:	8a00007f 	bhi	371c <alt_mmu_va_space_create+0x644>

        /* The remainder should be [va] 1 MiB aligned segment not able to use
         * sections or supersections. Mark that region as pagetable. */

        /* Use large pages if it is suitable. */
        if ((relalign >= ALT_MMU_LARGE_PAGE_SIZE) && (size >= ALT_MMU_LARGE_PAGE_SIZE))
    351c:	e59dc004 	ldr	r12, [sp, #4]
    3520:	e30f0fff 	movw	r0, #65535	; 0xffff
    3524:	e59d101c 	ldr	r1, [sp, #28]
    3528:	e15c0000 	cmp	r12, r0
    352c:	81510000 	cmphi	r1, r0
    3530:	8a0000c5 	bhi	384c <alt_mmu_va_space_create+0x774>
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
                size -= ALT_MMU_LARGE_PAGE_SIZE;
            }
        }

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
    3534:	e59d1004 	ldr	r1, [sp, #4]
    3538:	e3004fff 	movw	r4, #4095	; 0xfff
    353c:	e1510004 	cmp	r1, r4
    3540:	9a000201 	bls	3d4c <alt_mmu_va_space_create+0xc74>
    3544:	e5d2100d 	ldrb	r1, [r2, #13]
    3548:	e59d7020 	ldr	r7, [sp, #32]
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    354c:	e2015001 	and	r5, r1, #1
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3550:	e7e060d1 	ubfx	r6, r1, #1, #1
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3554:	e1a05105 	lsl	r5, r5, #2
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3558:	e1a06186 	lsl	r6, r6, #3
    355c:	e597b000 	ldr	r11, [r7]
    3560:	e35100ff 	cmp	r1, #255	; 0xff
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3564:	e7e21251 	ubfx	r1, r1, #4, #3
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3568:	e2055004 	and	r5, r5, #4
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    356c:	e2066008 	and	r6, r6, #8
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3570:	e1a07301 	lsl	r7, r1, #6
    3574:	0a000315 	beq	41d0 <alt_mmu_va_space_create+0x10f8>
    3578:	e1a01009 	mov	r1, r9
    357c:	e0699003 	rsb	r9, r9, r3
    3580:	e59d3004 	ldr	r3, [sp, #4]
    3584:	e58d5004 	str	r5, [sp, #4]
    3588:	ea000003 	b	359c <alt_mmu_va_space_create+0x4c4>
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
                size -= ALT_MMU_LARGE_PAGE_SIZE;
            }
        }

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
    358c:	e300afff 	movw	r10, #4095	; 0xfff
            if (pagetable[ptindex] != 0)
            {
                return ALT_E_ERROR;
            }

            pagetable[ptindex] = desc;
    3590:	e780410c 	str	r4, [r0, r12, lsl #2]
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
                size -= ALT_MMU_LARGE_PAGE_SIZE;
            }
        }

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
    3594:	e153000a 	cmp	r3, r10
    3598:	9a0001eb 	bls	3d4c <alt_mmu_va_space_create+0xc74>
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    359c:	e5d2500c 	ldrb	r5, [r2, #12]

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    35a0:	e089c001 	add	r12, r9, r1

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    35a4:	e1a00a2c 	lsr	r0, r12, #20

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    35a8:	e5d2800f 	ldrb	r8, [r2, #15]
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    35ac:	e5d2400e 	ldrb	r4, [r2, #14]
        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    35b0:	e7e7c65c 	ubfx	r12, r12, #12, #8

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    35b4:	e79b0100 	ldr	r0, [r11, r0, lsl #2]

            pagetable[ptindex] = desc;

            va   += ALT_MMU_SMALL_PAGE_SIZE;
            pa   += ALT_MMU_SMALL_PAGE_SIZE;
            size -= ALT_MMU_SMALL_PAGE_SIZE;
    35b8:	e2433a01 	sub	r3, r3, #4096	; 0x1000
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    35bc:	e1a0a385 	lsl	r10, r5, #7

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    35c0:	e2088001 	and	r8, r8, #1
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    35c4:	e1a05205 	lsl	r5, r5, #4

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    35c8:	e3888002 	orr	r8, r8, #2
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    35cc:	e20aac02 	and	r10, r10, #512	; 0x200
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    35d0:	e1a04504 	lsl	r4, r4, #10
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    35d4:	e18a8008 	orr	r8, r10, r8

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    35d8:	e3c00fff 	bic	r0, r0, #1020	; 0x3fc
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    35dc:	e2055030 	and	r5, r5, #48	; 0x30

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    35e0:	e1885005 	orr	r5, r8, r5

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    35e4:	e3c00003 	bic	r0, r0, #3
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    35e8:	e59d8004 	ldr	r8, [sp, #4]
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    35ec:	e2044b01 	and	r4, r4, #1024	; 0x400
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

            if (pagetable[ptindex] != 0)
    35f0:	e790a10c 	ldr	r10, [r0, r12, lsl #2]
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    35f4:	e1854004 	orr	r4, r5, r4
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
    35f8:	e3c15eff 	bic	r5, r1, #4080	; 0xff0
            }

            pagetable[ptindex] = desc;

            va   += ALT_MMU_SMALL_PAGE_SIZE;
            pa   += ALT_MMU_SMALL_PAGE_SIZE;
    35fc:	e2811a01 	add	r1, r1, #4096	; 0x1000
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3600:	e1844008 	orr	r4, r4, r8
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
    3604:	e3c5500f 	bic	r5, r5, #15
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3608:	e1844006 	orr	r4, r4, r6
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

            if (pagetable[ptindex] != 0)
    360c:	e35a0000 	cmp	r10, #0
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
    3610:	e1844007 	orr	r4, r4, r7
        return 0;
    }

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
    3614:	e1854004 	orr	r4, r5, r4
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

            if (pagetable[ptindex] != 0)
    3618:	0affffdb 	beq	358c <alt_mmu_va_space_create+0x4b4>
    361c:	eafffef1 	b	31e8 <alt_mmu_va_space_create+0x110>
                }
            }
            else
            {
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    3620:	e300afff 	movw	r10, #4095	; 0xfff
    3624:	e151000a 	cmp	r1, r10
    3628:	9affff70 	bls	33f0 <alt_mmu_va_space_create+0x318>
    362c:	e5d2000d 	ldrb	r0, [r2, #13]
    3630:	e59da020 	ldr	r10, [sp, #32]
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3634:	e200c001 	and	r12, r0, #1
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3638:	e7e040d0 	ubfx	r4, r0, #1, #1
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    363c:	e1a0c10c 	lsl	r12, r12, #2
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3640:	e1a04184 	lsl	r4, r4, #3
    3644:	e59ab000 	ldr	r11, [r10]
    3648:	e35000ff 	cmp	r0, #255	; 0xff
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    364c:	e7e20250 	ubfx	r0, r0, #4, #3
    3650:	e1a00300 	lsl	r0, r0, #6
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3654:	e20cc004 	and	r12, r12, #4
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3658:	e2044008 	and	r4, r4, #8
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    365c:	e58dc00c 	str	r12, [sp, #12]
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3660:	e58d0014 	str	r0, [sp, #20]
    3664:	e1a00001 	mov	r0, r1

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3668:	e58d4010 	str	r4, [sp, #16]
    366c:	1a000004 	bne	3684 <alt_mmu_va_space_create+0x5ac>
    3670:	ea0002a4 	b	4108 <alt_mmu_va_space_create+0x1030>
                }
            }
            else
            {
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    3674:	e300afff 	movw	r10, #4095	; 0xfff
                    if (pagetable[ptindex] != 0)
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;
    3678:	e788c104 	str	r12, [r8, r4, lsl #2]
                }
            }
            else
            {
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    367c:	e150000a 	cmp	r0, r10
    3680:	9a0000ef 	bls	3a44 <alt_mmu_va_space_create+0x96c>
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    3684:	e5d2700e 	ldrb	r7, [r2, #14]
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    3688:	e1a05a23 	lsr	r5, r3, #20
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    368c:	e5d2c00c 	ldrb	r12, [r2, #12]
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    3690:	e7e74653 	ubfx	r4, r3, #12, #8

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    3694:	e5d2a00f 	ldrb	r10, [r2, #15]

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
    3698:	e2400a01 	sub	r0, r0, #4096	; 0x1000
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    369c:	e79b8105 	ldr	r8, [r11, r5, lsl #2]
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
    36a0:	e3c95eff 	bic	r5, r9, #4080	; 0xff0
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    36a4:	e1a07507 	lsl	r7, r7, #10
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
    36a8:	e3c5500f 	bic	r5, r5, #15
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    36ac:	e1a0620c 	lsl	r6, r12, #4

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    36b0:	e20aa001 	and	r10, r10, #1
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    36b4:	e2077b01 	and	r7, r7, #1024	; 0x400
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    36b8:	e1a0c38c 	lsl	r12, r12, #7

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    36bc:	e38aa002 	orr	r10, r10, #2
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    36c0:	e187a00a 	orr	r10, r7, r10
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    36c4:	e2066030 	and	r6, r6, #48	; 0x30

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    36c8:	e59d7004 	ldr	r7, [sp, #4]

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    36cc:	e18aa006 	orr	r10, r10, r6
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    36d0:	e3c88fff 	bic	r8, r8, #1020	; 0x3fc
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    36d4:	e20ccc02 	and	r12, r12, #512	; 0x200
    36d8:	e18ac00c 	orr	r12, r10, r12
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    36dc:	e3c88003 	bic	r8, r8, #3
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    36e0:	e59da00c 	ldr	r10, [sp, #12]

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    36e4:	e0876000 	add	r6, r7, r0
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    if (pagetable[ptindex] != 0)
    36e8:	e7987104 	ldr	r7, [r8, r4, lsl #2]
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
    36ec:	e2833a01 	add	r3, r3, #4096	; 0x1000
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
    36f0:	e2899a01 	add	r9, r9, #4096	; 0x1000

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    36f4:	e0616006 	rsb	r6, r1, r6
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    36f8:	e18cc00a 	orr	r12, r12, r10
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    36fc:	e59da010 	ldr	r10, [sp, #16]
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    if (pagetable[ptindex] != 0)
    3700:	e3570000 	cmp	r7, #0
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
    3704:	e59d7014 	ldr	r7, [sp, #20]
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3708:	e18cc00a 	orr	r12, r12, r10
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
    370c:	e18cc007 	orr	r12, r12, r7
        return 0;
    }

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
    3710:	e185c00c 	orr	r12, r5, r12
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    if (pagetable[ptindex] != 0)
    3714:	0affffd6 	beq	3674 <alt_mmu_va_space_create+0x59c>
    3718:	eafffeb2 	b	31e8 <alt_mmu_va_space_create+0x110>
    371c:	e5d2100d 	ldrb	r1, [r2, #13]
    3720:	e59d0020 	ldr	r0, [sp, #32]
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3724:	e2018001 	and	r8, r1, #1
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3728:	e7e0a0d1 	ubfx	r10, r1, #1, #1
    372c:	e35100ff 	cmp	r1, #255	; 0xff
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    3730:	e7e21251 	ubfx	r1, r1, #4, #3
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3734:	e1a08108 	lsl	r8, r8, #2
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3738:	e1a0a18a 	lsl	r10, r10, #3
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    373c:	e1a01601 	lsl	r1, r1, #12
    3740:	e590b000 	ldr	r11, [r0]
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3744:	e2088004 	and	r8, r8, #4
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3748:	e20aa008 	and	r10, r10, #8
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    374c:	e58d100c 	str	r1, [sp, #12]
    3750:	0a000286 	beq	4170 <alt_mmu_va_space_create+0x1098>
    3754:	e59d0004 	ldr	r0, [sp, #4]
    3758:	e58d8010 	str	r8, [sp, #16]
    375c:	e58da004 	str	r10, [sp, #4]
    3760:	ea000003 	b	3774 <alt_mmu_va_space_create+0x69c>
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
                 && (size     >= ALT_MMU_SECTION_SIZE))
        {
            /* No supersection possible. Use regular sections only. */

            while (size >= ALT_MMU_SECTION_SIZE)
    3764:	e59da018 	ldr	r10, [sp, #24]
                if ((*ttb1)[va >> 20] != 0)
                {
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;
    3768:	e78b110c 	str	r1, [r11, r12, lsl #2]
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
                 && (size     >= ALT_MMU_SECTION_SIZE))
        {
            /* No supersection possible. Use regular sections only. */

            while (size >= ALT_MMU_SECTION_SIZE)
    376c:	e150000a 	cmp	r0, r10
    3770:	9a00017e 	bls	3d70 <alt_mmu_va_space_create+0xc98>
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3774:	e5d2100c 	ldrb	r1, [r2, #12]

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    3778:	e1a0ca23 	lsr	r12, r3, #20

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    377c:	e5d2800f 	ldrb	r8, [r2, #15]
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
        | ALT_MMU_TTB1_SECTION_BASE_ADDR_SET(pa >> 20);
    3780:	e1a04a29 	lsr	r4, r9, #20
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    3784:	e5d2600e 	ldrb	r6, [r2, #14]

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
    3788:	e2400601 	sub	r0, r0, #1048576	; 0x100000
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    378c:	e5d25010 	ldrb	r5, [r2, #16]
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
    3790:	e2833601 	add	r3, r3, #1048576	; 0x100000
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3794:	e1a07681 	lsl	r7, r1, #13
    3798:	e1a01501 	lsl	r1, r1, #10

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    379c:	e1a08208 	lsl	r8, r8, #4
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    37a0:	e2077902 	and	r7, r7, #32768	; 0x8000
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    37a4:	e1a06806 	lsl	r6, r6, #16

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    37a8:	e2088010 	and	r8, r8, #16
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    37ac:	e1a05985 	lsl	r5, r5, #19
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    37b0:	e1887007 	orr	r7, r8, r7
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    37b4:	e59d800c 	ldr	r8, [sp, #12]
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    37b8:	e3877002 	orr	r7, r7, #2
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    37bc:	e2011b03 	and	r1, r1, #3072	; 0xc00
    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
    37c0:	e1871001 	orr	r1, r7, r1
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    37c4:	e2066801 	and	r6, r6, #65536	; 0x10000
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    37c8:	e1811006 	orr	r1, r1, r6
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    37cc:	e2055702 	and	r5, r5, #524288	; 0x80000
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    37d0:	e59d6010 	ldr	r6, [sp, #16]
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    37d4:	e1811005 	orr	r1, r1, r5
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
    37d8:	e59d7004 	ldr	r7, [sp, #4]
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    {
        return 0;
    }

    return 
    37dc:	e2899601 	add	r9, r9, #1048576	; 0x100000

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    37e0:	e79b510c 	ldr	r5, [r11, r12, lsl #2]
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    37e4:	e1811006 	orr	r1, r1, r6
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
    37e8:	e1811007 	orr	r1, r1, r7

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    37ec:	e3550000 	cmp	r5, #0
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    37f0:	e1811008 	orr	r1, r1, r8
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    {
        return 0;
    }

    return 
    37f4:	e1811a04 	orr	r1, r1, r4, lsl #20

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    37f8:	0affffd9 	beq	3764 <alt_mmu_va_space_create+0x68c>
    37fc:	eafffe79 	b	31e8 <alt_mmu_va_space_create+0x110>

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    3800:	e0635009 	rsb	r5, r3, r9
    3804:	e59d1004 	ldr	r1, [sp, #4]
    3808:	e59d7018 	ldr	r7, [sp, #24]
    380c:	ea000003 	b	3820 <alt_mmu_va_space_create+0x748>
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
    3810:	e3560000 	cmp	r6, #0
    3814:	0a000267 	beq	41b8 <alt_mmu_va_space_create+0x10e0>
    3818:	e1510007 	cmp	r1, r7
    381c:	9a000262 	bls	41ac <alt_mmu_va_space_create+0x10d4>
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    3820:	e1a00a23 	lsr	r0, r3, #20
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
    3824:	e2833601 	add	r3, r3, #1048576	; 0x100000
            && (size     >= ALT_MMU_SUPERSECTION_SIZE))
        {
            /* Attempt to use supersections. This may not always be possible. */

            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
    3828:	e3c364ff 	bic	r6, r3, #-16777216	; 0xff000000
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    382c:	e79bc100 	ldr	r12, [r11, r0, lsl #2]

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
    3830:	e2411601 	sub	r1, r1, #1048576	; 0x100000

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    3834:	e0854003 	add	r4, r5, r3
            /* Use regular sections for the areas before supersections that does not align to 16 MiB */
            while (((va & (ALT_MMU_SUPERSECTION_SIZE - 1)) != 0) && (size >= ALT_MMU_SECTION_SIZE))
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    3838:	e35c0000 	cmp	r12, #0
    383c:	0afffff3 	beq	3810 <alt_mmu_va_space_create+0x738>
    3840:	eafffe68 	b	31e8 <alt_mmu_va_space_create+0x110>

    /* The stricter of the two alignment is 16 KiB. */

    if ((uintptr_t)memory & ((1 << 14) - 1))
    {
        return ALT_E_BAD_ARG;
    3844:	e3e00008 	mvn	r0, #8
    3848:	eafffe67 	b	31ec <alt_mmu_va_space_create+0x114>
    384c:	e5d2400d 	ldrb	r4, [r2, #13]
    3850:	e59d7020 	ldr	r7, [sp, #32]
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    3854:	e7e0a0d4 	ubfx	r10, r4, #1, #1
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    3858:	e7e28254 	ubfx	r8, r4, #4, #3
    385c:	e597b000 	ldr	r11, [r7]

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
    3860:	e2047001 	and	r7, r4, #1
    3864:	e1a07107 	lsl	r7, r7, #2
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    3868:	e1a0a18a 	lsl	r10, r10, #3
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    386c:	e1a08608 	lsl	r8, r8, #12

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
    3870:	e2077004 	and	r7, r7, #4
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    3874:	e20aa008 	and	r10, r10, #8
{
    int tex = (mem->attributes >> 4) & 0x7;
    int c   = (mem->attributes >> 1) & 0x1;
    int b   = (mem->attributes >> 0) & 0x1;

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    3878:	e35400ff 	cmp	r4, #255	; 0xff
    {
        return 0;
    387c:	03a0c000 	moveq	r12, #0
{
    int tex = (mem->attributes >> 4) & 0x7;
    int c   = (mem->attributes >> 1) & 0x1;
    int b   = (mem->attributes >> 0) & 0x1;

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    3880:	0a000012 	beq	38d0 <alt_mmu_va_space_create+0x7f8>

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    3884:	e5d2100c 	ldrb	r1, [r2, #12]
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_LARGE_PAGE_BASE_ADDR_SET(pa >> 16);
    3888:	e1a00829 	lsr	r0, r9, #16
    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
    388c:	e5d2600e 	ldrb	r6, [r2, #14]
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
    3890:	e5d2c00f 	ldrb	r12, [r2, #15]

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    3894:	e1a05381 	lsl	r5, r1, #7
    3898:	e1a01201 	lsl	r1, r1, #4
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
    389c:	e1a06506 	lsl	r6, r6, #10

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    38a0:	e2011030 	and	r1, r1, #48	; 0x30
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
    38a4:	e1a0cf8c 	lsl	r12, r12, #31

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    38a8:	e2055c02 	and	r5, r5, #512	; 0x200

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
    38ac:	e1855001 	orr	r5, r5, r1
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
    38b0:	e2066b01 	and	r6, r6, #1024	; 0x400
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    38b4:	e3851001 	orr	r1, r5, #1
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    38b8:	e1811006 	orr	r1, r1, r6
    38bc:	e181182c 	orr	r1, r1, r12, lsr #16
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
    38c0:	e1811007 	orr	r1, r1, r7
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    38c4:	e181100a 	orr	r1, r1, r10
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
    38c8:	e1811008 	orr	r1, r1, r8
        return 0;
    }

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
    38cc:	e181c800 	orr	r12, r1, r0, lsl #16
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);

                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    38d0:	e1a01a23 	lsr	r1, r3, #20
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    38d4:	e7e70653 	ubfx	r0, r3, #12, #8
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);

                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    38d8:	e79b1101 	ldr	r1, [r11, r1, lsl #2]
    38dc:	e3c11fff 	bic	r1, r1, #1020	; 0x3fc
    38e0:	e3c11003 	bic	r1, r1, #3
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    38e4:	e7915100 	ldr	r5, [r1, r0, lsl #2]
    38e8:	e3550000 	cmp	r5, #0
    38ec:	1afffe3d 	bne	31e8 <alt_mmu_va_space_create+0x110>
    38f0:	e2805001 	add	r5, r0, #1
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    38f4:	e781c100 	str	r12, [r1, r0, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    38f8:	e7916105 	ldr	r6, [r1, r5, lsl #2]
    38fc:	e3560000 	cmp	r6, #0
    3900:	1afffe38 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3904:	e2806002 	add	r6, r0, #2
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    3908:	e781c105 	str	r12, [r1, r5, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    390c:	e7915106 	ldr	r5, [r1, r6, lsl #2]
    3910:	e3550000 	cmp	r5, #0
    3914:	1afffe33 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3918:	e2805003 	add	r5, r0, #3
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    391c:	e781c106 	str	r12, [r1, r6, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    3920:	e7916105 	ldr	r6, [r1, r5, lsl #2]
    3924:	e3560000 	cmp	r6, #0
    3928:	1afffe2e 	bne	31e8 <alt_mmu_va_space_create+0x110>
    392c:	e2806004 	add	r6, r0, #4
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    3930:	e781c105 	str	r12, [r1, r5, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    3934:	e7915106 	ldr	r5, [r1, r6, lsl #2]
    3938:	e3550000 	cmp	r5, #0
    393c:	1afffe29 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3940:	e2805005 	add	r5, r0, #5
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    3944:	e781c106 	str	r12, [r1, r6, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    3948:	e7916105 	ldr	r6, [r1, r5, lsl #2]
    394c:	e3560000 	cmp	r6, #0
    3950:	1afffe24 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3954:	e2806006 	add	r6, r0, #6
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    3958:	e781c105 	str	r12, [r1, r5, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    395c:	e7915106 	ldr	r5, [r1, r6, lsl #2]
    3960:	e3550000 	cmp	r5, #0
    3964:	1afffe1f 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3968:	e2805007 	add	r5, r0, #7
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    396c:	e781c106 	str	r12, [r1, r6, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    3970:	e7916105 	ldr	r6, [r1, r5, lsl #2]
    3974:	e3560000 	cmp	r6, #0
    3978:	1afffe1a 	bne	31e8 <alt_mmu_va_space_create+0x110>
    397c:	e2806008 	add	r6, r0, #8
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    3980:	e781c105 	str	r12, [r1, r5, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    3984:	e7915106 	ldr	r5, [r1, r6, lsl #2]
    3988:	e3550000 	cmp	r5, #0
    398c:	1afffe15 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3990:	e2805009 	add	r5, r0, #9
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    3994:	e781c106 	str	r12, [r1, r6, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    3998:	e7916105 	ldr	r6, [r1, r5, lsl #2]
    399c:	e3560000 	cmp	r6, #0
    39a0:	1afffe10 	bne	31e8 <alt_mmu_va_space_create+0x110>
    39a4:	e280600a 	add	r6, r0, #10
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    39a8:	e781c105 	str	r12, [r1, r5, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    39ac:	e7915106 	ldr	r5, [r1, r6, lsl #2]
    39b0:	e3550000 	cmp	r5, #0
    39b4:	1afffe0b 	bne	31e8 <alt_mmu_va_space_create+0x110>
    39b8:	e280500b 	add	r5, r0, #11
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    39bc:	e781c106 	str	r12, [r1, r6, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    39c0:	e7916105 	ldr	r6, [r1, r5, lsl #2]
    39c4:	e3560000 	cmp	r6, #0
    39c8:	1afffe06 	bne	31e8 <alt_mmu_va_space_create+0x110>
    39cc:	e280600c 	add	r6, r0, #12
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    39d0:	e781c105 	str	r12, [r1, r5, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    39d4:	e7915106 	ldr	r5, [r1, r6, lsl #2]
    39d8:	e3550000 	cmp	r5, #0
    39dc:	1afffe01 	bne	31e8 <alt_mmu_va_space_create+0x110>
    39e0:	e280500d 	add	r5, r0, #13
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    39e4:	e781c106 	str	r12, [r1, r6, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    39e8:	e7916105 	ldr	r6, [r1, r5, lsl #2]
    39ec:	e3560000 	cmp	r6, #0
    39f0:	1afffdfc 	bne	31e8 <alt_mmu_va_space_create+0x110>
    39f4:	e280600e 	add	r6, r0, #14
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    39f8:	e781c105 	str	r12, [r1, r5, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    39fc:	e7915106 	ldr	r5, [r1, r6, lsl #2]
    3a00:	e3550000 	cmp	r5, #0
    3a04:	1afffdf7 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3a08:	e280000f 	add	r0, r0, #15
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    3a0c:	e781c106 	str	r12, [r1, r6, lsl #2]
                uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                for (j = 0; j < 16; ++j)
                {
                    if (pagetable[ptindex + j] != 0)
    3a10:	e7915100 	ldr	r5, [r1, r0, lsl #2]
    3a14:	e3550000 	cmp	r5, #0
    3a18:	1afffdf2 	bne	31e8 <alt_mmu_va_space_create+0x110>
                    pagetable[ptindex + j] = desc;
                }

                va   += ALT_MMU_LARGE_PAGE_SIZE;
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
                size -= ALT_MMU_LARGE_PAGE_SIZE;
    3a1c:	e59d5004 	ldr	r5, [sp, #4]
         * sections or supersections. Mark that region as pagetable. */

        /* Use large pages if it is suitable. */
        if ((relalign >= ALT_MMU_LARGE_PAGE_SIZE) && (size >= ALT_MMU_LARGE_PAGE_SIZE))
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
    3a20:	e30f6fff 	movw	r6, #65535	; 0xffff
                    if (pagetable[ptindex + j] != 0)
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex + j] = desc;
    3a24:	e781c100 	str	r12, [r1, r0, lsl #2]
                }

                va   += ALT_MMU_LARGE_PAGE_SIZE;
    3a28:	e2833801 	add	r3, r3, #65536	; 0x10000
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
    3a2c:	e2899801 	add	r9, r9, #65536	; 0x10000
                size -= ALT_MMU_LARGE_PAGE_SIZE;
    3a30:	e2455801 	sub	r5, r5, #65536	; 0x10000
         * sections or supersections. Mark that region as pagetable. */

        /* Use large pages if it is suitable. */
        if ((relalign >= ALT_MMU_LARGE_PAGE_SIZE) && (size >= ALT_MMU_LARGE_PAGE_SIZE))
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
    3a34:	e1550006 	cmp	r5, r6
                    pagetable[ptindex + j] = desc;
                }

                va   += ALT_MMU_LARGE_PAGE_SIZE;
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
                size -= ALT_MMU_LARGE_PAGE_SIZE;
    3a38:	e58d5004 	str	r5, [sp, #4]
         * sections or supersections. Mark that region as pagetable. */

        /* Use large pages if it is suitable. */
        if ((relalign >= ALT_MMU_LARGE_PAGE_SIZE) && (size >= ALT_MMU_LARGE_PAGE_SIZE))
        {
            while (size >= ALT_MMU_LARGE_PAGE_SIZE)
    3a3c:	8affff8d 	bhi	3878 <alt_mmu_va_space_create+0x7a0>
    3a40:	eafffebb 	b	3534 <alt_mmu_va_space_create+0x45c>
                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
    3a44:	e58d6004 	str	r6, [sp, #4]
    3a48:	eafffe68 	b	33f0 <alt_mmu_va_space_create+0x318>
    3a4c:	e1a0500c 	mov	r5, r12
    3a50:	e58dc004 	str	r12, [sp, #4]
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
            }

            /* Use supersections for the 16 MiB aligned areas */
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
    3a54:	e3e064ff 	mvn	r6, #-16777216	; 0xff000000
    3a58:	e1550006 	cmp	r5, r6
    3a5c:	9a00007e 	bls	3c5c <alt_mmu_va_space_create+0xb84>
    3a60:	e5d2700d 	ldrb	r7, [r2, #13]
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
    3a64:	e2078001 	and	r8, r7, #1
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
    3a68:	e7e010d7 	ubfx	r1, r7, #1, #1
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
    3a6c:	e1a08108 	lsl	r8, r8, #2
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
    3a70:	e7e2a257 	ubfx	r10, r7, #4, #3
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
    3a74:	e1a01181 	lsl	r1, r1, #3
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
    3a78:	e1a0a60a 	lsl	r10, r10, #12
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
    3a7c:	e2088004 	and	r8, r8, #4
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
    3a80:	e2011008 	and	r1, r1, #8
    3a84:	e58d100c 	str	r1, [sp, #12]
{
    int tex = (mem->attributes >> 4) & 0x7;
    int c   = (mem->attributes >> 1) & 0x1;
    int b   = (mem->attributes >> 0) & 0x1;

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    3a88:	e35700ff 	cmp	r7, #255	; 0xff
    {
        return 0;
    3a8c:	03a00000 	moveq	r0, #0
{
    int tex = (mem->attributes >> 4) & 0x7;
    int c   = (mem->attributes >> 1) & 0x1;
    int b   = (mem->attributes >> 0) & 0x1;

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    3a90:	0a000019 	beq	3afc <alt_mmu_va_space_create+0xa24>
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
    3a94:	e5d2100c 	ldrb	r1, [r2, #12]
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
        | ALT_MMU_TTB1_SUPERSECTION_BASE_ADDR_SET(pa >> 24);
    3a98:	e20904ff 	and	r0, r9, #-16777216	; 0xff000000

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
    3a9c:	e5d2600f 	ldrb	r6, [r2, #15]
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
    3aa0:	e5d2400e 	ldrb	r4, [r2, #14]
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
    3aa4:	e5d2c010 	ldrb	r12, [r2, #16]
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
    3aa8:	e1a05681 	lsl	r5, r1, #13
    3aac:	e1a01501 	lsl	r1, r1, #10

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
    3ab0:	e1a06206 	lsl	r6, r6, #4
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
    3ab4:	e2055902 	and	r5, r5, #32768	; 0x8000
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
    3ab8:	e1a04804 	lsl	r4, r4, #16

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
    3abc:	e2066010 	and	r6, r6, #16
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
    3ac0:	e1a0c98c 	lsl	r12, r12, #19
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
    3ac4:	e1865005 	orr	r5, r6, r5
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
    3ac8:	e3855701 	orr	r5, r5, #262144	; 0x40000
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
    3acc:	e2011b03 	and	r1, r1, #3072	; 0xc00
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
    3ad0:	e3855002 	orr	r5, r5, #2
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
    3ad4:	e2044801 	and	r4, r4, #65536	; 0x10000
    return 
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
    3ad8:	e1855001 	orr	r5, r5, r1
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
    3adc:	e20cc702 	and	r12, r12, #524288	; 0x80000
          ALT_MMU_TTB1_TYPE_SET(0x2) | (1 << 18) /* bit 18 marks section as being super. */
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
    3ae0:	e1851004 	orr	r1, r5, r4
    3ae4:	e181100c 	orr	r1, r1, r12
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
    3ae8:	e59dc00c 	ldr	r12, [sp, #12]
        | ALT_MMU_TTB1_SUPERSECTION_B_SET(b)
        | ALT_MMU_TTB1_SUPERSECTION_C_SET(c)
        | ALT_MMU_TTB1_SUPERSECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SUPERSECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SUPERSECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SUPERSECTION_TEX_SET(tex)
    3aec:	e1811008 	orr	r1, r1, r8
        | ALT_MMU_TTB1_SUPERSECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SUPERSECTION_NG_SET(0)
    3af0:	e181100c 	orr	r1, r1, r12
        | ALT_MMU_TTB1_SUPERSECTION_NS_SET(mem->security)
    3af4:	e181100a 	orr	r1, r1, r10
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    {
        return 0;
    }

    return 
    3af8:	e1800001 	orr	r0, r0, r1
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3afc:	e1a01a23 	lsr	r1, r3, #20
    3b00:	e79bc101 	ldr	r12, [r11, r1, lsl #2]
    3b04:	e35c0000 	cmp	r12, #0
    3b08:	1afffdb6 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3b0c:	e281c001 	add	r12, r1, #1
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3b10:	e78b0101 	str	r0, [r11, r1, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3b14:	e79b410c 	ldr	r4, [r11, r12, lsl #2]
    3b18:	e3540000 	cmp	r4, #0
    3b1c:	1afffdb1 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3b20:	e2814002 	add	r4, r1, #2
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3b24:	e78b010c 	str	r0, [r11, r12, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3b28:	e79bc104 	ldr	r12, [r11, r4, lsl #2]
    3b2c:	e35c0000 	cmp	r12, #0
    3b30:	1afffdac 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3b34:	e281c003 	add	r12, r1, #3
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3b38:	e78b0104 	str	r0, [r11, r4, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3b3c:	e79b410c 	ldr	r4, [r11, r12, lsl #2]
    3b40:	e3540000 	cmp	r4, #0
    3b44:	1afffda7 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3b48:	e2814004 	add	r4, r1, #4
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3b4c:	e78b010c 	str	r0, [r11, r12, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3b50:	e79bc104 	ldr	r12, [r11, r4, lsl #2]
    3b54:	e35c0000 	cmp	r12, #0
    3b58:	1afffda2 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3b5c:	e281c005 	add	r12, r1, #5
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3b60:	e78b0104 	str	r0, [r11, r4, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3b64:	e79b410c 	ldr	r4, [r11, r12, lsl #2]
    3b68:	e3540000 	cmp	r4, #0
    3b6c:	1afffd9d 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3b70:	e2814006 	add	r4, r1, #6
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3b74:	e78b010c 	str	r0, [r11, r12, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3b78:	e79bc104 	ldr	r12, [r11, r4, lsl #2]
    3b7c:	e35c0000 	cmp	r12, #0
    3b80:	1afffd98 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3b84:	e281c007 	add	r12, r1, #7
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3b88:	e78b0104 	str	r0, [r11, r4, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3b8c:	e79b410c 	ldr	r4, [r11, r12, lsl #2]
    3b90:	e3540000 	cmp	r4, #0
    3b94:	1afffd93 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3b98:	e2814008 	add	r4, r1, #8
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3b9c:	e78b010c 	str	r0, [r11, r12, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3ba0:	e79bc104 	ldr	r12, [r11, r4, lsl #2]
    3ba4:	e35c0000 	cmp	r12, #0
    3ba8:	1afffd8e 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3bac:	e281c009 	add	r12, r1, #9
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3bb0:	e78b0104 	str	r0, [r11, r4, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3bb4:	e79b410c 	ldr	r4, [r11, r12, lsl #2]
    3bb8:	e3540000 	cmp	r4, #0
    3bbc:	1afffd89 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3bc0:	e281400a 	add	r4, r1, #10
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3bc4:	e78b010c 	str	r0, [r11, r12, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3bc8:	e79bc104 	ldr	r12, [r11, r4, lsl #2]
    3bcc:	e35c0000 	cmp	r12, #0
    3bd0:	1afffd84 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3bd4:	e281c00b 	add	r12, r1, #11
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3bd8:	e78b0104 	str	r0, [r11, r4, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3bdc:	e79b410c 	ldr	r4, [r11, r12, lsl #2]
    3be0:	e3540000 	cmp	r4, #0
    3be4:	1afffd7f 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3be8:	e281400c 	add	r4, r1, #12
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3bec:	e78b010c 	str	r0, [r11, r12, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3bf0:	e79bc104 	ldr	r12, [r11, r4, lsl #2]
    3bf4:	e35c0000 	cmp	r12, #0
    3bf8:	1afffd7a 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3bfc:	e281c00d 	add	r12, r1, #13
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3c00:	e78b0104 	str	r0, [r11, r4, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3c04:	e79b410c 	ldr	r4, [r11, r12, lsl #2]
    3c08:	e3540000 	cmp	r4, #0
    3c0c:	1afffd75 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3c10:	e281400e 	add	r4, r1, #14
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3c14:	e78b010c 	str	r0, [r11, r12, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3c18:	e79bc104 	ldr	r12, [r11, r4, lsl #2]
    3c1c:	e35c0000 	cmp	r12, #0
    3c20:	1afffd70 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3c24:	e281100f 	add	r1, r1, #15
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3c28:	e78b0104 	str	r0, [r11, r4, lsl #2]
            {
                uint32_t desc = alt_mmu_va_space_gen_supersection(pa, &mem_regions[i]);

                for (j = 0; j < 16; ++j)
                {
                    if ((*ttb1)[(va >> 20) + j] != 0)
    3c2c:	e79bc101 	ldr	r12, [r11, r1, lsl #2]
    3c30:	e35c0000 	cmp	r12, #0
    3c34:	1afffd6b 	bne	31e8 <alt_mmu_va_space_create+0x110>
                    (*ttb1)[(va >> 20) + j] = desc;
                }

                va   += ALT_MMU_SUPERSECTION_SIZE;
                pa   += ALT_MMU_SUPERSECTION_SIZE;
                size -= ALT_MMU_SUPERSECTION_SIZE;
    3c38:	e59d4004 	ldr	r4, [sp, #4]
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
            }

            /* Use supersections for the 16 MiB aligned areas */
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
    3c3c:	e3e054ff 	mvn	r5, #-16777216	; 0xff000000
                    if ((*ttb1)[(va >> 20) + j] != 0)
                    {
                        return ALT_E_ERROR;
                    }

                    (*ttb1)[(va >> 20) + j] = desc;
    3c40:	e78b0101 	str	r0, [r11, r1, lsl #2]
                }

                va   += ALT_MMU_SUPERSECTION_SIZE;
    3c44:	e2833401 	add	r3, r3, #16777216	; 0x1000000
                pa   += ALT_MMU_SUPERSECTION_SIZE;
    3c48:	e2899401 	add	r9, r9, #16777216	; 0x1000000
                size -= ALT_MMU_SUPERSECTION_SIZE;
    3c4c:	e28444ff 	add	r4, r4, #-16777216	; 0xff000000
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
            }

            /* Use supersections for the 16 MiB aligned areas */
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
    3c50:	e1540005 	cmp	r4, r5
                    (*ttb1)[(va >> 20) + j] = desc;
                }

                va   += ALT_MMU_SUPERSECTION_SIZE;
                pa   += ALT_MMU_SUPERSECTION_SIZE;
                size -= ALT_MMU_SUPERSECTION_SIZE;
    3c54:	e58d4004 	str	r4, [sp, #4]
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
            }

            /* Use supersections for the 16 MiB aligned areas */
            while (size >= ALT_MMU_SUPERSECTION_SIZE)
    3c58:	8affff8a 	bhi	3a88 <alt_mmu_va_space_create+0x9b0>
                pa   += ALT_MMU_SUPERSECTION_SIZE;
                size -= ALT_MMU_SUPERSECTION_SIZE;
            }

            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
    3c5c:	e59d6004 	ldr	r6, [sp, #4]
    3c60:	e59d7018 	ldr	r7, [sp, #24]
    3c64:	e1560007 	cmp	r6, r7
    3c68:	9afffe2b 	bls	351c <alt_mmu_va_space_create+0x444>
    3c6c:	e5d2100d 	ldrb	r1, [r2, #13]
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3c70:	e2018001 	and	r8, r1, #1
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3c74:	e7e0a0d1 	ubfx	r10, r1, #1, #1
    3c78:	e35100ff 	cmp	r1, #255	; 0xff
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    3c7c:	e7e21251 	ubfx	r1, r1, #4, #3
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3c80:	e1a08108 	lsl	r8, r8, #2
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3c84:	e1a0a18a 	lsl	r10, r10, #3
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    3c88:	e1a01601 	lsl	r1, r1, #12
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3c8c:	e2088004 	and	r8, r8, #4
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3c90:	e20aa008 	and	r10, r10, #8
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    3c94:	e58d100c 	str	r1, [sp, #12]
    3c98:	0a000164 	beq	4230 <alt_mmu_va_space_create+0x1158>
    3c9c:	e58d8010 	str	r8, [sp, #16]
    3ca0:	ea000003 	b	3cb4 <alt_mmu_va_space_create+0xbdc>
                pa   += ALT_MMU_SUPERSECTION_SIZE;
                size -= ALT_MMU_SUPERSECTION_SIZE;
            }

            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
    3ca4:	e59d7018 	ldr	r7, [sp, #24]
                if ((*ttb1)[va >> 20] != 0)
                {
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;
    3ca8:	e78b0101 	str	r0, [r11, r1, lsl #2]
                pa   += ALT_MMU_SUPERSECTION_SIZE;
                size -= ALT_MMU_SUPERSECTION_SIZE;
            }

            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
    3cac:	e1580007 	cmp	r8, r7
    3cb0:	9afffe19 	bls	351c <alt_mmu_va_space_create+0x444>
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3cb4:	e5d2500c 	ldrb	r5, [r2, #12]
            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    3cb8:	e1a01a23 	lsr	r1, r3, #20

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    3cbc:	e5d2700f 	ldrb	r7, [r2, #15]
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
        | ALT_MMU_TTB1_SECTION_BASE_ADDR_SET(pa >> 20);
    3cc0:	e1a00a29 	lsr	r0, r9, #20
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    3cc4:	e5d2400e 	ldrb	r4, [r2, #14]
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
    3cc8:	e2833601 	add	r3, r3, #1048576	; 0x100000
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    3ccc:	e5d2c010 	ldrb	r12, [r2, #16]
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    {
        return 0;
    }

    return 
    3cd0:	e2899601 	add	r9, r9, #1048576	; 0x100000
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3cd4:	e1a06685 	lsl	r6, r5, #13
    3cd8:	e1a05505 	lsl	r5, r5, #10

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    3cdc:	e1a07207 	lsl	r7, r7, #4

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
    3ce0:	e59d8004 	ldr	r8, [sp, #4]
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3ce4:	e2066902 	and	r6, r6, #32768	; 0x8000
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    3ce8:	e1a04804 	lsl	r4, r4, #16

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
    3cec:	e2077010 	and	r7, r7, #16
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    3cf0:	e1a0c98c 	lsl	r12, r12, #19
        return 0;
    }

    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
    3cf4:	e1876006 	orr	r6, r7, r6
        | ALT_MMU_TTB1_SECTION_C_SET(c)
    3cf8:	e3866002 	orr	r6, r6, #2
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3cfc:	e2055b03 	and	r5, r5, #3072	; 0xc00
    return 
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
    3d00:	e1865005 	orr	r5, r6, r5
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
    3d04:	e2044801 	and	r4, r4, #65536	; 0x10000
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3d08:	e1854004 	orr	r4, r5, r4
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    3d0c:	e20cc702 	and	r12, r12, #524288	; 0x80000
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    3d10:	e59d5010 	ldr	r5, [sp, #16]
          ALT_MMU_TTB1_TYPE_SET(0x2)
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
    3d14:	e184c00c 	orr	r12, r4, r12
            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    3d18:	e79b4101 	ldr	r4, [r11, r1, lsl #2]

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
    3d1c:	e2488601 	sub	r8, r8, #1048576	; 0x100000
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    3d20:	e59d600c 	ldr	r6, [sp, #12]
        | ALT_MMU_TTB1_SECTION_B_SET(b)
        | ALT_MMU_TTB1_SECTION_C_SET(c)
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
    3d24:	e18cc005 	orr	r12, r12, r5

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
    3d28:	e58d8004 	str	r8, [sp, #4]
        | ALT_MMU_TTB1_SECTION_XN_SET(mem->execute)
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
    3d2c:	e18cc00a 	orr	r12, r12, r10
            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    3d30:	e3540000 	cmp	r4, #0
        | ALT_MMU_TTB1_SECTION_DOMAIN_SET(0)
        | ALT_MMU_TTB1_SECTION_AP_SET(mem->access)
        | ALT_MMU_TTB1_SECTION_TEX_SET(tex)
        | ALT_MMU_TTB1_SECTION_S_SET(mem->shareable)
        | ALT_MMU_TTB1_SECTION_NG_SET(0)
        | ALT_MMU_TTB1_SECTION_NS_SET(mem->security)
    3d34:	e18cc006 	orr	r12, r12, r6
    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    {
        return 0;
    }

    return 
    3d38:	e18c0a00 	orr	r0, r12, r0, lsl #20
            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    3d3c:	0affffd8 	beq	3ca4 <alt_mmu_va_space_create+0xbcc>
    3d40:	eafffd28 	b	31e8 <alt_mmu_va_space_create+0x110>
    3d44:	e58dc004 	str	r12, [sp, #4]
    3d48:	eaffffc3 	b	3c5c <alt_mmu_va_space_create+0xb84>
        return ALT_E_ERROR;
    }

    /* Iterate through all region descriptors */

    for (i = 0; i < num_mem_regions; ++i)
    3d4c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    3d50:	e2822014 	add	r2, r2, #20
    3d54:	e59d6008 	ldr	r6, [sp, #8]
    3d58:	e2855001 	add	r5, r5, #1
    3d5c:	e1550006 	cmp	r5, r6
    3d60:	e58d5024 	str	r5, [sp, #36]	; 0x24
    3d64:	1afffd2f 	bne	3228 <alt_mmu_va_space_create+0x150>
            size -= ALT_MMU_SMALL_PAGE_SIZE;
        }

    } /* for (size_t i = 0; i < num_mem_regions; ++i) */

    return ALT_E_SUCCESS;
    3d68:	e3a00000 	mov	r0, #0
    3d6c:	eafffd1e 	b	31ec <alt_mmu_va_space_create+0x114>
    3d70:	e58d0004 	str	r0, [sp, #4]
    3d74:	eafffde8 	b	351c <alt_mmu_va_space_create+0x444>
    3d78:	e1a08006 	mov	r8, r6
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    3d7c:	e3001fff 	movw	r1, #4095	; 0xfff
    3d80:	e15a0001 	cmp	r10, r1
    3d84:	9a00013c 	bls	427c <alt_mmu_va_space_create+0x11a4>
    3d88:	e5d2100d 	ldrb	r1, [r2, #13]
    3d8c:	f5d2f021 	pld	[r2, #33]	; 0x21
    3d90:	e59d4020 	ldr	r4, [sp, #32]
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3d94:	e58d8004 	str	r8, [sp, #4]
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3d98:	e201c001 	and	r12, r1, #1
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3d9c:	e7e000d1 	ubfx	r0, r1, #1, #1
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3da0:	e1a0c10c 	lsl	r12, r12, #2
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3da4:	e1a00180 	lsl	r0, r0, #3
    3da8:	e594b000 	ldr	r11, [r4]
    3dac:	e35100ff 	cmp	r1, #255	; 0xff
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3db0:	e7e21251 	ubfx	r1, r1, #4, #3
    3db4:	e1a01301 	lsl	r1, r1, #6
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3db8:	e20cc004 	and	r12, r12, #4
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3dbc:	e2000008 	and	r0, r0, #8
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3dc0:	e58dc00c 	str	r12, [sp, #12]
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3dc4:	e58d0010 	str	r0, [sp, #16]
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3dc8:	e58d1014 	str	r1, [sp, #20]
    3dcc:	1a000005 	bne	3de8 <alt_mmu_va_space_create+0xd10>
    3dd0:	eafffd72 	b	33a0 <alt_mmu_va_space_create+0x2c8>
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    3dd4:	e3007fff 	movw	r7, #4095	; 0xfff
                    if (pagetable[ptindex] != 0)
                    {
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;
    3dd8:	e7814100 	str	r4, [r1, r0, lsl #2]
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    3ddc:	e15c0007 	cmp	r12, r7
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
    3de0:	e2899a01 	add	r9, r9, #4096	; 0x1000
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    3de4:	9afffd81 	bls	33f0 <alt_mmu_va_space_create+0x318>
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3de8:	e5d2500c 	ldrb	r5, [r2, #12]
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    3dec:	e1a01a23 	lsr	r1, r3, #20
                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
    3df0:	e59d7004 	ldr	r7, [sp, #4]
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    3df4:	e7e70653 	ubfx	r0, r3, #12, #8
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    3df8:	e5d2600e 	ldrb	r6, [r2, #14]
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
    3dfc:	e2833a01 	add	r3, r3, #4096	; 0x1000
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    3e00:	e79b1101 	ldr	r1, [r11, r1, lsl #2]
                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
    3e04:	e2477a01 	sub	r7, r7, #4096	; 0x1000

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    3e08:	e5d2400f 	ldrb	r4, [r2, #15]

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    3e0c:	e08ac007 	add	r12, r10, r7
                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
    3e10:	e58d7004 	str	r7, [sp, #4]
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    3e14:	e1a06506 	lsl	r6, r6, #10
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3e18:	e1a07385 	lsl	r7, r5, #7
    3e1c:	e1a05205 	lsl	r5, r5, #4
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    3e20:	e3c11fff 	bic	r1, r1, #1020	; 0x3fc
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3e24:	e2077c02 	and	r7, r7, #512	; 0x200
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
    3e28:	e2066b01 	and	r6, r6, #1024	; 0x400
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    3e2c:	e3c11003 	bic	r1, r1, #3
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
    3e30:	e1876006 	orr	r6, r7, r6
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3e34:	e2055030 	and	r5, r5, #48	; 0x30
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    if (pagetable[ptindex] != 0)
    3e38:	e7917100 	ldr	r7, [r1, r0, lsl #2]

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
    3e3c:	e1865005 	orr	r5, r6, r5

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    3e40:	e2044001 	and	r4, r4, #1
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3e44:	e59d600c 	ldr	r6, [sp, #12]

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
    3e48:	e3844002 	orr	r4, r4, #2
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3e4c:	e1854004 	orr	r4, r5, r4
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    if (pagetable[ptindex] != 0)
    3e50:	e3570000 	cmp	r7, #0
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3e54:	e59d7010 	ldr	r7, [sp, #16]
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
    3e58:	e3c95eff 	bic	r5, r9, #4080	; 0xff0
    return 
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
    3e5c:	e1844006 	orr	r4, r4, r6
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
    3e60:	e59d6014 	ldr	r6, [sp, #20]
        | ALT_MMU_TTB2_SMALL_PAGE_BASE_ADDR_SET(pa >> 12);
    3e64:	e3c5500f 	bic	r5, r5, #15
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    3e68:	e068c00c 	rsb	r12, r8, r12
          ALT_MMU_TTB2_TYPE_SET(0x2)
        | ALT_MMU_TTB2_SMALL_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_SMALL_PAGE_B_SET(b)
        | ALT_MMU_TTB2_SMALL_PAGE_C_SET(c)
        | ALT_MMU_TTB2_SMALL_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_SMALL_PAGE_TEX_SET(tex)
    3e6c:	e1844007 	orr	r4, r4, r7
        | ALT_MMU_TTB2_SMALL_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_SMALL_PAGE_NG_SET(0)
    3e70:	e1844006 	orr	r4, r4, r6
        return 0;
    }

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return 
    3e74:	e1854004 	orr	r4, r5, r4
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    if (pagetable[ptindex] != 0)
    3e78:	0affffd5 	beq	3dd4 <alt_mmu_va_space_create+0xcfc>
    3e7c:	eafffcd9 	b	31e8 <alt_mmu_va_space_create+0x110>
    3e80:	e1a08006 	mov	r8, r6
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
                }

                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
    3e84:	e30fcfff 	movw	r12, #65535	; 0xffff
    3e88:	e15a000c 	cmp	r10, r12
    3e8c:	9affffba 	bls	3d7c <alt_mmu_va_space_create+0xca4>
    3e90:	e5d2600d 	ldrb	r6, [r2, #13]
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    3e94:	e1a0700a 	mov	r7, r10
    3e98:	e59d1020 	ldr	r1, [sp, #32]

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
    3e9c:	e206c001 	and	r12, r6, #1
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    3ea0:	e7e20256 	ubfx	r0, r6, #4, #3
    3ea4:	e591b000 	ldr	r11, [r1]
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    3ea8:	e7e010d6 	ubfx	r1, r6, #1, #1

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
    3eac:	e1a0c10c 	lsl	r12, r12, #2
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    3eb0:	e1a01181 	lsl	r1, r1, #3
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    3eb4:	e1a00600 	lsl	r0, r0, #12

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
    3eb8:	e20cc004 	and	r12, r12, #4
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    3ebc:	e2011008 	and	r1, r1, #8

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
    3ec0:	e58dc004 	str	r12, [sp, #4]
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    3ec4:	e58d0010 	str	r0, [sp, #16]
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    3ec8:	e58d100c 	str	r1, [sp, #12]
{
    int tex = (mem->attributes >> 4) & 0x7;
    int c   = (mem->attributes >> 1) & 0x1;
    int b   = (mem->attributes >> 0) & 0x1;

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    3ecc:	e35600ff 	cmp	r6, #255	; 0xff
    {
        return 0;
    3ed0:	03a0c000 	moveq	r12, #0
{
    int tex = (mem->attributes >> 4) & 0x7;
    int c   = (mem->attributes >> 1) & 0x1;
    int b   = (mem->attributes >> 0) & 0x1;

    if (mem->attributes == ALT_MMU_ATTR_FAULT)
    3ed4:	0a000015 	beq	3f30 <alt_mmu_va_space_create+0xe58>

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    3ed8:	e5d2100c 	ldrb	r1, [r2, #12]
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
        | ALT_MMU_TTB2_LARGE_PAGE_BASE_ADDR_SET(pa >> 16);
    3edc:	e1a00829 	lsr	r0, r9, #16
    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
    3ee0:	e5d2500e 	ldrb	r5, [r2, #14]
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
    3ee4:	e5d2c00f 	ldrb	r12, [r2, #15]

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    3ee8:	e1a04381 	lsl	r4, r1, #7
    3eec:	e1a01201 	lsl	r1, r1, #4
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
    3ef0:	e1a05505 	lsl	r5, r5, #10

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    3ef4:	e2044c02 	and	r4, r4, #512	; 0x200
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
    3ef8:	e1a0cf8c 	lsl	r12, r12, #31

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    3efc:	e2011030 	and	r1, r1, #48	; 0x30

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
    3f00:	e1841001 	orr	r1, r4, r1
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
    3f04:	e2055b01 	and	r5, r5, #1024	; 0x400
    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
    3f08:	e3811001 	orr	r1, r1, #1
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
    3f0c:	e59d4004 	ldr	r4, [sp, #4]

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    3f10:	e1811005 	orr	r1, r1, r5
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    3f14:	e59d500c 	ldr	r5, [sp, #12]

    return
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
    3f18:	e181182c 	orr	r1, r1, r12, lsr #16
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
    3f1c:	e59dc010 	ldr	r12, [sp, #16]
          ALT_MMU_TTB2_TYPE_SET(0x1)
        | ALT_MMU_TTB2_LARGE_PAGE_B_SET(b)
        | ALT_MMU_TTB2_LARGE_PAGE_C_SET(c)
        | ALT_MMU_TTB2_LARGE_PAGE_AP_SET(mem->access)
        | ALT_MMU_TTB2_LARGE_PAGE_S_SET(mem->shareable)
        | ALT_MMU_TTB2_LARGE_PAGE_NG_SET(0)
    3f20:	e1811004 	orr	r1, r1, r4
        | ALT_MMU_TTB2_LARGE_PAGE_TEX_SET(tex)
    3f24:	e1811005 	orr	r1, r1, r5
        | ALT_MMU_TTB2_LARGE_PAGE_XN_SET(mem->execute)
    3f28:	e181100c 	orr	r1, r1, r12
        return 0;
    }

    /* NS bit (mem->security) is ignored as it is set in TTB1. */

    return
    3f2c:	e181c800 	orr	r12, r1, r0, lsl #16
                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    3f30:	e1a01a23 	lsr	r1, r3, #20
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    3f34:	e7e70653 	ubfx	r0, r3, #12, #8
                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_largepage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    3f38:	e79b1101 	ldr	r1, [r11, r1, lsl #2]
    3f3c:	e3c11fff 	bic	r1, r1, #1020	; 0x3fc
    3f40:	e3c11003 	bic	r1, r1, #3
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3f44:	e7914100 	ldr	r4, [r1, r0, lsl #2]
    3f48:	e3540000 	cmp	r4, #0
    3f4c:	1afffca5 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3f50:	e2805001 	add	r5, r0, #1
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3f54:	e781c100 	str	r12, [r1, r0, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3f58:	e7914105 	ldr	r4, [r1, r5, lsl #2]
    3f5c:	e3540000 	cmp	r4, #0
    3f60:	1afffca0 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3f64:	e2804002 	add	r4, r0, #2
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3f68:	e781c105 	str	r12, [r1, r5, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3f6c:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    3f70:	e3550000 	cmp	r5, #0
    3f74:	1afffc9b 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3f78:	e2805003 	add	r5, r0, #3
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3f7c:	e781c104 	str	r12, [r1, r4, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3f80:	e7914105 	ldr	r4, [r1, r5, lsl #2]
    3f84:	e3540000 	cmp	r4, #0
    3f88:	1afffc96 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3f8c:	e2804004 	add	r4, r0, #4
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3f90:	e781c105 	str	r12, [r1, r5, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3f94:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    3f98:	e3550000 	cmp	r5, #0
    3f9c:	1afffc91 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3fa0:	e2805005 	add	r5, r0, #5
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3fa4:	e781c104 	str	r12, [r1, r4, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3fa8:	e7914105 	ldr	r4, [r1, r5, lsl #2]
    3fac:	e3540000 	cmp	r4, #0
    3fb0:	1afffc8c 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3fb4:	e2804006 	add	r4, r0, #6
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3fb8:	e781c105 	str	r12, [r1, r5, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3fbc:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    3fc0:	e3550000 	cmp	r5, #0
    3fc4:	1afffc87 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3fc8:	e2805007 	add	r5, r0, #7
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3fcc:	e781c104 	str	r12, [r1, r4, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3fd0:	e7914105 	ldr	r4, [r1, r5, lsl #2]
    3fd4:	e3540000 	cmp	r4, #0
    3fd8:	1afffc82 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3fdc:	e2804008 	add	r4, r0, #8
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3fe0:	e781c105 	str	r12, [r1, r5, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3fe4:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    3fe8:	e3550000 	cmp	r5, #0
    3fec:	1afffc7d 	bne	31e8 <alt_mmu_va_space_create+0x110>
    3ff0:	e2805009 	add	r5, r0, #9
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    3ff4:	e781c104 	str	r12, [r1, r4, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    3ff8:	e7914105 	ldr	r4, [r1, r5, lsl #2]
    3ffc:	e3540000 	cmp	r4, #0
    4000:	1afffc78 	bne	31e8 <alt_mmu_va_space_create+0x110>
    4004:	e280400a 	add	r4, r0, #10
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    4008:	e781c105 	str	r12, [r1, r5, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    400c:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    4010:	e3550000 	cmp	r5, #0
    4014:	1afffc73 	bne	31e8 <alt_mmu_va_space_create+0x110>
    4018:	e280500b 	add	r5, r0, #11
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    401c:	e781c104 	str	r12, [r1, r4, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    4020:	e7914105 	ldr	r4, [r1, r5, lsl #2]
    4024:	e3540000 	cmp	r4, #0
    4028:	1afffc6e 	bne	31e8 <alt_mmu_va_space_create+0x110>
    402c:	e280400c 	add	r4, r0, #12
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    4030:	e781c105 	str	r12, [r1, r5, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    4034:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    4038:	e3550000 	cmp	r5, #0
    403c:	1afffc69 	bne	31e8 <alt_mmu_va_space_create+0x110>
    4040:	e280500d 	add	r5, r0, #13
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    4044:	e781c104 	str	r12, [r1, r4, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    4048:	e7914105 	ldr	r4, [r1, r5, lsl #2]
    404c:	e3540000 	cmp	r4, #0
    4050:	1afffc64 	bne	31e8 <alt_mmu_va_space_create+0x110>
    4054:	e280400e 	add	r4, r0, #14
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    4058:	e781c105 	str	r12, [r1, r5, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    405c:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    4060:	e3550000 	cmp	r5, #0
    4064:	1afffc5f 	bne	31e8 <alt_mmu_va_space_create+0x110>
    4068:	e280000f 	add	r0, r0, #15
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    406c:	e781c104 	str	r12, [r1, r4, lsl #2]
                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    for (j = 0; j < 16; ++j)
                    {
                        if (pagetable[ptindex + j] != 0)
    4070:	e7914100 	ldr	r4, [r1, r0, lsl #2]
    4074:	e3540000 	cmp	r4, #0
    4078:	1afffc5a 	bne	31e8 <alt_mmu_va_space_create+0x110>
                        pagetable[ptindex + j] = desc;
                    }

                    va      += ALT_MMU_LARGE_PAGE_SIZE;
                    pa      += ALT_MMU_LARGE_PAGE_SIZE;
                    segsize -= ALT_MMU_LARGE_PAGE_SIZE;
    407c:	e2477801 	sub	r7, r7, #65536	; 0x10000
                        if (pagetable[ptindex + j] != 0)
                        {
                            return ALT_E_ERROR;
                        }

                        pagetable[ptindex + j] = desc;
    4080:	e781c100 	str	r12, [r1, r0, lsl #2]
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
                }

                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
    4084:	e30f0fff 	movw	r0, #65535	; 0xffff

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    4088:	e0881007 	add	r1, r8, r7
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
                }

                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
    408c:	e1570000 	cmp	r7, r0
                        }

                        pagetable[ptindex + j] = desc;
                    }

                    va      += ALT_MMU_LARGE_PAGE_SIZE;
    4090:	e2833801 	add	r3, r3, #65536	; 0x10000
                    pa      += ALT_MMU_LARGE_PAGE_SIZE;
    4094:	e2899801 	add	r9, r9, #65536	; 0x10000

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    4098:	e06a1001 	rsb	r1, r10, r1
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
                }

                /* Use large pages for the rest of the 64 KiB aligned areas. */
                while (segsize >= ALT_MMU_LARGE_PAGE_SIZE)
    409c:	8affff8a 	bhi	3ecc <alt_mmu_va_space_create+0xdf4>
    40a0:	e1a0a007 	mov	r10, r7
                    }

                    va      += ALT_MMU_LARGE_PAGE_SIZE;
                    pa      += ALT_MMU_LARGE_PAGE_SIZE;
                    segsize -= ALT_MMU_LARGE_PAGE_SIZE;
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
    40a4:	e1a08001 	mov	r8, r1
    40a8:	eaffff33 	b	3d7c <alt_mmu_va_space_create+0xca4>

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    40ac:	e0637009 	rsb	r7, r3, r9
    40b0:	e59d9004 	ldr	r9, [sp, #4]
    40b4:	ea000004 	b	40cc <alt_mmu_va_space_create+0xff4>
            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
    40b8:	e3550000 	cmp	r5, #0
    40bc:	0a000041 	beq	41c8 <alt_mmu_va_space_create+0x10f0>
    40c0:	e3000fff 	movw	r0, #4095	; 0xfff
    40c4:	e15a0000 	cmp	r10, r0
    40c8:	9a000053 	bls	421c <alt_mmu_va_space_create+0x1144>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    40cc:	e1a00a23 	lsr	r0, r3, #20
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    40d0:	e7e7c653 	ubfx	r12, r3, #12, #8

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
    40d4:	e24aaa01 	sub	r10, r10, #4096	; 0x1000
                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    40d8:	e79b0100 	ldr	r0, [r11, r0, lsl #2]
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
    40dc:	e2833a01 	add	r3, r3, #4096	; 0x1000

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    40e0:	e089800a 	add	r8, r9, r10
            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
    40e4:	e6ff5073 	uxth	r5, r3

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    40e8:	e0876003 	add	r6, r7, r3
                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    40ec:	e3c00fff 	bic	r0, r0, #1020	; 0x3fc

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    40f0:	e0618008 	rsb	r8, r1, r8
                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    40f4:	e3c00003 	bic	r0, r0, #3
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    /* Detect if an existing non-fault region has already been created.
                     * We cannot detect if a fault region is requested and a region description is already a fault,
                     * which it is by default. */
                    if (pagetable[ptindex] != 0)
    40f8:	e790410c 	ldr	r4, [r0, r12, lsl #2]
    40fc:	e3540000 	cmp	r4, #0
    4100:	0affffec 	beq	40b8 <alt_mmu_va_space_create+0xfe0>
    4104:	eafffc37 	b	31e8 <alt_mmu_va_space_create+0x110>

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    4108:	e0638009 	rsb	r8, r3, r9
    410c:	e59da004 	ldr	r10, [sp, #4]
    4110:	ea000002 	b	4120 <alt_mmu_va_space_create+0x1048>
                }
            }
            else
            {
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    4114:	e3009fff 	movw	r9, #4095	; 0xfff
    4118:	e1500009 	cmp	r0, r9
    411c:	9a00003b 	bls	4210 <alt_mmu_va_space_create+0x1138>
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    4120:	e1a0ca23 	lsr	r12, r3, #20
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    4124:	e7e74653 	ubfx	r4, r3, #12, #8

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
    4128:	e2400a01 	sub	r0, r0, #4096	; 0x1000
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    412c:	e79bc10c 	ldr	r12, [r11, r12, lsl #2]
                        return ALT_E_ERROR;
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
    4130:	e2833a01 	add	r3, r3, #4096	; 0x1000

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    4134:	e08a7000 	add	r7, r10, r0
    4138:	e0886003 	add	r6, r8, r3
    413c:	e0617007 	rsb	r7, r1, r7
                /* No large pages possible, Use small pages only. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
                {
                    uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

                    uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    4140:	e3cccfff 	bic	r12, r12, #1020	; 0x3fc
    4144:	e3ccc003 	bic	r12, r12, #3
                    uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

                    if (pagetable[ptindex] != 0)
    4148:	e79c5104 	ldr	r5, [r12, r4, lsl #2]
    414c:	e3550000 	cmp	r5, #0
    4150:	0affffef 	beq	4114 <alt_mmu_va_space_create+0x103c>
    4154:	eafffc23 	b	31e8 <alt_mmu_va_space_create+0x110>
        /* Relative alignment of [va] and [pa]. */
        int relalign = ALT_MMU_SMALL_PAGE_SIZE;

        for (j = 0; j < ARRAY_COUNT(alignopt); ++j)
        {
            if ( (va & (alignopt[j] - 1)) ==
    4158:	e3a04401 	mov	r4, #16777216	; 0x1000000
    415c:	e58d401c 	str	r4, [sp, #28]
    4160:	eafffc3e 	b	3260 <alt_mmu_va_space_create+0x188>
    4164:	e3a05601 	mov	r5, #1048576	; 0x100000
    4168:	e58d501c 	str	r5, [sp, #28]
                 (pa & (alignopt[j] - 1)) )
            {
                relalign = alignopt[j];
                break;
    416c:	eafffc3b 	b	3260 <alt_mmu_va_space_create+0x188>

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    4170:	e59d1004 	ldr	r1, [sp, #4]
    4174:	e0634009 	rsb	r4, r3, r9
    4178:	e59d6018 	ldr	r6, [sp, #24]

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    417c:	e1a00a23 	lsr	r0, r3, #20
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
    4180:	e2833601 	add	r3, r3, #1048576	; 0x100000
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
    4184:	e2411601 	sub	r1, r1, #1048576	; 0x100000

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    4188:	e79b5100 	ldr	r5, [r11, r0, lsl #2]

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    418c:	e084c003 	add	r12, r4, r3

            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    4190:	e3550000 	cmp	r5, #0
    4194:	1afffc13 	bne	31e8 <alt_mmu_va_space_create+0x110>
        else if (   (relalign >= ALT_MMU_SECTION_SIZE)
                 && (size     >= ALT_MMU_SECTION_SIZE))
        {
            /* No supersection possible. Use regular sections only. */

            while (size >= ALT_MMU_SECTION_SIZE)
    4198:	e1510006 	cmp	r1, r6
    419c:	8afffff6 	bhi	417c <alt_mmu_va_space_create+0x10a4>
    41a0:	e58d1004 	str	r1, [sp, #4]
                }

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
    41a4:	e1a0900c 	mov	r9, r12
    41a8:	eafffcdb 	b	351c <alt_mmu_va_space_create+0x444>
    41ac:	e58d1004 	str	r1, [sp, #4]
                }

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
                pa   += ALT_MMU_SECTION_SIZE;
    41b0:	e1a09004 	mov	r9, r4
    41b4:	eafffea8 	b	3c5c <alt_mmu_va_space_create+0xb84>
    41b8:	e58d1004 	str	r1, [sp, #4]
    41bc:	e1a09004 	mov	r9, r4
    41c0:	e1a05001 	mov	r5, r1
    41c4:	eafffe22 	b	3a54 <alt_mmu_va_space_create+0x97c>
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
    41c8:	e1a09006 	mov	r9, r6
    41cc:	eaffff2c 	b	3e84 <alt_mmu_va_space_create+0xdac>
    41d0:	e59d1004 	ldr	r1, [sp, #4]
    41d4:	ea000002 	b	41e4 <alt_mmu_va_space_create+0x110c>
                pa   += ALT_MMU_LARGE_PAGE_SIZE;
                size -= ALT_MMU_LARGE_PAGE_SIZE;
            }
        }

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
    41d8:	e3005fff 	movw	r5, #4095	; 0xfff
    41dc:	e1510005 	cmp	r1, r5
    41e0:	9afffed9 	bls	3d4c <alt_mmu_va_space_create+0xc74>
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    41e4:	e1a00a23 	lsr	r0, r3, #20
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);
    41e8:	e7e7c653 	ubfx	r12, r3, #12, #8

            pagetable[ptindex] = desc;

            va   += ALT_MMU_SMALL_PAGE_SIZE;
            pa   += ALT_MMU_SMALL_PAGE_SIZE;
            size -= ALT_MMU_SMALL_PAGE_SIZE;
    41ec:	e2411a01 	sub	r1, r1, #4096	; 0x1000

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    41f0:	e79b0100 	ldr	r0, [r11, r0, lsl #2]
                return ALT_E_ERROR;
            }

            pagetable[ptindex] = desc;

            va   += ALT_MMU_SMALL_PAGE_SIZE;
    41f4:	e2833a01 	add	r3, r3, #4096	; 0x1000

        while (size >= ALT_MMU_SMALL_PAGE_SIZE)
        {
            uint32_t desc = alt_mmu_va_space_gen_smallpage(pa, &mem_regions[i]);

            uint32_t * pagetable = (uint32_t *)((*ttb1)[va >> 20] & ALT_MMU_TTB1_PAGE_TBL_BASE_ADDR_MASK);
    41f8:	e3c00fff 	bic	r0, r0, #1020	; 0x3fc
    41fc:	e3c00003 	bic	r0, r0, #3
            uint32_t ptindex = ALT_MMU_PAGE_TABLE_INDEX(va);

            if (pagetable[ptindex] != 0)
    4200:	e790410c 	ldr	r4, [r0, r12, lsl #2]
    4204:	e3540000 	cmp	r4, #0
    4208:	0afffff2 	beq	41d8 <alt_mmu_va_space_create+0x1100>
    420c:	eafffbf5 	b	31e8 <alt_mmu_va_space_create+0x110>
                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
                    segsize -= ALT_MMU_SMALL_PAGE_SIZE;
                    size    -= ALT_MMU_SMALL_PAGE_SIZE;
    4210:	e58d7004 	str	r7, [sp, #4]
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
    4214:	e1a09006 	mov	r9, r6
    4218:	eafffc74 	b	33f0 <alt_mmu_va_space_create+0x318>
                    }

                    pagetable[ptindex] = desc;

                    va      += ALT_MMU_SMALL_PAGE_SIZE;
                    pa      += ALT_MMU_SMALL_PAGE_SIZE;
    421c:	e1a09006 	mov	r9, r6
    4220:	eafffed5 	b	3d7c <alt_mmu_va_space_create+0xca4>
    4224:	e59d0020 	ldr	r0, [sp, #32]
    4228:	e590b000 	ldr	r11, [r0]
    422c:	eafffe0b 	b	3a60 <alt_mmu_va_space_create+0x988>

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    4230:	e59d1004 	ldr	r1, [sp, #4]
    4234:	e0634009 	rsb	r4, r3, r9
            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    4238:	e1a00a23 	lsr	r0, r3, #20
                    return ALT_E_ERROR;
                }

                (*ttb1)[va >> 20] = desc;

                va   += ALT_MMU_SECTION_SIZE;
    423c:	e2833601 	add	r3, r3, #1048576	; 0x100000
                pa   += ALT_MMU_SECTION_SIZE;
                size -= ALT_MMU_SECTION_SIZE;
    4240:	e2411601 	sub	r1, r1, #1048576	; 0x100000
            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    4244:	e79b5100 	ldr	r5, [r11, r0, lsl #2]

    memset(ttb2, 0, ALT_MMU_TTB2_SIZE);
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_create(uint32_t** ttb1,
    4248:	e084c003 	add	r12, r4, r3
            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
            {
                uint32_t desc = alt_mmu_va_space_gen_section(pa, &mem_regions[i]);

                if ((*ttb1)[va >> 20] != 0)
    424c:	e3550000 	cmp	r5, #0
    4250:	1afffbe4 	bne	31e8 <alt_mmu_va_space_create+0x110>
                pa   += ALT_MMU_SUPERSECTION_SIZE;
                size -= ALT_MMU_SUPERSECTION_SIZE;
            }

            /* Use regular sections for the areas after supersections that does not align to 16 MiB. */
            while (size >= ALT_MMU_SECTION_SIZE)
    4254:	e59d8018 	ldr	r8, [sp, #24]
    4258:	e1510008 	cmp	r1, r8
    425c:	8afffff5 	bhi	4238 <alt_mmu_va_space_create+0x1160>
    4260:	eaffffce 	b	41a0 <alt_mmu_va_space_create+0x10c8>
            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
    4264:	e1a0a001 	mov	r10, r1
    4268:	e59d8004 	ldr	r8, [sp, #4]
    426c:	eafffec2 	b	3d7c <alt_mmu_va_space_create+0xca4>
         * function. */
        if (va & (ALT_MMU_SECTION_SIZE - 1))
        {
            /* This is the size of the memory segment after paging which will cause the [va] to align to a 1 MiB,
             * or up to the size of the region being processed, whichever is smaller. */
            uint32_t segsize = ALT_MIN(ALT_MMU_SECTION_SIZE - (va & (ALT_MMU_SECTION_SIZE - 1)), size);
    4270:	e1a0a001 	mov	r10, r1
            if (relalign >= ALT_MMU_LARGE_PAGE_SIZE)
            {
                /* Because of the 64 KiB relative alignment, try to use large pages. */

                /* Use small pages until [va] is 64KiB aligned. */
                while (((va & (ALT_MMU_LARGE_PAGE_SIZE - 1)) != 0) && (segsize >= ALT_MMU_SMALL_PAGE_SIZE))
    4274:	e59d8004 	ldr	r8, [sp, #4]
    4278:	eaffff01 	b	3e84 <alt_mmu_va_space_create+0xdac>
                    size    -= ALT_MMU_LARGE_PAGE_SIZE;
                }

                /* There is a chance that the segment is so small that it does cause the progress to align to the 1 MiB.
                 * If this is the case, page out the rest of segsize using small pages, and the remaining size to be 0. */
                while (segsize >= ALT_MMU_SMALL_PAGE_SIZE)
    427c:	e58d8004 	str	r8, [sp, #4]
    4280:	eafffc5a 	b	33f0 <alt_mmu_va_space_create+0x318>

00004284 <alt_mmu_va_space_enable>:

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_enable(const uint32_t * ttb1)
{
    4284:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    __asm("MCR p15, 0, %[ttbcr], c2, c0, 2" : : [ttbcr] "r" (ttbcr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, ttbcr,    c2, c0, 2");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c2, c0, 2" : : "r" (ttbcr));
    4288:	e3a03000 	mov	r3, #0

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_space_enable(const uint32_t * ttb1)
{
    428c:	e24dd014 	sub	sp, sp, #20
    __asm("MCR p15, 0, %[ttbcr], c2, c0, 2" : : [ttbcr] "r" (ttbcr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, ttbcr,    c2, c0, 2");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c2, c0, 2" : : "r" (ttbcr));
    4290:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    __asm("MRC p15, 0, %[ttbcr], c2, c0, 2" : [ttbcr] "=r" (ttbcr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, ttbcr,    c2, c0, 2");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c2, c0, 2" : "=r" (ttbcr));
    4294:	ee123f50 	mrc	15, 0, r3, cr2, cr0, {2}
}

ALT_STATUS_CODE alt_mmu_TTBR0_set(const void* addr)
{
    uint32_t ttbcr = ttbcr_get_helper();
    uint32_t ttbcr_n = ALT_CPU_TTBCR_N_VALUE_GET(ttbcr);
    4298:	e2033007 	and	r3, r3, #7
    uint32_t ttbr0; 

    if ((uintptr_t)addr & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    429c:	e3e01000 	mvn	r1, #0
    42a0:	e2832012 	add	r2, r3, #18
    42a4:	e263300e 	rsb	r3, r3, #14
    42a8:	e1e02211 	mvn	r2, r1, lsl r2
    42ac:	e1e03312 	mvn	r3, r2, lsl r3
    42b0:	e1100003 	tst	r0, r3
    42b4:	1a000084 	bne	44cc <alt_mmu_va_space_enable+0x248>

    /* The Translation table must reside in Normal Memory, so pick the most
     / performant attributes. */
    ttbr0 =   ALT_CPU_TTBR0_RGN_WBA   /* Translation table is WBA for outer cacheability */
              | ALT_CPU_TTBR0_IRGN_WBA; /* Translation table is WBA for inner cacheability */
    ttbr0 &= ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n);
    42b8:	e2033048 	and	r3, r3, #72	; 0x48
    ttbr0 |= (uint32_t)addr;
    42bc:	e1830000 	orr	r0, r3, r0
    __asm("MCR p15, 0, %[ttbr0], c2, c0, 0" : : [ttbr0] "r" (ttbr0));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, ttbr0,    c2, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c2, c0, 0" : : "r" (ttbr0));
    42c0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    {
        int i;
        ALT_MMU_DAP_t domain_ap[16];
        for (i = 0; i < 16; ++i)
        {
            domain_ap[i] = ALT_MMU_DAP_CLIENT;
    42c4:	e3003101 	movw	r3, #257	; 0x101
    42c8:	e1a00003 	mov	r0, r3
    42cc:	e7df3813 	bfi	r3, r3, #16, #16
    42d0:	e58d3000 	str	r3, [sp]
    42d4:	e1a01000 	mov	r1, r0
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    42d8:	e5ddc001 	ldrb	r12, [sp, #1]
    {
        int i;
        ALT_MMU_DAP_t domain_ap[16];
        for (i = 0; i < 16; ++i)
        {
            domain_ap[i] = ALT_MMU_DAP_CLIENT;
    42dc:	e1a02000 	mov	r2, r0
    42e0:	e7df2812 	bfi	r2, r2, #16, #16
    42e4:	e7df0810 	bfi	r0, r0, #16, #16
    42e8:	e7df1811 	bfi	r1, r1, #16, #16
    42ec:	e58d200c 	str	r2, [sp, #12]

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    42f0:	e35c0003 	cmp	r12, #3
    {
        int i;
        ALT_MMU_DAP_t domain_ap[16];
        for (i = 0; i < 16; ++i)
        {
            domain_ap[i] = ALT_MMU_DAP_CLIENT;
    42f4:	e58d0004 	str	r0, [sp, #4]
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    42f8:	e2033001 	and	r3, r3, #1
    {
        int i;
        ALT_MMU_DAP_t domain_ap[16];
        for (i = 0; i < 16; ++i)
        {
            domain_ap[i] = ALT_MMU_DAP_CLIENT;
    42fc:	e58d1008 	str	r1, [sp, #8]

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4300:	e3a0220d 	mov	r2, #-805306368	; 0xd0000000
    4304:	8a000070 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4308:	e6af107c 	sxtb	r1, r12
    430c:	e1b01112 	lsls	r1, r2, r1
    4310:	5a00006d 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    4314:	e5dd1002 	ldrb	r1, [sp, #2]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    4318:	e183310c 	orr	r3, r3, r12, lsl #2

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    431c:	e3510003 	cmp	r1, #3
    4320:	8a000069 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4324:	e6af0071 	sxtb	r0, r1
    4328:	e1b00012 	lsls	r0, r2, r0
    432c:	5a000066 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    4330:	e5dd0003 	ldrb	r0, [sp, #3]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    4334:	e1833201 	orr	r3, r3, r1, lsl #4

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4338:	e3500003 	cmp	r0, #3
    433c:	8a000062 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4340:	e6af4070 	sxtb	r4, r0
    4344:	e1b04412 	lsls	r4, r2, r4
    4348:	5a00005f 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    434c:	e5dd2004 	ldrb	r2, [sp, #4]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    4350:	e1830300 	orr	r0, r3, r0, lsl #6

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4354:	e3520003 	cmp	r2, #3
    4358:	8a00005b 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    435c:	e6af1072 	sxtb	r1, r2
    4360:	e3a0320d 	mov	r3, #-805306368	; 0xd0000000
    4364:	e1b01113 	lsls	r1, r3, r1
    4368:	5a000057 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    436c:	e5ddc005 	ldrb	r12, [sp, #5]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    4370:	e1800402 	orr	r0, r0, r2, lsl #8

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4374:	e35c0003 	cmp	r12, #3
    4378:	8a000053 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    437c:	e6af207c 	sxtb	r2, r12
    4380:	e1b02213 	lsls	r2, r3, r2
    4384:	5a000050 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    4388:	e5dd1006 	ldrb	r1, [sp, #6]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    438c:	e180c50c 	orr	r12, r0, r12, lsl #10

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4390:	e3510003 	cmp	r1, #3
    4394:	8a00004c 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4398:	e6af2071 	sxtb	r2, r1
    439c:	e1b02213 	lsls	r2, r3, r2
    43a0:	5a000049 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    43a4:	e5dd0007 	ldrb	r0, [sp, #7]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    43a8:	e18cc601 	orr	r12, r12, r1, lsl #12

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    43ac:	e3500003 	cmp	r0, #3
    43b0:	8a000045 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    43b4:	e6af2070 	sxtb	r2, r0
    43b8:	e1b02213 	lsls	r2, r3, r2
    43bc:	5a000042 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    43c0:	e5dd2008 	ldrb	r2, [sp, #8]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    43c4:	e18c0700 	orr	r0, r12, r0, lsl #14

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    43c8:	e3520003 	cmp	r2, #3
    43cc:	8a00003e 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    43d0:	e6af1072 	sxtb	r1, r2
    43d4:	e1b01113 	lsls	r1, r3, r1
    43d8:	5a00003b 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    43dc:	e5ddc009 	ldrb	r12, [sp, #9]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    43e0:	e1800802 	orr	r0, r0, r2, lsl #16

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    43e4:	e35c0003 	cmp	r12, #3
    43e8:	8a000037 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    43ec:	e6af207c 	sxtb	r2, r12
    43f0:	e1b02213 	lsls	r2, r3, r2
    43f4:	5a000034 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    43f8:	e5dd100a 	ldrb	r1, [sp, #10]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    43fc:	e180c90c 	orr	r12, r0, r12, lsl #18

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4400:	e3510003 	cmp	r1, #3
    4404:	8a000030 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4408:	e6af2071 	sxtb	r2, r1
    440c:	e1b02213 	lsls	r2, r3, r2
    4410:	5a00002d 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    4414:	e5dd000b 	ldrb	r0, [sp, #11]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    4418:	e18cca01 	orr	r12, r12, r1, lsl #20

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    441c:	e3500003 	cmp	r0, #3
    4420:	8a000029 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4424:	e6af2070 	sxtb	r2, r0
    4428:	e1b02213 	lsls	r2, r3, r2
    442c:	5a000026 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    4430:	e5dd200c 	ldrb	r2, [sp, #12]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    4434:	e18c0b00 	orr	r0, r12, r0, lsl #22

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4438:	e3520003 	cmp	r2, #3
    443c:	8a000022 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4440:	e6af1072 	sxtb	r1, r2
    4444:	e1b01113 	lsls	r1, r3, r1
    4448:	5a00001f 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    444c:	e5ddc00d 	ldrb	r12, [sp, #13]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    4450:	e1800c02 	orr	r0, r0, r2, lsl #24

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4454:	e35c0003 	cmp	r12, #3
    4458:	8a00001b 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    445c:	e6af207c 	sxtb	r2, r12
    4460:	e1b02213 	lsls	r2, r3, r2
    4464:	5a000018 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    4468:	e5dd300e 	ldrb	r3, [sp, #14]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    446c:	e180cd0c 	orr	r12, r0, r12, lsl #26

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4470:	e3530003 	cmp	r3, #3
    4474:	8a000014 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4478:	e6af2073 	sxtb	r2, r3
    447c:	e3a0020d 	mov	r0, #-805306368	; 0xd0000000
    4480:	e1b02210 	lsls	r2, r0, r2
    4484:	5a000010 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        return ALT_E_BAD_ARG;
    }

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];
    4488:	e5dd100f 	ldrb	r1, [sp, #15]
        switch (ap)
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    448c:	e18cce03 	orr	r12, r12, r3, lsl #28

    for (i = 0; i < num_elem; ++i)
    {
        ALT_MMU_DAP_t ap = domain_ap[i];

        switch (ap)
    4490:	e3510003 	cmp	r1, #3
    4494:	8a00000c 	bhi	44cc <alt_mmu_va_space_enable+0x248>
    4498:	e6af3071 	sxtb	r3, r1
    449c:	e1b03310 	lsls	r3, r0, r3
    44a0:	5a000009 	bpl	44cc <alt_mmu_va_space_enable+0x248>
        {
        case ALT_MMU_DAP_NO_ACCESS:
        case ALT_MMU_DAP_CLIENT:
        case ALT_MMU_DAP_MANAGER:
            dacr |= ap << (i * 2);
    44a4:	e18ccf01 	orr	r12, r12, r1, lsl #30
    __asm("MCR p15, 0, %[dacr], c3, c0, 0" : : [dacr] "r" (dacr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dacr,    c3, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,      c3, c0, 0" : : "r" (dacr));
    44a8:	ee03cf10 	mcr	15, 0, r12, cr3, cr0, {0}
    __asm("MCR p15, 0, %[dummy], c8, c3, 0" : : [dummy] "r" (dummy));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, dummy,    c8, c3, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c8, c3, 0" : : "r" (dummy));
    44ac:	e3a03000 	mov	r3, #0
    44b0:	ee083f13 	mcr	15, 0, r3, cr8, cr3, {0}
#endif

#if !defined(_MSC_VER)
    /* Ensure all TLB maintenance operations complete before returning. */
    __asm("dsb");
    44b4:	f57ff04f 	dsb	sy
    __asm("MRC p15, 0, %[sctlr], c1, c0, 0" : [sctlr] "=r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0,       c1, c0, 0" : "=r" (sctlr));
    44b8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
{
    uint32_t sctlr;
    alt_mmu_tlb_invalidate();

    sctlr = sctlr_get_helper();
    sctlr |= ALT_CPU_SCTLR_M_SET_MSK;
    44bc:	e3833001 	orr	r3, r3, #1
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr,    c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0,       c1, c0, 0" : : "r" (sctlr));
    44c0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}

    /* Enable MMU (implicitly invalidates TLBs) */

    if (status == ALT_E_SUCCESS)
    {
        status = alt_mmu_enable();
    44c4:	e3a00000 	mov	r0, #0
    44c8:	ea000000 	b	44d0 <alt_mmu_va_space_enable+0x24c>
    uint32_t ttbr0; 

    if ((uintptr_t)addr & ~ALT_CPU_TTBR0_TTB0BASEADDR_SET_MSK(ttbcr_n))
    {
        /* addr must align to 2^(14 - TTBCR.N) bytes. */
        return ALT_E_BAD_ARG;
    44cc:	e3e00008 	mvn	r0, #8
            dprintf("DEBUG[MMU:VA]: Failure on line %d.\n", __LINE__);
        }
    }

    return status;
}
    44d0:	e28dd014 	add	sp, sp, #20
    44d4:	e8bd0010 	ldmfd	sp!, {r4}
    44d8:	e12fff1e 	bx	lr

000044dc <alt_mmu_va_to_pa>:
#define ALT_CPU_PAR_FS_VALUE_GET(par) ((par >> 1) & 0x3f)
#define ALT_CPU_PAR_SS_SET_MSK 0x00000002
#define ALT_CPU_PAR_F_SET_MSK  0x00000001

uintptr_t alt_mmu_va_to_pa(const void * va, uint32_t * seglength, uint32_t * dfsr)
{
    44dc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    __asm("mcr p15, 0, va, c7, c8, 0");
    __asm("isb");
    __asm("mrc p15, 0, pa, c7, c4, 0");
#elif defined(_MSC_VER)
#else
    __asm("mcr p15, 0, %0, c7, c8, 0" : : "r" (va));
    44e0:	ee070f18 	mcr	15, 0, r0, cr7, cr8, {0}
    __asm("isb");
    44e4:	f57ff06f 	isb	sy
    __asm("mrc p15, 0, %0, c7, c4, 0" : "=r" (pa));
    44e8:	ee173f14 	mrc	15, 0, r3, cr7, cr4, {0}
#endif

    if (pa & ALT_CPU_PAR_F_SET_MSK)
    44ec:	e213c001 	ands	r12, r3, #1
    44f0:	1a000010 	bne	4538 <alt_mmu_va_to_pa+0x5c>
                ((fs & 0x10) << 6) | /* bit 10 */
                ((fs & 0x0f) << 0);  /* bit 3:0 */

        dprintf("DEBUG[cache][va->pa]: Fault detected. DFSR = 0x%" PRIx32 ".\n", dfsr);
    }
    else if (pa & ALT_CPU_PAR_SS_SET_MSK)
    44f4:	e2134002 	ands	r4, r3, #2
    44f8:	1a000008 	bne	4520 <alt_mmu_va_to_pa+0x44>
    }
    else
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
    44fc:	e1a00a00 	lsl	r0, r0, #20
    4500:	e1a00a20 	lsr	r0, r0, #20
        pa &= ~(ALT_MMU_SMALL_PAGE_SIZE - 1);
        pa |= offset;
    4504:	e7cb3010 	bfi	r3, r0, #0, #12

        dprintf("DEBUG[cache][va->pa]: pa[page] = 0x%x; offset = 0x%" PRIx32 ".\n",
                pa & ~(ALT_MMU_SMALL_PAGE_SIZE - 1),
                offset);

        *seglength = ALT_MMU_SMALL_PAGE_SIZE - offset;
    4508:	e2600a01 	rsb	r0, r0, #4096	; 0x1000
    450c:	e5810000 	str	r0, [r1]
        *dfsr      = 0;
    4510:	e5824000 	str	r4, [r2]
    }

    return pa;
}
    4514:	e1a00003 	mov	r0, r3
    4518:	e8bd0010 	ldmfd	sp!, {r4}
    451c:	e12fff1e 	bx	lr
    }
    else if (pa & ALT_CPU_PAR_SS_SET_MSK)
    {
        /* If the page is a supersection, PAR contains PA[31:24]. VA contains PA[23:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1);
    4520:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000

        dprintf("DEBUG[cache][va->pa]: pa[SS] = 0x%x; offset = 0x%" PRIx32 ".\n",
                pa & ~(ALT_MMU_SUPERSECTION_SIZE - 1),
                offset);

        *seglength = ALT_MMU_SUPERSECTION_SIZE - offset;
    4524:	e2604401 	rsb	r4, r0, #16777216	; 0x1000000
    {
        /* If the page is a supersection, PAR contains PA[31:24]. VA contains PA[23:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1);
        pa &= ~(ALT_MMU_SUPERSECTION_SIZE - 1);
        pa |= offset;
    4528:	e7d73010 	bfi	r3, r0, #0, #24

        dprintf("DEBUG[cache][va->pa]: pa[SS] = 0x%x; offset = 0x%" PRIx32 ".\n",
                pa & ~(ALT_MMU_SUPERSECTION_SIZE - 1),
                offset);

        *seglength = ALT_MMU_SUPERSECTION_SIZE - offset;
    452c:	e5814000 	str	r4, [r1]
        *dfsr      = 0;
    4530:	e582c000 	str	r12, [r2]
    4534:	eafffff6 	b	4514 <alt_mmu_va_to_pa+0x38>
    if (pa & ALT_CPU_PAR_F_SET_MSK)
    {
        /* If the F bit (fault) is set, then report the error. */

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);
    4538:	e1a010a3 	lsr	r1, r3, #1

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
                ((fs & 0x10) << 6) | /* bit 10 */
    453c:	e2010010 	and	r0, r1, #16

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
    4540:	e201c020 	and	r12, r1, #32
                ((fs & 0x10) << 6) | /* bit 10 */
    4544:	e1a00300 	lsl	r0, r0, #6
                ((fs & 0x0f) << 0);  /* bit 3:0 */
    4548:	e201100f 	and	r1, r1, #15

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
    454c:	e180038c 	orr	r0, r0, r12, lsl #7
                ((fs & 0x10) << 6) | /* bit 10 */
    4550:	e1801001 	orr	r1, r0, r1

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
    4554:	e5821000 	str	r1, [r2]
    4558:	eaffffed 	b	4514 <alt_mmu_va_to_pa+0x38>

0000455c <alt_mmu_va_to_pa_coalesce_begin>:

ALT_STATUS_CODE alt_mmu_va_to_pa_coalesce_begin(ALT_MMU_VA_TO_PA_COALESCE_t * coalesce, const void * va, size_t size)
{
    uint32_t dfsr;

    if ((uintptr_t)va + size - 1 < (uintptr_t)va)
    455c:	e081c002 	add	r12, r1, r2

    return pa;
}

ALT_STATUS_CODE alt_mmu_va_to_pa_coalesce_begin(ALT_MMU_VA_TO_PA_COALESCE_t * coalesce, const void * va, size_t size)
{
    4560:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    uint32_t dfsr;

    if ((uintptr_t)va + size - 1 < (uintptr_t)va)
    4564:	e24cc001 	sub	r12, r12, #1

    return pa;
}

ALT_STATUS_CODE alt_mmu_va_to_pa_coalesce_begin(ALT_MMU_VA_TO_PA_COALESCE_t * coalesce, const void * va, size_t size)
{
    4568:	e1a03000 	mov	r3, r0
    uint32_t dfsr;

    if ((uintptr_t)va + size - 1 < (uintptr_t)va)
    456c:	e151000c 	cmp	r1, r12
    4570:	8a000022 	bhi	4600 <alt_mmu_va_to_pa_coalesce_begin+0xa4>
    __asm("mcr p15, 0, va, c7, c8, 0");
    __asm("isb");
    __asm("mrc p15, 0, pa, c7, c4, 0");
#elif defined(_MSC_VER)
#else
    __asm("mcr p15, 0, %0, c7, c8, 0" : : "r" (va));
    4574:	ee071f18 	mcr	15, 0, r1, cr7, cr8, {0}
    __asm("isb");
    4578:	f57ff06f 	isb	sy
    __asm("mrc p15, 0, %0, c7, c4, 0" : "=r" (pa));
    457c:	ee170f14 	mrc	15, 0, r0, cr7, cr4, {0}
#endif

    if (pa & ALT_CPU_PAR_F_SET_MSK)
    4580:	e3100001 	tst	r0, #1
    4584:	1a000013 	bne	45d8 <alt_mmu_va_to_pa_coalesce_begin+0x7c>
                ((fs & 0x10) << 6) | /* bit 10 */
                ((fs & 0x0f) << 0);  /* bit 3:0 */

        dprintf("DEBUG[cache][va->pa]: Fault detected. DFSR = 0x%" PRIx32 ".\n", dfsr);
    }
    else if (pa & ALT_CPU_PAR_SS_SET_MSK)
    4588:	e3100002 	tst	r0, #2
    }
    else
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
    458c:	01a0ca01 	lsleq	r12, r1, #20
        pa &= ~(ALT_MMU_SMALL_PAGE_SIZE - 1);
    4590:	03c00eff 	biceq	r0, r0, #4080	; 0xff0
    }
    else if (pa & ALT_CPU_PAR_SS_SET_MSK)
    {
        /* If the page is a supersection, PAR contains PA[31:24]. VA contains PA[23:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1);
    4594:	13c1c4ff 	bicne	r12, r1, #-16777216	; 0xff000000
    }
    else
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
    4598:	01a0ca2c 	lsreq	r12, r12, #20
    else if (pa & ALT_CPU_PAR_SS_SET_MSK)
    {
        /* If the page is a supersection, PAR contains PA[31:24]. VA contains PA[23:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1);
        pa &= ~(ALT_MMU_SUPERSECTION_SIZE - 1);
    459c:	120004ff 	andne	r0, r0, #-16777216	; 0xff000000
    else
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
        pa &= ~(ALT_MMU_SMALL_PAGE_SIZE - 1);
    45a0:	03c0000f 	biceq	r0, r0, #15
    {
        /* If the page is a supersection, PAR contains PA[31:24]. VA contains PA[23:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1);
        pa &= ~(ALT_MMU_SUPERSECTION_SIZE - 1);
        pa |= offset;
    45a4:	1180000c 	orrne	r0, r0, r12
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
        pa &= ~(ALT_MMU_SMALL_PAGE_SIZE - 1);
        pa |= offset;
    45a8:	0180000c 	orreq	r0, r0, r12

        dprintf("DEBUG[cache][va->pa]: pa[SS] = 0x%x; offset = 0x%" PRIx32 ".\n",
                pa & ~(ALT_MMU_SUPERSECTION_SIZE - 1),
                offset);

        *seglength = ALT_MMU_SUPERSECTION_SIZE - offset;
    45ac:	126cc401 	rsbne	r12, r12, #16777216	; 0x1000000

        dprintf("DEBUG[cache][va->pa]: pa[page] = 0x%x; offset = 0x%" PRIx32 ".\n",
                pa & ~(ALT_MMU_SMALL_PAGE_SIZE - 1),
                offset);

        *seglength = ALT_MMU_SMALL_PAGE_SIZE - offset;
    45b0:	026cca01 	rsbeq	r12, r12, #4096	; 0x1000
    45b4:	e583c00c 	str	r12, [r3, #12]
    {
        dprintf("MMU[coalesce]: begin(): Invalid translation request.\n");
        return ALT_E_ERROR;
    }

    coalesce->nextsegpa = alt_mmu_va_to_pa(va, &coalesce->nextsegsize, &dfsr);
    45b8:	e5830008 	str	r0, [r3, #8]
    coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, size);

    coalesce->va   = va;
    coalesce->size = size;

    return ALT_E_SUCCESS;
    45bc:	e3a00000 	mov	r0, #0
        dprintf("MMU[coalesce]: begin(): VA to PA error for %p. DFSR = 0x%" PRIx32 ".\n",
                va, dfsr);
        return ALT_E_ERROR;
    }

    coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, size);
    45c0:	e15c0002 	cmp	r12, r2
    45c4:	9583c00c 	strls	r12, [r3, #12]
    45c8:	8583200c 	strhi	r2, [r3, #12]

    coalesce->va   = va;
    coalesce->size = size;
    45cc:	e8830006 	stm	r3, {r1, r2}

    return ALT_E_SUCCESS;
}
    45d0:	e8bd0010 	ldmfd	sp!, {r4}
    45d4:	e12fff1e 	bx	lr
    if (pa & ALT_CPU_PAR_F_SET_MSK)
    {
        /* If the F bit (fault) is set, then report the error. */

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);
    45d8:	e1a0c0a0 	lsr	r12, r0, #1
    {
        dprintf("MMU[coalesce]: begin(): Invalid translation request.\n");
        return ALT_E_ERROR;
    }

    coalesce->nextsegpa = alt_mmu_va_to_pa(va, &coalesce->nextsegsize, &dfsr);
    45dc:	e5830008 	str	r0, [r3, #8]
        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
                ((fs & 0x10) << 6) | /* bit 10 */
    45e0:	e20c0010 	and	r0, r12, #16

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
    45e4:	e20c4020 	and	r4, r12, #32
                ((fs & 0x10) << 6) | /* bit 10 */
    45e8:	e1a00300 	lsl	r0, r0, #6
                ((fs & 0x0f) << 0);  /* bit 3:0 */
    45ec:	e20cc00f 	and	r12, r12, #15

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
    45f0:	e1800384 	orr	r0, r0, r4, lsl #7
        dprintf("MMU[coalesce]: begin(): Invalid translation request.\n");
        return ALT_E_ERROR;
    }

    coalesce->nextsegpa = alt_mmu_va_to_pa(va, &coalesce->nextsegsize, &dfsr);
    if (dfsr)
    45f4:	e190c00c 	orrs	r12, r0, r12
    45f8:	0593c00c 	ldreq	r12, [r3, #12]
    45fc:	0affffee 	beq	45bc <alt_mmu_va_to_pa_coalesce_begin+0x60>
    uint32_t dfsr;

    if ((uintptr_t)va + size - 1 < (uintptr_t)va)
    {
        dprintf("MMU[coalesce]: begin(): Invalid translation request.\n");
        return ALT_E_ERROR;
    4600:	e3e00000 	mvn	r0, #0
    4604:	eafffff1 	b	45d0 <alt_mmu_va_to_pa_coalesce_begin+0x74>

00004608 <alt_mmu_va_to_pa_coalesce_next>:
ALT_STATUS_CODE alt_mmu_va_to_pa_coalesce_next(ALT_MMU_VA_TO_PA_COALESCE_t * coalesce, uintptr_t * segpa, uint32_t * segsize)
{
    uintptr_t thissegpa   = coalesce->nextsegpa;
    uint32_t  thissegsize = coalesce->nextsegsize;

    if (coalesce->size == 0)
    4608:	e590c004 	ldr	r12, [r0, #4]

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_to_pa_coalesce_next(ALT_MMU_VA_TO_PA_COALESCE_t * coalesce, uintptr_t * segpa, uint32_t * segsize)
{
    460c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, r10}
    uintptr_t thissegpa   = coalesce->nextsegpa;
    4610:	e590a008 	ldr	r10, [r0, #8]
    uint32_t  thissegsize = coalesce->nextsegsize;

    if (coalesce->size == 0)
    4614:	e35c0000 	cmp	r12, #0
}

ALT_STATUS_CODE alt_mmu_va_to_pa_coalesce_next(ALT_MMU_VA_TO_PA_COALESCE_t * coalesce, uintptr_t * segpa, uint32_t * segsize)
{
    uintptr_t thissegpa   = coalesce->nextsegpa;
    uint32_t  thissegsize = coalesce->nextsegsize;
    4618:	e590500c 	ldr	r5, [r0, #12]

    if (coalesce->size == 0)
    461c:	0a000042 	beq	472c <alt_mmu_va_to_pa_coalesce_next+0x124>
    {
        dprintf("MMU[coalesce]: next(): Translation already completed.\n");
        return ALT_E_ERROR;
    }

    coalesce->va   += thissegsize;
    4620:	e5903000 	ldr	r3, [r0]
    coalesce->size -= thissegsize;
    4624:	e065c00c 	rsb	r12, r5, r12

    while (coalesce->size)
    4628:	e35c0000 	cmp	r12, #0
        dprintf("MMU[coalesce]: next(): Translation already completed.\n");
        return ALT_E_ERROR;
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;
    462c:	e580c004 	str	r12, [r0, #4]
    {
        dprintf("MMU[coalesce]: next(): Translation already completed.\n");
        return ALT_E_ERROR;
    }

    coalesce->va   += thissegsize;
    4630:	e0833005 	add	r3, r3, r5
    4634:	e5803000 	str	r3, [r0]
    coalesce->size -= thissegsize;

    while (coalesce->size)
    4638:	0a000024 	beq	46d0 <alt_mmu_va_to_pa_coalesce_next+0xc8>
    __asm("mrc p15, 0, pa, c7, c4, 0");
#elif defined(_MSC_VER)
#else
    __asm("mcr p15, 0, %0, c7, c8, 0" : : "r" (va));
    __asm("isb");
    __asm("mrc p15, 0, %0, c7, c4, 0" : "=r" (pa));
    463c:	ee176f14 	mrc	15, 0, r6, cr7, cr4, {0}
    if (pa & ALT_CPU_PAR_F_SET_MSK)
    {
        /* If the F bit (fault) is set, then report the error. */

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);
    4640:	e1a040a6 	lsr	r4, r6, #1
    4644:	e3160001 	tst	r6, #1
    else
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
        pa &= ~(ALT_MMU_SMALL_PAGE_SIZE - 1);
    4648:	e3c69eff 	bic	r9, r6, #4080	; 0xff0
        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
                ((fs & 0x10) << 6) | /* bit 10 */
    464c:	e2048010 	and	r8, r4, #16

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
    4650:	e2047020 	and	r7, r4, #32
                ((fs & 0x10) << 6) | /* bit 10 */
    4654:	e1a08308 	lsl	r8, r8, #6
                ((fs & 0x0f) << 0);  /* bit 3:0 */
    4658:	e204400f 	and	r4, r4, #15
    else
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
        pa &= ~(ALT_MMU_SMALL_PAGE_SIZE - 1);
    465c:	e3c9900f 	bic	r9, r9, #15

        /* Extract the PAR::FS field value. */
        uint32_t fs = ALT_CPU_PAR_FS_VALUE_GET(pa);

        /* Translate PAR::FS[5:0] (field value) or PAR[6:1] => DFSR[12,10,3:0] to report error. */
        *dfsr = ((fs & 0x20) << 7) | /* bit 12 */
    4660:	e1888387 	orr	r8, r8, r7, lsl #7
                ((fs & 0x10) << 6) | /* bit 10 */
    4664:	e1888004 	orr	r8, r8, r4
    4668:	0a000004 	beq	4680 <alt_mmu_va_to_pa_coalesce_next+0x78>
    466c:	ea000028 	b	4714 <alt_mmu_va_to_pa_coalesce_next+0x10c>
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;

    while (coalesce->size)
    4670:	e35c0000 	cmp	r12, #0
        coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, coalesce->size);

        if (coalesce->nextsegpa == thissegpa + thissegsize)
        {
            /* Coalescing possible. Update the current progress. */
            thissegsize    += coalesce->nextsegsize;
    4674:	e0855004 	add	r5, r5, r4
            coalesce->va   += coalesce->nextsegsize;
            coalesce->size -= coalesce->nextsegsize;
    4678:	e8801008 	stm	r0, {r3, r12}
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;

    while (coalesce->size)
    467c:	0a000013 	beq	46d0 <alt_mmu_va_to_pa_coalesce_next+0xc8>
    __asm("mcr p15, 0, va, c7, c8, 0");
    __asm("isb");
    __asm("mrc p15, 0, pa, c7, c4, 0");
#elif defined(_MSC_VER)
#else
    __asm("mcr p15, 0, %0, c7, c8, 0" : : "r" (va));
    4680:	ee073f18 	mcr	15, 0, r3, cr7, cr8, {0}
    __asm("isb");
    4684:	f57ff06f 	isb	sy
    }
    else
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
    4688:	e1a04a03 	lsl	r4, r3, #20
                ((fs & 0x10) << 6) | /* bit 10 */
                ((fs & 0x0f) << 0);  /* bit 3:0 */

        dprintf("DEBUG[cache][va->pa]: Fault detected. DFSR = 0x%" PRIx32 ".\n", dfsr);
    }
    else if (pa & ALT_CPU_PAR_SS_SET_MSK)
    468c:	e3160002 	tst	r6, #2
    {
        /* If the page is a supersection, PAR contains PA[31:24]. VA contains PA[23:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1);
        pa &= ~(ALT_MMU_SUPERSECTION_SIZE - 1);
    4690:	120684ff 	andne	r8, r6, #-16777216	; 0xff000000
    }
    else
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
    4694:	e1a04a24 	lsr	r4, r4, #20
    }
    else if (pa & ALT_CPU_PAR_SS_SET_MSK)
    {
        /* If the page is a supersection, PAR contains PA[31:24]. VA contains PA[23:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1);
    4698:	13c344ff 	bicne	r4, r3, #-16777216	; 0xff000000
            return ALT_E_ERROR;
        }

        coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, coalesce->size);

        if (coalesce->nextsegpa == thissegpa + thissegsize)
    469c:	e085700a 	add	r7, r5, r10
    {
        /* If the page is a supersection, PAR contains PA[31:24]. VA contains PA[23:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SUPERSECTION_SIZE - 1);
        pa &= ~(ALT_MMU_SUPERSECTION_SIZE - 1);
        pa |= offset;
    46a0:	11848008 	orrne	r8, r4, r8
    {
        /* If the page is not a supersection, PAR contains PA[31:12]. VA contains PA[11:0]. */

        uint32_t offset = (uintptr_t)va & (ALT_MMU_SMALL_PAGE_SIZE - 1);
        pa &= ~(ALT_MMU_SMALL_PAGE_SIZE - 1);
        pa |= offset;
    46a4:	01848009 	orreq	r8, r4, r9

        dprintf("DEBUG[cache][va->pa]: pa[SS] = 0x%x; offset = 0x%" PRIx32 ".\n",
                pa & ~(ALT_MMU_SUPERSECTION_SIZE - 1),
                offset);

        *seglength = ALT_MMU_SUPERSECTION_SIZE - offset;
    46a8:	12644401 	rsbne	r4, r4, #16777216	; 0x1000000

        dprintf("DEBUG[cache][va->pa]: pa[page] = 0x%x; offset = 0x%" PRIx32 ".\n",
                pa & ~(ALT_MMU_SMALL_PAGE_SIZE - 1),
                offset);

        *seglength = ALT_MMU_SMALL_PAGE_SIZE - offset;
    46ac:	02644a01 	rsbeq	r4, r4, #4096	; 0x1000
            dprintf("MMU[coalesce]: next(): VA to PA error for %p. DFSR = 0x%" PRIx32 ".\n",
                    coalesce->va, dfsr);
            return ALT_E_ERROR;
        }

        coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, coalesce->size);
    46b0:	e154000c 	cmp	r4, r12
    46b4:	21a0400c 	movcs	r4, r12

        if (coalesce->nextsegpa == thissegpa + thissegsize)
    46b8:	e1570008 	cmp	r7, r8
        {
            /* Coalescing possible. Update the current progress. */
            thissegsize    += coalesce->nextsegsize;
            coalesce->va   += coalesce->nextsegsize;
            coalesce->size -= coalesce->nextsegsize;
    46bc:	e064c00c 	rsb	r12, r4, r12

        if (coalesce->nextsegpa == thissegpa + thissegsize)
        {
            /* Coalescing possible. Update the current progress. */
            thissegsize    += coalesce->nextsegsize;
            coalesce->va   += coalesce->nextsegsize;
    46c0:	e0833004 	add	r3, r3, r4
    coalesce->size -= thissegsize;

    while (coalesce->size)
    {
        uint32_t dfsr;
        coalesce->nextsegpa = alt_mmu_va_to_pa(coalesce->va, &coalesce->nextsegsize, &dfsr);
    46c4:	e5808008 	str	r8, [r0, #8]
            dprintf("MMU[coalesce]: next(): VA to PA error for %p. DFSR = 0x%" PRIx32 ".\n",
                    coalesce->va, dfsr);
            return ALT_E_ERROR;
        }

        coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, coalesce->size);
    46c8:	e580400c 	str	r4, [r0, #12]

        if (coalesce->nextsegpa == thissegpa + thissegsize)
    46cc:	0affffe7 	beq	4670 <alt_mmu_va_to_pa_coalesce_next+0x68>
    }

    *segpa   = thissegpa;
    *segsize = thissegsize;

    return ALT_E_SUCCESS;
    46d0:	e3a00000 	mov	r0, #0
            /* Cannot coalesce. */
            break;
        }
    }

    *segpa   = thissegpa;
    46d4:	e581a000 	str	r10, [r1]
    *segsize = thissegsize;
    46d8:	e5825000 	str	r5, [r2]

    return ALT_E_SUCCESS;
}
    46dc:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, r10}
    46e0:	e12fff1e 	bx	lr
    46e4:	e590400c 	ldr	r4, [r0, #12]
            dprintf("MMU[coalesce]: next(): VA to PA error for %p. DFSR = 0x%" PRIx32 ".\n",
                    coalesce->va, dfsr);
            return ALT_E_ERROR;
        }

        coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, coalesce->size);
    46e8:	e154000c 	cmp	r4, r12
    46ec:	21a0400c 	movcs	r4, r12

        if (coalesce->nextsegpa == thissegpa + thissegsize)
    46f0:	e1570006 	cmp	r7, r6
        {
            /* Coalescing possible. Update the current progress. */
            thissegsize    += coalesce->nextsegsize;
            coalesce->va   += coalesce->nextsegsize;
            coalesce->size -= coalesce->nextsegsize;
    46f4:	e064c00c 	rsb	r12, r4, r12

        if (coalesce->nextsegpa == thissegpa + thissegsize)
        {
            /* Coalescing possible. Update the current progress. */
            thissegsize    += coalesce->nextsegsize;
            coalesce->va   += coalesce->nextsegsize;
    46f8:	e0833004 	add	r3, r3, r4
            dprintf("MMU[coalesce]: next(): VA to PA error for %p. DFSR = 0x%" PRIx32 ".\n",
                    coalesce->va, dfsr);
            return ALT_E_ERROR;
        }

        coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, coalesce->size);
    46fc:	e580400c 	str	r4, [r0, #12]

        if (coalesce->nextsegpa == thissegpa + thissegsize)
    4700:	1afffff2 	bne	46d0 <alt_mmu_va_to_pa_coalesce_next+0xc8>
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;

    while (coalesce->size)
    4704:	e35c0000 	cmp	r12, #0
        coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, coalesce->size);

        if (coalesce->nextsegpa == thissegpa + thissegsize)
        {
            /* Coalescing possible. Update the current progress. */
            thissegsize    += coalesce->nextsegsize;
    4708:	e0855004 	add	r5, r5, r4
            coalesce->va   += coalesce->nextsegsize;
            coalesce->size -= coalesce->nextsegsize;
    470c:	e8801008 	stm	r0, {r3, r12}
    }

    coalesce->va   += thissegsize;
    coalesce->size -= thissegsize;

    while (coalesce->size)
    4710:	0affffee 	beq	46d0 <alt_mmu_va_to_pa_coalesce_next+0xc8>
    __asm("mcr p15, 0, va, c7, c8, 0");
    __asm("isb");
    __asm("mrc p15, 0, pa, c7, c4, 0");
#elif defined(_MSC_VER)
#else
    __asm("mcr p15, 0, %0, c7, c8, 0" : : "r" (va));
    4714:	ee073f18 	mcr	15, 0, r3, cr7, cr8, {0}
    __asm("isb");
    4718:	f57ff06f 	isb	sy

    while (coalesce->size)
    {
        uint32_t dfsr;
        coalesce->nextsegpa = alt_mmu_va_to_pa(coalesce->va, &coalesce->nextsegsize, &dfsr);
        if (dfsr)
    471c:	e3580000 	cmp	r8, #0
            return ALT_E_ERROR;
        }

        coalesce->nextsegsize = ALT_MIN(coalesce->nextsegsize, coalesce->size);

        if (coalesce->nextsegpa == thissegpa + thissegsize)
    4720:	e085700a 	add	r7, r5, r10
    coalesce->size -= thissegsize;

    while (coalesce->size)
    {
        uint32_t dfsr;
        coalesce->nextsegpa = alt_mmu_va_to_pa(coalesce->va, &coalesce->nextsegsize, &dfsr);
    4724:	e5806008 	str	r6, [r0, #8]
        if (dfsr)
    4728:	0affffed 	beq	46e4 <alt_mmu_va_to_pa_coalesce_next+0xdc>
    uint32_t  thissegsize = coalesce->nextsegsize;

    if (coalesce->size == 0)
    {
        dprintf("MMU[coalesce]: next(): Translation already completed.\n");
        return ALT_E_ERROR;
    472c:	e3e00000 	mvn	r0, #0
    4730:	eaffffe9 	b	46dc <alt_mmu_va_to_pa_coalesce_next+0xd4>

00004734 <alt_mmu_va_to_pa_coalesce_end>:
    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_mmu_va_to_pa_coalesce_end(ALT_MMU_VA_TO_PA_COALESCE_t * coalesce)
{
    if (coalesce->size)
    4734:	e5903004 	ldr	r3, [r0, #4]
    4738:	e3530000 	cmp	r3, #0
    }
    else
    {
        return ALT_E_SUCCESS;
    }
}
    473c:	13e00000 	mvnne	r0, #0
    4740:	03a00000 	moveq	r0, #0
    4744:	e12fff1e 	bx	lr

00004748 <alt_sdmmc_cmd_set>:
//Set command configuration
*/
static ALT_STATUS_CODE alt_sdmmc_cmd_set(const ALT_SDMMC_CMD_INDEX_t cmd_index,
                                         const ALT_SDMMC_CMD_CONFIG_t *cmd_cfg,
                                         bool start_cmd)
{
    4748:	e92d05f0 	push	{r4, r5, r6, r7, r8, r10}
     uint32_t cmd_register = ALT_SDMMC_CMD_CMD_INDEX_SET(cmd_index)
    474c:	e200403f 	and	r4, r0, #63	; 0x3f
                           | ALT_SDMMC_CMD_RESPONSE_EXPECT_SET(cmd_cfg->response_expect) 
                           | ALT_SDMMC_CMD_RESPONSE_LEN_SET(cmd_cfg->response_length_long)
    4750:	e5913000 	ldr	r3, [r1]
                           | ALT_SDMMC_CMD_CHECK_RESPONSE_CRC_SET(cmd_cfg->check_response_crc)
                           | ALT_SDMMC_CMD_DATA_EXPECTED_SET(cmd_cfg->data_expected)
                           | ALT_SDMMC_CMD_RD_WR_SET(cmd_cfg->write_active)
                           | ALT_SDMMC_CMD_TFR_MOD_SET(cmd_cfg->stream_mode_active)
                           | ALT_SDMMC_CMD_SEND_AUTO_STOP_SET(cmd_cfg->send_auto_stop)
                           | ALT_SDMMC_CMD_WAIT_PRVDATA_COMPLETE_SET(cmd_cfg->wait_prvdata_complete)
    4754:	e3071fc0 	movw	r1, #32704	; 0x7fc0
                           | ALT_SDMMC_CMD_BOOT_MOD_SET(cmd_cfg->boot_mode)
                           | ALT_SDMMC_CMD_VOLT_SWITCH_SET(cmd_cfg->volt_switch)
                           | ALT_SDMMC_CMD_USE_HOLD_REG_SET(cmd_cfg->use_hold_reg)
                           | ALT_SDMMC_CMD_START_CMD_SET(start_cmd);

    alt_write_word(ALT_SDMMC_CMD_ADDR, cmd_register);
    4758:	e304cfff 	movw	r12, #20479	; 0x4fff
#ifdef LOGGER
    dprintf("\ncommand = %X\n", (int)cmd_register);
#endif

    return ALT_E_SUCCESS;
}
    475c:	e3a00000 	mov	r0, #0
                           | ALT_SDMMC_CMD_BOOT_MOD_SET(cmd_cfg->boot_mode)
                           | ALT_SDMMC_CMD_VOLT_SWITCH_SET(cmd_cfg->volt_switch)
                           | ALT_SDMMC_CMD_USE_HOLD_REG_SET(cmd_cfg->use_hold_reg)
                           | ALT_SDMMC_CMD_START_CMD_SET(start_cmd);

    alt_write_word(ALT_SDMMC_CMD_ADDR, cmd_register);
    4760:	e34fcf70 	movt	r12, #65392	; 0xff70
                           | ALT_SDMMC_CMD_RD_WR_SET(cmd_cfg->write_active)
                           | ALT_SDMMC_CMD_TFR_MOD_SET(cmd_cfg->stream_mode_active)
                           | ALT_SDMMC_CMD_SEND_AUTO_STOP_SET(cmd_cfg->send_auto_stop)
                           | ALT_SDMMC_CMD_WAIT_PRVDATA_COMPLETE_SET(cmd_cfg->wait_prvdata_complete)
                           | ALT_SDMMC_CMD_STOP_ABT_CMD_SET(cmd_cfg->stop_abort_cmd)
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
    4764:	e7e087d3 	ubfx	r8, r3, #15, #1
                           | ALT_SDMMC_CMD_CHECK_RESPONSE_CRC_SET(cmd_cfg->check_response_crc)
                           | ALT_SDMMC_CMD_DATA_EXPECTED_SET(cmd_cfg->data_expected)
                           | ALT_SDMMC_CMD_RD_WR_SET(cmd_cfg->write_active)
                           | ALT_SDMMC_CMD_TFR_MOD_SET(cmd_cfg->stream_mode_active)
                           | ALT_SDMMC_CMD_SEND_AUTO_STOP_SET(cmd_cfg->send_auto_stop)
                           | ALT_SDMMC_CMD_WAIT_PRVDATA_COMPLETE_SET(cmd_cfg->wait_prvdata_complete)
    4768:	e0031001 	and	r1, r3, r1
                           | ALT_SDMMC_CMD_STOP_ABT_CMD_SET(cmd_cfg->stop_abort_cmd)
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
    476c:	e1a08f88 	lsl	r8, r8, #31
                           | ALT_SDMMC_CMD_UPDATE_CLK_REGS_ONLY_SET(cmd_cfg->update_clock_registers_only)
    4770:	e203a602 	and	r10, r3, #2097152	; 0x200000
                           | ALT_SDMMC_CMD_RD_CEATA_DEVICE_SET(cmd_cfg->read_ceata_device)
    4774:	e2037501 	and	r7, r3, #4194304	; 0x400000
                           | ALT_SDMMC_CMD_DATA_EXPECTED_SET(cmd_cfg->data_expected)
                           | ALT_SDMMC_CMD_RD_WR_SET(cmd_cfg->write_active)
                           | ALT_SDMMC_CMD_TFR_MOD_SET(cmd_cfg->stream_mode_active)
                           | ALT_SDMMC_CMD_SEND_AUTO_STOP_SET(cmd_cfg->send_auto_stop)
                           | ALT_SDMMC_CMD_WAIT_PRVDATA_COMPLETE_SET(cmd_cfg->wait_prvdata_complete)
                           | ALT_SDMMC_CMD_STOP_ABT_CMD_SET(cmd_cfg->stop_abort_cmd)
    4778:	e1818828 	orr	r8, r1, r8, lsr #16
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
                           | ALT_SDMMC_CMD_UPDATE_CLK_REGS_ONLY_SET(cmd_cfg->update_clock_registers_only)
                           | ALT_SDMMC_CMD_RD_CEATA_DEVICE_SET(cmd_cfg->read_ceata_device)
                           | ALT_SDMMC_CMD_CCS_EXPECTED_SET(cmd_cfg->ccs_expected)
    477c:	e2036502 	and	r6, r3, #8388608	; 0x800000
                           | ALT_SDMMC_CMD_EN_BOOT_SET(cmd_cfg->enable_boot)
    4780:	e2035401 	and	r5, r3, #16777216	; 0x1000000
                           | ALT_SDMMC_CMD_RD_WR_SET(cmd_cfg->write_active)
                           | ALT_SDMMC_CMD_TFR_MOD_SET(cmd_cfg->stream_mode_active)
                           | ALT_SDMMC_CMD_SEND_AUTO_STOP_SET(cmd_cfg->send_auto_stop)
                           | ALT_SDMMC_CMD_WAIT_PRVDATA_COMPLETE_SET(cmd_cfg->wait_prvdata_complete)
                           | ALT_SDMMC_CMD_STOP_ABT_CMD_SET(cmd_cfg->stop_abort_cmd)
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
    4784:	e188800a 	orr	r8, r8, r10
                           | ALT_SDMMC_CMD_UPDATE_CLK_REGS_ONLY_SET(cmd_cfg->update_clock_registers_only)
                           | ALT_SDMMC_CMD_RD_CEATA_DEVICE_SET(cmd_cfg->read_ceata_device)
                           | ALT_SDMMC_CMD_CCS_EXPECTED_SET(cmd_cfg->ccs_expected)
                           | ALT_SDMMC_CMD_EN_BOOT_SET(cmd_cfg->enable_boot)
                           | ALT_SDMMC_CMD_EXPECT_BOOT_ACK_SET(cmd_cfg->expect_boot_ack)
    4788:	e203a402 	and	r10, r3, #33554432	; 0x2000000
                           | ALT_SDMMC_CMD_TFR_MOD_SET(cmd_cfg->stream_mode_active)
                           | ALT_SDMMC_CMD_SEND_AUTO_STOP_SET(cmd_cfg->send_auto_stop)
                           | ALT_SDMMC_CMD_WAIT_PRVDATA_COMPLETE_SET(cmd_cfg->wait_prvdata_complete)
                           | ALT_SDMMC_CMD_STOP_ABT_CMD_SET(cmd_cfg->stop_abort_cmd)
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
                           | ALT_SDMMC_CMD_UPDATE_CLK_REGS_ONLY_SET(cmd_cfg->update_clock_registers_only)
    478c:	e1888007 	orr	r8, r8, r7
                           | ALT_SDMMC_CMD_RD_CEATA_DEVICE_SET(cmd_cfg->read_ceata_device)
                           | ALT_SDMMC_CMD_CCS_EXPECTED_SET(cmd_cfg->ccs_expected)
                           | ALT_SDMMC_CMD_EN_BOOT_SET(cmd_cfg->enable_boot)
                           | ALT_SDMMC_CMD_EXPECT_BOOT_ACK_SET(cmd_cfg->expect_boot_ack)
                           | ALT_SDMMC_CMD_DIS_BOOT_SET(cmd_cfg->disable_boot)
    4790:	e2037301 	and	r7, r3, #67108864	; 0x4000000
                           | ALT_SDMMC_CMD_SEND_AUTO_STOP_SET(cmd_cfg->send_auto_stop)
                           | ALT_SDMMC_CMD_WAIT_PRVDATA_COMPLETE_SET(cmd_cfg->wait_prvdata_complete)
                           | ALT_SDMMC_CMD_STOP_ABT_CMD_SET(cmd_cfg->stop_abort_cmd)
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
                           | ALT_SDMMC_CMD_UPDATE_CLK_REGS_ONLY_SET(cmd_cfg->update_clock_registers_only)
                           | ALT_SDMMC_CMD_RD_CEATA_DEVICE_SET(cmd_cfg->read_ceata_device)
    4794:	e1888006 	orr	r8, r8, r6
                           | ALT_SDMMC_CMD_EN_BOOT_SET(cmd_cfg->enable_boot)
                           | ALT_SDMMC_CMD_EXPECT_BOOT_ACK_SET(cmd_cfg->expect_boot_ack)
                           | ALT_SDMMC_CMD_DIS_BOOT_SET(cmd_cfg->disable_boot)
                           | ALT_SDMMC_CMD_BOOT_MOD_SET(cmd_cfg->boot_mode)
                           | ALT_SDMMC_CMD_VOLT_SWITCH_SET(cmd_cfg->volt_switch)
                           | ALT_SDMMC_CMD_USE_HOLD_REG_SET(cmd_cfg->use_hold_reg)
    4798:	e2031202 	and	r1, r3, #536870912	; 0x20000000
                           | ALT_SDMMC_CMD_WAIT_PRVDATA_COMPLETE_SET(cmd_cfg->wait_prvdata_complete)
                           | ALT_SDMMC_CMD_STOP_ABT_CMD_SET(cmd_cfg->stop_abort_cmd)
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
                           | ALT_SDMMC_CMD_UPDATE_CLK_REGS_ONLY_SET(cmd_cfg->update_clock_registers_only)
                           | ALT_SDMMC_CMD_RD_CEATA_DEVICE_SET(cmd_cfg->read_ceata_device)
                           | ALT_SDMMC_CMD_CCS_EXPECTED_SET(cmd_cfg->ccs_expected)
    479c:	e1888005 	orr	r8, r8, r5
                           | ALT_SDMMC_CMD_EN_BOOT_SET(cmd_cfg->enable_boot)
                           | ALT_SDMMC_CMD_EXPECT_BOOT_ACK_SET(cmd_cfg->expect_boot_ack)
                           | ALT_SDMMC_CMD_DIS_BOOT_SET(cmd_cfg->disable_boot)
                           | ALT_SDMMC_CMD_BOOT_MOD_SET(cmd_cfg->boot_mode)
    47a0:	e2036302 	and	r6, r3, #134217728	; 0x8000000
                           | ALT_SDMMC_CMD_STOP_ABT_CMD_SET(cmd_cfg->stop_abort_cmd)
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
                           | ALT_SDMMC_CMD_UPDATE_CLK_REGS_ONLY_SET(cmd_cfg->update_clock_registers_only)
                           | ALT_SDMMC_CMD_RD_CEATA_DEVICE_SET(cmd_cfg->read_ceata_device)
                           | ALT_SDMMC_CMD_CCS_EXPECTED_SET(cmd_cfg->ccs_expected)
                           | ALT_SDMMC_CMD_EN_BOOT_SET(cmd_cfg->enable_boot)
    47a4:	e188800a 	orr	r8, r8, r10
                           | ALT_SDMMC_CMD_EXPECT_BOOT_ACK_SET(cmd_cfg->expect_boot_ack)
                           | ALT_SDMMC_CMD_DIS_BOOT_SET(cmd_cfg->disable_boot)
                           | ALT_SDMMC_CMD_BOOT_MOD_SET(cmd_cfg->boot_mode)
                           | ALT_SDMMC_CMD_VOLT_SWITCH_SET(cmd_cfg->volt_switch)
    47a8:	e2035201 	and	r5, r3, #268435456	; 0x10000000
                           | ALT_SDMMC_CMD_SEND_INITIALIZATION_SET(cmd_cfg->send_initialization)
                           | ALT_SDMMC_CMD_UPDATE_CLK_REGS_ONLY_SET(cmd_cfg->update_clock_registers_only)
                           | ALT_SDMMC_CMD_RD_CEATA_DEVICE_SET(cmd_cfg->read_ceata_device)
                           | ALT_SDMMC_CMD_CCS_EXPECTED_SET(cmd_cfg->ccs_expected)
                           | ALT_SDMMC_CMD_EN_BOOT_SET(cmd_cfg->enable_boot)
                           | ALT_SDMMC_CMD_EXPECT_BOOT_ACK_SET(cmd_cfg->expect_boot_ack)
    47ac:	e1883007 	orr	r3, r8, r7
                           | ALT_SDMMC_CMD_DIS_BOOT_SET(cmd_cfg->disable_boot)
    47b0:	e1833006 	orr	r3, r3, r6
                           | ALT_SDMMC_CMD_BOOT_MOD_SET(cmd_cfg->boot_mode)
    47b4:	e1833005 	orr	r3, r3, r5
                           | ALT_SDMMC_CMD_VOLT_SWITCH_SET(cmd_cfg->volt_switch)
    47b8:	e1833001 	orr	r3, r3, r1
                           | ALT_SDMMC_CMD_USE_HOLD_REG_SET(cmd_cfg->use_hold_reg)
    47bc:	e1833004 	orr	r3, r3, r4
*/
static ALT_STATUS_CODE alt_sdmmc_cmd_set(const ALT_SDMMC_CMD_INDEX_t cmd_index,
                                         const ALT_SDMMC_CMD_CONFIG_t *cmd_cfg,
                                         bool start_cmd)
{
     uint32_t cmd_register = ALT_SDMMC_CMD_CMD_INDEX_SET(cmd_index)
    47c0:	e1832f82 	orr	r2, r3, r2, lsl #31
                           | ALT_SDMMC_CMD_BOOT_MOD_SET(cmd_cfg->boot_mode)
                           | ALT_SDMMC_CMD_VOLT_SWITCH_SET(cmd_cfg->volt_switch)
                           | ALT_SDMMC_CMD_USE_HOLD_REG_SET(cmd_cfg->use_hold_reg)
                           | ALT_SDMMC_CMD_START_CMD_SET(start_cmd);

    alt_write_word(ALT_SDMMC_CMD_ADDR, cmd_register);
    47c4:	e50c2fd3 	str	r2, [r12, #-4051]	; 0xfffff02d
#ifdef LOGGER
    dprintf("\ncommand = %X\n", (int)cmd_register);
#endif

    return ALT_E_SUCCESS;
}
    47c8:	e8bd05f0 	pop	{r4, r5, r6, r7, r8, r10}
    47cc:	e12fff1e 	bx	lr

000047d0 <alt_sdmmc_data_done_waiter>:

/*
// Waiter of data transfer complete
*/
static ALT_STATUS_CODE alt_sdmmc_data_done_waiter(void)
{
    47d0:	e92d4008 	push	{r3, lr}
    47d4:	e304023f 	movw	r0, #16959	; 0x423f
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    47d8:	e3043fff 	movw	r3, #20479	; 0x4fff

/*
// Waiter of data transfer complete
*/
static ALT_STATUS_CODE alt_sdmmc_data_done_waiter(void)
{
    47dc:	e340000f 	movt	r0, #15
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    47e0:	e34f3f70 	movt	r3, #65392	; 0xff70
    47e4:	ea000001 	b	47f0 <alt_sdmmc_data_done_waiter+0x20>
static ALT_STATUS_CODE alt_sdmmc_data_done_waiter(void)
{
    ALT_STATUS_CODE status = ALT_E_TMO;
    uint32_t timeout = ALT_SDMMC_TMO_WAITER;

    while (--timeout)
    47e8:	e2500001 	subs	r0, r0, #1
    47ec:	0a00002e 	beq	48ac <alt_sdmmc_data_done_waiter+0xdc>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    47f0:	e513cfbf 	ldr	r12, [r3, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    47f4:	e30b2bc2 	movw	r2, #48066	; 0xbbc2
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    47f8:	e5131fbf 	ldr	r1, [r3, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    47fc:	e0012002 	and	r2, r1, r2
    4800:	e3520000 	cmp	r2, #0
    4804:	1a000023 	bne	4898 <alt_sdmmc_data_done_waiter+0xc8>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    4808:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    480c:	e3120402 	tst	r2, #33554432	; 0x2000000
    4810:	0a000005 	beq	482c <alt_sdmmc_data_done_waiter+0x5c>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    4814:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    4818:	e3120080 	tst	r2, #128	; 0x80
    481c:	0a000002 	beq	482c <alt_sdmmc_data_done_waiter+0x5c>
/*
// Returns the current SD/MMC controller interrupt IDMAC status conditions.
*/
uint32_t alt_sdmmc_dma_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_IDSTS_ADDR);
    4820:	e5132f73 	ldr	r2, [r3, #-3955]	; 0xfffff08d
        if (alt_sdmmc_is_dma_enabled() == ALT_E_TRUE)
        {
            uint32_t idmac_status = alt_sdmmc_dma_int_status_get();

            /*  If DMA status is abnormal then transfer complete with error*/
            if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_AI)
    4824:	e3120c02 	tst	r2, #512	; 0x200
    4828:	1a000021 	bne	48b4 <alt_sdmmc_data_done_waiter+0xe4>
                dprintf("Abnormal DMA reported.\n");
                break;
            }
        }
        /*  Data transfer over caused by complete transfer operation*/
        if (int_status & ALT_SDMMC_INT_STATUS_DTO)
    482c:	e31c0008 	tst	r12, #8
    4830:	0affffec 	beq	47e8 <alt_sdmmc_data_done_waiter+0x18>
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    4834:	e3043fff 	movw	r3, #20479	; 0x4fff
        }
        /*  Data transfer over caused by complete transfer operation*/
        if (int_status & ALT_SDMMC_INT_STATUS_DTO)
        {
            alt_sdmmc_int_clear(ALT_SDMMC_INT_STATUS_DTO);
            status = ALT_E_SUCCESS;
    4838:	e3a00000 	mov	r0, #0
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    483c:	e34f3f70 	movt	r3, #65392	; 0xff70
    4840:	e3a02008 	mov	r2, #8
    4844:	e5032fbb 	str	r2, [r3, #-4027]	; 0xfffff045
            status = ALT_E_SUCCESS;
            break;
        }
    }

    timeout = ALT_SDMMC_TMO_WAITER;
    4848:	e304c240 	movw	r12, #16960	; 0x4240
/*
// Returns ALT_E_TRUE if the SD/MMC and iddmac controller is in idle state
*/
static ALT_STATUS_CODE alt_sdmmc_is_idle(void)
{
    uint32_t mmc_state = ALT_SDMMC_STAT_CMD_FSM_STATES_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    484c:	e3043fff 	movw	r3, #20479	; 0x4fff
            status = ALT_E_SUCCESS;
            break;
        }
    }

    timeout = ALT_SDMMC_TMO_WAITER;
    4850:	e340c00f 	movt	r12, #15
/*
// Returns ALT_E_TRUE if the SD/MMC and iddmac controller is in idle state
*/
static ALT_STATUS_CODE alt_sdmmc_is_idle(void)
{
    uint32_t mmc_state = ALT_SDMMC_STAT_CMD_FSM_STATES_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    4854:	e34f3f70 	movt	r3, #65392	; 0xff70
    4858:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
    
    uint32_t dma_state = ALT_SDMMC_IDSTS_FSM_GET(alt_read_word(ALT_SDMMC_IDSTS_ADDR));
    485c:	e5131f73 	ldr	r1, [r3, #-3955]	; 0xfffff08d
/*
// Returns ALT_E_TRUE if the SD/MMC and iddmac controller is in idle state
*/
static ALT_STATUS_CODE alt_sdmmc_is_idle(void)
{
    uint32_t mmc_state = ALT_SDMMC_STAT_CMD_FSM_STATES_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    4860:	e7e32252 	ubfx	r2, r2, #4, #4
    
    uint32_t dma_state = ALT_SDMMC_IDSTS_FSM_GET(alt_read_word(ALT_SDMMC_IDSTS_ADDR));
    4864:	e7e316d1 	ubfx	r1, r1, #13, #4
    
    if ((mmc_state != ALT_SDMMC_FSM_IDLE) || (dma_state != ALT_SDMMC_DMA_FSM_IDLE))
    4868:	e1912002 	orrs	r2, r1, r2
    486c:	1a000006 	bne	488c <alt_sdmmc_data_done_waiter+0xbc>
    }

    timeout = ALT_SDMMC_TMO_WAITER;
    while (!alt_sdmmc_is_idle() && --timeout)
        ;
    if (timeout == 0)
    4870:	e35c0000 	cmp	r12, #0
    4874:	18bd8008 	popne	{r3, pc}
    {
        dprintf("Timed out waiting for SDMMC to become idle\n");
    4878:	e30203d4 	movw	r0, #9172	; 0x23d4
    487c:	e3400002 	movt	r0, #2
    4880:	ebffeef3 	bl	454 <print_debug>
        status = ALT_E_TMO;
    4884:	e3e0000b 	mvn	r0, #11
    4888:	e8bd8008 	pop	{r3, pc}
            break;
        }
    }

    timeout = ALT_SDMMC_TMO_WAITER;
    while (!alt_sdmmc_is_idle() && --timeout)
    488c:	e25cc001 	subs	r12, r12, #1
    4890:	1afffff0 	bne	4858 <alt_sdmmc_data_done_waiter+0x88>
    4894:	eafffff7 	b	4878 <alt_sdmmc_data_done_waiter+0xa8>
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    4898:	e3020398 	movw	r0, #9112	; 0x2398
    489c:	e3400002 	movt	r0, #2
    48a0:	ebffeeeb 	bl	454 <print_debug>
        int_status = alt_sdmmc_int_status_get();

        /*  Error checking*/
        if (alt_sdmmc_error_status_detect() != ALT_E_SUCCESS)
        {
            status = ALT_E_ERROR;
    48a4:	e3e00000 	mvn	r0, #0
    48a8:	eaffffe6 	b	4848 <alt_sdmmc_data_done_waiter+0x78>
/*
// Waiter of data transfer complete
*/
static ALT_STATUS_CODE alt_sdmmc_data_done_waiter(void)
{
    ALT_STATUS_CODE status = ALT_E_TMO;
    48ac:	e3e0000b 	mvn	r0, #11
    48b0:	eaffffe4 	b	4848 <alt_sdmmc_data_done_waiter+0x78>

            /*  If DMA status is abnormal then transfer complete with error*/
            if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_AI)
            {
                status = ALT_E_ERROR;
                dprintf("Abnormal DMA reported.\n");
    48b4:	e30203bc 	movw	r0, #9148	; 0x23bc
    48b8:	e3400002 	movt	r0, #2
    48bc:	ebffeee4 	bl	454 <print_debug>
            uint32_t idmac_status = alt_sdmmc_dma_int_status_get();

            /*  If DMA status is abnormal then transfer complete with error*/
            if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_AI)
            {
                status = ALT_E_ERROR;
    48c0:	e3e00000 	mvn	r0, #0
                dprintf("Abnormal DMA reported.\n");
                break;
    48c4:	eaffffdf 	b	4848 <alt_sdmmc_data_done_waiter+0x78>

000048c8 <alt_sdmmc_command_send.constprop.14>:
    {
        dprintf("\ncommand_type not supported\n");
        return ALT_E_BAD_ARG;
    }

    if (command == ALT_SDMMC_CLK_INDEX)
    48c8:	e3700001 	cmn	r0, #1

/*
// Send the a command and command argument to the card and optionally return the
// command response.
*/
ALT_STATUS_CODE alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_t command_type,
    48cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    48d0:	e1a05000 	mov	r5, r0
    48d4:	e1a08001 	mov	r8, r1
    48d8:	e1a06002 	mov	r6, r2
    {
        dprintf("\ncommand_type not supported\n");
        return ALT_E_BAD_ARG;
    }

    if (command == ALT_SDMMC_CLK_INDEX)
    48dc:	0a00009c 	beq	4b54 <alt_sdmmc_command_send.constprop.14+0x28c>
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    48e0:	e3023a40 	movw	r3, #10816	; 0x2a40
    48e4:	e3403002 	movt	r3, #2
    48e8:	e5d32000 	ldrb	r2, [r3]
    48ec:	e202203f 	and	r2, r2, #63	; 0x3f
    48f0:	e1520000 	cmp	r2, r0
    48f4:	01a07003 	moveq	r7, r3
    48f8:	0a000040 	beq	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
    48fc:	e5d32004 	ldrb	r2, [r3, #4]
    4900:	e202203f 	and	r2, r2, #63	; 0x3f
    4904:	e1520000 	cmp	r2, r0
    4908:	0a00009b 	beq	4b7c <alt_sdmmc_command_send.constprop.14+0x2b4>
    490c:	e5d32008 	ldrb	r2, [r3, #8]
    4910:	e202203f 	and	r2, r2, #63	; 0x3f
    4914:	e1520000 	cmp	r2, r0
    4918:	0a00009c 	beq	4b90 <alt_sdmmc_command_send.constprop.14+0x2c8>
    491c:	e5d3200c 	ldrb	r2, [r3, #12]
    4920:	e202203f 	and	r2, r2, #63	; 0x3f
    4924:	e1520000 	cmp	r2, r0
    4928:	0a00009d 	beq	4ba4 <alt_sdmmc_command_send.constprop.14+0x2dc>
    492c:	e5d32010 	ldrb	r2, [r3, #16]
    4930:	e202203f 	and	r2, r2, #63	; 0x3f
    4934:	e1520000 	cmp	r2, r0
    4938:	0a00009e 	beq	4bb8 <alt_sdmmc_command_send.constprop.14+0x2f0>
    493c:	e5d32014 	ldrb	r2, [r3, #20]
    4940:	e202203f 	and	r2, r2, #63	; 0x3f
    4944:	e1520000 	cmp	r2, r0
    4948:	0a00009f 	beq	4bcc <alt_sdmmc_command_send.constprop.14+0x304>
    494c:	e5d32018 	ldrb	r2, [r3, #24]
    4950:	e202203f 	and	r2, r2, #63	; 0x3f
    4954:	e1520000 	cmp	r2, r0
    4958:	0a0000a0 	beq	4be0 <alt_sdmmc_command_send.constprop.14+0x318>
    495c:	e5d3201c 	ldrb	r2, [r3, #28]
    4960:	e202203f 	and	r2, r2, #63	; 0x3f
    4964:	e1520000 	cmp	r2, r0
    4968:	0a0000a1 	beq	4bf4 <alt_sdmmc_command_send.constprop.14+0x32c>
    496c:	e5d32020 	ldrb	r2, [r3, #32]
    4970:	e202203f 	and	r2, r2, #63	; 0x3f
    4974:	e1520000 	cmp	r2, r0
    4978:	0a00009f 	beq	4bfc <alt_sdmmc_command_send.constprop.14+0x334>
    497c:	e5d33024 	ldrb	r3, [r3, #36]	; 0x24
    4980:	e3027a40 	movw	r7, #10816	; 0x2a40
    4984:	e3407002 	movt	r7, #2
    4988:	e203303f 	and	r3, r3, #63	; 0x3f
    498c:	e1530000 	cmp	r3, r0
    4990:	0a00009b 	beq	4c04 <alt_sdmmc_command_send.constprop.14+0x33c>
    4994:	e5d73028 	ldrb	r3, [r7, #40]	; 0x28
    4998:	e203303f 	and	r3, r3, #63	; 0x3f
    499c:	e1530000 	cmp	r3, r0
    49a0:	0a000099 	beq	4c0c <alt_sdmmc_command_send.constprop.14+0x344>
    49a4:	e5d7302c 	ldrb	r3, [r7, #44]	; 0x2c
    49a8:	e203303f 	and	r3, r3, #63	; 0x3f
    49ac:	e1530000 	cmp	r3, r0
    49b0:	0a000097 	beq	4c14 <alt_sdmmc_command_send.constprop.14+0x34c>
    49b4:	e5d73030 	ldrb	r3, [r7, #48]	; 0x30
    49b8:	e203303f 	and	r3, r3, #63	; 0x3f
    49bc:	e1530000 	cmp	r3, r0
    49c0:	0a000095 	beq	4c1c <alt_sdmmc_command_send.constprop.14+0x354>
    49c4:	e5d73034 	ldrb	r3, [r7, #52]	; 0x34
    49c8:	e203303f 	and	r3, r3, #63	; 0x3f
    49cc:	e1530000 	cmp	r3, r0
    49d0:	0a0000a1 	beq	4c5c <alt_sdmmc_command_send.constprop.14+0x394>
    49d4:	e5d73038 	ldrb	r3, [r7, #56]	; 0x38
    49d8:	e203303f 	and	r3, r3, #63	; 0x3f
    49dc:	e1530000 	cmp	r3, r0
    49e0:	0a00009f 	beq	4c64 <alt_sdmmc_command_send.constprop.14+0x39c>
    49e4:	e5d7303c 	ldrb	r3, [r7, #60]	; 0x3c
    49e8:	e203303f 	and	r3, r3, #63	; 0x3f
    49ec:	e1530000 	cmp	r3, r0
    49f0:	0a000001 	beq	49fc <alt_sdmmc_command_send.constprop.14+0x134>
        }
    }

    if (found == false)
    {
        return ALT_E_BAD_ARG;
    49f4:	e3e00008 	mvn	r0, #8
    {
        alt_sdmmc_read_short_response(response);
    }
    
    return status;
}
    49f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    49fc:	e287703c 	add	r7, r7, #60	; 0x3c
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4a00:	e5972000 	ldr	r2, [r7]
    4a04:	e3120a02 	tst	r2, #8192	; 0x2000
    4a08:	0a000008 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    4a0c:	e304c241 	movw	r12, #16961	; 0x4241
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4a10:	e3040fff 	movw	r0, #20479	; 0x4fff
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4a14:	e340c00f 	movt	r12, #15
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4a18:	e34f0f70 	movt	r0, #65392	; 0xff70
    4a1c:	e5103fb7 	ldr	r3, [r0, #-4023]	; 0xfffff049
    4a20:	e3130c02 	tst	r3, #512	; 0x200
    4a24:	0a000001 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    }

    if (cmd_cfg->wait_prvdata_complete)
    {
        uint32_t timeout = ALT_SDMMC_TMO_WAITER;
        while (alt_sdmmc_is_busy() && timeout--)
    4a28:	e25cc001 	subs	r12, r12, #1
    4a2c:	1afffffa 	bne	4a1c <alt_sdmmc_command_send.constprop.14+0x154>
            ;
    }

    if (cmd_cfg->data_expected == true)
    4a30:	e3120c02 	tst	r2, #512	; 0x200
    const ALT_SDMMC_CMD_CONFIG_t * cmd_cfg = NULL;
    uint32_t counter;
    uint32_t array_count = 0;
    bool found = false;
    /*  Create interrupt mask by command configurations*/
    uint32_t int_mask = ALT_SDMMC_INT_STATUS_RE             /*  Response error*/
    4a34:	0301e107 	movweq	lr, #4359	; 0x1107
        uint32_t timeout = ALT_SDMMC_TMO_WAITER;
        while (alt_sdmmc_is_busy() && timeout--)
            ;
    }

    if (cmd_cfg->data_expected == true)
    4a38:	1a00004a 	bne	4b68 <alt_sdmmc_command_send.constprop.14+0x2a0>
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    4a3c:	e3044fff 	movw	r4, #20479	; 0x4fff
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    4a40:	e30f3fff 	movw	r3, #65535	; 0xffff
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    4a44:	e34f4f70 	movt	r4, #65392	; 0xff70
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    4a48:	e3403001 	movt	r3, #1
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    4a4c:	e514cfdb 	ldr	r12, [r4, #-4059]	; 0xfffff025
    alt_sdmmc_int_enable(int_mask);
    /*  Setup the Argument Register and send CMD*/
    alt_sdmmc_cmd_arg_set(command_arg);

    /*  Set command configurations*/
    alt_sdmmc_cmd_set(command, cmd_cfg, false);
    4a50:	e3a02000 	mov	r2, #0
    4a54:	e1a01007 	mov	r1, r7
    4a58:	e1a00005 	mov	r0, r5
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    4a5c:	e1a0c8ac 	lsr	r12, r12, #17
    4a60:	e1a0c88c 	lsl	r12, r12, #17
    4a64:	e504cfdb 	str	r12, [r4, #-4059]	; 0xfffff025
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    4a68:	e5043fbb 	str	r3, [r4, #-4027]	; 0xfffff045
*/
ALT_STATUS_CODE alt_sdmmc_int_enable(const uint32_t mask)
{
    if (mask & 0x0001ffff)
    {
        alt_setbits_word(ALT_SDMMC_CTL_ADDR, 
    4a6c:	e514cfff 	ldr	r12, [r4, #-4095]	; 0xfffff001
    4a70:	e38cc010 	orr	r12, r12, #16
    4a74:	e504cfff 	str	r12, [r4, #-4095]	; 0xfffff001
                     ALT_SDMMC_CTL_INT_EN_SET_MSK);

        alt_setbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    4a78:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
    4a7c:	e18e3003 	orr	r3, lr, r3
    4a80:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
/*
// Set command argument
*/
static __inline ALT_STATUS_CODE alt_sdmmc_cmd_arg_set(uint32_t cmdarg)
{
    alt_write_word(ALT_SDMMC_CMDARG_ADDR, cmdarg);
    4a84:	e5048fd7 	str	r8, [r4, #-4055]	; 0xfffff029
    alt_sdmmc_int_enable(int_mask);
    /*  Setup the Argument Register and send CMD*/
    alt_sdmmc_cmd_arg_set(command_arg);

    /*  Set command configurations*/
    alt_sdmmc_cmd_set(command, cmd_cfg, false);
    4a88:	ebffff2e 	bl	4748 <alt_sdmmc_cmd_set>
    /*  Send command*/
    alt_sdmmc_cmd_set(command, cmd_cfg, true);
    4a8c:	e1a00005 	mov	r0, r5
    4a90:	e1a01007 	mov	r1, r7
    4a94:	e3a02001 	mov	r2, #1
    4a98:	ebffff2a 	bl	4748 <alt_sdmmc_cmd_set>
        dprintf("\nstate %x dma_state %x\n", (int)state, (int)dma_state);
        dprintf("\nCMD = %d ARG = %x\n", (int)command, (int)command_arg);
    }
#endif

    if (cmd_cfg->update_clock_registers_only == true)
    4a9c:	e5973000 	ldr	r3, [r7]
    4aa0:	e3130602 	tst	r3, #2097152	; 0x200000
    4aa4:	1a00005e 	bne	4c24 <alt_sdmmc_command_send.constprop.14+0x35c>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    4aa8:	e5142fff 	ldr	r2, [r4, #-4095]	; 0xfffff001
    4aac:	e3120402 	tst	r2, #33554432	; 0x2000000
    4ab0:	1a00001c 	bne	4b28 <alt_sdmmc_command_send.constprop.14+0x260>
        return status;
    }

    /* Wait for complete*/
    if (   alt_sdmmc_is_dma_enabled() == ALT_E_FALSE
        || cmd_cfg->data_expected == false)
    4ab4:	e304323f 	movw	r3, #16959	; 0x423f
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    4ab8:	e304cfff 	movw	r12, #20479	; 0x4fff
        return status;
    }

    /* Wait for complete*/
    if (   alt_sdmmc_is_dma_enabled() == ALT_E_FALSE
        || cmd_cfg->data_expected == false)
    4abc:	e340300f 	movt	r3, #15
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    4ac0:	e34fcf70 	movt	r12, #65392	; 0xff70
    4ac4:	ea000001 	b	4ad0 <alt_sdmmc_command_send.constprop.14+0x208>
static ALT_STATUS_CODE alt_sdmmc_cmd_waiter(void)
{
    ALT_STATUS_CODE status = ALT_E_TMO;
    uint32_t timeout = ALT_SDMMC_TMO_WAITER;
    
    while (--timeout)
    4ac8:	e2533001 	subs	r3, r3, #1
    4acc:	0a00006b 	beq	4c80 <alt_sdmmc_command_send.constprop.14+0x3b8>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    4ad0:	e51c4fbf 	ldr	r4, [r12, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    4ad4:	e30b0bc2 	movw	r0, #48066	; 0xbbc2
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    4ad8:	e51c1fbf 	ldr	r1, [r12, #-4031]	; 0xfffff041
    4adc:	e3042fff 	movw	r2, #20479	; 0x4fff
    4ae0:	e34f2f70 	movt	r2, #65392	; 0xff70
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    4ae4:	e0010000 	and	r0, r1, r0
    4ae8:	e3500000 	cmp	r0, #0
    4aec:	1a00005e 	bne	4c6c <alt_sdmmc_command_send.constprop.14+0x3a4>
            status = ALT_E_ERROR;
            break;
        }
        
        /* Check command done*/
        if (int_status & ALT_SDMMC_INT_STATUS_CMD)
    4af0:	e3140004 	tst	r4, #4
    4af4:	0afffff3 	beq	4ac8 <alt_sdmmc_command_send.constprop.14+0x200>
    4af8:	e2963000 	adds	r3, r6, #0
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    4afc:	e3a01004 	mov	r1, #4
    4b00:	13a03001 	movne	r3, #1
    4b04:	e5021fbb 	str	r1, [r2, #-4027]	; 0xfffff045
    if (status == ALT_E_ERROR)
    {
        dprintf("alt_sdmmc_cmd_waiter ERROR\n");
    }
#endif
    if ((status == ALT_E_SUCCESS) && response)
    4b08:	e3530000 	cmp	r3, #0
    4b0c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
/*
// Get response of previous command.
*/
static __inline ALT_STATUS_CODE alt_sdmmc_read_short_response(uint32_t *response)
{
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    4b10:	e3043fff 	movw	r3, #20479	; 0x4fff
    *response = (uint32_t)(ALT_SDMMC_RESP0_RESPONSE0_GET(resp0));
    4b14:	e3a00000 	mov	r0, #0
/*
// Get response of previous command.
*/
static __inline ALT_STATUS_CODE alt_sdmmc_read_short_response(uint32_t *response)
{
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    4b18:	e34f3f70 	movt	r3, #65392	; 0xff70
    4b1c:	e5133fcf 	ldr	r3, [r3, #-4047]	; 0xfffff031
    *response = (uint32_t)(ALT_SDMMC_RESP0_RESPONSE0_GET(resp0));
    4b20:	e5863000 	str	r3, [r6]
    4b24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    4b28:	e5142f7f 	ldr	r2, [r4, #-3967]	; 0xfffff081
    4b2c:	e3120080 	tst	r2, #128	; 0x80
    4b30:	0affffdf 	beq	4ab4 <alt_sdmmc_command_send.constprop.14+0x1ec>
        return status;
    }

    /* Wait for complete*/
    if (   alt_sdmmc_is_dma_enabled() == ALT_E_FALSE
        || cmd_cfg->data_expected == false)
    4b34:	e3130c02 	tst	r3, #512	; 0x200
    4b38:	0affffdd 	beq	4ab4 <alt_sdmmc_command_send.constprop.14+0x1ec>
    4b3c:	e2963000 	adds	r3, r6, #0
    uint32_t int_mask = ALT_SDMMC_INT_STATUS_RE             /*  Response error*/
                      | ALT_SDMMC_INT_STATUS_RTO            /*  Response timeout*/
                      | ALT_SDMMC_INT_STATUS_CD             /*  Card detect (CD) interrupt*/
                      | ALT_SDMMC_INT_STATUS_HLE            /*  Hardware Locked Write Error*/
                      | ALT_SDMMC_INT_STATUS_CMD;           /*  Command done (CD) interrupt*/
    ALT_STATUS_CODE status = 0;
    4b40:	e3a00000 	mov	r0, #0
    4b44:	13a03001 	movne	r3, #1
    if (status == ALT_E_ERROR)
    {
        dprintf("alt_sdmmc_cmd_waiter ERROR\n");
    }
#endif
    if ((status == ALT_E_SUCCESS) && response)
    4b48:	e3530000 	cmp	r3, #0
    4b4c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    4b50:	eaffffee 	b	4b10 <alt_sdmmc_command_send.constprop.14+0x248>
        return ALT_E_BAD_ARG;
    }

    if (command == ALT_SDMMC_CLK_INDEX)
    {
        cmd_cfg = &cmd_clock_cfg;
    4b54:	e59f712c 	ldr	r7, [pc, #300]	; 4c88 <alt_sdmmc_command_send.constprop.14+0x3c0>
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4b58:	e5972000 	ldr	r2, [r7]
    4b5c:	e3120a02 	tst	r2, #8192	; 0x2000
    4b60:	0affffb2 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    4b64:	eaffffa8 	b	4a0c <alt_sdmmc_command_send.constprop.14+0x144>
                  | ALT_SDMMC_INT_STATUS_FRUN               /*  FIFO underrun/overrun error*/
                  | ALT_SDMMC_INT_STATUS_EBE;               /*  End-bit error*/
        
        if (cmd_cfg->write_active == ALT_SDMMC_TMOD_WRITE)
        {
            int_mask |= ALT_SDMMC_INT_STATUS_TXDR           /*  Transmit FIFO data request (TXDR)*/
    4b68:	e3120b01 	tst	r2, #1024	; 0x400
    4b6c:	e3093ddf 	movw	r3, #40415	; 0x9ddf
    4b70:	e30bedef 	movw	lr, #48623	; 0xbdef
    4b74:	11a0e003 	movne	lr, r3
    4b78:	eaffffaf 	b	4a3c <alt_sdmmc_command_send.constprop.14+0x174>
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    4b7c:	e2837004 	add	r7, r3, #4
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4b80:	e5972000 	ldr	r2, [r7]
    4b84:	e3120a02 	tst	r2, #8192	; 0x2000
    4b88:	0affffa8 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    4b8c:	eaffff9e 	b	4a0c <alt_sdmmc_command_send.constprop.14+0x144>
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    4b90:	e2837008 	add	r7, r3, #8
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4b94:	e5972000 	ldr	r2, [r7]
    4b98:	e3120a02 	tst	r2, #8192	; 0x2000
    4b9c:	0affffa3 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    4ba0:	eaffff99 	b	4a0c <alt_sdmmc_command_send.constprop.14+0x144>
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    4ba4:	e283700c 	add	r7, r3, #12
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4ba8:	e5972000 	ldr	r2, [r7]
    4bac:	e3120a02 	tst	r2, #8192	; 0x2000
    4bb0:	0affff9e 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    4bb4:	eaffff94 	b	4a0c <alt_sdmmc_command_send.constprop.14+0x144>
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    4bb8:	e2837010 	add	r7, r3, #16
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4bbc:	e5972000 	ldr	r2, [r7]
    4bc0:	e3120a02 	tst	r2, #8192	; 0x2000
    4bc4:	0affff99 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    4bc8:	eaffff8f 	b	4a0c <alt_sdmmc_command_send.constprop.14+0x144>
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    4bcc:	e2837014 	add	r7, r3, #20
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4bd0:	e5972000 	ldr	r2, [r7]
    4bd4:	e3120a02 	tst	r2, #8192	; 0x2000
    4bd8:	0affff94 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    4bdc:	eaffff8a 	b	4a0c <alt_sdmmc_command_send.constprop.14+0x144>
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    4be0:	e2837018 	add	r7, r3, #24
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    4be4:	e5972000 	ldr	r2, [r7]
    4be8:	e3120a02 	tst	r2, #8192	; 0x2000
    4bec:	0affff8f 	beq	4a30 <alt_sdmmc_command_send.constprop.14+0x168>
    4bf0:	eaffff85 	b	4a0c <alt_sdmmc_command_send.constprop.14+0x144>
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    4bf4:	e283701c 	add	r7, r3, #28
    4bf8:	eaffff80 	b	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
    4bfc:	e59f7088 	ldr	r7, [pc, #136]	; 4c8c <alt_sdmmc_command_send.constprop.14+0x3c4>
    4c00:	eaffff7e 	b	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
    4c04:	e2877024 	add	r7, r7, #36	; 0x24
    4c08:	eaffff7c 	b	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
    4c0c:	e2877028 	add	r7, r7, #40	; 0x28
    4c10:	eaffff7a 	b	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
    4c14:	e287702c 	add	r7, r7, #44	; 0x2c
    4c18:	eaffff78 	b	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
    4c1c:	e2877030 	add	r7, r7, #48	; 0x30
    4c20:	eaffff76 	b	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
        dprintf("\nstate %x dma_state %x\n", (int)state, (int)dma_state);
        dprintf("\nCMD = %d ARG = %x\n", (int)command, (int)command_arg);
    }
#endif

    if (cmd_cfg->update_clock_registers_only == true)
    4c24:	e304323f 	movw	r3, #16959	; 0x423f
    4c28:	e340300f 	movt	r3, #15
    4c2c:	ea000001 	b	4c38 <alt_sdmmc_command_send.constprop.14+0x370>
static ALT_STATUS_CODE alt_sdmmc_clock_waiter(void)
{
    ALT_STATUS_CODE status = ALT_E_TMO;
    uint32_t timeout = ALT_SDMMC_TMO_WAITER;
    
    while (--timeout)
    4c30:	e2533001 	subs	r3, r3, #1
    4c34:	0a000011 	beq	4c80 <alt_sdmmc_command_send.constprop.14+0x3b8>
    {
        uint32_t cmd_register = alt_read_word(ALT_SDMMC_CMD_ADDR);
    4c38:	e5142fd3 	ldr	r2, [r4, #-4051]	; 0xfffff02d
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    4c3c:	e30b0bc2 	movw	r0, #48066	; 0xbbc2
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    4c40:	e5141fbf 	ldr	r1, [r4, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    4c44:	e0010000 	and	r0, r1, r0
    4c48:	e3500000 	cmp	r0, #0
    4c4c:	1a000006 	bne	4c6c <alt_sdmmc_command_send.constprop.14+0x3a4>
            status = ALT_E_ERROR;
            break;
        }

        /*  Only for clock command detect complete operation by 0 in start_cmd bit of cmd register*/
        if (ALT_SDMMC_CMD_START_CMD_GET(cmd_register) == ALT_SDMMC_CMD_START_CMD_E_NOSTART)
    4c50:	e3520000 	cmp	r2, #0
    4c54:	bafffff5 	blt	4c30 <alt_sdmmc_command_send.constprop.14+0x368>
    4c58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    4c5c:	e2877034 	add	r7, r7, #52	; 0x34
    4c60:	eaffff66 	b	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
    4c64:	e2877038 	add	r7, r7, #56	; 0x38
    4c68:	eaffff64 	b	4a00 <alt_sdmmc_command_send.constprop.14+0x138>
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    4c6c:	e3020398 	movw	r0, #9112	; 0x2398
    4c70:	e3400002 	movt	r0, #2
    4c74:	ebffedf6 	bl	454 <print_debug>
        int_status = alt_sdmmc_int_status_get();

        /*  Error checking*/
        if (alt_sdmmc_error_status_detect() != ALT_E_SUCCESS)
        {
            status = ALT_E_ERROR;
    4c78:	e3e00000 	mvn	r0, #0
    4c7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
/*
// Waiter of command complete
*/
static ALT_STATUS_CODE alt_sdmmc_cmd_waiter(void)
{
    ALT_STATUS_CODE status = ALT_E_TMO;
    4c80:	e3e0000b 	mvn	r0, #11
    4c84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    4c88:	00022a80 	.word	0x00022a80
    4c8c:	00022a60 	.word	0x00022a60

00004c90 <alt_sdmmc_card_pwr_on>:
/*
// Power on of the card.
*/
ALT_STATUS_CODE alt_sdmmc_card_pwr_on(void)
{
    alt_setbits_word(ALT_SDMMC_PWREN_ADDR, 
    4c90:	e3043fff 	movw	r3, #20479	; 0x4fff
                     ALT_SDMMC_PWREN_POWER_EN_SET_MSK);

    return ALT_E_SUCCESS;
}
    4c94:	e3a00000 	mov	r0, #0
/*
// Power on of the card.
*/
ALT_STATUS_CODE alt_sdmmc_card_pwr_on(void)
{
    alt_setbits_word(ALT_SDMMC_PWREN_ADDR, 
    4c98:	e34f3f70 	movt	r3, #65392	; 0xff70
    4c9c:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
    4ca0:	e3822001 	orr	r2, r2, #1
    4ca4:	e5032ffb 	str	r2, [r3, #-4091]	; 0xfffff005
                     ALT_SDMMC_PWREN_POWER_EN_SET_MSK);

    return ALT_E_SUCCESS;
}
    4ca8:	e12fff1e 	bx	lr

00004cac <alt_sdmmc_card_pwr_off>:
/*
// Check whether SD/MMC controller is enable
*/
bool alt_sdmmc_card_pwr_is_on(void)
{
    if (ALT_SDMMC_PWREN_POWER_EN_GET(alt_read_word(ALT_SDMMC_PWREN_ADDR)) == 
    4cac:	e3043fff 	movw	r3, #20479	; 0x4fff
    4cb0:	e34f3f70 	movt	r3, #65392	; 0xff70
    4cb4:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
    4cb8:	e3120001 	tst	r2, #1
    4cbc:	0a000009 	beq	4ce8 <alt_sdmmc_card_pwr_off+0x3c>
    {
        return ALT_E_SUCCESS;
    }

    /* Else clear enable bit of SD/MMC_enable register*/
    alt_clrbits_word(ALT_SDMMC_PWREN_ADDR,
    4cc0:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    4cc4:	e30f1fff 	movw	r1, #65535	; 0xffff
    
    /*  Clear interrupt status*/
    alt_sdmmc_int_clear(ALT_SDMMC_INT_STATUS_ALL);

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    4cc8:	e3042000 	movw	r2, #16384	; 0x4000
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    4ccc:	e3401001 	movt	r1, #1
    
    /*  Clear interrupt status*/
    alt_sdmmc_int_clear(ALT_SDMMC_INT_STATUS_ALL);

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    4cd0:	e3422673 	movt	r2, #9843	; 0x2673
    {
        return ALT_E_SUCCESS;
    }

    /* Else clear enable bit of SD/MMC_enable register*/
    alt_clrbits_word(ALT_SDMMC_PWREN_ADDR,
    4cd4:	e3c00001 	bic	r0, r0, #1
    4cd8:	e5030ffb 	str	r0, [r3, #-4091]	; 0xfffff005
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    4cdc:	e5031fbb 	str	r1, [r3, #-4027]	; 0xfffff045
    
    /*  Clear interrupt status*/
    alt_sdmmc_int_clear(ALT_SDMMC_INT_STATUS_ALL);

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    4ce0:	e3a03000 	mov	r3, #0
    4ce4:	e5823000 	str	r3, [r2]
    /*  Reset state of card stack*/
    return ALT_E_SUCCESS;
}
    4ce8:	e3a00000 	mov	r0, #0
    4cec:	e12fff1e 	bx	lr

00004cf0 <alt_sdmmc_card_pwr_is_on>:
/*
// Check whether SD/MMC controller is enable
*/
bool alt_sdmmc_card_pwr_is_on(void)
{
    if (ALT_SDMMC_PWREN_POWER_EN_GET(alt_read_word(ALT_SDMMC_PWREN_ADDR)) == 
    4cf0:	e3043fff 	movw	r3, #20479	; 0x4fff
    4cf4:	e34f3f70 	movt	r3, #65392	; 0xff70
    4cf8:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
    }
    else
    {
        return false;
    }
}
    4cfc:	e2000001 	and	r0, r0, #1
    4d00:	e12fff1e 	bx	lr

00004d04 <alt_sdmmc_card_clk_div_get>:
/*
// Get config clock parameters
*/
uint32_t alt_sdmmc_card_clk_div_get(void)
{
    return ALT_SDMMC_CLKDIV_CLK_DIVR0_GET(alt_read_word(ALT_SDMMC_CLKDIV_ADDR));
    4d04:	e3043fff 	movw	r3, #20479	; 0x4fff
    4d08:	e34f3f70 	movt	r3, #65392	; 0xff70
    4d0c:	e5130ff7 	ldr	r0, [r3, #-4087]	; 0xfffff009
}
    4d10:	e6ef0070 	uxtb	r0, r0
    4d14:	e12fff1e 	bx	lr

00004d18 <alt_sdmmc_card_clk_div_set>:
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4d18:	e3043fff 	movw	r3, #20479	; 0x4fff

/*
// Set config clock parameters (7.2.3 Clock Programming)
*/
ALT_STATUS_CODE alt_sdmmc_card_clk_div_set(const uint32_t clk_div)
{
    4d1c:	e92d4070 	push	{r4, r5, r6, lr}
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4d20:	e34f3f70 	movt	r3, #65392	; 0xff70

/*
// Set config clock parameters (7.2.3 Clock Programming)
*/
ALT_STATUS_CODE alt_sdmmc_card_clk_div_set(const uint32_t clk_div)
{
    4d24:	e1a05000 	mov	r5, r0
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4d28:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
    4d2c:	e3120c02 	tst	r2, #512	; 0x200
    4d30:	1a000023 	bne	4dc4 <alt_sdmmc_card_clk_div_set+0xac>
/*
// Returns true if low-power mode (cclk_low_power) is enabled otherwise returns false
*/
bool alt_sdmmc_card_clk_low_power_is_enabled(void)
{
    return ALT_SDMMC_CLKENA_CCLK_LOW_POWER_GET(alt_read_word(ALT_SDMMC_CLKENA_ADDR));
    4d34:	e5136fef 	ldr	r6, [r3, #-4079]	; 0xfffff011
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4d38:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
    4d3c:	e3120c02 	tst	r2, #512	; 0x200
    4d40:	1a000022 	bne	4dd0 <alt_sdmmc_card_clk_div_set+0xb8>
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    }

    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(false));
    4d44:	e3a02000 	mov	r2, #0

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4d48:	e3e00000 	mvn	r0, #0
    4d4c:	e1a01002 	mov	r1, r2
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    }

    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(false));
    4d50:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4d54:	ebfffedb 	bl	48c8 <alt_sdmmc_command_send.constprop.14>

    low_power_mode = alt_sdmmc_card_clk_low_power_is_enabled();

    /*  Disable cclk_enable bit of clkena*/
    status = alt_sdmmc_card_clk_disable();
    if (status != ALT_E_SUCCESS)
    4d58:	e2504000 	subs	r4, r0, #0
    4d5c:	1a00001c 	bne	4dd4 <alt_sdmmc_card_clk_div_set+0xbc>
        dprintf("alt_sdmmc_card_clk_disable failed\n");
        return status;
    }

    /*  6. reset sdmmc_clk_enable to 0 in the enable register of perpllgrp*/
    alt_clk_clock_disable(ALT_CLK_SDMMC);
    4d60:	e3a00030 	mov	r0, #48	; 0x30
    4d64:	eb000d08 	bl	818c <alt_clk_clock_disable>

    /*  7. program drvsel and samplsel in ctrl of sdmmcgrp*/
    if (clk_div == 0)
    4d68:	e3550000 	cmp	r5, #0
    {
#ifdef soc_cv_av
        /*  50 MHz*/
        alt_write_word(ALT_SYSMGR_SDMMC_CTL_ADDR, ALT_SYSMGR_SDMMC_CTL_SMPLSEL_SET(ALT_SYSMGR_SDMMC_CTL_SMPLSEL_E_DEGREES90) |
    4d6c:	e3083fff 	movw	r3, #36863	; 0x8fff
    4d70:	03a02012 	moveq	r2, #18
    }
    else
    {
#ifdef soc_cv_av
        /*  25MHz and lower*/
        alt_write_word(ALT_SYSMGR_SDMMC_CTL_ADDR, ALT_SYSMGR_SDMMC_CTL_SMPLSEL_SET(ALT_SYSMGR_SDMMC_CTL_SMPLSEL_E_DEGREES180) |
    4d74:	13a02024 	movne	r2, #36	; 0x24
    /*  7. program drvsel and samplsel in ctrl of sdmmcgrp*/
    if (clk_div == 0)
    {
#ifdef soc_cv_av
        /*  50 MHz*/
        alt_write_word(ALT_SYSMGR_SDMMC_CTL_ADDR, ALT_SYSMGR_SDMMC_CTL_SMPLSEL_SET(ALT_SYSMGR_SDMMC_CTL_SMPLSEL_E_DEGREES90) |
    4d78:	e34f3fd0 	movt	r3, #65488	; 0xffd0
                                              ALT_SYSMGR_SDMMC_DRVSEL_SET(ALT_SYSMGR_SDMMC_DRVSEL_E_DEGREES180));*/
#endif
    }

    /*  8. set sdmmc_clk_enable to 1*/
    alt_clk_clock_enable(ALT_CLK_SDMMC);
    4d7c:	e3a00030 	mov	r0, #48	; 0x30
    }
    else
    {
#ifdef soc_cv_av
        /*  25MHz and lower*/
        alt_write_word(ALT_SYSMGR_SDMMC_CTL_ADDR, ALT_SYSMGR_SDMMC_CTL_SMPLSEL_SET(ALT_SYSMGR_SDMMC_CTL_SMPLSEL_E_DEGREES180) |
    4d80:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109
    }

    /*  8. set sdmmc_clk_enable to 1*/
    alt_clk_clock_enable(ALT_CLK_SDMMC);

    alt_write_word(ALT_SDMMC_CLKDIV_ADDR, ALT_SDMMC_CLKDIV_CLK_DIVR0_SET(clk_div));
    4d84:	e6ef5075 	uxtb	r5, r5
                                              ALT_SYSMGR_SDMMC_DRVSEL_SET(ALT_SYSMGR_SDMMC_DRVSEL_E_DEGREES180));*/
#endif
    }

    /*  8. set sdmmc_clk_enable to 1*/
    alt_clk_clock_enable(ALT_CLK_SDMMC);
    4d88:	eb000df4 	bl	8560 <alt_clk_clock_enable>

    alt_write_word(ALT_SDMMC_CLKDIV_ADDR, ALT_SDMMC_CLKDIV_CLK_DIVR0_SET(clk_div));
    4d8c:	e3043fff 	movw	r3, #20479	; 0x4fff
    4d90:	e34f3f70 	movt	r3, #65392	; 0xff70
    4d94:	e5035ff7 	str	r5, [r3, #-4087]	; 0xfffff009
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4d98:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
    4d9c:	e3120c02 	tst	r2, #512	; 0x200
    4da0:	1a000007 	bne	4dc4 <alt_sdmmc_card_clk_div_set+0xac>
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    4da4:	e2066801 	and	r6, r6, #65536	; 0x10000
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4da8:	e3a01000 	mov	r1, #0
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    4dac:	e3866001 	orr	r6, r6, #1
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4db0:	e3e00000 	mvn	r0, #0
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    4db4:	e5036fef 	str	r6, [r3, #-4079]	; 0xfffff011
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4db8:	e1a02001 	mov	r2, r1
    alt_write_word(ALT_SDMMC_CLKDIV_ADDR, ALT_SDMMC_CLKDIV_CLK_DIVR0_SET(clk_div));
    
    /*  Re-enable required clocks via Clock Enable*/
    status = alt_sdmmc_card_clk_enable(low_power_mode);
    return status;
}
    4dbc:	e8bd4070 	pop	{r4, r5, r6, lr}

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4dc0:	eafffec0 	b	48c8 <alt_sdmmc_command_send.constprop.14>
    ALT_STATUS_CODE status;
    bool low_power_mode;

    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    4dc4:	e3e04000 	mvn	r4, #0
    alt_write_word(ALT_SDMMC_CLKDIV_ADDR, ALT_SDMMC_CLKDIV_CLK_DIVR0_SET(clk_div));
    
    /*  Re-enable required clocks via Clock Enable*/
    status = alt_sdmmc_card_clk_enable(low_power_mode);
    return status;
}
    4dc8:	e1a00004 	mov	r0, r4
    4dcc:	e8bd8070 	pop	{r4, r5, r6, pc}

ALT_STATUS_CODE alt_sdmmc_card_clk_disable(void)
{
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    4dd0:	e3e04000 	mvn	r4, #0

    /*  Disable cclk_enable bit of clkena*/
    status = alt_sdmmc_card_clk_disable();
    if (status != ALT_E_SUCCESS)
    {
        dprintf("alt_sdmmc_card_clk_disable failed\n");
    4dd4:	e3020400 	movw	r0, #9216	; 0x2400
    4dd8:	e3400002 	movt	r0, #2
    4ddc:	ebffed9c 	bl	454 <print_debug>
    alt_write_word(ALT_SDMMC_CLKDIV_ADDR, ALT_SDMMC_CLKDIV_CLK_DIVR0_SET(clk_div));
    
    /*  Re-enable required clocks via Clock Enable*/
    status = alt_sdmmc_card_clk_enable(low_power_mode);
    return status;
}
    4de0:	e1a00004 	mov	r0, r4
    4de4:	e8bd8070 	pop	{r4, r5, r6, pc}

00004de8 <alt_sdmmc_card_speed_get>:
/*
// Get config clock parameters
*/
uint32_t alt_sdmmc_card_clk_div_get(void)
{
    return ALT_SDMMC_CLKDIV_CLK_DIVR0_GET(alt_read_word(ALT_SDMMC_CLKDIV_ADDR));
    4de8:	e3042fff 	movw	r2, #20479	; 0x4fff
    status = alt_sdmmc_card_clk_enable(low_power_mode);
    return status;
}

uint32_t alt_sdmmc_card_speed_get(void)
{
    4dec:	e92d4008 	push	{r3, lr}
/*
// Get config clock parameters
*/
uint32_t alt_sdmmc_card_clk_div_get(void)
{
    return ALT_SDMMC_CLKDIV_CLK_DIVR0_GET(alt_read_word(ALT_SDMMC_CLKDIV_ADDR));
    4df0:	e34f2f70 	movt	r2, #65392	; 0xff70
uint32_t alt_sdmmc_card_speed_get(void)
{
    uint32_t clk_div = alt_sdmmc_card_clk_div_get();

    /*  The sdmmc_clk(clock_freq) is divided by 4, then further divided by 2*clk_div inside the controller.*/
    uint32_t speed_bps = clock_freq / (4 * 2 * clk_div);
    4df4:	e3043000 	movw	r3, #16384	; 0x4000
    4df8:	e3423673 	movt	r3, #9843	; 0x2673
/*
// Get config clock parameters
*/
uint32_t alt_sdmmc_card_clk_div_get(void)
{
    return ALT_SDMMC_CLKDIV_CLK_DIVR0_GET(alt_read_word(ALT_SDMMC_CLKDIV_ADDR));
    4dfc:	e5121ff7 	ldr	r1, [r2, #-4087]	; 0xfffff009
uint32_t alt_sdmmc_card_speed_get(void)
{
    uint32_t clk_div = alt_sdmmc_card_clk_div_get();

    /*  The sdmmc_clk(clock_freq) is divided by 4, then further divided by 2*clk_div inside the controller.*/
    uint32_t speed_bps = clock_freq / (4 * 2 * clk_div);
    4e00:	e5930004 	ldr	r0, [r3, #4]
/*
// Get config clock parameters
*/
uint32_t alt_sdmmc_card_clk_div_get(void)
{
    return ALT_SDMMC_CLKDIV_CLK_DIVR0_GET(alt_read_word(ALT_SDMMC_CLKDIV_ADDR));
    4e04:	e6ef1071 	uxtb	r1, r1
uint32_t alt_sdmmc_card_speed_get(void)
{
    uint32_t clk_div = alt_sdmmc_card_clk_div_get();

    /*  The sdmmc_clk(clock_freq) is divided by 4, then further divided by 2*clk_div inside the controller.*/
    uint32_t speed_bps = clock_freq / (4 * 2 * clk_div);
    4e08:	e1a01181 	lsl	r1, r1, #3
    4e0c:	eb004eca 	bl	1893c <__aeabi_uidiv>

    return speed_bps;
}
    4e10:	e8bd8008 	pop	{r3, pc}

00004e14 <alt_sdmmc_card_clk_disable>:
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4e14:	e3043fff 	movw	r3, #20479	; 0x4fff
    4e18:	e34f3f70 	movt	r3, #65392	; 0xff70
    4e1c:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
    4e20:	e3120c02 	tst	r2, #512	; 0x200
    4e24:	1a000004 	bne	4e3c <alt_sdmmc_card_clk_disable+0x28>
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    }

    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(false));
    4e28:	e3a02000 	mov	r2, #0

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4e2c:	e3e00000 	mvn	r0, #0
    4e30:	e1a01002 	mov	r1, r2
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    }

    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(false));
    4e34:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4e38:	eafffea2 	b	48c8 <alt_sdmmc_command_send.constprop.14>
}
    4e3c:	e3e00000 	mvn	r0, #0
    4e40:	e12fff1e 	bx	lr

00004e44 <alt_sdmmc_card_clk_enable>:
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    4e44:	e3043fff 	movw	r3, #20479	; 0x4fff
    4e48:	e34f3f70 	movt	r3, #65392	; 0xff70
    4e4c:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
    4e50:	e3120c02 	tst	r2, #512	; 0x200
    4e54:	1a000007 	bne	4e78 <alt_sdmmc_card_clk_enable+0x34>
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    4e58:	e1a0c800 	lsl	r12, r0, #16
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4e5c:	e3a01000 	mov	r1, #0
    4e60:	e3e00000 	mvn	r0, #0
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    4e64:	e20cc801 	and	r12, r12, #65536	; 0x10000
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4e68:	e1a02001 	mov	r2, r1
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    4e6c:	e38cc001 	orr	r12, r12, #1
    4e70:	e503cfef 	str	r12, [r3, #-4079]	; 0xfffff011
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    4e74:	eafffe93 	b	48c8 <alt_sdmmc_command_send.constprop.14>
}
    4e78:	e3e00000 	mvn	r0, #0
    4e7c:	e12fff1e 	bx	lr

00004e80 <alt_sdmmc_card_clk_is_enabled>:
/*
// Returns true if the card clock (sdmmc_cclk_out) is enabled otherwise returns false
*/
bool alt_sdmmc_card_clk_is_enabled(void)
{
    return ALT_SDMMC_CLKENA_CCLK_EN_GET(alt_read_word(ALT_SDMMC_CLKENA_ADDR));
    4e80:	e3043fff 	movw	r3, #20479	; 0x4fff
    4e84:	e34f3f70 	movt	r3, #65392	; 0xff70
    4e88:	e5130fef 	ldr	r0, [r3, #-4079]	; 0xfffff011
}
    4e8c:	e2000001 	and	r0, r0, #1
    4e90:	e12fff1e 	bx	lr

00004e94 <alt_sdmmc_card_clk_low_power_is_enabled>:
/*
// Returns true if low-power mode (cclk_low_power) is enabled otherwise returns false
*/
bool alt_sdmmc_card_clk_low_power_is_enabled(void)
{
    return ALT_SDMMC_CLKENA_CCLK_LOW_POWER_GET(alt_read_word(ALT_SDMMC_CLKENA_ADDR));
    4e94:	e3043fff 	movw	r3, #20479	; 0x4fff
    4e98:	e34f3f70 	movt	r3, #65392	; 0xff70
    4e9c:	e5130fef 	ldr	r0, [r3, #-4079]	; 0xfffff011
}
    4ea0:	e7e00850 	ubfx	r0, r0, #16, #1
    4ea4:	e12fff1e 	bx	lr

00004ea8 <alt_sdmmc_card_misc_get>:
/*
// Get SD/MMC timeouts for command response and data sending
*/
ALT_STATUS_CODE alt_sdmmc_card_misc_get(ALT_SDMMC_CARD_MISC_t *card_misc_cfg)
{
    uint32_t tmout_register = alt_read_word(ALT_SDMMC_TMOUT_ADDR);
    4ea8:	e3042fff 	movw	r2, #20479	; 0x4fff

/*
// Get SD/MMC timeouts for command response and data sending
*/
ALT_STATUS_CODE alt_sdmmc_card_misc_get(ALT_SDMMC_CARD_MISC_t *card_misc_cfg)
{
    4eac:	e1a03000 	mov	r3, r0
    uint32_t tmout_register = alt_read_word(ALT_SDMMC_TMOUT_ADDR);
    4eb0:	e34f2f70 	movt	r2, #65392	; 0xff70
    4eb4:	e5121feb 	ldr	r1, [r2, #-4075]	; 0xfffff015

    card_misc_cfg->response_timeout = ALT_SDMMC_TMOUT_RESPONSE_TMO_GET(tmout_register);
    4eb8:	e6ef0071 	uxtb	r0, r1
    card_misc_cfg->data_timeout     = ALT_SDMMC_TMOUT_DATA_TMO_GET(tmout_register);
    4ebc:	e1a01421 	lsr	r1, r1, #8
    4ec0:	e8830003 	stm	r3, {r0, r1}
/*
// Get SD/MMC bus width
*/
static ALT_SDMMC_BUS_WIDTH_t alt_sdmmc_bus_width_get(void)
{
    uint32_t ctype_register = alt_read_word(ALT_SDMMC_CTYPE_ADDR);
    4ec4:	e5122fe7 	ldr	r2, [r2, #-4071]	; 0xfffff019

    uint16_t card_width1 = ALT_SDMMC_CTYPE_CARD_WIDTH1_GET(ctype_register);
    uint16_t card_width2 = ALT_SDMMC_CTYPE_CARD_WIDTH2_GET(ctype_register);

    if (card_width1 == ALT_SDMMC_CTYPE_CARD_WIDTH1_E_MOD8BIT)
    4ec8:	e3120801 	tst	r2, #65536	; 0x10000
static ALT_SDMMC_BUS_WIDTH_t alt_sdmmc_bus_width_get(void)
{
    uint32_t ctype_register = alt_read_word(ALT_SDMMC_CTYPE_ADDR);

    uint16_t card_width1 = ALT_SDMMC_CTYPE_CARD_WIDTH1_GET(ctype_register);
    uint16_t card_width2 = ALT_SDMMC_CTYPE_CARD_WIDTH2_GET(ctype_register);
    4ecc:	e2022001 	and	r2, r2, #1

    if (card_width1 == ALT_SDMMC_CTYPE_CARD_WIDTH1_E_MOD8BIT)
    {
        return ALT_SDMMC_BUS_WIDTH_8;
    4ed0:	13a01008 	movne	r1, #8
    uint32_t ctype_register = alt_read_word(ALT_SDMMC_CTYPE_ADDR);

    uint16_t card_width1 = ALT_SDMMC_CTYPE_CARD_WIDTH1_GET(ctype_register);
    uint16_t card_width2 = ALT_SDMMC_CTYPE_CARD_WIDTH2_GET(ctype_register);

    if (card_width1 == ALT_SDMMC_CTYPE_CARD_WIDTH1_E_MOD8BIT)
    4ed4:	1a000002 	bne	4ee4 <alt_sdmmc_card_misc_get+0x3c>
    {
        return ALT_SDMMC_BUS_WIDTH_8;
    }
    else if (card_width2 == ALT_SDMMC_CTYPE_CARD_WIDTH2_E_MOD4BIT)
    {
        return ALT_SDMMC_BUS_WIDTH_4;
    4ed8:	e3520000 	cmp	r2, #0
    4edc:	03a01001 	moveq	r1, #1
    4ee0:	13a01004 	movne	r1, #4
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    4ee4:	e3042fff 	movw	r2, #20479	; 0x4fff
    uint32_t tmout_register = alt_read_word(ALT_SDMMC_TMOUT_ADDR);

    card_misc_cfg->response_timeout = ALT_SDMMC_TMOUT_RESPONSE_TMO_GET(tmout_register);
    card_misc_cfg->data_timeout     = ALT_SDMMC_TMOUT_DATA_TMO_GET(tmout_register);

    card_misc_cfg->card_width = alt_sdmmc_bus_width_get();
    4ee8:	e5c31008 	strb	r1, [r3, #8]
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    4eec:	e34f2f70 	movt	r2, #65392	; 0xff70
    card_misc_cfg->block_size = alt_sdmmc_block_size_get();

    card_misc_cfg->debounce_count = ALT_SDMMC_DEBNCE_DEBOUNCE_COUNT_GET(alt_read_word(ALT_SDMMC_DEBNCE_ADDR));

    return ALT_E_SUCCESS;
}
    4ef0:	e3a00000 	mov	r0, #0
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    4ef4:	e5121fe3 	ldr	r1, [r2, #-4067]	; 0xfffff01d

    card_misc_cfg->response_timeout = ALT_SDMMC_TMOUT_RESPONSE_TMO_GET(tmout_register);
    card_misc_cfg->data_timeout     = ALT_SDMMC_TMOUT_DATA_TMO_GET(tmout_register);

    card_misc_cfg->card_width = alt_sdmmc_bus_width_get();
    card_misc_cfg->block_size = alt_sdmmc_block_size_get();
    4ef8:	e6ff1071 	uxth	r1, r1
    4efc:	e583100c 	str	r1, [r3, #12]

    card_misc_cfg->debounce_count = ALT_SDMMC_DEBNCE_DEBOUNCE_COUNT_GET(alt_read_word(ALT_SDMMC_DEBNCE_ADDR));
    4f00:	e5122f9b 	ldr	r2, [r2, #-3995]	; 0xfffff065
    4f04:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    4f08:	e5832010 	str	r2, [r3, #16]

    return ALT_E_SUCCESS;
}
    4f0c:	e12fff1e 	bx	lr

00004f10 <alt_sdmmc_card_misc_set>:
ALT_STATUS_CODE alt_sdmmc_card_misc_set(const ALT_SDMMC_CARD_MISC_t *card_misc_cfg)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t tmout_value = ALT_SDMMC_TMOUT_RESPONSE_TMO_SET(card_misc_cfg->response_timeout)
                         | ALT_SDMMC_TMOUT_DATA_TMO_SET(card_misc_cfg->data_timeout);
    4f10:	e590c004 	ldr	r12, [r0, #4]

    alt_write_word(ALT_SDMMC_TMOUT_ADDR, tmout_value);
    4f14:	e3043fff 	movw	r3, #20479	; 0x4fff
*/
ALT_STATUS_CODE alt_sdmmc_card_misc_set(const ALT_SDMMC_CARD_MISC_t *card_misc_cfg)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t tmout_value = ALT_SDMMC_TMOUT_RESPONSE_TMO_SET(card_misc_cfg->response_timeout)
    4f18:	e5d01000 	ldrb	r1, [r0]
                         | ALT_SDMMC_TMOUT_DATA_TMO_SET(card_misc_cfg->data_timeout);

    alt_write_word(ALT_SDMMC_TMOUT_ADDR, tmout_value);
    4f1c:	e34f3f70 	movt	r3, #65392	; 0xff70
// Set SD/MMC bus width
*/
static ALT_STATUS_CODE alt_sdmmc_bus_width_set(const ALT_SDMMC_BUS_WIDTH_t width)
{
    /*  Set config parameters to appropriate registers*/
    switch (width)
    4f20:	e5d02008 	ldrb	r2, [r0, #8]
*/
ALT_STATUS_CODE alt_sdmmc_card_misc_set(const ALT_SDMMC_CARD_MISC_t *card_misc_cfg)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t tmout_value = ALT_SDMMC_TMOUT_RESPONSE_TMO_SET(card_misc_cfg->response_timeout)
    4f24:	e181140c 	orr	r1, r1, r12, lsl #8
// Set SD/MMC bus width
*/
static ALT_STATUS_CODE alt_sdmmc_bus_width_set(const ALT_SDMMC_BUS_WIDTH_t width)
{
    /*  Set config parameters to appropriate registers*/
    switch (width)
    4f28:	e3520004 	cmp	r2, #4
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t tmout_value = ALT_SDMMC_TMOUT_RESPONSE_TMO_SET(card_misc_cfg->response_timeout)
                         | ALT_SDMMC_TMOUT_DATA_TMO_SET(card_misc_cfg->data_timeout);

    alt_write_word(ALT_SDMMC_TMOUT_ADDR, tmout_value);
    4f2c:	e5031feb 	str	r1, [r3, #-4075]	; 0xfffff015

    alt_replbits_word(ALT_SDMMC_DEBNCE_ADDR,
    4f30:	e513cf9b 	ldr	r12, [r3, #-3995]	; 0xfffff065
    4f34:	e5901010 	ldr	r1, [r0, #16]
    4f38:	e20cc4ff 	and	r12, r12, #-16777216	; 0xff000000
    4f3c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    4f40:	e181100c 	orr	r1, r1, r12
    4f44:	e5031f9b 	str	r1, [r3, #-3995]	; 0xfffff065
// Set SD/MMC bus width
*/
static ALT_STATUS_CODE alt_sdmmc_bus_width_set(const ALT_SDMMC_BUS_WIDTH_t width)
{
    /*  Set config parameters to appropriate registers*/
    switch (width)
    4f48:	0a000018 	beq	4fb0 <alt_sdmmc_card_misc_set+0xa0>
    4f4c:	e3520008 	cmp	r2, #8
    4f50:	0a000012 	beq	4fa0 <alt_sdmmc_card_misc_set+0x90>
    4f54:	e3520001 	cmp	r2, #1
    4f58:	0a000001 	beq	4f64 <alt_sdmmc_card_misc_set+0x54>
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET(ALT_SDMMC_CTYPE_CARD_WIDTH2_E_MOD1BIT));
        break;

    default:
        return ALT_E_BAD_ARG;
    4f5c:	e3e00008 	mvn	r0, #8
    4f60:	e12fff1e 	bx	lr
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET(ALT_SDMMC_CTYPE_CARD_WIDTH2_E_MOD4BIT));
        break;

    case ALT_SDMMC_BUS_WIDTH_1:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    4f64:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    4f68:	e3c22801 	bic	r2, r2, #65536	; 0x10000
    4f6c:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET(ALT_SDMMC_CTYPE_CARD_WIDTH1_E_NON8BIT));
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    4f70:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    4f74:	e3c22001 	bic	r2, r2, #1
    4f78:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    4f7c:	e3043fff 	movw	r3, #20479	; 0x4fff
    4f80:	e1d010bc 	ldrh	r1, [r0, #12]
    4f84:	e34f3f70 	movt	r3, #65392	; 0xff70
        status = alt_sdmmc_bus_width_set(card_misc_cfg->card_width);
    }

    if (status == ALT_E_SUCCESS)
    {
        status = alt_sdmmc_block_size_set(card_misc_cfg->block_size);
    4f88:	e3a00000 	mov	r0, #0
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    4f8c:	e5132fe3 	ldr	r2, [r3, #-4067]	; 0xfffff01d
    4f90:	e1a02822 	lsr	r2, r2, #16
    4f94:	e1812802 	orr	r2, r1, r2, lsl #16
    4f98:	e5032fe3 	str	r2, [r3, #-4067]	; 0xfffff01d
    {
        status = alt_sdmmc_block_size_set(card_misc_cfg->block_size);
    }

    return status;
}
    4f9c:	e12fff1e 	bx	lr
{
    /*  Set config parameters to appropriate registers*/
    switch (width)
    {
    case ALT_SDMMC_BUS_WIDTH_8:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    4fa0:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    4fa4:	e3822801 	orr	r2, r2, #65536	; 0x10000
    4fa8:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
    4fac:	eafffff2 	b	4f7c <alt_sdmmc_card_misc_set+0x6c>
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET_MSK,
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET(ALT_SDMMC_CTYPE_CARD_WIDTH1_E_MOD8BIT));
        break;

    case ALT_SDMMC_BUS_WIDTH_4:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    4fb0:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    4fb4:	e3c22801 	bic	r2, r2, #65536	; 0x10000
    4fb8:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET_MSK,
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET(ALT_SDMMC_CTYPE_CARD_WIDTH1_E_NON8BIT));
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    4fbc:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    4fc0:	e3822001 	orr	r2, r2, #1
    4fc4:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
    4fc8:	eaffffeb 	b	4f7c <alt_sdmmc_card_misc_set+0x6c>

00004fcc <alt_sdmmc_dma_start>:
    uint32_t bmod_set_mask = ALT_SDMMC_BMOD_PBL_SET_MSK
                           | ALT_SDMMC_BMOD_FB_SET_MSK
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);
    4fcc:	e304cfff 	movw	r12, #20479	; 0x4fff
                                    const uint32_t desc_skip_len,
                                    const ALT_SDMMC_DMA_PBL_t burst_len,
                                    const bool use_fixed_burst)
{
    uint32_t bmod_set_value = ALT_SDMMC_BMOD_PBL_SET(burst_len)
                            | ALT_SDMMC_BMOD_FB_SET(use_fixed_burst)
    4fd0:	e1a03083 	lsl	r3, r3, #1
    uint32_t bmod_set_mask = ALT_SDMMC_BMOD_PBL_SET_MSK
                           | ALT_SDMMC_BMOD_FB_SET_MSK
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);
    4fd4:	e34fcf70 	movt	r12, #65392	; 0xff70
ALT_STATUS_CODE alt_sdmmc_dma_start(ALT_SDMMC_DMA_BUF_DESC_t *buf_desc_list, 
                                    const uint32_t desc_skip_len,
                                    const ALT_SDMMC_DMA_PBL_t burst_len,
                                    const bool use_fixed_burst)
{
    uint32_t bmod_set_value = ALT_SDMMC_BMOD_PBL_SET(burst_len)
    4fd8:	e1a02402 	lsl	r2, r2, #8
    uint32_t bmod_set_mask = ALT_SDMMC_BMOD_PBL_SET_MSK
                           | ALT_SDMMC_BMOD_FB_SET_MSK
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);
    4fdc:	e50c0f77 	str	r0, [r12, #-3959]	; 0xfffff089
                                    const ALT_SDMMC_DMA_PBL_t burst_len,
                                    const bool use_fixed_burst)
{
    uint32_t bmod_set_value = ALT_SDMMC_BMOD_PBL_SET(burst_len)
                            | ALT_SDMMC_BMOD_FB_SET(use_fixed_burst)
                            | ALT_SDMMC_BMOD_DSL_SET(desc_skip_len);
    4fe0:	e1a01101 	lsl	r1, r1, #2
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);

    alt_replbits_word(ALT_SDMMC_BMOD_ADDR, bmod_set_mask, bmod_set_value);
    4fe4:	e51c0f7f 	ldr	r0, [r12, #-3967]	; 0xfffff081
ALT_STATUS_CODE alt_sdmmc_dma_start(ALT_SDMMC_DMA_BUF_DESC_t *buf_desc_list, 
                                    const uint32_t desc_skip_len,
                                    const ALT_SDMMC_DMA_PBL_t burst_len,
                                    const bool use_fixed_burst)
{
    uint32_t bmod_set_value = ALT_SDMMC_BMOD_PBL_SET(burst_len)
    4fe8:	e2022c07 	and	r2, r2, #1792	; 0x700
                            | ALT_SDMMC_BMOD_FB_SET(use_fixed_burst)
    4fec:	e2033002 	and	r3, r3, #2
                            | ALT_SDMMC_BMOD_DSL_SET(desc_skip_len);
    4ff0:	e201107c 	and	r1, r1, #124	; 0x7c
                                    const uint32_t desc_skip_len,
                                    const ALT_SDMMC_DMA_PBL_t burst_len,
                                    const bool use_fixed_burst)
{
    uint32_t bmod_set_value = ALT_SDMMC_BMOD_PBL_SET(burst_len)
                            | ALT_SDMMC_BMOD_FB_SET(use_fixed_burst)
    4ff4:	e1833002 	orr	r3, r3, r2
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);

    alt_replbits_word(ALT_SDMMC_BMOD_ADDR, bmod_set_mask, bmod_set_value);
    4ff8:	e3c00e77 	bic	r0, r0, #1904	; 0x770
    4ffc:	e1833001 	orr	r3, r3, r1
    5000:	e3c0000e 	bic	r0, r0, #14
    5004:	e1833000 	orr	r3, r3, r0

    return ALT_E_SUCCESS;
}
    5008:	e3a00000 	mov	r0, #0
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);

    alt_replbits_word(ALT_SDMMC_BMOD_ADDR, bmod_set_mask, bmod_set_value);
    500c:	e50c3f7f 	str	r3, [r12, #-3967]	; 0xfffff081

    return ALT_E_SUCCESS;
}
    5010:	e12fff1e 	bx	lr

00005014 <alt_sdmmc_card_is_write_protected>:
/*
// Enables the sdmmc write protect.
*/
bool alt_sdmmc_card_is_write_protected(void)
{
    alt_setbits_word(ALT_SDMMC_WRTPRT_ADDR, 
    5014:	e3043fff 	movw	r3, #20479	; 0x4fff
                     ALT_SDMMC_WRTPRT_WR_PROTECT_SET_MSK);

    return ALT_E_SUCCESS;
}
    5018:	e3a00000 	mov	r0, #0
/*
// Enables the sdmmc write protect.
*/
bool alt_sdmmc_card_is_write_protected(void)
{
    alt_setbits_word(ALT_SDMMC_WRTPRT_ADDR, 
    501c:	e34f3f70 	movt	r3, #65392	; 0xff70
    5020:	e5132fab 	ldr	r2, [r3, #-4011]	; 0xfffff055
    5024:	e3822001 	orr	r2, r2, #1
    5028:	e5032fab 	str	r2, [r3, #-4011]	; 0xfffff055
                     ALT_SDMMC_WRTPRT_WR_PROTECT_SET_MSK);

    return ALT_E_SUCCESS;
}
    502c:	e12fff1e 	bx	lr

00005030 <alt_sdmmc_fifo_reset>:
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    5030:	e3041fff 	movw	r1, #20479	; 0x4fff
/*
// FIFO reset
*/
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    5034:	e3a03a02 	mov	r3, #8192	; 0x2000

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    5038:	e34f1f70 	movt	r1, #65392	; 0xff70
    503c:	e5110fff 	ldr	r0, [r1, #-4095]	; 0xfffff001
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5040:	e1a02001 	mov	r2, r1
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    5044:	e3800002 	orr	r0, r0, #2
    5048:	e5010fff 	str	r0, [r1, #-4095]	; 0xfffff001
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    504c:	ea000001 	b	5058 <alt_sdmmc_fifo_reset+0x28>
                                                && --timeout)
    5050:	e2533001 	subs	r3, r3, #1
    5054:	0a000006 	beq	5074 <alt_sdmmc_fifo_reset+0x44>

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5058:	e5120fff 	ldr	r0, [r2, #-4095]	; 0xfffff001
    505c:	e7e000d0 	ubfx	r0, r0, #1, #1
    5060:	e3500000 	cmp	r0, #0
    5064:	1afffff9 	bne	5050 <alt_sdmmc_fifo_reset+0x20>
                                                && --timeout)
        ;

    /*  If fifo reset still are active, return timeout error*/
    if (timeout == 0)
    5068:	e3530000 	cmp	r3, #0
    506c:	0a000000 	beq	5074 <alt_sdmmc_fifo_reset+0x44>
    {
        return ALT_E_TMO;
    }

    return ALT_E_SUCCESS;
}
    5070:	e12fff1e 	bx	lr
        ;

    /*  If fifo reset still are active, return timeout error*/
    if (timeout == 0)
    {
        return ALT_E_TMO;
    5074:	e3e0000b 	mvn	r0, #11
    5078:	e12fff1e 	bx	lr

0000507c <alt_sdmmc_dma_reset>:
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    507c:	e3041fff 	movw	r1, #20479	; 0x4fff
/*
// DMA reset
*/
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    5080:	e3a03a02 	mov	r3, #8192	; 0x2000

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    5084:	e34f1f70 	movt	r1, #65392	; 0xff70
    5088:	e5110fff 	ldr	r0, [r1, #-4095]	; 0xfffff001
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    508c:	e1a02001 	mov	r2, r1
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    5090:	e3800004 	orr	r0, r0, #4
    5094:	e5010fff 	str	r0, [r1, #-4095]	; 0xfffff001
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5098:	ea000001 	b	50a4 <alt_sdmmc_dma_reset+0x28>
                                                && --timeout)
    509c:	e2533001 	subs	r3, r3, #1
    50a0:	0a000006 	beq	50c0 <alt_sdmmc_dma_reset+0x44>

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    50a4:	e5120fff 	ldr	r0, [r2, #-4095]	; 0xfffff001
    50a8:	e7e00150 	ubfx	r0, r0, #2, #1
    50ac:	e3500000 	cmp	r0, #0
    50b0:	1afffff9 	bne	509c <alt_sdmmc_dma_reset+0x20>
                                                && --timeout)
        ;

    /*  If dma reset still are active, return timeout error*/
    if (timeout == 0)
    50b4:	e3530000 	cmp	r3, #0
    50b8:	0a000000 	beq	50c0 <alt_sdmmc_dma_reset+0x44>
    {
        return ALT_E_TMO;
    }

    return ALT_E_SUCCESS;
}
    50bc:	e12fff1e 	bx	lr
        ;

    /*  If dma reset still are active, return timeout error*/
    if (timeout == 0)
    {
        return ALT_E_TMO;
    50c0:	e3e0000b 	mvn	r0, #11
    50c4:	e12fff1e 	bx	lr

000050c8 <alt_sdmmc_card_is_detected>:
/*
// Returns ALT_E_TRUE if the SD/MMC controller is present depend on cdata_in.
*/
bool alt_sdmmc_card_is_detected(void)
{
    if (ALT_SDMMC_STAT_DATA_3_STAT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    50c8:	e3043fff 	movw	r3, #20479	; 0x4fff
    50cc:	e34f3f70 	movt	r3, #65392	; 0xff70
    50d0:	e5130fb7 	ldr	r0, [r3, #-4023]	; 0xfffff049
    }
    else
    {
        return false;
    }
}
    50d4:	e7e00450 	ubfx	r0, r0, #8, #1
    50d8:	e12fff1e 	bx	lr

000050dc <alt_sdmmc_read_long_response>:
/*
// Get long response of previous command.
*/
ALT_STATUS_CODE alt_sdmmc_read_long_response(ALT_SDMMC_RESPONSE_t *response)
{
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    50dc:	e3043fff 	movw	r3, #20479	; 0x4fff

/*
// Get long response of previous command.
*/
ALT_STATUS_CODE alt_sdmmc_read_long_response(ALT_SDMMC_RESPONSE_t *response)
{
    50e0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    50e4:	e34f3f70 	movt	r3, #65392	; 0xff70

/*
// Get long response of previous command.
*/
ALT_STATUS_CODE alt_sdmmc_read_long_response(ALT_SDMMC_RESPONSE_t *response)
{
    50e8:	e1a02000 	mov	r2, r0
    response->resp1 = (uint32_t)(ALT_SDMMC_RESP1_RESPONSE1_GET(resp1));
    response->resp2 = (uint32_t)(ALT_SDMMC_RESP2_RESPONSE2_GET(resp2));
    response->resp3 = (uint32_t)(ALT_SDMMC_RESP3_RESPONSE3_GET(resp3));

    return ALT_E_SUCCESS;
}
    50ec:	e3a00000 	mov	r0, #0
/*
// Get long response of previous command.
*/
ALT_STATUS_CODE alt_sdmmc_read_long_response(ALT_SDMMC_RESPONSE_t *response)
{
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    50f0:	e5134fcf 	ldr	r4, [r3, #-4047]	; 0xfffff031
    uint32_t resp1 = alt_read_word(ALT_SDMMC_RESP1_ADDR);
    50f4:	e513cfcb 	ldr	r12, [r3, #-4043]	; 0xfffff035
    uint32_t resp2 = alt_read_word(ALT_SDMMC_RESP2_ADDR);
    50f8:	e5131fc7 	ldr	r1, [r3, #-4039]	; 0xfffff039
    uint32_t resp3 = alt_read_word(ALT_SDMMC_RESP3_ADDR);
    50fc:	e5133fc3 	ldr	r3, [r3, #-4035]	; 0xfffff03d

    response->resp0 = (uint32_t)(ALT_SDMMC_RESP0_RESPONSE0_GET(resp0));
    response->resp1 = (uint32_t)(ALT_SDMMC_RESP1_RESPONSE1_GET(resp1));
    5100:	e8821010 	stm	r2, {r4, r12}
    response->resp2 = (uint32_t)(ALT_SDMMC_RESP2_RESPONSE2_GET(resp2));
    5104:	e5821008 	str	r1, [r2, #8]
    response->resp3 = (uint32_t)(ALT_SDMMC_RESP3_RESPONSE3_GET(resp3));
    5108:	e582300c 	str	r3, [r2, #12]

    return ALT_E_SUCCESS;
}
    510c:	e8bd0010 	ldmfd	sp!, {r4}
    5110:	e12fff1e 	bx	lr

00005114 <alt_sdmmc_fifo_read>:

/*
//This function reads a single data byte from the receive FIFO.
*/
ALT_STATUS_CODE alt_sdmmc_fifo_read(void *dest, const size_t size)
{
    5114:	e92d0030 	push	{r4, r5}
    int counter;
    uint32_t * dest_ptr = dest;
    for (counter = 0; counter < size / 4; counter++)
    5118:	e1b05121 	lsrs	r5, r1, #2
    511c:	13a02000 	movne	r2, #0
    {
        dest_ptr[counter] = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    5120:	13044fff 	movwne	r4, #20479	; 0x4fff
*/
ALT_STATUS_CODE alt_sdmmc_fifo_read(void *dest, const size_t size)
{
    int counter;
    uint32_t * dest_ptr = dest;
    for (counter = 0; counter < size / 4; counter++)
    5124:	11a03002 	movne	r3, r2
    {
        dest_ptr[counter] = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    5128:	134f4f70 	movtne	r4, #65392	; 0xff70
*/
ALT_STATUS_CODE alt_sdmmc_fifo_read(void *dest, const size_t size)
{
    int counter;
    uint32_t * dest_ptr = dest;
    for (counter = 0; counter < size / 4; counter++)
    512c:	0a000005 	beq	5148 <alt_sdmmc_fifo_read+0x34>
    5130:	e2833001 	add	r3, r3, #1
    {
        dest_ptr[counter] = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    5134:	e514cdff 	ldr	r12, [r4, #-3583]	; 0xfffff201
*/
ALT_STATUS_CODE alt_sdmmc_fifo_read(void *dest, const size_t size)
{
    int counter;
    uint32_t * dest_ptr = dest;
    for (counter = 0; counter < size / 4; counter++)
    5138:	e1530005 	cmp	r3, r5
    {
        dest_ptr[counter] = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    513c:	e780c102 	str	r12, [r0, r2, lsl #2]
*/
ALT_STATUS_CODE alt_sdmmc_fifo_read(void *dest, const size_t size)
{
    int counter;
    uint32_t * dest_ptr = dest;
    for (counter = 0; counter < size / 4; counter++)
    5140:	e1a02003 	mov	r2, r3
    5144:	1afffff9 	bne	5130 <alt_sdmmc_fifo_read+0x1c>
    {
        dest_ptr[counter] = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    }
    
    if (size & 0x3)
    5148:	e2111003 	ands	r1, r1, #3
    514c:	0a00000b 	beq	5180 <alt_sdmmc_fifo_read+0x6c>
    {
        uint8_t * add_dest_ptr = (uint8_t*)dest + (size / 4);
        uint32_t word_notfull = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    5150:	e3043fff 	movw	r3, #20479	; 0x4fff
    
        for (counter = 0; counter < (size & 0x3); counter++)
    5154:	e3a0c000 	mov	r12, #0
    }
    
    if (size & 0x3)
    {
        uint8_t * add_dest_ptr = (uint8_t*)dest + (size / 4);
        uint32_t word_notfull = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    5158:	e34f3f70 	movt	r3, #65392	; 0xff70
        dest_ptr[counter] = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    }
    
    if (size & 0x3)
    {
        uint8_t * add_dest_ptr = (uint8_t*)dest + (size / 4);
    515c:	e0800005 	add	r0, r0, r5
        uint32_t word_notfull = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    5160:	e5132dff 	ldr	r2, [r3, #-3583]	; 0xfffff201
    
        for (counter = 0; counter < (size & 0x3); counter++)
    5164:	e1a0300c 	mov	r3, r12
    5168:	e2833001 	add	r3, r3, #1
        {
            add_dest_ptr[counter] = (uint8_t)word_notfull;
    516c:	e7c0200c 	strb	r2, [r0, r12]
    if (size & 0x3)
    {
        uint8_t * add_dest_ptr = (uint8_t*)dest + (size / 4);
        uint32_t word_notfull = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    
        for (counter = 0; counter < (size & 0x3); counter++)
    5170:	e1530001 	cmp	r3, r1
        {
            add_dest_ptr[counter] = (uint8_t)word_notfull;
            word_notfull = word_notfull >> 8;
    5174:	e1a02422 	lsr	r2, r2, #8
    if (size & 0x3)
    {
        uint8_t * add_dest_ptr = (uint8_t*)dest + (size / 4);
        uint32_t word_notfull = (uint32_t)(ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR)));
    
        for (counter = 0; counter < (size & 0x3); counter++)
    5178:	e1a0c003 	mov	r12, r3
    517c:	1afffff9 	bne	5168 <alt_sdmmc_fifo_read+0x54>
            word_notfull = word_notfull >> 8;
        }
    }

    return ALT_E_SUCCESS;
}
    5180:	e3a00000 	mov	r0, #0
    5184:	e8bd0030 	pop	{r4, r5}
    5188:	e12fff1e 	bx	lr

0000518c <alt_sdmmc_fifo_write>:

/*
// This function writes a single data byte to the transmit FIFO.
*/
ALT_STATUS_CODE alt_sdmmc_fifo_write(const void *src, const size_t size)
{
    518c:	e92d0030 	push	{r4, r5}
    int counter;
    const uint32_t * src_ptr = src;
    for (counter = 0; counter < size / 4; counter++)
    5190:	e1b05121 	lsrs	r5, r1, #2
    5194:	13a02000 	movne	r2, #0
    {
        alt_write_word(ALT_SDMMC_DATA_ADDR, ALT_SDMMC_DATA_VALUE_SET(src_ptr[counter]));
    5198:	13044fff 	movwne	r4, #20479	; 0x4fff
*/
ALT_STATUS_CODE alt_sdmmc_fifo_write(const void *src, const size_t size)
{
    int counter;
    const uint32_t * src_ptr = src;
    for (counter = 0; counter < size / 4; counter++)
    519c:	11a03002 	movne	r3, r2
    {
        alt_write_word(ALT_SDMMC_DATA_ADDR, ALT_SDMMC_DATA_VALUE_SET(src_ptr[counter]));
    51a0:	134f4f70 	movtne	r4, #65392	; 0xff70
*/
ALT_STATUS_CODE alt_sdmmc_fifo_write(const void *src, const size_t size)
{
    int counter;
    const uint32_t * src_ptr = src;
    for (counter = 0; counter < size / 4; counter++)
    51a4:	0a000005 	beq	51c0 <alt_sdmmc_fifo_write+0x34>
    {
        alt_write_word(ALT_SDMMC_DATA_ADDR, ALT_SDMMC_DATA_VALUE_SET(src_ptr[counter]));
    51a8:	e790c102 	ldr	r12, [r0, r2, lsl #2]
*/
ALT_STATUS_CODE alt_sdmmc_fifo_write(const void *src, const size_t size)
{
    int counter;
    const uint32_t * src_ptr = src;
    for (counter = 0; counter < size / 4; counter++)
    51ac:	e2833001 	add	r3, r3, #1
    51b0:	e1530005 	cmp	r3, r5
    51b4:	e1a02003 	mov	r2, r3
    {
        alt_write_word(ALT_SDMMC_DATA_ADDR, ALT_SDMMC_DATA_VALUE_SET(src_ptr[counter]));
    51b8:	e504cdff 	str	r12, [r4, #-3583]	; 0xfffff201
*/
ALT_STATUS_CODE alt_sdmmc_fifo_write(const void *src, const size_t size)
{
    int counter;
    const uint32_t * src_ptr = src;
    for (counter = 0; counter < size / 4; counter++)
    51bc:	1afffff9 	bne	51a8 <alt_sdmmc_fifo_write+0x1c>
    {
        alt_write_word(ALT_SDMMC_DATA_ADDR, ALT_SDMMC_DATA_VALUE_SET(src_ptr[counter]));
    }

    if (size & 0x3)
    51c0:	e2111003 	ands	r1, r1, #3
    51c4:	0a00000d 	beq	5200 <alt_sdmmc_fifo_write+0x74>
    {
        const uint8_t *add_src_ptr = (uint8_t*)src + (size / 4);
        uint32_t word_notfull = 0;

        for (counter = 0; counter < (size & 0x3); counter++)
    51c8:	e3a02000 	mov	r2, #0
        alt_write_word(ALT_SDMMC_DATA_ADDR, ALT_SDMMC_DATA_VALUE_SET(src_ptr[counter]));
    }

    if (size & 0x3)
    {
        const uint8_t *add_src_ptr = (uint8_t*)src + (size / 4);
    51cc:	e0805005 	add	r5, r0, r5
        uint32_t word_notfull = 0;

        for (counter = 0; counter < (size & 0x3); counter++)
    51d0:	e1a03002 	mov	r3, r2
    }

    if (size & 0x3)
    {
        const uint8_t *add_src_ptr = (uint8_t*)src + (size / 4);
        uint32_t word_notfull = 0;
    51d4:	e1a00002 	mov	r0, r2

        for (counter = 0; counter < (size & 0x3); counter++)
        {
            word_notfull |= (uint32_t)add_src_ptr[counter] << (8 * counter);
    51d8:	e7d54002 	ldrb	r4, [r5, r2]
}

/*
// This function writes a single data byte to the transmit FIFO.
*/
ALT_STATUS_CODE alt_sdmmc_fifo_write(const void *src, const size_t size)
    51dc:	e1a0c183 	lsl	r12, r3, #3
    if (size & 0x3)
    {
        const uint8_t *add_src_ptr = (uint8_t*)src + (size / 4);
        uint32_t word_notfull = 0;

        for (counter = 0; counter < (size & 0x3); counter++)
    51e0:	e2833001 	add	r3, r3, #1
    51e4:	e1530001 	cmp	r3, r1
    51e8:	e1a02003 	mov	r2, r3
        {
            word_notfull |= (uint32_t)add_src_ptr[counter] << (8 * counter);
    51ec:	e1800c14 	orr	r0, r0, r4, lsl r12
    if (size & 0x3)
    {
        const uint8_t *add_src_ptr = (uint8_t*)src + (size / 4);
        uint32_t word_notfull = 0;

        for (counter = 0; counter < (size & 0x3); counter++)
    51f0:	1afffff8 	bne	51d8 <alt_sdmmc_fifo_write+0x4c>
        {
            word_notfull |= (uint32_t)add_src_ptr[counter] << (8 * counter);
        }

        alt_write_word(ALT_SDMMC_DATA_ADDR, ALT_SDMMC_DATA_VALUE_SET(word_notfull));
    51f4:	e3043fff 	movw	r3, #20479	; 0x4fff
    51f8:	e34f3f70 	movt	r3, #65392	; 0xff70
    51fc:	e5030dff 	str	r0, [r3, #-3583]	; 0xfffff201
    }
    
    return ALT_E_SUCCESS;
}
    5200:	e3a00000 	mov	r0, #0
    5204:	e8bd0030 	pop	{r4, r5}
    5208:	e12fff1e 	bx	lr

0000520c <alt_sdmmc_int_status_get>:
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    520c:	e3043fff 	movw	r3, #20479	; 0x4fff
    5210:	e34f3f70 	movt	r3, #65392	; 0xff70
    5214:	e5130fbf 	ldr	r0, [r3, #-4031]	; 0xfffff041
}
    5218:	e12fff1e 	bx	lr

0000521c <alt_sdmmc_int_mask_get>:
// Returns the SD/MMC controller raw interrupt status conditions irrespective of
// the interrupt status condition enablement state.
*/
uint32_t alt_sdmmc_int_mask_get(void)
{
    return alt_read_word(ALT_SDMMC_INTMSK_ADDR);
    521c:	e3043fff 	movw	r3, #20479	; 0x4fff
    5220:	e34f3f70 	movt	r3, #65392	; 0xff70
    5224:	e5130fdb 	ldr	r0, [r3, #-4059]	; 0xfffff025
}
    5228:	e12fff1e 	bx	lr

0000522c <alt_sdmmc_int_clear>:
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    522c:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    5230:	e1a02000 	mov	r2, r0
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    5234:	e34f3f70 	movt	r3, #65392	; 0xff70

    return ALT_E_SUCCESS;
}
    5238:	e3a00000 	mov	r0, #0
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    523c:	e5032fbb 	str	r2, [r3, #-4027]	; 0xfffff045

    return ALT_E_SUCCESS;
}
    5240:	e12fff1e 	bx	lr

00005244 <alt_sdmmc_int_disable>:
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    5244:	e3043fff 	movw	r3, #20479	; 0x4fff
    5248:	e34f3f70 	movt	r3, #65392	; 0xff70
    524c:	e5132fdb 	ldr	r2, [r3, #-4059]	; 0xfffff025
    5250:	e1c22000 	bic	r2, r2, r0

    return ALT_E_SUCCESS;
}
    5254:	e3a00000 	mov	r0, #0
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    5258:	e5032fdb 	str	r2, [r3, #-4059]	; 0xfffff025

    return ALT_E_SUCCESS;
}
    525c:	e12fff1e 	bx	lr

00005260 <alt_sdmmc_int_enable>:
// Enable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_enable(const uint32_t mask)
{
    if (mask & 0x0001ffff)
    5260:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    5264:	e3c338fe 	bic	r3, r3, #16646144	; 0xfe0000
    5268:	e3530000 	cmp	r3, #0
    526c:	0a000007 	beq	5290 <alt_sdmmc_int_enable+0x30>
    {
        alt_setbits_word(ALT_SDMMC_CTL_ADDR, 
    5270:	e3043fff 	movw	r3, #20479	; 0x4fff
    5274:	e34f3f70 	movt	r3, #65392	; 0xff70
    5278:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    527c:	e3822010 	orr	r2, r2, #16
    5280:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
                     ALT_SDMMC_CTL_INT_EN_SET_MSK);

        alt_setbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    5284:	e5132fdb 	ldr	r2, [r3, #-4059]	; 0xfffff025
    5288:	e1800002 	orr	r0, r0, r2
    528c:	e5030fdb 	str	r0, [r3, #-4059]	; 0xfffff025
    }
    return ALT_E_SUCCESS;
}
    5290:	e3a00000 	mov	r0, #0
    5294:	e12fff1e 	bx	lr

00005298 <alt_sdmmc_fifo_is_rx_wtrmk_reached>:
//Returns true if SD/MMC controller FIFO has reached the receive watermark level
//otherwise returns false.
*/
bool alt_sdmmc_fifo_is_rx_wtrmk_reached(void)
{
    if (ALT_SDMMC_STAT_FIFO_RX_WATERMARK_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) == 
    5298:	e3043fff 	movw	r3, #20479	; 0x4fff
    529c:	e34f3f70 	movt	r3, #65392	; 0xff70
    52a0:	e5130fb7 	ldr	r0, [r3, #-4023]	; 0xfffff049
    52a4:	e2000001 	and	r0, r0, #1
    }
    else
    {
        return false;
    }
}
    52a8:	e2200001 	eor	r0, r0, #1
    52ac:	e12fff1e 	bx	lr

000052b0 <alt_sdmmc_fifo_is_tx_wtrmk_reached>:
//Returns true if SD/MMC controller FIFO has reached the transmit watermark level
//otherwise returns false.
*/
bool alt_sdmmc_fifo_is_tx_wtrmk_reached(void)
{
    if (ALT_SDMMC_STAT_FIFO_TX_WATERMARK_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) == 
    52b0:	e3043fff 	movw	r3, #20479	; 0x4fff
    52b4:	e34f3f70 	movt	r3, #65392	; 0xff70
    52b8:	e5130fb7 	ldr	r0, [r3, #-4023]	; 0xfffff049
    }
    else
    {
        return false;
    }
}
    52bc:	e7e000d0 	ubfx	r0, r0, #1, #1
    52c0:	e12fff1e 	bx	lr

000052c4 <alt_sdmmc_fifo_is_empty>:
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    52c4:	e3043fff 	movw	r3, #20479	; 0x4fff
    52c8:	e34f3f70 	movt	r3, #65392	; 0xff70
    52cc:	e5130fb7 	ldr	r0, [r3, #-4023]	; 0xfffff049
    }
    else
    {
        return false;
    }
}
    52d0:	e7e00150 	ubfx	r0, r0, #2, #1
    52d4:	e12fff1e 	bx	lr

000052d8 <alt_sdmmc_fifo_is_full>:
/*
// Returns ALT_E_TRUE when the receive FIFO is completely full.
*/
bool alt_sdmmc_fifo_is_full(void)
{
    if (ALT_SDMMC_STAT_FIFO_FULL_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    52d8:	e3043fff 	movw	r3, #20479	; 0x4fff
    52dc:	e34f3f70 	movt	r3, #65392	; 0xff70
    52e0:	e5130fb7 	ldr	r0, [r3, #-4023]	; 0xfffff049
    }
    else
    {
        return false;
    }
}
    52e4:	e7e001d0 	ubfx	r0, r0, #3, #1
    52e8:	e12fff1e 	bx	lr

000052ec <alt_sdmmc_fifo_count>:
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    52ec:	e3043fff 	movw	r3, #20479	; 0x4fff
    52f0:	e34f3f70 	movt	r3, #65392	; 0xff70
    52f4:	e5130fb7 	ldr	r0, [r3, #-4023]	; 0xfffff049
}
    52f8:	e7ec08d0 	ubfx	r0, r0, #17, #13
    52fc:	e12fff1e 	bx	lr

00005300 <alt_sdmmc_fifo_param_get>:
/*
// Gets the configured FIFO operational parameter values.
*/
ALT_STATUS_CODE alt_sdmmc_fifo_param_get(uint32_t *rx_wtrmk, uint32_t *tx_wtrmk, ALT_SDMMC_MULT_TRANS_t *mult_trans_size)
{
    uint32_t fifoth = alt_read_word(ALT_SDMMC_FIFOTH_ADDR);
    5300:	e3043fff 	movw	r3, #20479	; 0x4fff

/*
// Gets the configured FIFO operational parameter values.
*/
ALT_STATUS_CODE alt_sdmmc_fifo_param_get(uint32_t *rx_wtrmk, uint32_t *tx_wtrmk, ALT_SDMMC_MULT_TRANS_t *mult_trans_size)
{
    5304:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    uint32_t fifoth = alt_read_word(ALT_SDMMC_FIFOTH_ADDR);
    5308:	e34f3f70 	movt	r3, #65392	; 0xff70
    530c:	e5133fb3 	ldr	r3, [r3, #-4019]	; 0xfffff04d

    *rx_wtrmk        = ALT_SDMMC_FIFOTH_RX_WMARK_GET(fifoth);
    5310:	e7eb4853 	ubfx	r4, r3, #16, #12
    *tx_wtrmk        = ALT_SDMMC_FIFOTH_TX_WMARK_GET(fifoth);
    *mult_trans_size = (ALT_SDMMC_MULT_TRANS_t)ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_GET(fifoth);
    5314:	e7e2ce53 	ubfx	r12, r3, #28, #3
ALT_STATUS_CODE alt_sdmmc_fifo_param_get(uint32_t *rx_wtrmk, uint32_t *tx_wtrmk, ALT_SDMMC_MULT_TRANS_t *mult_trans_size)
{
    uint32_t fifoth = alt_read_word(ALT_SDMMC_FIFOTH_ADDR);

    *rx_wtrmk        = ALT_SDMMC_FIFOTH_RX_WMARK_GET(fifoth);
    *tx_wtrmk        = ALT_SDMMC_FIFOTH_TX_WMARK_GET(fifoth);
    5318:	e1a03a03 	lsl	r3, r3, #20
*/
ALT_STATUS_CODE alt_sdmmc_fifo_param_get(uint32_t *rx_wtrmk, uint32_t *tx_wtrmk, ALT_SDMMC_MULT_TRANS_t *mult_trans_size)
{
    uint32_t fifoth = alt_read_word(ALT_SDMMC_FIFOTH_ADDR);

    *rx_wtrmk        = ALT_SDMMC_FIFOTH_RX_WMARK_GET(fifoth);
    531c:	e5804000 	str	r4, [r0]
    *tx_wtrmk        = ALT_SDMMC_FIFOTH_TX_WMARK_GET(fifoth);
    *mult_trans_size = (ALT_SDMMC_MULT_TRANS_t)ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_GET(fifoth);

    return ALT_E_SUCCESS;
}
    5320:	e3a00000 	mov	r0, #0
ALT_STATUS_CODE alt_sdmmc_fifo_param_get(uint32_t *rx_wtrmk, uint32_t *tx_wtrmk, ALT_SDMMC_MULT_TRANS_t *mult_trans_size)
{
    uint32_t fifoth = alt_read_word(ALT_SDMMC_FIFOTH_ADDR);

    *rx_wtrmk        = ALT_SDMMC_FIFOTH_RX_WMARK_GET(fifoth);
    *tx_wtrmk        = ALT_SDMMC_FIFOTH_TX_WMARK_GET(fifoth);
    5324:	e1a03a23 	lsr	r3, r3, #20
    5328:	e5813000 	str	r3, [r1]
    *mult_trans_size = (ALT_SDMMC_MULT_TRANS_t)ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_GET(fifoth);
    532c:	e5c2c000 	strb	r12, [r2]

    return ALT_E_SUCCESS;
}
    5330:	e8bd0010 	ldmfd	sp!, {r4}
    5334:	e12fff1e 	bx	lr

00005338 <alt_sdmmc_fifo_param_set>:

/*
// Sets the configured FIFO operational parameter values.
*/
ALT_STATUS_CODE alt_sdmmc_fifo_param_set(uint32_t rx_wtrmk, uint32_t tx_wtrmk, ALT_SDMMC_MULT_TRANS_t mult_trans_size)
{
    5338:	e92d0030 	push	{r4, r5}
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
                              | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET(mult_trans_size);
                            
    alt_replbits_word(ALT_SDMMC_FIFOTH_ADDR,
    533c:	e304cfff 	movw	r12, #20479	; 0x4fff
    uint32_t fifoth_set_mask = ALT_SDMMC_FIFOTH_RX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_TX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET_MSK;
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
    5340:	e1a01a01 	lsl	r1, r1, #20
{
    uint32_t fifoth_set_mask = ALT_SDMMC_FIFOTH_RX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_TX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET_MSK;
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
    5344:	e3a04000 	mov	r4, #0
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
                              | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET(mult_trans_size);
                            
    alt_replbits_word(ALT_SDMMC_FIFOTH_ADDR,
    5348:	e34fcf70 	movt	r12, #65392	; 0xff70
                             | ALT_SDMMC_FIFOTH_TX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET_MSK;
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
                              | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET(mult_trans_size);
    534c:	e1a02e02 	lsl	r2, r2, #28
{
    uint32_t fifoth_set_mask = ALT_SDMMC_FIFOTH_RX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_TX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET_MSK;
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
    5350:	e3404fff 	movt	r4, #4095	; 0xfff
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
                              | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET(mult_trans_size);
                            
    alt_replbits_word(ALT_SDMMC_FIFOTH_ADDR,
    5354:	e51c5fb3 	ldr	r5, [r12, #-4019]	; 0xfffff04d
{
    uint32_t fifoth_set_mask = ALT_SDMMC_FIFOTH_RX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_TX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET_MSK;
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
    5358:	e0040800 	and	r0, r4, r0, lsl #16
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
    535c:	e1a01a21 	lsr	r1, r1, #20
                              | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET(mult_trans_size);
                            
    alt_replbits_word(ALT_SDMMC_FIFOTH_ADDR,
    5360:	e3a03a0f 	mov	r3, #61440	; 0xf000
                             | ALT_SDMMC_FIFOTH_TX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET_MSK;
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
                              | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET(mult_trans_size);
    5364:	e2022207 	and	r2, r2, #1879048192	; 0x70000000
    uint32_t fifoth_set_mask = ALT_SDMMC_FIFOTH_RX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_TX_WMARK_SET_MSK
                             | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET_MSK;
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
    5368:	e1811000 	orr	r1, r1, r0
                              | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET(mult_trans_size);
                            
    alt_replbits_word(ALT_SDMMC_FIFOTH_ADDR,
    536c:	e3483000 	movt	r3, #32768	; 0x8000
    5370:	e1811002 	orr	r1, r1, r2
    5374:	e0053003 	and	r3, r5, r3
    5378:	e1813003 	orr	r3, r1, r3
                      fifoth_set_mask,
                      fifoth_set_value);

    return ALT_E_SUCCESS;
}
    537c:	e3a00000 	mov	r0, #0
    
    uint32_t fifoth_set_value = ALT_SDMMC_FIFOTH_RX_WMARK_SET(rx_wtrmk)
                              | ALT_SDMMC_FIFOTH_TX_WMARK_SET(tx_wtrmk)
                              | ALT_SDMMC_FIFOTH_DW_DMA_MULT_TRANSACTION_SIZE_SET(mult_trans_size);
                            
    alt_replbits_word(ALT_SDMMC_FIFOTH_ADDR,
    5380:	e50c3fb3 	str	r3, [r12, #-4019]	; 0xfffff04d
                      fifoth_set_mask,
                      fifoth_set_value);

    return ALT_E_SUCCESS;
}
    5384:	e8bd0030 	pop	{r4, r5}
    5388:	e12fff1e 	bx	lr

0000538c <alt_sdmmc_card_reset>:
ALT_STATUS_CODE alt_sdmmc_card_reset(void)
{
    volatile uint32_t timeout = ALT_SDMMC_RESET_TMO_INIT;

    /*  Assert card reset */
    alt_setbits_word(ALT_SDMMC_RST_N_ADDR, 
    538c:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// Card reset
*/
ALT_STATUS_CODE alt_sdmmc_card_reset(void)
{
    volatile uint32_t timeout = ALT_SDMMC_RESET_TMO_INIT;
    5390:	e3a02a02 	mov	r2, #8192	; 0x2000

    /*  Assert card reset */
    alt_setbits_word(ALT_SDMMC_RST_N_ADDR, 
    5394:	e34f3f70 	movt	r3, #65392	; 0xff70

/*
// Card reset
*/
ALT_STATUS_CODE alt_sdmmc_card_reset(void)
{
    5398:	e24dd008 	sub	sp, sp, #8
    volatile uint32_t timeout = ALT_SDMMC_RESET_TMO_INIT;
    539c:	e58d2004 	str	r2, [sp, #4]

    /*  Assert card reset */
    alt_setbits_word(ALT_SDMMC_RST_N_ADDR, 
    53a0:	e5132f87 	ldr	r2, [r3, #-3975]	; 0xfffff079
    53a4:	e3822001 	orr	r2, r2, #1
    53a8:	e5032f87 	str	r2, [r3, #-3975]	; 0xfffff079
                     ALT_SDMMC_RST_N_CARD_RST_SET_MSK);

    /*  Wait while card reset*/
    while (timeout--)
    53ac:	e59d0004 	ldr	r0, [sp, #4]
    53b0:	e3500000 	cmp	r0, #0
    53b4:	e2403001 	sub	r3, r0, #1
    53b8:	e58d3004 	str	r3, [sp, #4]
    53bc:	1afffffa 	bne	53ac <alt_sdmmc_card_reset+0x20>
        ;

    /*  Deassert the appropriate card reset.*/
    alt_clrbits_word(ALT_SDMMC_RST_N_ADDR, 
    53c0:	e3043fff 	movw	r3, #20479	; 0x4fff
    53c4:	e34f3f70 	movt	r3, #65392	; 0xff70
    53c8:	e5132f87 	ldr	r2, [r3, #-3975]	; 0xfffff079
    53cc:	e3c22001 	bic	r2, r2, #1
    53d0:	e5032f87 	str	r2, [r3, #-3975]	; 0xfffff079
                     ALT_SDMMC_RST_N_CARD_RST_SET_MSK);

    return ALT_E_SUCCESS;
}
    53d4:	e28dd008 	add	sp, sp, #8
    53d8:	e12fff1e 	bx	lr

000053dc <alt_sdmmc_dma_enable>:
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_dma_enable(void)
{
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, 
    53dc:	e3043fff 	movw	r3, #20479	; 0x4fff
                     ALT_SDMMC_CTL_USE_INTERNAL_DMAC_SET_MSK);
    alt_setbits_word(ALT_SDMMC_BMOD_ADDR, 
                     ALT_SDMMC_BMOD_DE_SET_MSK);

    return ALT_E_SUCCESS;
}
    53e0:	e3a00000 	mov	r0, #0
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_dma_enable(void)
{
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, 
    53e4:	e34f3f70 	movt	r3, #65392	; 0xff70
    53e8:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    53ec:	e3822402 	orr	r2, r2, #33554432	; 0x2000000
    53f0:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
                     ALT_SDMMC_CTL_USE_INTERNAL_DMAC_SET_MSK);
    alt_setbits_word(ALT_SDMMC_BMOD_ADDR, 
    53f4:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    53f8:	e3822080 	orr	r2, r2, #128	; 0x80
    53fc:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
                     ALT_SDMMC_BMOD_DE_SET_MSK);

    return ALT_E_SUCCESS;
}
    5400:	e12fff1e 	bx	lr

00005404 <alt_sdmmc_dma_disable>:
/*
// Disables the SD/MMC Internal DMA Controller
*/
ALT_STATUS_CODE alt_sdmmc_dma_disable(void)
{
    alt_clrbits_word(ALT_SDMMC_CTL_ADDR, 
    5404:	e3043fff 	movw	r3, #20479	; 0x4fff
                     ALT_SDMMC_CTL_USE_INTERNAL_DMAC_SET_MSK);
    alt_clrbits_word(ALT_SDMMC_BMOD_ADDR, 
                     ALT_SDMMC_BMOD_DE_SET_MSK);

    return ALT_E_SUCCESS;
}
    5408:	e3a00000 	mov	r0, #0
/*
// Disables the SD/MMC Internal DMA Controller
*/
ALT_STATUS_CODE alt_sdmmc_dma_disable(void)
{
    alt_clrbits_word(ALT_SDMMC_CTL_ADDR, 
    540c:	e34f3f70 	movt	r3, #65392	; 0xff70
    5410:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    5414:	e3c22402 	bic	r2, r2, #33554432	; 0x2000000
    5418:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
                     ALT_SDMMC_CTL_USE_INTERNAL_DMAC_SET_MSK);
    alt_clrbits_word(ALT_SDMMC_BMOD_ADDR, 
    541c:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    5420:	e3c22080 	bic	r2, r2, #128	; 0x80
    5424:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
                     ALT_SDMMC_BMOD_DE_SET_MSK);

    return ALT_E_SUCCESS;
}
    5428:	e12fff1e 	bx	lr

0000542c <alt_sdmmc_is_dma_enabled>:
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    542c:	e3043fff 	movw	r3, #20479	; 0x4fff
    5430:	e34f3f70 	movt	r3, #65392	; 0xff70
    5434:	e5130fff 	ldr	r0, [r3, #-4095]	; 0xfffff001
    5438:	e7e00cd0 	ubfx	r0, r0, #25, #1
    543c:	e3500000 	cmp	r0, #0
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    5440:	15130f7f 	ldrne	r0, [r3, #-3967]	; 0xfffff081
    5444:	17e003d0 	ubfxne	r0, r0, #7, #1
    }
    else
    {
        return ALT_E_FALSE;
    }
}
    5448:	e12fff1e 	bx	lr

0000544c <alt_sdmmc_dma_int_status_get>:
/*
// Returns the current SD/MMC controller interrupt IDMAC status conditions.
*/
uint32_t alt_sdmmc_dma_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_IDSTS_ADDR);
    544c:	e3043fff 	movw	r3, #20479	; 0x4fff
    5450:	e34f3f70 	movt	r3, #65392	; 0xff70
    5454:	e5130f73 	ldr	r0, [r3, #-3955]	; 0xfffff08d
}
    5458:	e12fff1e 	bx	lr

0000545c <alt_sdmmc_dma_int_mask_get>:
// Returns the SD/MMC internal DMA controller interrupt mask value which
// reflects the enabled internal DMA controller interrupt status conditions.
*/
uint32_t alt_sdmmc_dma_int_mask_get(void)
{
    return alt_read_word(ALT_SDMMC_IDINTEN_ADDR);
    545c:	e3043fff 	movw	r3, #20479	; 0x4fff
    5460:	e34f3f70 	movt	r3, #65392	; 0xff70
    5464:	e5130f6f 	ldr	r0, [r3, #-3951]	; 0xfffff091
}
    5468:	e12fff1e 	bx	lr

0000546c <alt_sdmmc_dma_int_clear>:
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    546c:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    5470:	e1a02000 	mov	r2, r0
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    5474:	e34f3f70 	movt	r3, #65392	; 0xff70

    return ALT_E_SUCCESS;
}
    5478:	e3a00000 	mov	r0, #0
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    547c:	e5032f73 	str	r2, [r3, #-3955]	; 0xfffff08d

    return ALT_E_SUCCESS;
}
    5480:	e12fff1e 	bx	lr

00005484 <alt_sdmmc_dma_int_disable>:
// Disable the specified SD/MMC controller interrupt IDMAC status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_IDINTEN_ADDR, mask);
    5484:	e3043fff 	movw	r3, #20479	; 0x4fff
    5488:	e34f3f70 	movt	r3, #65392	; 0xff70
    548c:	e5132f6f 	ldr	r2, [r3, #-3951]	; 0xfffff091
    5490:	e1c22000 	bic	r2, r2, r0

    return ALT_E_SUCCESS;
}
    5494:	e3a00000 	mov	r0, #0
// Disable the specified SD/MMC controller interrupt IDMAC status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_IDINTEN_ADDR, mask);
    5498:	e5032f6f 	str	r2, [r3, #-3951]	; 0xfffff091

    return ALT_E_SUCCESS;
}
    549c:	e12fff1e 	bx	lr

000054a0 <alt_sdmmc_dma_int_enable>:
// Enable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_enable(const uint32_t mask)
{
    alt_setbits_word(ALT_SDMMC_IDINTEN_ADDR, mask);
    54a0:	e3043fff 	movw	r3, #20479	; 0x4fff
    54a4:	e34f3f70 	movt	r3, #65392	; 0xff70
    54a8:	e5132f6f 	ldr	r2, [r3, #-3951]	; 0xfffff091
    54ac:	e1802002 	orr	r2, r0, r2

    return ALT_E_SUCCESS;
}
    54b0:	e3a00000 	mov	r0, #0
// Enable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_enable(const uint32_t mask)
{
    alt_setbits_word(ALT_SDMMC_IDINTEN_ADDR, mask);
    54b4:	e5032f6f 	str	r2, [r3, #-3951]	; 0xfffff091

    return ALT_E_SUCCESS;
}
    54b8:	e12fff1e 	bx	lr

000054bc <alt_sdmmc_poll_demand_set>:
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    54bc:	e3043fff 	movw	r3, #20479	; 0x4fff

/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    54c0:	e1a02000 	mov	r2, r0
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    54c4:	e34f3f70 	movt	r3, #65392	; 0xff70

    return ALT_E_SUCCESS;
}
    54c8:	e3a00000 	mov	r0, #0
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    54cc:	e5032f7b 	str	r2, [r3, #-3963]	; 0xfffff085

    return ALT_E_SUCCESS;
}
    54d0:	e12fff1e 	bx	lr

000054d4 <alt_sdmmc_card_rd_threshold_disable>:
/*
// Disable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_disable(void)
{
    alt_clrbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    54d4:	e3043fff 	movw	r3, #20479	; 0x4fff
                     ALT_SDMMC_CARDTHRCTL_CARDRDTHREN_SET_MSK);

    return ALT_E_SUCCESS;
}
    54d8:	e3a00000 	mov	r0, #0
/*
// Disable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_disable(void)
{
    alt_clrbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    54dc:	e34f3f70 	movt	r3, #65392	; 0xff70
    54e0:	e5132eff 	ldr	r2, [r3, #-3839]	; 0xfffff101
    54e4:	e3c22001 	bic	r2, r2, #1
    54e8:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
                     ALT_SDMMC_CARDTHRCTL_CARDRDTHREN_SET_MSK);

    return ALT_E_SUCCESS;
}
    54ec:	e12fff1e 	bx	lr

000054f0 <alt_sdmmc_card_rd_threshold_enable>:
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    54f0:	e3042fff 	movw	r2, #20479	; 0x4fff
    54f4:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    54f8:	e34f2f70 	movt	r2, #65392	; 0xff70
    54fc:	e3a01000 	mov	r1, #0
    5500:	e512ceff 	ldr	r12, [r2, #-3839]	; 0xfffff101
    5504:	e34f3000 	movt	r3, #61440	; 0xf000
    5508:	e3401fff 	movt	r1, #4095	; 0xfff
    550c:	e0011800 	and	r1, r1, r0, lsl #16
                      | ALT_SDMMC_CARDTHRCTL_CARDRDTHREN_SET_MSK,
                        ALT_SDMMC_CARDTHRCTL_CARDRDTHRESHOLD_SET(threshold) 
                      | ALT_SDMMC_CARDTHRCTL_CARDRDTHREN_SET(ALT_SDMMC_CARDTHRCTL_CARDRDTHREN_E_END));

    return ALT_E_SUCCESS;
}
    5510:	e3a00000 	mov	r0, #0
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    5514:	e00c3003 	and	r3, r12, r3
    5518:	e3833001 	orr	r3, r3, #1
    551c:	e1833001 	orr	r3, r3, r1
    5520:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
                      | ALT_SDMMC_CARDTHRCTL_CARDRDTHREN_SET_MSK,
                        ALT_SDMMC_CARDTHRCTL_CARDRDTHRESHOLD_SET(threshold) 
                      | ALT_SDMMC_CARDTHRCTL_CARDRDTHREN_SET(ALT_SDMMC_CARDTHRCTL_CARDRDTHREN_E_END));

    return ALT_E_SUCCESS;
}
    5524:	e12fff1e 	bx	lr

00005528 <alt_sdmmc_card_block_size_set>:

/*
// Set block size
*/
ALT_STATUS_CODE alt_sdmmc_card_block_size_set(const uint16_t block_size)
{
    5528:	e92d4038 	push	{r3, r4, r5, lr}
    552c:	e1a04000 	mov	r4, r0
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    
    /*  Send new block size to card*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SET_BLOCKLEN, block_size, NULL);
    5530:	e3a02000 	mov	r2, #0
    5534:	e3a00010 	mov	r0, #16
    5538:	e1a01004 	mov	r1, r4
    553c:	ebfffce1 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    5540:	e2505000 	subs	r5, r0, #0
    5544:	1a000007 	bne	5568 <alt_sdmmc_card_block_size_set+0x40>
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    5548:	e3043fff 	movw	r3, #20479	; 0x4fff

    /*  Set new block size in controller register*/
    alt_sdmmc_block_size_set(block_size);

    return status;
}
    554c:	e1a00005 	mov	r0, r5
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    5550:	e34f3f70 	movt	r3, #65392	; 0xff70
    5554:	e5132fe3 	ldr	r2, [r3, #-4067]	; 0xfffff01d
    5558:	e1a02822 	lsr	r2, r2, #16
    555c:	e1844802 	orr	r4, r4, r2, lsl #16
    5560:	e5034fe3 	str	r4, [r3, #-4067]	; 0xfffff01d

    /*  Set new block size in controller register*/
    alt_sdmmc_block_size_set(block_size);

    return status;
}
    5564:	e8bd8038 	pop	{r3, r4, r5, pc}
    
    /*  Send new block size to card*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SET_BLOCKLEN, block_size, NULL);
    if (status != ALT_E_SUCCESS)
    {
        dprintf("\nALT_SDMMC_SET_BLOCKLEN failed\n");
    5568:	e3020424 	movw	r0, #9252	; 0x2424
    556c:	e3400002 	movt	r0, #2
    5570:	ebffebb7 	bl	454 <print_debug>

    /*  Set new block size in controller register*/
    alt_sdmmc_block_size_set(block_size);

    return status;
}
    5574:	e1a00005 	mov	r0, r5
    5578:	e8bd8038 	pop	{r3, r4, r5, pc}

0000557c <alt_sdmmc_command_send>:
                      | ALT_SDMMC_INT_STATUS_HLE            /*  Hardware Locked Write Error*/
                      | ALT_SDMMC_INT_STATUS_CMD;           /*  Command done (CD) interrupt*/
    ALT_STATUS_CODE status = 0;

    ALT_SDMMC_CMD_CONFIG_t *default_cfg;
    if (command_type == ALT_SDMMC_CMD_TYPE_BASIC)
    557c:	e3500000 	cmp	r0, #0
*/
ALT_STATUS_CODE alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_t command_type,
                                       ALT_SDMMC_CMD_INDEX_t command,
                                       uint32_t command_arg,
                                       uint32_t *response)
{
    5580:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    5584:	e1a07001 	mov	r7, r1
    5588:	e1a08002 	mov	r8, r2
    558c:	e1a0a003 	mov	r10, r3
                      | ALT_SDMMC_INT_STATUS_HLE            /*  Hardware Locked Write Error*/
                      | ALT_SDMMC_INT_STATUS_CMD;           /*  Command done (CD) interrupt*/
    ALT_STATUS_CODE status = 0;

    ALT_SDMMC_CMD_CONFIG_t *default_cfg;
    if (command_type == ALT_SDMMC_CMD_TYPE_BASIC)
    5590:	0a000060 	beq	5718 <alt_sdmmc_command_send+0x19c>
    {
        default_cfg = cmd_default_cfg;
        array_count = sizeof(cmd_default_cfg)/sizeof(cmd_default_cfg[0]);
    }
    else if (command_type == ALT_SDMMC_CMD_TYPE_ACMD)
    5594:	e3500001 	cmp	r0, #1
    {
        default_cfg = acmd_default_cfg;
    5598:	059fc250 	ldreq	r12, [pc, #592]	; 57f0 <alt_sdmmc_command_send+0x274>
        array_count = sizeof(acmd_default_cfg)/sizeof(acmd_default_cfg[0]);
    559c:	03a03004 	moveq	r3, #4
    if (command_type == ALT_SDMMC_CMD_TYPE_BASIC)
    {
        default_cfg = cmd_default_cfg;
        array_count = sizeof(cmd_default_cfg)/sizeof(cmd_default_cfg[0]);
    }
    else if (command_type == ALT_SDMMC_CMD_TYPE_ACMD)
    55a0:	1a00008b 	bne	57d4 <alt_sdmmc_command_send+0x258>
    {
        dprintf("\ncommand_type not supported\n");
        return ALT_E_BAD_ARG;
    }

    if (command == ALT_SDMMC_CLK_INDEX)
    55a4:	e3770001 	cmn	r7, #1
    55a8:	0a00005f 	beq	572c <alt_sdmmc_command_send+0x1b0>
    55ac:	e3a04000 	mov	r4, #0
ALT_STATUS_CODE alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_t command_type,
                                       ALT_SDMMC_CMD_INDEX_t command,
                                       uint32_t command_arg,
                                       uint32_t *response)
{
    const ALT_SDMMC_CMD_CONFIG_t * cmd_cfg = NULL;
    55b0:	e1a05004 	mov	r5, r4
    55b4:	ea000001 	b	55c0 <alt_sdmmc_command_send+0x44>
        found = true;
    }

    for (counter = 0; counter < array_count; counter++)
    {
        if (found == true)
    55b8:	e3560000 	cmp	r6, #0
    55bc:	1a00000b 	bne	55f0 <alt_sdmmc_command_send+0x74>
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    55c0:	e59c6000 	ldr	r6, [r12]
    {
        cmd_cfg = &cmd_clock_cfg;
        found = true;
    }

    for (counter = 0; counter < array_count; counter++)
    55c4:	e2844001 	add	r4, r4, #1
    {
        if (found == true)
        {
            break;
        }
        if (default_cfg[counter].cmd_index == command)
    55c8:	e206603f 	and	r6, r6, #63	; 0x3f
    55cc:	e1560007 	cmp	r6, r7
    55d0:	01a0500c 	moveq	r5, r12
    55d4:	13a06000 	movne	r6, #0
    55d8:	03a06001 	moveq	r6, #1
    {
        cmd_cfg = &cmd_clock_cfg;
        found = true;
    }

    for (counter = 0; counter < array_count; counter++)
    55dc:	e1530004 	cmp	r3, r4
    55e0:	e28cc004 	add	r12, r12, #4
    55e4:	8afffff3 	bhi	55b8 <alt_sdmmc_command_send+0x3c>
            cmd_cfg = &default_cfg[counter];
            found = true;
        }
    }

    if (found == false)
    55e8:	e3560000 	cmp	r6, #0
    55ec:	0a000076 	beq	57cc <alt_sdmmc_command_send+0x250>
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    55f0:	e5951000 	ldr	r1, [r5]
    55f4:	e3110a02 	tst	r1, #8192	; 0x2000
    55f8:	0a000008 	beq	5620 <alt_sdmmc_command_send+0xa4>
    55fc:	e3042241 	movw	r2, #16961	; 0x4241
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    5600:	e3043fff 	movw	r3, #20479	; 0x4fff
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    5604:	e340200f 	movt	r2, #15
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    5608:	e34f3f70 	movt	r3, #65392	; 0xff70
    560c:	e513cfb7 	ldr	r12, [r3, #-4023]	; 0xfffff049
    5610:	e31c0c02 	tst	r12, #512	; 0x200
    5614:	0a000001 	beq	5620 <alt_sdmmc_command_send+0xa4>
    }

    if (cmd_cfg->wait_prvdata_complete)
    {
        uint32_t timeout = ALT_SDMMC_TMO_WAITER;
        while (alt_sdmmc_is_busy() && timeout--)
    5618:	e2522001 	subs	r2, r2, #1
    561c:	1afffffa 	bne	560c <alt_sdmmc_command_send+0x90>
            ;
    }

    if (cmd_cfg->data_expected == true)
    5620:	e3110c02 	tst	r1, #512	; 0x200
    const ALT_SDMMC_CMD_CONFIG_t * cmd_cfg = NULL;
    uint32_t counter;
    uint32_t array_count = 0;
    bool found = false;
    /*  Create interrupt mask by command configurations*/
    uint32_t int_mask = ALT_SDMMC_INT_STATUS_RE             /*  Response error*/
    5624:	0301e107 	movweq	lr, #4359	; 0x1107
        uint32_t timeout = ALT_SDMMC_TMO_WAITER;
        while (alt_sdmmc_is_busy() && timeout--)
            ;
    }

    if (cmd_cfg->data_expected == true)
    5628:	1a00004f 	bne	576c <alt_sdmmc_command_send+0x1f0>
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    562c:	e3044fff 	movw	r4, #20479	; 0x4fff
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    5630:	e30f3fff 	movw	r3, #65535	; 0xffff
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    5634:	e34f4f70 	movt	r4, #65392	; 0xff70
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    5638:	e3403001 	movt	r3, #1
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    563c:	e514cfdb 	ldr	r12, [r4, #-4059]	; 0xfffff025
    alt_sdmmc_int_enable(int_mask);
    /*  Setup the Argument Register and send CMD*/
    alt_sdmmc_cmd_arg_set(command_arg);

    /*  Set command configurations*/
    alt_sdmmc_cmd_set(command, cmd_cfg, false);
    5640:	e3a02000 	mov	r2, #0
    5644:	e1a01005 	mov	r1, r5
    5648:	e1a00007 	mov	r0, r7
// Disable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_disable(const uint32_t mask)
{
    alt_clrbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    564c:	e1a0c8ac 	lsr	r12, r12, #17
    5650:	e1a0c88c 	lsl	r12, r12, #17
    5654:	e504cfdb 	str	r12, [r4, #-4059]	; 0xfffff025
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    5658:	e5043fbb 	str	r3, [r4, #-4027]	; 0xfffff045
*/
ALT_STATUS_CODE alt_sdmmc_int_enable(const uint32_t mask)
{
    if (mask & 0x0001ffff)
    {
        alt_setbits_word(ALT_SDMMC_CTL_ADDR, 
    565c:	e514cfff 	ldr	r12, [r4, #-4095]	; 0xfffff001
    5660:	e38cc010 	orr	r12, r12, #16
    5664:	e504cfff 	str	r12, [r4, #-4095]	; 0xfffff001
                     ALT_SDMMC_CTL_INT_EN_SET_MSK);

        alt_setbits_word(ALT_SDMMC_INTMSK_ADDR, mask);
    5668:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
    566c:	e18e3003 	orr	r3, lr, r3
    5670:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
/*
// Set command argument
*/
static __inline ALT_STATUS_CODE alt_sdmmc_cmd_arg_set(uint32_t cmdarg)
{
    alt_write_word(ALT_SDMMC_CMDARG_ADDR, cmdarg);
    5674:	e5048fd7 	str	r8, [r4, #-4055]	; 0xfffff029
    alt_sdmmc_int_enable(int_mask);
    /*  Setup the Argument Register and send CMD*/
    alt_sdmmc_cmd_arg_set(command_arg);

    /*  Set command configurations*/
    alt_sdmmc_cmd_set(command, cmd_cfg, false);
    5678:	ebfffc32 	bl	4748 <alt_sdmmc_cmd_set>
    /*  Send command*/
    alt_sdmmc_cmd_set(command, cmd_cfg, true);
    567c:	e1a00007 	mov	r0, r7
    5680:	e1a01005 	mov	r1, r5
    5684:	e3a02001 	mov	r2, #1
    5688:	ebfffc2e 	bl	4748 <alt_sdmmc_cmd_set>
        dprintf("\nstate %x dma_state %x\n", (int)state, (int)dma_state);
        dprintf("\nCMD = %d ARG = %x\n", (int)command, (int)command_arg);
    }
#endif

    if (cmd_cfg->update_clock_registers_only == true)
    568c:	e5953000 	ldr	r3, [r5]
    5690:	e3130602 	tst	r3, #2097152	; 0x200000
    5694:	1a000039 	bne	5780 <alt_sdmmc_command_send+0x204>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5698:	e5142fff 	ldr	r2, [r4, #-4095]	; 0xfffff001
    569c:	e3120402 	tst	r2, #33554432	; 0x2000000
    56a0:	1a000026 	bne	5740 <alt_sdmmc_command_send+0x1c4>
        return status;
    }

    /* Wait for complete*/
    if (   alt_sdmmc_is_dma_enabled() == ALT_E_FALSE
        || cmd_cfg->data_expected == false)
    56a4:	e304323f 	movw	r3, #16959	; 0x423f
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    56a8:	e3042fff 	movw	r2, #20479	; 0x4fff
        return status;
    }

    /* Wait for complete*/
    if (   alt_sdmmc_is_dma_enabled() == ALT_E_FALSE
        || cmd_cfg->data_expected == false)
    56ac:	e340300f 	movt	r3, #15
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    56b0:	e34f2f70 	movt	r2, #65392	; 0xff70
    56b4:	ea000001 	b	56c0 <alt_sdmmc_command_send+0x144>
static ALT_STATUS_CODE alt_sdmmc_cmd_waiter(void)
{
    ALT_STATUS_CODE status = ALT_E_TMO;
    uint32_t timeout = ALT_SDMMC_TMO_WAITER;
    
    while (--timeout)
    56b8:	e2533001 	subs	r3, r3, #1
    56bc:	0a000049 	beq	57e8 <alt_sdmmc_command_send+0x26c>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    56c0:	e5124fbf 	ldr	r4, [r2, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    56c4:	e30b0bc2 	movw	r0, #48066	; 0xbbc2
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    56c8:	e5121fbf 	ldr	r1, [r2, #-4031]	; 0xfffff041
    56cc:	e304cfff 	movw	r12, #20479	; 0x4fff
    56d0:	e34fcf70 	movt	r12, #65392	; 0xff70
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    56d4:	e0010000 	and	r0, r1, r0
    56d8:	e3500000 	cmp	r0, #0
    56dc:	1a000035 	bne	57b8 <alt_sdmmc_command_send+0x23c>
            status = ALT_E_ERROR;
            break;
        }
        
        /* Check command done*/
        if (int_status & ALT_SDMMC_INT_STATUS_CMD)
    56e0:	e3140004 	tst	r4, #4
    56e4:	0afffff3 	beq	56b8 <alt_sdmmc_command_send+0x13c>
    56e8:	e29a3000 	adds	r3, r10, #0
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    56ec:	e3a02004 	mov	r2, #4
    56f0:	13a03001 	movne	r3, #1
    56f4:	e50c2fbb 	str	r2, [r12, #-4027]	; 0xfffff045
    if (status == ALT_E_ERROR)
    {
        dprintf("alt_sdmmc_cmd_waiter ERROR\n");
    }
#endif
    if ((status == ALT_E_SUCCESS) && response)
    56f8:	e3530000 	cmp	r3, #0
    56fc:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
/*
// Get response of previous command.
*/
static __inline ALT_STATUS_CODE alt_sdmmc_read_short_response(uint32_t *response)
{
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    5700:	e3043fff 	movw	r3, #20479	; 0x4fff
    *response = (uint32_t)(ALT_SDMMC_RESP0_RESPONSE0_GET(resp0));
    5704:	e3a00000 	mov	r0, #0
/*
// Get response of previous command.
*/
static __inline ALT_STATUS_CODE alt_sdmmc_read_short_response(uint32_t *response)
{
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    5708:	e34f3f70 	movt	r3, #65392	; 0xff70
    570c:	e5133fcf 	ldr	r3, [r3, #-4047]	; 0xfffff031
    *response = (uint32_t)(ALT_SDMMC_RESP0_RESPONSE0_GET(resp0));
    5710:	e58a3000 	str	r3, [r10]
    5714:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
    {
        dprintf("\ncommand_type not supported\n");
        return ALT_E_BAD_ARG;
    }

    if (command == ALT_SDMMC_CLK_INDEX)
    5718:	e3770001 	cmn	r7, #1
    ALT_STATUS_CODE status = 0;

    ALT_SDMMC_CMD_CONFIG_t *default_cfg;
    if (command_type == ALT_SDMMC_CMD_TYPE_BASIC)
    {
        default_cfg = cmd_default_cfg;
    571c:	e302ca40 	movw	r12, #10816	; 0x2a40
        array_count = sizeof(cmd_default_cfg)/sizeof(cmd_default_cfg[0]);
    5720:	e3a03010 	mov	r3, #16
    ALT_STATUS_CODE status = 0;

    ALT_SDMMC_CMD_CONFIG_t *default_cfg;
    if (command_type == ALT_SDMMC_CMD_TYPE_BASIC)
    {
        default_cfg = cmd_default_cfg;
    5724:	e340c002 	movt	r12, #2
    {
        dprintf("\ncommand_type not supported\n");
        return ALT_E_BAD_ARG;
    }

    if (command == ALT_SDMMC_CLK_INDEX)
    5728:	1affff9f 	bne	55ac <alt_sdmmc_command_send+0x30>
    {
        cmd_cfg = &cmd_clock_cfg;
    572c:	e59f50c0 	ldr	r5, [pc, #192]	; 57f4 <alt_sdmmc_command_send+0x278>
    if (found == false)
    {
        return ALT_E_BAD_ARG;
    }

    if (cmd_cfg->wait_prvdata_complete)
    5730:	e5951000 	ldr	r1, [r5]
    5734:	e3110a02 	tst	r1, #8192	; 0x2000
    5738:	0affffb8 	beq	5620 <alt_sdmmc_command_send+0xa4>
    573c:	eaffffae 	b	55fc <alt_sdmmc_command_send+0x80>
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    5740:	e5142f7f 	ldr	r2, [r4, #-3967]	; 0xfffff081
    5744:	e3120080 	tst	r2, #128	; 0x80
    5748:	0affffd5 	beq	56a4 <alt_sdmmc_command_send+0x128>
        return status;
    }

    /* Wait for complete*/
    if (   alt_sdmmc_is_dma_enabled() == ALT_E_FALSE
        || cmd_cfg->data_expected == false)
    574c:	e3130c02 	tst	r3, #512	; 0x200
    5750:	0affffd3 	beq	56a4 <alt_sdmmc_command_send+0x128>
    5754:	e29a3000 	adds	r3, r10, #0
    uint32_t int_mask = ALT_SDMMC_INT_STATUS_RE             /*  Response error*/
                      | ALT_SDMMC_INT_STATUS_RTO            /*  Response timeout*/
                      | ALT_SDMMC_INT_STATUS_CD             /*  Card detect (CD) interrupt*/
                      | ALT_SDMMC_INT_STATUS_HLE            /*  Hardware Locked Write Error*/
                      | ALT_SDMMC_INT_STATUS_CMD;           /*  Command done (CD) interrupt*/
    ALT_STATUS_CODE status = 0;
    5758:	e3a00000 	mov	r0, #0
    575c:	13a03001 	movne	r3, #1
    if (status == ALT_E_ERROR)
    {
        dprintf("alt_sdmmc_cmd_waiter ERROR\n");
    }
#endif
    if ((status == ALT_E_SUCCESS) && response)
    5760:	e3530000 	cmp	r3, #0
    5764:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
    5768:	eaffffe4 	b	5700 <alt_sdmmc_command_send+0x184>
                  | ALT_SDMMC_INT_STATUS_FRUN               /*  FIFO underrun/overrun error*/
                  | ALT_SDMMC_INT_STATUS_EBE;               /*  End-bit error*/
        
        if (cmd_cfg->write_active == ALT_SDMMC_TMOD_WRITE)
        {
            int_mask |= ALT_SDMMC_INT_STATUS_TXDR           /*  Transmit FIFO data request (TXDR)*/
    576c:	e3110b01 	tst	r1, #1024	; 0x400
    5770:	e3093ddf 	movw	r3, #40415	; 0x9ddf
    5774:	e30bedef 	movw	lr, #48623	; 0xbdef
    5778:	11a0e003 	movne	lr, r3
    577c:	eaffffaa 	b	562c <alt_sdmmc_command_send+0xb0>
        dprintf("\nstate %x dma_state %x\n", (int)state, (int)dma_state);
        dprintf("\nCMD = %d ARG = %x\n", (int)command, (int)command_arg);
    }
#endif

    if (cmd_cfg->update_clock_registers_only == true)
    5780:	e304323f 	movw	r3, #16959	; 0x423f
    5784:	e340300f 	movt	r3, #15
    5788:	ea000001 	b	5794 <alt_sdmmc_command_send+0x218>
static ALT_STATUS_CODE alt_sdmmc_clock_waiter(void)
{
    ALT_STATUS_CODE status = ALT_E_TMO;
    uint32_t timeout = ALT_SDMMC_TMO_WAITER;
    
    while (--timeout)
    578c:	e2533001 	subs	r3, r3, #1
    5790:	0a000014 	beq	57e8 <alt_sdmmc_command_send+0x26c>
    {
        uint32_t cmd_register = alt_read_word(ALT_SDMMC_CMD_ADDR);
    5794:	e5142fd3 	ldr	r2, [r4, #-4051]	; 0xfffff02d
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    5798:	e30b0bc2 	movw	r0, #48066	; 0xbbc2
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    579c:	e5141fbf 	ldr	r1, [r4, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    57a0:	e0010000 	and	r0, r1, r0
    57a4:	e3500000 	cmp	r0, #0
    57a8:	1a000002 	bne	57b8 <alt_sdmmc_command_send+0x23c>
            status = ALT_E_ERROR;
            break;
        }

        /*  Only for clock command detect complete operation by 0 in start_cmd bit of cmd register*/
        if (ALT_SDMMC_CMD_START_CMD_GET(cmd_register) == ALT_SDMMC_CMD_START_CMD_E_NOSTART)
    57ac:	e3520000 	cmp	r2, #0
    57b0:	bafffff5 	blt	578c <alt_sdmmc_command_send+0x210>
    57b4:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    57b8:	e3020398 	movw	r0, #9112	; 0x2398
    57bc:	e3400002 	movt	r0, #2
    57c0:	ebffeb23 	bl	454 <print_debug>
        int_status = alt_sdmmc_int_status_get();

        /*  Error checking*/
        if (alt_sdmmc_error_status_detect() != ALT_E_SUCCESS)
        {
            status = ALT_E_ERROR;
    57c4:	e3e00000 	mvn	r0, #0
    57c8:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
        }
    }

    if (found == false)
    {
        return ALT_E_BAD_ARG;
    57cc:	e3e00008 	mvn	r0, #8
    57d0:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
        default_cfg = acmd_default_cfg;
        array_count = sizeof(acmd_default_cfg)/sizeof(acmd_default_cfg[0]);
    }
    else
    {
        dprintf("\ncommand_type not supported\n");
    57d4:	e3020444 	movw	r0, #9284	; 0x2444
    57d8:	e3400002 	movt	r0, #2
    57dc:	ebffeb1c 	bl	454 <print_debug>
        return ALT_E_BAD_ARG;
    57e0:	e3e00008 	mvn	r0, #8
    57e4:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
/*
// Waiter of command complete
*/
static ALT_STATUS_CODE alt_sdmmc_cmd_waiter(void)
{
    ALT_STATUS_CODE status = ALT_E_TMO;
    57e8:	e3e0000b 	mvn	r0, #11
    57ec:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
    57f0:	00022a84 	.word	0x00022a84
    57f4:	00022a80 	.word	0x00022a80

000057f8 <alt_sdmmc_card_bus_width_set>:

/*
// Set SD/MMC card width
*/
ALT_STATUS_CODE alt_sdmmc_card_bus_width_set(ALT_SDMMC_CARD_INFO_t * card_info, const ALT_SDMMC_BUS_WIDTH_t width)
{
    57f8:	e92d4038 	push	{r3, r4, r5, lr}
    57fc:	e1a04001 	mov	r4, r1
    uint32_t set_width_arg;
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    if ((card_info->scr_bus_widths & width) == 0)
    5800:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    5804:	e1110003 	tst	r1, r3
    5808:	0a000005 	beq	5824 <alt_sdmmc_card_bus_width_set+0x2c>
    {
        return ALT_E_BAD_ARG;
    }

    switch (width)
    580c:	e3510004 	cmp	r1, #4
    5810:	0a000024 	beq	58a8 <alt_sdmmc_card_bus_width_set+0xb0>
    5814:	e3510008 	cmp	r1, #8
    5818:	0a000003 	beq	582c <alt_sdmmc_card_bus_width_set+0x34>
    581c:	e3510001 	cmp	r1, #1
    5820:	0a000022 	beq	58b0 <alt_sdmmc_card_bus_width_set+0xb8>
        break;
    case ALT_SDMMC_BUS_WIDTH_1:
        set_width_arg = 0x0;
        break;
    default:
        return ALT_E_BAD_ARG;
    5824:	e3e00008 	mvn	r0, #8
    
    /*  Set new bus width in controller register*/
    alt_sdmmc_bus_width_set(width);
    
    return status;
}
    5828:	e8bd8038 	pop	{r3, r4, r5, pc}
    }

    switch (width)
    {
    case ALT_SDMMC_BUS_WIDTH_8:
        set_width_arg = 0x3;
    582c:	e3a05003 	mov	r5, #3
#ifdef LOGGER
    uint32_t response = 0;
#endif

    /*  Activate ACMD commands*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, rca_number, NULL);
    5830:	e3043000 	movw	r3, #16384	; 0x4000
    5834:	e3a00037 	mov	r0, #55	; 0x37
    5838:	e3423673 	movt	r3, #9843	; 0x2673
    583c:	e3a02000 	mov	r2, #0
    5840:	e5931000 	ldr	r1, [r3]
    5844:	ebfffc1f 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    5848:	e3500000 	cmp	r0, #0
    584c:	18bd8038 	popne	{r3, r4, r5, pc}
    alt_sdmmc_read_short_response(&response);
    dprintf("\nALT_SDMMC_APP_CMD response = %x\n", (int)response);
#endif
    
    /*  Send new card bus width*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_ACMD, ALT_SD_SET_BUS_WIDTH, set_width_arg, NULL);
    5850:	e1a03000 	mov	r3, r0
    5854:	e3a01006 	mov	r1, #6
    5858:	e3a00001 	mov	r0, #1
    585c:	e1a02005 	mov	r2, r5
    5860:	ebffff45 	bl	557c <alt_sdmmc_command_send>
    if (status != ALT_E_SUCCESS)
    5864:	e3500000 	cmp	r0, #0
    5868:	18bd8038 	popne	{r3, r4, r5, pc}
// Set SD/MMC bus width
*/
static ALT_STATUS_CODE alt_sdmmc_bus_width_set(const ALT_SDMMC_BUS_WIDTH_t width)
{
    /*  Set config parameters to appropriate registers*/
    switch (width)
    586c:	e3540004 	cmp	r4, #4
    5870:	0a000016 	beq	58d0 <alt_sdmmc_card_bus_width_set+0xd8>
    5874:	e3540008 	cmp	r4, #8
    5878:	0a00000e 	beq	58b8 <alt_sdmmc_card_bus_width_set+0xc0>
    587c:	e3540001 	cmp	r4, #1
    5880:	18bd8038 	popne	{r3, r4, r5, pc}
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET(ALT_SDMMC_CTYPE_CARD_WIDTH2_E_MOD4BIT));
        break;

    case ALT_SDMMC_BUS_WIDTH_1:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    5884:	e3043fff 	movw	r3, #20479	; 0x4fff
    5888:	e34f3f70 	movt	r3, #65392	; 0xff70
    588c:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    5890:	e3c22801 	bic	r2, r2, #65536	; 0x10000
    5894:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET(ALT_SDMMC_CTYPE_CARD_WIDTH1_E_NON8BIT));
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    5898:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    589c:	e3c22001 	bic	r2, r2, #1
    58a0:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
    58a4:	e8bd8038 	pop	{r3, r4, r5, pc}
    {
    case ALT_SDMMC_BUS_WIDTH_8:
        set_width_arg = 0x3;
        break;
    case ALT_SDMMC_BUS_WIDTH_4:
        set_width_arg = 0x2;
    58a8:	e3a05002 	mov	r5, #2
    58ac:	eaffffdf 	b	5830 <alt_sdmmc_card_bus_width_set+0x38>
        break;
    case ALT_SDMMC_BUS_WIDTH_1:
        set_width_arg = 0x0;
    58b0:	e3a05000 	mov	r5, #0
        break;
    58b4:	eaffffdd 	b	5830 <alt_sdmmc_card_bus_width_set+0x38>
{
    /*  Set config parameters to appropriate registers*/
    switch (width)
    {
    case ALT_SDMMC_BUS_WIDTH_8:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    58b8:	e3043fff 	movw	r3, #20479	; 0x4fff
    58bc:	e34f3f70 	movt	r3, #65392	; 0xff70
    58c0:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    58c4:	e3822801 	orr	r2, r2, #65536	; 0x10000
    58c8:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
    58cc:	e8bd8038 	pop	{r3, r4, r5, pc}
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET_MSK,
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET(ALT_SDMMC_CTYPE_CARD_WIDTH1_E_MOD8BIT));
        break;

    case ALT_SDMMC_BUS_WIDTH_4:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    58d0:	e3043fff 	movw	r3, #20479	; 0x4fff
    58d4:	e34f3f70 	movt	r3, #65392	; 0xff70
    58d8:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    58dc:	e3c22801 	bic	r2, r2, #65536	; 0x10000
    58e0:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET_MSK,
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET(ALT_SDMMC_CTYPE_CARD_WIDTH1_E_NON8BIT));
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    58e4:	e5132fe7 	ldr	r2, [r3, #-4071]	; 0xfffff019
    58e8:	e3822001 	orr	r2, r2, #1
    58ec:	e5032fe7 	str	r2, [r3, #-4071]	; 0xfffff019
    58f0:	e8bd8038 	pop	{r3, r4, r5, pc}

#if !defined(_MSC_VER)
__attribute__((weak)) ALT_STATUS_CODE alt_cache_system_purge(void * address, size_t length)
{
    return ALT_E_SUCCESS;
}
    58f4:	e3a00000 	mov	r0, #0
    58f8:	e12fff1e 	bx	lr

000058fc <alt_sdmmc_reset>:
/*
// Check whether SD/MMC controller is enable
*/
bool alt_sdmmc_card_pwr_is_on(void)
{
    if (ALT_SDMMC_PWREN_POWER_EN_GET(alt_read_word(ALT_SDMMC_PWREN_ADDR)) == 
    58fc:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
//Reset the SD/MMC controller by stopping any data transfers in progress and
//putting the controller into reset and reinit it after reset complete.
*/
ALT_STATUS_CODE alt_sdmmc_reset()
{
    5900:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
/*
// Check whether SD/MMC controller is enable
*/
bool alt_sdmmc_card_pwr_is_on(void)
{
    if (ALT_SDMMC_PWREN_POWER_EN_GET(alt_read_word(ALT_SDMMC_PWREN_ADDR)) == 
    5904:	e34f3f70 	movt	r3, #65392	; 0xff70
/*
//Reset the SD/MMC controller by stopping any data transfers in progress and
//putting the controller into reset and reinit it after reset complete.
*/
ALT_STATUS_CODE alt_sdmmc_reset()
{
    5908:	e24dd008 	sub	sp, sp, #8
/*
// Check whether SD/MMC controller is enable
*/
bool alt_sdmmc_card_pwr_is_on(void)
{
    if (ALT_SDMMC_PWREN_POWER_EN_GET(alt_read_word(ALT_SDMMC_PWREN_ADDR)) == 
    590c:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
    5910:	e2122001 	ands	r2, r2, #1
    5914:	03045000 	movweq	r5, #16384	; 0x4000
    5918:	03425673 	movteq	r5, #9843	; 0x2673
    591c:	0a00000d 	beq	5958 <alt_sdmmc_reset+0x5c>
    5920:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
    5924:	e3120001 	tst	r2, #1
    5928:	0a000057 	beq	5a8c <alt_sdmmc_reset+0x190>
    {
        return ALT_E_SUCCESS;
    }

    /* Else clear enable bit of SD/MMC_enable register*/
    alt_clrbits_word(ALT_SDMMC_PWREN_ADDR,
    592c:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    5930:	e30f1fff 	movw	r1, #65535	; 0xffff
    
    /*  Clear interrupt status*/
    alt_sdmmc_int_clear(ALT_SDMMC_INT_STATUS_ALL);

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    5934:	e3045000 	movw	r5, #16384	; 0x4000
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    5938:	e3401001 	movt	r1, #1
bool alt_sdmmc_card_pwr_is_on(void)
{
    if (ALT_SDMMC_PWREN_POWER_EN_GET(alt_read_word(ALT_SDMMC_PWREN_ADDR)) == 
        ALT_SDMMC_PWREN_POWER_EN_E_ON)
    {
        return true;
    593c:	e3a02001 	mov	r2, #1
    
    /*  Clear interrupt status*/
    alt_sdmmc_int_clear(ALT_SDMMC_INT_STATUS_ALL);

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    5940:	e3425673 	movt	r5, #9843	; 0x2673
    {
        return ALT_E_SUCCESS;
    }

    /* Else clear enable bit of SD/MMC_enable register*/
    alt_clrbits_word(ALT_SDMMC_PWREN_ADDR,
    5944:	e3c00001 	bic	r0, r0, #1
    5948:	e5030ffb 	str	r0, [r3, #-4091]	; 0xfffff005
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    594c:	e5031fbb 	str	r1, [r3, #-4027]	; 0xfffff045
    
    /*  Clear interrupt status*/
    alt_sdmmc_int_clear(ALT_SDMMC_INT_STATUS_ALL);

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    5950:	e3a03000 	mov	r3, #0
    5954:	e5853000 	str	r3, [r5]
*/
static ALT_STATUS_CODE alt_sdmmc_rstmgr_strobe(void)
{
    volatile uint32_t timeout = ALT_SDMMC_RESET_TMO_INIT;
#ifdef soc_cv_av
    alt_setbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_SDMMC_SET_MSK);
    5958:	e3053fff 	movw	r3, #24575	; 0x5fff
/*
// Assert reset SD/MMC module by reset manager, wait, deassert
*/
static ALT_STATUS_CODE alt_sdmmc_rstmgr_strobe(void)
{
    volatile uint32_t timeout = ALT_SDMMC_RESET_TMO_INIT;
    595c:	e3a01a02 	mov	r1, #8192	; 0x2000
#ifdef soc_cv_av
    alt_setbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_SDMMC_SET_MSK);
    5960:	e34f3fd0 	movt	r3, #65488	; 0xffd0
/*
// Assert reset SD/MMC module by reset manager, wait, deassert
*/
static ALT_STATUS_CODE alt_sdmmc_rstmgr_strobe(void)
{
    volatile uint32_t timeout = ALT_SDMMC_RESET_TMO_INIT;
    5964:	e58d1004 	str	r1, [sp, #4]
#ifdef soc_cv_av
    alt_setbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_SDMMC_SET_MSK);
    5968:	e5131feb 	ldr	r1, [r3, #-4075]	; 0xfffff015
    596c:	e3811501 	orr	r1, r1, #4194304	; 0x400000
    5970:	e5031feb 	str	r1, [r3, #-4075]	; 0xfffff015
#else
    alt_setbits_word(ALT_RSTMGR_PER0MODRST_ADDR, ALT_RSTMGR_PER0MODRST_SDMMC_SET_MSK);
#endif
    /*  Wait while SD/MMC module is reseting*/
    while (timeout--)
    5974:	e59d3004 	ldr	r3, [sp, #4]
    5978:	e3530000 	cmp	r3, #0
    597c:	e2433001 	sub	r3, r3, #1
    5980:	e58d3004 	str	r3, [sp, #4]
    5984:	1afffffa 	bne	5974 <alt_sdmmc_reset+0x78>
        ;

#ifdef soc_cv_av
    /*  Deassert the appropriate SD/MMC module reset signal via the Reset Manager Peripheral Reset register.*/
    alt_clrbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_SDMMC_SET_MSK);
    5988:	e3053fff 	movw	r3, #24575	; 0x5fff
    }
    
    /*  Reset SD/MMC module by reset manager*/
    alt_sdmmc_rstmgr_strobe();
    
    if (already_enabled)
    598c:	e3520000 	cmp	r2, #0
    while (timeout--)
        ;

#ifdef soc_cv_av
    /*  Deassert the appropriate SD/MMC module reset signal via the Reset Manager Peripheral Reset register.*/
    alt_clrbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_SDMMC_SET_MSK);
    5990:	e34f3fd0 	movt	r3, #65488	; 0xffd0
        /*  Re-enable card power*/
        status = alt_sdmmc_card_pwr_on();
    }

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    5994:	e3a01000 	mov	r1, #0
    while (timeout--)
        ;

#ifdef soc_cv_av
    /*  Deassert the appropriate SD/MMC module reset signal via the Reset Manager Peripheral Reset register.*/
    alt_clrbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_SDMMC_SET_MSK);
    5998:	e5132feb 	ldr	r2, [r3, #-4075]	; 0xfffff015
    599c:	e3c22501 	bic	r2, r2, #4194304	; 0x400000
    59a0:	e5032feb 	str	r2, [r3, #-4075]	; 0xfffff015
/*
// Power on of the card.
*/
ALT_STATUS_CODE alt_sdmmc_card_pwr_on(void)
{
    alt_setbits_word(ALT_SDMMC_PWREN_ADDR, 
    59a4:	13043fff 	movwne	r3, #20479	; 0x4fff
    59a8:	134f3f70 	movtne	r3, #65392	; 0xff70
    59ac:	15132ffb 	ldrne	r2, [r3, #-4091]	; 0xfffff005
    59b0:	13822001 	orrne	r2, r2, #1
    59b4:	15032ffb 	strne	r2, [r3, #-4091]	; 0xfffff005

/*
//Reset the SD/MMC controller by stopping any data transfers in progress and
//putting the controller into reset and reinit it after reset complete.
*/
ALT_STATUS_CODE alt_sdmmc_reset()
    59b8:	e59f20dc 	ldr	r2, [pc, #220]	; 5a9c <alt_sdmmc_reset+0x1a0>

    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.ch   = 1;
    59bc:	e5d5e020 	ldrb	lr, [r5, #32]
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    59c0:	e5d58023 	ldrb	r8, [r5, #35]	; 0x23
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
    59c4:	e1d5c2b4 	ldrh	r12, [r5, #36]	; 0x24

/*
//Reset the SD/MMC controller by stopping any data transfers in progress and
//putting the controller into reset and reinit it after reset complete.
*/
ALT_STATUS_CODE alt_sdmmc_reset()
    59c8:	e2426010 	sub	r6, r2, #16
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    59cc:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
    59d0:	e38ee010 	orr	lr, lr, #16

/*
//Reset the SD/MMC controller by stopping any data transfers in progress and
//putting the controller into reset and reinit it after reset complete.
*/
ALT_STATUS_CODE alt_sdmmc_reset()
    59d4:	e1a07006 	mov	r7, r6
    59d8:	e2824e7f 	add	r4, r2, #2032	; 0x7f0
            dma_desc[count].des3.fld.bap2_or_next = (uint32_t) dma_desc;
        }
        else
        {
            /*  Set pointer to the next element in the ring*/
            dma_desc[count].des3.fld.bap2_or_next = (uint32_t) (&dma_desc[count + 1]);
    59dc:	e1a03002 	mov	r3, r2
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    59e0:	e7c78391 	bfi	r8, r1, #7, #1
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
    59e4:	e7c5e291 	bfi	lr, r1, #5, #1
        dma_desc[count].des1.fld.bs1  = 0;
    59e8:	e7ccc011 	bfi	r12, r1, #0, #13
        dma_desc[count].des2.fld.bap1 = 0;
    59ec:	e7df0011 	bfi	r0, r1, #0, #32
        /*  Re-enable card power*/
        status = alt_sdmmc_card_pwr_on();
    }

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    59f0:	e5851000 	str	r1, [r5]
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    59f4:	e5c58023 	strb	r8, [r5, #35]	; 0x23
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
    59f8:	e5c5e020 	strb	lr, [r5, #32]
        dma_desc[count].des1.fld.bs1  = 0;
    59fc:	e1c5c2b4 	strh	r12, [r5, #36]	; 0x24
        dma_desc[count].des2.fld.bap1 = 0;
    5a00:	e5850028 	str	r0, [r5, #40]	; 0x28
    5a04:	e585202c 	str	r2, [r5, #44]	; 0x2c

    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.ch   = 1;
    5a08:	e5d3c000 	ldrb	r12, [r3]
    5a0c:	e2822010 	add	r2, r2, #16
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    5a10:	e5d3e003 	ldrb	lr, [r3, #3]
        dma_desc[count].des0.fld.er   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;

        /*  Create chain description list*/
        if (count == (ALT_SDMMC_DMA_DESC_COUNT - 1))
    5a14:	e1520004 	cmp	r2, r4
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
    5a18:	e1d300b4 	ldrh	r0, [r3, #4]
        dma_desc[count].des2.fld.bap1 = 0;
    5a1c:	e5931008 	ldr	r1, [r3, #8]
    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
    5a20:	e38cc010 	orr	r12, r12, #16
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    5a24:	e7c7e39f 	bfc	lr, #7, #1
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
    5a28:	e7c5c29f 	bfc	r12, #5, #1
        dma_desc[count].des1.fld.bs1  = 0;
    5a2c:	e7cc001f 	bfc	r0, #0, #13
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    5a30:	e5c3e003 	strb	lr, [r3, #3]
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    5a34:	e7df101f 	bfc	r1, #0, #32
    /*  Initialising descriptor chain*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.ch   = 1;
        dma_desc[count].des0.fld.er   = 0;
    5a38:	e5c3c000 	strb	r12, [r3]
        dma_desc[count].des1.fld.bs1  = 0;
    5a3c:	e1c300b4 	strh	r0, [r3, #4]
        dma_desc[count].des2.fld.bap1 = 0;
    5a40:	e5831008 	str	r1, [r3, #8]

        /*  Create chain description list*/
        if (count == (ALT_SDMMC_DMA_DESC_COUNT - 1))
    5a44:	1583200c 	strne	r2, [r3, #12]
            dma_desc[count].des3.fld.bap2_or_next = (uint32_t) dma_desc;
        }
        else
        {
            /*  Set pointer to the next element in the ring*/
            dma_desc[count].des3.fld.bap2_or_next = (uint32_t) (&dma_desc[count + 1]);
    5a48:	11a03002 	movne	r3, r2
    5a4c:	1affffed 	bne	5a08 <alt_sdmmc_reset+0x10c>
    5a50:	e583700c 	str	r7, [r3, #12]
        }
    }
    
    dma_cur_descr = dma_desc;
    
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5a54:	e3a01b02 	mov	r1, #2048	; 0x800
    5a58:	e59f0040 	ldr	r0, [pc, #64]	; 5aa0 <alt_sdmmc_reset+0x1a4>
            /*  Set pointer to the next element in the ring*/
            dma_desc[count].des3.fld.bap2_or_next = (uint32_t) (&dma_desc[count + 1]);
        }
    }
    
    dma_cur_descr = dma_desc;
    5a5c:	e5856820 	str	r6, [r5, #2080]	; 0x820
    
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5a60:	ebffef0f 	bl	16a4 <alt_cache_system_purge>
    alt_sdmmc_desc_chain_init();

    if (status == ALT_E_SUCCESS)
    {
        /* Enable default clock for alt_sdmmc_command_send to work*/
        alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true));
    5a64:	e3043fff 	movw	r3, #20479	; 0x4fff
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    5a68:	e3a01000 	mov	r1, #0
    alt_sdmmc_desc_chain_init();

    if (status == ALT_E_SUCCESS)
    {
        /* Enable default clock for alt_sdmmc_command_send to work*/
        alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true));
    5a6c:	e34f3f70 	movt	r3, #65392	; 0xff70
    5a70:	e3a02001 	mov	r2, #1
    5a74:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    5a78:	e3e00000 	mvn	r0, #0
    5a7c:	e1a02001 	mov	r2, r1
    5a80:	ebfffb90 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    alt_write_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_CTLLER_RST_SET_MSK |
                                       ALT_SDMMC_CTL_FIFO_RST_SET_MSK |
                                       ALT_SDMMC_CTL_DMA_RST_SET_MSK);
#endif
    return status;
}
    5a84:	e28dd008 	add	sp, sp, #8
    5a88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    5a8c:	e3045000 	movw	r5, #16384	; 0x4000
bool alt_sdmmc_card_pwr_is_on(void)
{
    if (ALT_SDMMC_PWREN_POWER_EN_GET(alt_read_word(ALT_SDMMC_PWREN_ADDR)) == 
        ALT_SDMMC_PWREN_POWER_EN_E_ON)
    {
        return true;
    5a90:	e3a02001 	mov	r2, #1
    5a94:	e3425673 	movt	r5, #9843	; 0x2673
    5a98:	eaffffae 	b	5958 <alt_sdmmc_reset+0x5c>
    5a9c:	26734030 	.word	0x26734030
    5aa0:	26734020 	.word	0x26734020

00005aa4 <alt_sdmmc_init>:
/*
// Initialize the specified SD/MMC controller instance for use and return a device
// handle referencing it.
*/
ALT_STATUS_CODE alt_sdmmc_init()
{
    5aa4:	e92d4008 	push	{r3, lr}
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    if (alt_clk_is_enabled(ALT_CLK_SDMMC) != ALT_E_TRUE)
    5aa8:	e3a00030 	mov	r0, #48	; 0x30
    5aac:	eb000bb3 	bl	8980 <alt_clk_is_enabled>
    5ab0:	e3500001 	cmp	r0, #1
    5ab4:	1a000006 	bne	5ad4 <alt_sdmmc_init+0x30>

    /*  Query the SD/MMC clock.*/
    if (status == ALT_E_SUCCESS)
    {
#ifdef soc_cv_av
        status = alt_clk_freq_get(ALT_CLK_SDMMC, &clock_freq);
    5ab8:	e3a00030 	mov	r0, #48	; 0x30
    5abc:	e59f1018 	ldr	r1, [pc, #24]	; 5adc <alt_sdmmc_init+0x38>
    5ac0:	eb001b19 	bl	c72c <alt_clk_freq_get>
        status = alt_clk_freq_get_sdmmc(&clock_freq);
#endif
    }

    /*  Reset SD/MMC module*/
    if (status == ALT_E_SUCCESS)
    5ac4:	e3500000 	cmp	r0, #0
    5ac8:	18bd8008 	popne	{r3, pc}
    {
        status = alt_sdmmc_reset();
    }

    return status;
}
    5acc:	e8bd4008 	pop	{r3, lr}
    }

    /*  Reset SD/MMC module*/
    if (status == ALT_E_SUCCESS)
    {
        status = alt_sdmmc_reset();
    5ad0:	eaffff89 	b	58fc <alt_sdmmc_reset>
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    if (alt_clk_is_enabled(ALT_CLK_SDMMC) != ALT_E_TRUE)
    {
        return ALT_E_BAD_CLK;
    5ad4:	e3e0000d 	mvn	r0, #13
    {
        status = alt_sdmmc_reset();
    }

    return status;
}
    5ad8:	e8bd8008 	pop	{r3, pc}
    5adc:	26734004 	.word	0x26734004

00005ae0 <alt_sdmmc_uninit>:

/*
// Uninitialize the SD/MMC controller referenced by the sdmmc_dev handle.
*/
ALT_STATUS_CODE alt_sdmmc_uninit(void)
{
    5ae0:	e92d4038 	push	{r3, r4, r5, lr}
// Clear descriptors of chain for DMA operations
*/
static ALT_STATUS_CODE alt_sdmmc_desc_chain_clear()
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;
    5ae4:	e59f50ac 	ldr	r5, [pc, #172]	; 5b98 <alt_sdmmc_uninit+0xb8>
    5ae8:	e1a03005 	mov	r3, r5
}

/*
// Uninitialize the SD/MMC controller referenced by the sdmmc_dev handle.
*/
ALT_STATUS_CODE alt_sdmmc_uninit(void)
    5aec:	e285eb02 	add	lr, r5, #2048	; 0x800

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
    5af0:	e5d30000 	ldrb	r0, [r3]
    5af4:	e2833010 	add	r3, r3, #16
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    5af8:	e153000e 	cmp	r3, lr
    {
        dma_desc[count].des0.fld.own  = 0;
    5afc:	e553c00d 	ldrb	r12, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    5b00:	e20000f9 	and	r0, r0, #249	; 0xf9
        dma_desc[count].des1.fld.bs1  = 0;
    5b04:	e15310bc 	ldrh	r1, [r3, #-12]
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    5b08:	e7c3019f 	bfc	r0, #3, #1
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    5b0c:	e5132008 	ldr	r2, [r3, #-8]
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    5b10:	e7c7c39f 	bfc	r12, #7, #1
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    5b14:	e5430010 	strb	r0, [r3, #-16]
        dma_desc[count].des1.fld.bs1  = 0;
    5b18:	e7cc101f 	bfc	r1, #0, #13
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    5b1c:	e543c00d 	strb	r12, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    5b20:	e7df201f 	bfc	r2, #0, #32
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
    5b24:	e14310bc 	strh	r1, [r3, #-12]
        dma_desc[count].des2.fld.bap1 = 0;
    5b28:	e5032008 	str	r2, [r3, #-8]
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    5b2c:	1affffef 	bne	5af0 <alt_sdmmc_uninit+0x10>
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    5b30:	e3044000 	movw	r4, #16384	; 0x4000
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5b34:	e3a01b02 	mov	r1, #2048	; 0x800
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    5b38:	e3424673 	movt	r4, #9843	; 0x2673
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5b3c:	e2840020 	add	r0, r4, #32
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    5b40:	e5845820 	str	r5, [r4, #2080]	; 0x820
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5b44:	ebffeed6 	bl	16a4 <alt_cache_system_purge>
/*
// Check whether SD/MMC controller is enable
*/
bool alt_sdmmc_card_pwr_is_on(void)
{
    if (ALT_SDMMC_PWREN_POWER_EN_GET(alt_read_word(ALT_SDMMC_PWREN_ADDR)) == 
    5b48:	e3043fff 	movw	r3, #20479	; 0x4fff
    5b4c:	e34f3f70 	movt	r3, #65392	; 0xff70
    5b50:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
    5b54:	e3120001 	tst	r2, #1
    5b58:	0a000007 	beq	5b7c <alt_sdmmc_uninit+0x9c>
    {
        return ALT_E_SUCCESS;
    }

    /* Else clear enable bit of SD/MMC_enable register*/
    alt_clrbits_word(ALT_SDMMC_PWREN_ADDR,
    5b5c:	e5131ffb 	ldr	r1, [r3, #-4091]	; 0xfffff005
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    5b60:	e30f2fff 	movw	r2, #65535	; 0xffff
    5b64:	e3402001 	movt	r2, #1
    {
        return ALT_E_SUCCESS;
    }

    /* Else clear enable bit of SD/MMC_enable register*/
    alt_clrbits_word(ALT_SDMMC_PWREN_ADDR,
    5b68:	e3c11001 	bic	r1, r1, #1
    5b6c:	e5031ffb 	str	r1, [r3, #-4091]	; 0xfffff005
// Clears the specified SD/MMC controller interrupt status conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_RINTSTS_ADDR, mask);
    5b70:	e5032fbb 	str	r2, [r3, #-4027]	; 0xfffff045
    
    /*  Clear interrupt status*/
    alt_sdmmc_int_clear(ALT_SDMMC_INT_STATUS_ALL);

    /*  Relative card address has not been read yet*/
    rca_number = 0;
    5b74:	e3a03000 	mov	r3, #0
    5b78:	e5843000 	str	r3, [r4]
// Reset SD/MMC module by reset manager without deassert
*/
static ALT_STATUS_CODE alt_sdmmc_rstmgr_set(void)
{
#ifdef soc_cv_av
    alt_setbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_SDMMC_SET_MSK);
    5b7c:	e3053fff 	movw	r3, #24575	; 0x5fff
    {
        status = alt_sdmmc_rstmgr_set();
    }

    return status;
}
    5b80:	e3a00000 	mov	r0, #0
// Reset SD/MMC module by reset manager without deassert
*/
static ALT_STATUS_CODE alt_sdmmc_rstmgr_set(void)
{
#ifdef soc_cv_av
    alt_setbits_word(ALT_RSTMGR_PERMODRST_ADDR, ALT_RSTMGR_PERMODRST_SDMMC_SET_MSK);
    5b84:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    5b88:	e5132feb 	ldr	r2, [r3, #-4075]	; 0xfffff015
    5b8c:	e3822501 	orr	r2, r2, #4194304	; 0x400000
    5b90:	e5032feb 	str	r2, [r3, #-4075]	; 0xfffff015
    {
        status = alt_sdmmc_rstmgr_set();
    }

    return status;
}
    5b94:	e8bd8038 	pop	{r3, r4, r5, pc}
    5b98:	26734020 	.word	0x26734020

00005b9c <alt_sdmmc_card_switch_function>:
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    5b9c:	e3042fff 	movw	r2, #20479	; 0x4fff

/*
// Send CMD6 switch to card and get the response and status
*/
static ALT_STATUS_CODE alt_sdmmc_card_switch_function(uint32_t function_arg, uint8_t * switch_status)
{
    5ba0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    5ba4:	e34f2f70 	movt	r2, #65392	; 0xff70

/*
// Send CMD6 switch to card and get the response and status
*/
static ALT_STATUS_CODE alt_sdmmc_card_switch_function(uint32_t function_arg, uint8_t * switch_status)
{
    5ba8:	e1a07000 	mov	r7, r0
    5bac:	e1a06001 	mov	r6, r1
/*
// FIFO reset
*/
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    5bb0:	e3a03a02 	mov	r3, #8192	; 0x2000
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    5bb4:	e5125fe3 	ldr	r5, [r2, #-4067]	; 0xfffff01d

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5bb8:	e1a01002 	mov	r1, r2
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    5bbc:	e5120fe3 	ldr	r0, [r2, #-4067]	; 0xfffff01d
    5bc0:	e1a00820 	lsr	r0, r0, #16
    5bc4:	e1a00800 	lsl	r0, r0, #16
    5bc8:	e3800040 	orr	r0, r0, #64	; 0x40
    5bcc:	e5020fe3 	str	r0, [r2, #-4067]	; 0xfffff01d
/*
// Set byte count
*/
static __inline ALT_STATUS_CODE alt_sdmmc_byte_count_set(uint32_t count)
{
    alt_replbits_word(ALT_SDMMC_BYTCNT_ADDR,
    5bd0:	e5120fdf 	ldr	r0, [r2, #-4063]	; 0xfffff021
    5bd4:	e3a00040 	mov	r0, #64	; 0x40
    5bd8:	e5020fdf 	str	r0, [r2, #-4063]	; 0xfffff021
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    5bdc:	e5120fff 	ldr	r0, [r2, #-4095]	; 0xfffff001
    5be0:	e3800002 	orr	r0, r0, #2
    5be4:	e5020fff 	str	r0, [r2, #-4095]	; 0xfffff001
    5be8:	ea000001 	b	5bf4 <alt_sdmmc_card_switch_function+0x58>
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
                                                && --timeout)
    5bec:	e2533001 	subs	r3, r3, #1
    5bf0:	0a000076 	beq	5dd0 <alt_sdmmc_card_switch_function+0x234>

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5bf4:	e511cfff 	ldr	r12, [r1, #-4095]	; 0xfffff001
    5bf8:	e3042fff 	movw	r2, #20479	; 0x4fff
    5bfc:	e34f2f70 	movt	r2, #65392	; 0xff70
    5c00:	e31c0002 	tst	r12, #2
    5c04:	1afffff8 	bne	5bec <alt_sdmmc_card_switch_function+0x50>
                                                && --timeout)
        ;

    /*  If fifo reset still are active, return timeout error*/
    if (timeout == 0)
    5c08:	e3530000 	cmp	r3, #0
    5c0c:	0a00006f 	beq	5dd0 <alt_sdmmc_card_switch_function+0x234>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5c10:	e5123fff 	ldr	r3, [r2, #-4095]	; 0xfffff001
    5c14:	e3130402 	tst	r3, #33554432	; 0x2000000
    5c18:	0a00000f 	beq	5c5c <alt_sdmmc_card_switch_function+0xc0>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    5c1c:	e5123f7f 	ldr	r3, [r2, #-3967]	; 0xfffff081
    5c20:	e3130080 	tst	r3, #128	; 0x80
    5c24:	0a00000c 	beq	5c5c <alt_sdmmc_card_switch_function+0xc0>
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    5c28:	e5120fff 	ldr	r0, [r2, #-4095]	; 0xfffff001
/*
// DMA reset
*/
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    5c2c:	e3a03a02 	mov	r3, #8192	; 0x2000

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5c30:	e1a01002 	mov	r1, r2
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    5c34:	e3800004 	orr	r0, r0, #4
    5c38:	e5020fff 	str	r0, [r2, #-4095]	; 0xfffff001
    5c3c:	ea000001 	b	5c48 <alt_sdmmc_card_switch_function+0xac>
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
                                                && --timeout)
    5c40:	e2533001 	subs	r3, r3, #1
    5c44:	0a000061 	beq	5dd0 <alt_sdmmc_card_switch_function+0x234>

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5c48:	e5112fff 	ldr	r2, [r1, #-4095]	; 0xfffff001
    5c4c:	e3120004 	tst	r2, #4
    5c50:	1afffffa 	bne	5c40 <alt_sdmmc_card_switch_function+0xa4>
                                                && --timeout)
        ;

    /*  If dma reset still are active, return timeout error*/
    if (timeout == 0)
    5c54:	e3530000 	cmp	r3, #0
    5c58:	0a00005c 	beq	5dd0 <alt_sdmmc_card_switch_function+0x234>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5c5c:	e3043fff 	movw	r3, #20479	; 0x4fff
    5c60:	e34f3f70 	movt	r3, #65392	; 0xff70
    5c64:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    5c68:	e3120402 	tst	r2, #33554432	; 0x2000000
    5c6c:	1a00005a 	bne	5ddc <alt_sdmmc_card_switch_function+0x240>
    {
        return status;
    }

    /* Send transfer command*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SWITCH, function_arg, NULL);
    5c70:	e3a00006 	mov	r0, #6
    5c74:	e1a01007 	mov	r1, r7
    5c78:	e3a02000 	mov	r2, #0
    5c7c:	ebfffb11 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    #ifdef LOGGER
    alt_sdmmc_read_short_response(&response);
    dprintf("\nALT_SDMMC_SWITCH response = %x\n", (int)response);
    #endif
    if (status != ALT_E_SUCCESS)
    5c80:	e2504000 	subs	r4, r0, #0
    5c84:	1a000052 	bne	5dd4 <alt_sdmmc_card_switch_function+0x238>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5c88:	e3048fff 	movw	r8, #20479	; 0x4fff
    5c8c:	e34f8f70 	movt	r8, #65392	; 0xff70
    5c90:	e5183fff 	ldr	r3, [r8, #-4095]	; 0xfffff001
    5c94:	e3130402 	tst	r3, #33554432	; 0x2000000
    5c98:	1a000078 	bne	5e80 <alt_sdmmc_card_switch_function+0x2e4>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    5c9c:	e3042fff 	movw	r2, #20479	; 0x4fff
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    5ca0:	e3a04040 	mov	r4, #64	; 0x40
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    5ca4:	e34f2f70 	movt	r2, #65392	; 0xff70
    5ca8:	e5121fbf 	ldr	r1, [r2, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    5cac:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    5cb0:	e0013003 	and	r3, r1, r3
    5cb4:	e3530000 	cmp	r3, #0
    5cb8:	1a0000bc 	bne	5fb0 <alt_sdmmc_card_switch_function+0x414>
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    5cbc:	e5121fb7 	ldr	r1, [r2, #-4023]	; 0xfffff049
        }

        do
        {
            read_freeze =  ((transfer_mode == ALT_SDMMC_TMOD_READ)
                                            && (alt_sdmmc_fifo_is_empty() == true));
    5cc0:	e304323f 	movw	r3, #16959	; 0x423f
    5cc4:	e340300f 	movt	r3, #15
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    5cc8:	e7e01151 	ubfx	r1, r1, #2, #1
    5ccc:	ea000003 	b	5ce0 <alt_sdmmc_card_switch_function+0x144>
    5cd0:	e5121fb7 	ldr	r1, [r2, #-4023]	; 0xfffff049
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
#ifdef LOGGER
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
    5cd4:	e2533001 	subs	r3, r3, #1
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    5cd8:	e7e01151 	ubfx	r1, r1, #2, #1
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
#ifdef LOGGER
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
    5cdc:	0a0000a3 	beq	5f70 <alt_sdmmc_card_switch_function+0x3d4>
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
                return status;
            }
        }
        while (read_freeze || write_freeze);
    5ce0:	e3510000 	cmp	r1, #0
    5ce4:	1afffff9 	bne	5cd0 <alt_sdmmc_card_switch_function+0x134>
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    5ce8:	e5123fb7 	ldr	r3, [r2, #-4023]	; 0xfffff049
        /*  Read out the resulting received data as they come in.*/

        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);
    5cec:	e1a0c124 	lsr	r12, r4, #2
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    5cf0:	e7ec38d3 	ubfx	r3, r3, #17, #13
        /*  Read out the resulting received data as they come in.*/

        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);
    5cf4:	e15c0003 	cmp	r12, r3
    5cf8:	21a0c003 	movcs	r12, r3

            for (i = 0; i < level; i++)
    5cfc:	e35c0000 	cmp	r12, #0
    5d00:	0a000025 	beq	5d9c <alt_sdmmc_card_switch_function+0x200>
    5d04:	e35c0008 	cmp	r12, #8
}

/*
// Send CMD6 switch to card and get the response and status
*/
static ALT_STATUS_CODE alt_sdmmc_card_switch_function(uint32_t function_arg, uint8_t * switch_status)
    5d08:	e24c8007 	sub	r8, r12, #7
    5d0c:	9a000095 	bls	5f68 <alt_sdmmc_card_switch_function+0x3cc>
    5d10:	e2863020 	add	r3, r6, #32
    5d14:	e1a00001 	mov	r0, r1
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    5d18:	e512edff 	ldr	lr, [r2, #-3583]	; 0xfffff201
    5d1c:	f5d3f068 	pld	[r3, #104]	; 0x68
}

/*
// Send CMD6 switch to card and get the response and status
*/
static ALT_STATUS_CODE alt_sdmmc_card_switch_function(uint32_t function_arg, uint8_t * switch_status)
    5d20:	e1a07003 	mov	r7, r3
    5d24:	e2833020 	add	r3, r3, #32
    5d28:	e2801009 	add	r1, r0, #9
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    5d2c:	e503e040 	str	lr, [r3, #-64]	; 0xffffffc0
    5d30:	e1510008 	cmp	r1, r8
    5d34:	e512edff 	ldr	lr, [r2, #-3583]	; 0xfffff201
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    5d38:	e2801008 	add	r1, r0, #8
    5d3c:	e1a00001 	mov	r0, r1
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    5d40:	e503e03c 	str	lr, [r3, #-60]	; 0xffffffc4
    5d44:	e512edff 	ldr	lr, [r2, #-3583]	; 0xfffff201
    5d48:	e503e038 	str	lr, [r3, #-56]	; 0xffffffc8
    5d4c:	e512edff 	ldr	lr, [r2, #-3583]	; 0xfffff201
    5d50:	e503e034 	str	lr, [r3, #-52]	; 0xffffffcc
    5d54:	e512edff 	ldr	lr, [r2, #-3583]	; 0xfffff201
    5d58:	e503e030 	str	lr, [r3, #-48]	; 0xffffffd0
    5d5c:	e512edff 	ldr	lr, [r2, #-3583]	; 0xfffff201
    5d60:	e503e02c 	str	lr, [r3, #-44]	; 0xffffffd4
    5d64:	e512edff 	ldr	lr, [r2, #-3583]	; 0xfffff201
    5d68:	e503e028 	str	lr, [r3, #-40]	; 0xffffffd8
    5d6c:	e512edff 	ldr	lr, [r2, #-3583]	; 0xfffff201
    5d70:	e503e024 	str	lr, [r3, #-36]	; 0xffffffdc
    5d74:	3affffe7 	bcc	5d18 <alt_sdmmc_card_switch_function+0x17c>
}

/*
// Send CMD6 switch to card and get the response and status
*/
static ALT_STATUS_CODE alt_sdmmc_card_switch_function(uint32_t function_arg, uint8_t * switch_status)
    5d78:	e2873004 	add	r3, r7, #4
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    5d7c:	e5120dff 	ldr	r0, [r2, #-3583]	; 0xfffff201
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    5d80:	e2811001 	add	r1, r1, #1
    5d84:	e151000c 	cmp	r1, r12
    5d88:	e2833004 	add	r3, r3, #4
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    5d8c:	e5030008 	str	r0, [r3, #-8]
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    5d90:	3afffff9 	bcc	5d7c <alt_sdmmc_card_switch_function+0x1e0>
}

/*
// Send CMD6 switch to card and get the response and status
*/
static ALT_STATUS_CODE alt_sdmmc_card_switch_function(uint32_t function_arg, uint8_t * switch_status)
    5d94:	e1a0c10c 	lsl	r12, r12, #2
    5d98:	e086600c 	add	r6, r6, r12

    uint32_t data_size = size;
    bool read_freeze  = false;
    bool write_freeze = false;
    
    while (data_size > 0)
    5d9c:	e054400c 	subs	r4, r4, r12
    5da0:	1affffc0 	bne	5ca8 <alt_sdmmc_card_switch_function+0x10c>
        if (i % 8 == 7)
            dprintf("\n");
    }
    #endif
    /* Wait for data transfer complete*/
    status = alt_sdmmc_data_done_waiter();
    5da4:	ebfffa89 	bl	47d0 <alt_sdmmc_data_done_waiter>
    if (status != ALT_E_SUCCESS)
    5da8:	e2504000 	subs	r4, r0, #0
    5dac:	1a00007b 	bne	5fa0 <alt_sdmmc_card_switch_function+0x404>
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    5db0:	e3043fff 	movw	r3, #20479	; 0x4fff
    5db4:	e6ff5075 	uxth	r5, r5
    5db8:	e34f3f70 	movt	r3, #65392	; 0xff70
    5dbc:	e5132fe3 	ldr	r2, [r3, #-4067]	; 0xfffff01d
    5dc0:	e1a02822 	lsr	r2, r2, #16
    5dc4:	e1852802 	orr	r2, r5, r2, lsl #16
    5dc8:	e5032fe3 	str	r2, [r3, #-4067]	; 0xfffff01d
        return status;
    }

    /*  Restore block size*/
    alt_sdmmc_block_size_set(prev_blk_size);
    return status;
    5dcc:	ea000000 	b	5dd4 <alt_sdmmc_card_switch_function+0x238>
        /*  Error checking*/
        status = alt_sdmmc_error_status_detect();

        if (status != ALT_E_SUCCESS)
        {
            dprintf("Interrupt error detected\n");
    5dd0:	e3e0400b 	mvn	r4, #11
    }

    /*  Restore block size*/
    alt_sdmmc_block_size_set(prev_blk_size);
    return status;
}
    5dd4:	e1a00004 	mov	r0, r4
    5dd8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    5ddc:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
    5de0:	e3130080 	tst	r3, #128	; 0x80
    5de4:	0affffa1 	beq	5c70 <alt_sdmmc_card_switch_function+0xd4>
// Clear descriptors of chain for DMA operations
*/
static ALT_STATUS_CODE alt_sdmmc_desc_chain_clear()
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;
    5de8:	e59f81e0 	ldr	r8, [pc, #480]	; 5fd0 <alt_sdmmc_card_switch_function+0x434>
    5dec:	e1a03008 	mov	r3, r8
}

/*
// Send CMD6 switch to card and get the response and status
*/
static ALT_STATUS_CODE alt_sdmmc_card_switch_function(uint32_t function_arg, uint8_t * switch_status)
    5df0:	e2881b02 	add	r1, r8, #2048	; 0x800

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
    5df4:	e5d3e000 	ldrb	lr, [r3]
    5df8:	e2833010 	add	r3, r3, #16
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    5dfc:	e1530001 	cmp	r3, r1
    {
        dma_desc[count].des0.fld.own  = 0;
    5e00:	e553400d 	ldrb	r4, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    5e04:	e20ee0f9 	and	lr, lr, #249	; 0xf9
        dma_desc[count].des1.fld.bs1  = 0;
    5e08:	e153c0bc 	ldrh	r12, [r3, #-12]
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    5e0c:	e7c3e19f 	bfc	lr, #3, #1
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    5e10:	e5132008 	ldr	r2, [r3, #-8]
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    5e14:	e7c7439f 	bfc	r4, #7, #1
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    5e18:	e543e010 	strb	lr, [r3, #-16]
        dma_desc[count].des1.fld.bs1  = 0;
    5e1c:	e7ccc01f 	bfc	r12, #0, #13
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    5e20:	e543400d 	strb	r4, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    5e24:	e7df201f 	bfc	r2, #0, #32
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
    5e28:	e143c0bc 	strh	r12, [r3, #-12]
        dma_desc[count].des2.fld.bap1 = 0;
    5e2c:	e5032008 	str	r2, [r3, #-8]
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    5e30:	1affffef 	bne	5df4 <alt_sdmmc_card_switch_function+0x258>
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    5e34:	e3044000 	movw	r4, #16384	; 0x4000
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5e38:	e3a01b02 	mov	r1, #2048	; 0x800
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    5e3c:	e3424673 	movt	r4, #9843	; 0x2673
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5e40:	e2840020 	add	r0, r4, #32
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    5e44:	e5848820 	str	r8, [r4, #2080]	; 0x820
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5e48:	ebffee15 	bl	16a4 <alt_cache_system_purge>
    uint32_t bmod_set_mask = ALT_SDMMC_BMOD_PBL_SET_MSK
                           | ALT_SDMMC_BMOD_FB_SET_MSK
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);
    5e4c:	e5942820 	ldr	r2, [r4, #2080]	; 0x820
    5e50:	e3043fff 	movw	r3, #20479	; 0x4fff
    5e54:	e34f3f70 	movt	r3, #65392	; 0xff70
    5e58:	e5032f77 	str	r2, [r3, #-3959]	; 0xfffff089

    alt_replbits_word(ALT_SDMMC_BMOD_ADDR, bmod_set_mask, bmod_set_value);
    5e5c:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    5e60:	e3c22e77 	bic	r2, r2, #1904	; 0x770
    5e64:	e3c2200e 	bic	r2, r2, #14
    5e68:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
// Enable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_enable(const uint32_t mask)
{
    alt_setbits_word(ALT_SDMMC_IDINTEN_ADDR, mask);
    5e6c:	e5132f6f 	ldr	r2, [r3, #-3951]	; 0xfffff091
    5e70:	e3822fcd 	orr	r2, r2, #820	; 0x334
    5e74:	e3822003 	orr	r2, r2, #3
    5e78:	e5032f6f 	str	r2, [r3, #-3951]	; 0xfffff091
    5e7c:	eaffff7b 	b	5c70 <alt_sdmmc_card_switch_function+0xd4>
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    5e80:	e5183f7f 	ldr	r3, [r8, #-3967]	; 0xfffff081
    5e84:	e3130080 	tst	r3, #128	; 0x80
    5e88:	0affff83 	beq	5c9c <alt_sdmmc_card_switch_function+0x100>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    5e8c:	e5181fbf 	ldr	r1, [r8, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    5e90:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    dprintf("\nalt_sdmmc_dma_trans_helper: buf_len = %d\n",
                                                (int)buf_len);
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    /* Pointer to current descriptor*/
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;
    5e94:	e3042000 	movw	r2, #16384	; 0x4000
    5e98:	e3422673 	movt	r2, #9843	; 0x2673
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    5e9c:	e0013003 	and	r3, r1, r3
    dprintf("\nalt_sdmmc_dma_trans_helper: buf_len = %d\n",
                                                (int)buf_len);
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    /* Pointer to current descriptor*/
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;
    5ea0:	e5924820 	ldr	r4, [r2, #2080]	; 0x820
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    5ea4:	e3530000 	cmp	r3, #0
    5ea8:	1a000035 	bne	5f84 <alt_sdmmc_card_switch_function+0x3e8>
    5eac:	e3a07040 	mov	r7, #64	; 0x40
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    5eb0:	e3009337 	movw	r9, #823	; 0x337
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    5eb4:	e3a0a001 	mov	r10, #1
    5eb8:	ea000003 	b	5ecc <alt_sdmmc_card_switch_function+0x330>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    5ebc:	e5181fbf 	ldr	r1, [r8, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    5ec0:	e0013003 	and	r3, r1, r3
    5ec4:	e3530000 	cmp	r3, #0
    5ec8:	1a00002d 	bne	5f84 <alt_sdmmc_card_switch_function+0x3e8>
        {
            status = ALT_E_ERROR;
            break;
        }
        /* If current descriptor is free then fill it*/
        if (cur_dma_desc->des0.fld.own == 0)
    5ecc:	e5d43003 	ldrb	r3, [r4, #3]
    5ed0:	e1b023a3 	lsrs	r2, r3, #7
    5ed4:	1a000015 	bne	5f30 <alt_sdmmc_card_switch_function+0x394>
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
    5ed8:	e5d41000 	ldrb	r1, [r4]
            break;
        }
        /* If current descriptor is free then fill it*/
        if (cur_dma_desc->des0.fld.own == 0)
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
    5edc:	e3570c02 	cmp	r7, #512	; 0x200
    5ee0:	31a02007 	movcc	r2, r7
    5ee4:	23a02c02 	movcs	r2, #512	; 0x200
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    5ee8:	e257c040 	subs	r12, r7, #64	; 0x40
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    5eec:	e1d400b4 	ldrh	r0, [r4, #4]
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    5ef0:	e27ce000 	rsbs	lr, r12, #0
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
            /* Descriptor could be used*/
            cur_dma_desc->des0.fld.own = 1;
    5ef4:	e3833080 	orr	r3, r3, #128	; 0x80
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    5ef8:	e0bee00c 	adcs	lr, lr, r12
    5efc:	e3811002 	orr	r1, r1, #2

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    5f00:	e0577002 	subs	r7, r7, r2
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    5f04:	e7c3119e 	bfi	r1, lr, #3, #1

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    5f08:	13a0c000 	movne	r12, #0
    5f0c:	03a0c001 	moveq	r12, #1
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    5f10:	e7cc0012 	bfi	r0, r2, #0, #13

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    5f14:	e7c2111c 	bfi	r1, r12, #2, #1
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
            /* Set address of buffer in memory*/
            cur_dma_desc->des2.fld.bap1 = cur_buffer;
    5f18:	e5846008 	str	r6, [r4, #8]
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    5f1c:	e1c400b4 	strh	r0, [r4, #4]
            dprintf("socfpga_setup_dma_add: des_adrdr %08X des2_paddr %08X des1_len %08X len_left %08X\n", 
                        (int)cur_dma_desc, (int)cur_buffer, (int)set_len, (int)len_left);
#endif

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
    5f20:	e0866002 	add	r6, r6, r2
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    5f24:	e5c41000 	strb	r1, [r4]
            /* Descriptor could be used*/
            cur_dma_desc->des0.fld.own = 1;
    5f28:	e5c43003 	strb	r3, [r4, #3]
            /* Currernt descriptor set to the next element */
            cur_dma_desc = (ALT_SDMMC_DMA_BUF_DESC_t *)cur_dma_desc->des3.fld.bap2_or_next;
    5f2c:	e594400c 	ldr	r4, [r4, #12]
        }
        
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    5f30:	e3a01b02 	mov	r1, #2048	; 0x800
    5f34:	e59f0094 	ldr	r0, [pc, #148]	; 5fd0 <alt_sdmmc_card_switch_function+0x434>
    5f38:	ebffedd9 	bl	16a4 <alt_cache_system_purge>
/*
// Returns the current SD/MMC controller interrupt IDMAC status conditions.
*/
uint32_t alt_sdmmc_dma_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_IDSTS_ADDR);
    5f3c:	e5183f73 	ldr	r3, [r8, #-3955]	; 0xfffff08d
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
        
        idmac_status = alt_sdmmc_dma_int_status_get();

        /*  If DMA status is as descriptor unavailable then resume transfer and clean interrupt status*/
        if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_DU)
    5f40:	e3130010 	tst	r3, #16
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    5f44:	15089f73 	strne	r9, [r8, #-3955]	; 0xfffff08d
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    5f48:	1508af7b 	strne	r10, [r8, #-3963]	; 0xfffff085
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
        
        idmac_status = alt_sdmmc_dma_int_status_get();

        /*  If DMA status is as descriptor unavailable then resume transfer and clean interrupt status*/
        if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_DU)
    5f4c:	1a000001 	bne	5f58 <alt_sdmmc_card_switch_function+0x3bc>
        {
            alt_sdmmc_dma_int_clear(ALT_SDMMC_DMA_INT_STATUS_ALL);
            alt_sdmmc_poll_demand_set(0x1);
        }
        /*  If DMA status is another abnormal then break with error*/
        else if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_AI)
    5f50:	e3130c02 	tst	r3, #512	; 0x200
    5f54:	1a00000f 	bne	5f98 <alt_sdmmc_card_switch_function+0x3fc>
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    5f58:	e3570000 	cmp	r7, #0
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    5f5c:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    5f60:	1affffd5 	bne	5ebc <alt_sdmmc_card_switch_function+0x320>
    5f64:	eaffff8e 	b	5da4 <alt_sdmmc_card_switch_function+0x208>
}

/*
// Send CMD6 switch to card and get the response and status
*/
static ALT_STATUS_CODE alt_sdmmc_card_switch_function(uint32_t function_arg, uint8_t * switch_status)
    5f68:	e1a07006 	mov	r7, r6
    5f6c:	eaffff81 	b	5d78 <alt_sdmmc_card_switch_function+0x1dc>
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
            {
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
    5f70:	e3020480 	movw	r0, #9344	; 0x2480
                return status;
    5f74:	e3e0400b 	mvn	r4, #11
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
            {
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
    5f78:	e3400002 	movt	r0, #2
    5f7c:	ebffe934 	bl	454 <print_debug>
    5f80:	eaffff93 	b	5dd4 <alt_sdmmc_card_switch_function+0x238>
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    5f84:	e3020398 	movw	r0, #9112	; 0x2398
        uint32_t idmac_status;
        /* Error checking*/
        status = alt_sdmmc_error_status_detect();
        if (status != ALT_E_SUCCESS)
        {
            status = ALT_E_ERROR;
    5f88:	e3e04000 	mvn	r4, #0
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    5f8c:	e3400002 	movt	r0, #2
    5f90:	ebffe92f 	bl	454 <print_debug>
    5f94:	eaffff8e 	b	5dd4 <alt_sdmmc_card_switch_function+0x238>
            alt_sdmmc_poll_demand_set(0x1);
        }
        /*  If DMA status is another abnormal then break with error*/
        else if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_AI)
        {
            status = ALT_E_ERROR;
    5f98:	e3e04000 	mvn	r4, #0
    5f9c:	eaffff8c 	b	5dd4 <alt_sdmmc_card_switch_function+0x238>
    #endif
    /* Wait for data transfer complete*/
    status = alt_sdmmc_data_done_waiter();
    if (status != ALT_E_SUCCESS)
    {
        dprintf("alt_sdmmc_data_done_waiter failed\n");
    5fa0:	e30204a8 	movw	r0, #9384	; 0x24a8
    5fa4:	e3400002 	movt	r0, #2
    5fa8:	ebffe929 	bl	454 <print_debug>
        return status;
    5fac:	eaffff88 	b	5dd4 <alt_sdmmc_card_switch_function+0x238>
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    5fb0:	e3020398 	movw	r0, #9112	; 0x2398
        /*  Error checking*/
        status = alt_sdmmc_error_status_detect();

        if (status != ALT_E_SUCCESS)
        {
            dprintf("Interrupt error detected\n");
    5fb4:	e3e04000 	mvn	r4, #0
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    5fb8:	e3400002 	movt	r0, #2
    5fbc:	ebffe924 	bl	454 <print_debug>
        /*  Error checking*/
        status = alt_sdmmc_error_status_detect();

        if (status != ALT_E_SUCCESS)
        {
            dprintf("Interrupt error detected\n");
    5fc0:	e3020464 	movw	r0, #9316	; 0x2464
    5fc4:	e3400002 	movt	r0, #2
    5fc8:	ebffe921 	bl	454 <print_debug>
    5fcc:	eaffff80 	b	5dd4 <alt_sdmmc_card_switch_function+0x238>
    5fd0:	26734020 	.word	0x26734020

00005fd4 <alt_sdmmc_card_enum_sd>:

/*
// Enumerated Card Stack enumerate SD card type, including SDSC, SDHC and SDXC
*/
static ALT_STATUS_CODE alt_sdmmc_card_enum_sd(ALT_SDMMC_CARD_INFO_t *card_info)
{
    5fd4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    dprintf("\nalt_sdmmc_card_enum_sd\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ALT_SDMMC_RESPONSE_t response_long;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    5fd8:	e3045000 	movw	r5, #16384	; 0x4000
    5fdc:	e3425673 	movt	r5, #9843	; 0x2673
    5fe0:	e30e12d7 	movw	r1, #58071	; 0xe2d7
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    5fe4:	e3043fff 	movw	r3, #20479	; 0x4fff

/*
// Enumerated Card Stack enumerate SD card type, including SDSC, SDHC and SDXC
*/
static ALT_STATUS_CODE alt_sdmmc_card_enum_sd(ALT_SDMMC_CARD_INFO_t *card_info)
{
    5fe8:	e24dd050 	sub	sp, sp, #80	; 0x50
    dprintf("\nalt_sdmmc_card_enum_sd\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ALT_SDMMC_RESPONSE_t response_long;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    5fec:	e5954004 	ldr	r4, [r5, #4]
    5ff0:	e3401053 	movt	r1, #83	; 0x53
    uint32_t response = 0;
    5ff4:	e3a02000 	mov	r2, #0
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    5ff8:	e34f3f70 	movt	r3, #65392	; 0xff70
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ALT_SDMMC_RESPONSE_t response_long;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    uint32_t response = 0;
    5ffc:	e58d2000 	str	r2, [sp]

/*
// Enumerated Card Stack enumerate SD card type, including SDSC, SDHC and SDXC
*/
static ALT_STATUS_CODE alt_sdmmc_card_enum_sd(ALT_SDMMC_CARD_INFO_t *card_info)
{
    6000:	e1a06000 	mov	r6, r0
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6004:	e5130fb7 	ldr	r0, [r3, #-4023]	; 0xfffff049
    dprintf("\nalt_sdmmc_card_enum_sd\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ALT_SDMMC_RESPONSE_t response_long;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    6008:	e1a04524 	lsr	r4, r4, #10
    600c:	e084c491 	umull	r12, r4, r1, r4
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6010:	e3100c02 	tst	r0, #512	; 0x200
    dprintf("\nalt_sdmmc_card_enum_sd\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ALT_SDMMC_RESPONSE_t response_long;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    6014:	e1a04124 	lsr	r4, r4, #2
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6018:	1a000003 	bne	602c <alt_sdmmc_card_enum_sd+0x58>
        return ALT_E_ERROR;
    }

    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(false));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    601c:	e1a01002 	mov	r1, r2
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    }

    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(false));
    6020:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    6024:	e3e00000 	mvn	r0, #0
    6028:	ebfffa26 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    uint32_t c_size_high;
    static const uint32_t tran_speed_mul_x10[] = { 0, 10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80 };
    static const uint32_t freq_unit[] = { 100000, 1000000, 10000000, 100000000 };

    alt_sdmmc_card_clk_disable();
    status = alt_sdmmc_card_clk_div_set(clk_div);
    602c:	e1a00004 	mov	r0, r4
    6030:	ebfffb38 	bl	4d18 <alt_sdmmc_card_clk_div_set>
    if (status != ALT_E_SUCCESS)
    6034:	e2504000 	subs	r4, r0, #0
    6038:	0a000002 	beq	6048 <alt_sdmmc_card_enum_sd+0x74>
    /*  Read switch info*/
    status = alt_sdmmc_card_read_switch(card_info);

    /*  Enter data state*/
    return status;
}
    603c:	e1a00004 	mov	r0, r4
    6040:	e28dd050 	add	sp, sp, #80	; 0x50
    6044:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6048:	e3043fff 	movw	r3, #20479	; 0x4fff
    604c:	e34f3f70 	movt	r3, #65392	; 0xff70
    6050:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
    6054:	e3120c02 	tst	r2, #512	; 0x200
    6058:	1a000005 	bne	6074 <alt_sdmmc_card_enum_sd+0xa0>
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    605c:	e3a02001 	mov	r2, #1
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    6060:	e1a01004 	mov	r1, r4
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    6064:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    6068:	e3e00000 	mvn	r0, #0
    606c:	e1a02004 	mov	r2, r4
    6070:	ebfffa14 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
        return status;
    }
    alt_sdmmc_card_clk_enable(false);
    
    /*  Resets all cards to Idle State*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_GO_IDLE_STATE, 0x0, NULL);
    6074:	e3a00000 	mov	r0, #0
    6078:	e1a01000 	mov	r1, r0
    607c:	e1a02000 	mov	r2, r0
    6080:	ebfffa10 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6084:	e2504000 	subs	r4, r0, #0
    6088:	1affffeb 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
    }

    /*  Idle State*/

    /*  For only SDC V2. Check voltage range. 0xAA Check pattern, 2.7-3.6V*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_IF_COND, 0x1AA, &response);
    608c:	e3a00008 	mov	r0, #8
    6090:	e30011aa 	movw	r1, #426	; 0x1aa
    6094:	e1a0200d 	mov	r2, sp
    6098:	ebfffa0a 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    609c:	e2504000 	subs	r4, r0, #0
    60a0:	1affffe5 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
        ocr_reg |= (1 << 30);
    }

    do
    {
        volatile uint32_t timeout = 1000000;
    60a4:	e3047240 	movw	r7, #16960	; 0x4240
    60a8:	e340700f 	movt	r7, #15

        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, 0x0, &response);
    60ac:	e3a00037 	mov	r0, #55	; 0x37
    60b0:	e3a01000 	mov	r1, #0
    60b4:	e1a0200d 	mov	r2, sp
        ocr_reg |= (1 << 30);
    }

    do
    {
        volatile uint32_t timeout = 1000000;
    60b8:	e58d7004 	str	r7, [sp, #4]

        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, 0x0, &response);
    60bc:	ebfffa01 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
        if (status != ALT_E_SUCCESS)
    60c0:	e2504000 	subs	r4, r0, #0
    60c4:	1affffdc 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
        alt_sdmmc_read_short_response(&response);
        dprintf("\nALT_SDMMC_APP_CMD response = %x\n", (int)response);
#endif
        
        /*  Wait while SD/MMC module is reseting*/
        while (timeout--)
    60c8:	e59d3004 	ldr	r3, [sp, #4]
    60cc:	e3530000 	cmp	r3, #0
    60d0:	e2433001 	sub	r3, r3, #1
    60d4:	e58d3004 	str	r3, [sp, #4]
    60d8:	1afffffa 	bne	60c8 <alt_sdmmc_card_enum_sd+0xf4>
            ;
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_ACMD, ALT_SD_SEND_OP_COND, 0x40FF8000, &response);
    60dc:	e3a02902 	mov	r2, #32768	; 0x8000
    60e0:	e3a00001 	mov	r0, #1
    60e4:	e3a01029 	mov	r1, #41	; 0x29
    60e8:	e34420ff 	movt	r2, #16639	; 0x40ff
    60ec:	e1a0300d 	mov	r3, sp
    60f0:	ebfffd21 	bl	557c <alt_sdmmc_command_send>
        if (status != ALT_E_SUCCESS)
    60f4:	e2504000 	subs	r4, r0, #0
    60f8:	1affffcf 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
#ifdef LOGGER
        alt_sdmmc_read_short_response(&response);
        dprintf("\nALT_SD_SEND_OP_COND response = %x\n", (int)response);
#endif
    }
    while ((response & (1UL << 31)) == 0);
    60fc:	e59d3000 	ldr	r3, [sp]
    6100:	e3530000 	cmp	r3, #0
    6104:	aaffffe8 	bge	60ac <alt_sdmmc_card_enum_sd+0xd8>
    
    /* Asks any card to send their CID numbers on the CMD line.*/
    /* (Any card that is connected to the host will respond.)*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_ALL_SEND_CID, 0x0, /*&response*/NULL);
    6108:	e1a01004 	mov	r1, r4
    610c:	e1a02004 	mov	r2, r4
    6110:	e3a00002 	mov	r0, #2
    6114:	ebfff9eb 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6118:	e2504000 	subs	r4, r0, #0
    611c:	1affffc6 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
            (int)response_long.resp2,
            (int)response_long.resp1,
            (int)response_long.resp0);
#endif
    /*  Asks the card to publish a new relative address (RCA).*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SET_RELATIVE_ADDR, 0x0, &response);
    6120:	e1a01004 	mov	r1, r4
    6124:	e3a00003 	mov	r0, #3
    6128:	e1a0200d 	mov	r2, sp
    612c:	ebfff9e5 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6130:	e2504000 	subs	r4, r0, #0
    6134:	1affffc0 	bne	603c <alt_sdmmc_card_enum_sd+0x68>

#ifdef LOGGER
    dprintf("\nALT_SDMMC_SET_RELATIVE_ADDR response = %x\n", (int)response);
#endif
    /*  Expect R6 response, new bit 31:16 RCA bit 15:0 card status*/
    RCA_number = response & 0xFFFF0000;
    6138:	e1dd30b2 	ldrh	r3, [sp, #2]
    rca_number = RCA_number;

    /*  BEGIN Stand-by state*/

    /*  Addressed card sends its card identification (CID) on the CMD line.*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_CID, rca_number, NULL);
    613c:	e1a02004 	mov	r2, r4
    6140:	e3a0000a 	mov	r0, #10
#ifdef LOGGER
    dprintf("\nALT_SDMMC_SET_RELATIVE_ADDR response = %x\n", (int)response);
#endif
    /*  Expect R6 response, new bit 31:16 RCA bit 15:0 card status*/
    RCA_number = response & 0xFFFF0000;
    rca_number = RCA_number;
    6144:	e3047000 	movw	r7, #16384	; 0x4000
    6148:	e3427673 	movt	r7, #9843	; 0x2673

#ifdef LOGGER
    dprintf("\nALT_SDMMC_SET_RELATIVE_ADDR response = %x\n", (int)response);
#endif
    /*  Expect R6 response, new bit 31:16 RCA bit 15:0 card status*/
    RCA_number = response & 0xFFFF0000;
    614c:	e1a03803 	lsl	r3, r3, #16
    rca_number = RCA_number;

    /*  BEGIN Stand-by state*/

    /*  Addressed card sends its card identification (CID) on the CMD line.*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_CID, rca_number, NULL);
    6150:	e1a01003 	mov	r1, r3
#ifdef LOGGER
    dprintf("\nALT_SDMMC_SET_RELATIVE_ADDR response = %x\n", (int)response);
#endif
    /*  Expect R6 response, new bit 31:16 RCA bit 15:0 card status*/
    RCA_number = response & 0xFFFF0000;
    rca_number = RCA_number;
    6154:	e5853000 	str	r3, [r5]

    /*  BEGIN Stand-by state*/

    /*  Addressed card sends its card identification (CID) on the CMD line.*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_CID, rca_number, NULL);
    6158:	ebfff9da 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    615c:	e2504000 	subs	r4, r0, #0
    6160:	1affffb5 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
            (int)response_long.resp0);
#endif

    /*  Addressed card sends its card-specific data (CSD) */
    /*  on the CMD line.*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_CSD, rca_number, &response);
    6164:	e3a00009 	mov	r0, #9
    6168:	e5971000 	ldr	r1, [r7]
    616c:	e1a0200d 	mov	r2, sp
    6170:	ebfff9d4 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6174:	e2504000 	subs	r4, r0, #0
    6178:	1affffaf 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
/*
// Get long response of previous command.
*/
ALT_STATUS_CODE alt_sdmmc_read_long_response(ALT_SDMMC_RESPONSE_t *response)
{
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    617c:	e3042fff 	movw	r2, #20479	; 0x4fff
            (int)response_long.resp3,
            (int)response_long.resp2,
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    6180:	e3a01001 	mov	r1, #1
/*
// Get long response of previous command.
*/
ALT_STATUS_CODE alt_sdmmc_read_long_response(ALT_SDMMC_RESPONSE_t *response)
{
    uint32_t resp0 = alt_read_word(ALT_SDMMC_RESP0_ADDR);
    6184:	e34f2f70 	movt	r2, #65392	; 0xff70
    6188:	e512cfcf 	ldr	r12, [r2, #-4047]	; 0xfffff031
    uint32_t resp1 = alt_read_word(ALT_SDMMC_RESP1_ADDR);
    618c:	e5120fcb 	ldr	r0, [r2, #-4043]	; 0xfffff035
    uint32_t resp2 = alt_read_word(ALT_SDMMC_RESP2_ADDR);
    6190:	e5123fc7 	ldr	r3, [r2, #-4039]	; 0xfffff039
    uint32_t resp3 = alt_read_word(ALT_SDMMC_RESP3_ADDR);
    6194:	e5122fc3 	ldr	r2, [r2, #-4035]	; 0xfffff03d
            (int)response_long.resp2,
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    card_info->max_w_blkln = 1 << ALT_SDMMC_CSD_MAX_W_BLK_GET(response_long.resp0);
    6198:	e7e3ab5c 	ubfx	r10, r12, #22, #4
    card_info->csd_ccc = ALT_SDMMC_CSD_CCC_GET(response_long.resp2);
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    619c:	e7e0cadc 	ubfx	r12, r12, #21, #1
            (int)response_long.resp2,
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    card_info->max_w_blkln = 1 << ALT_SDMMC_CSD_MAX_W_BLK_GET(response_long.resp0);
    61a0:	e1a0aa11 	lsl	r10, r1, r10
    card_info->csd_ccc = ALT_SDMMC_CSD_CCC_GET(response_long.resp2);
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    61a4:	e5c6c015 	strb	r12, [r6, #21]
            (int)response_long.resp3,
            (int)response_long.resp2,
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    61a8:	e7e38853 	ubfx	r8, r3, #16, #4
    card_info->max_w_blkln = 1 << ALT_SDMMC_CSD_MAX_W_BLK_GET(response_long.resp0);
    card_info->csd_ccc = ALT_SDMMC_CSD_CCC_GET(response_long.resp2);
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    rate_unit = ALT_SDMMC_CSD_SPEED_RATE_GET(response_long.resp3);
    time_val = ALT_SDMMC_CSD_SPEED_TIME_GET(response_long.resp3);
    61ac:	e7e3c1d2 	ubfx	r12, r2, #3, #4
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    card_info->max_w_blkln = 1 << ALT_SDMMC_CSD_MAX_W_BLK_GET(response_long.resp0);
    card_info->csd_ccc = ALT_SDMMC_CSD_CCC_GET(response_long.resp2);
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    rate_unit = ALT_SDMMC_CSD_SPEED_RATE_GET(response_long.resp3);
    61b0:	e2024007 	and	r4, r2, #7
    time_val = ALT_SDMMC_CSD_SPEED_TIME_GET(response_long.resp3);
    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if ((time_val != 0) && (rate_unit <= 3))
    61b4:	e29c7000 	adds	r7, r12, #0
            (int)response_long.resp3,
            (int)response_long.resp2,
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    61b8:	e1a01811 	lsl	r1, r1, r8
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    rate_unit = ALT_SDMMC_CSD_SPEED_RATE_GET(response_long.resp3);
    time_val = ALT_SDMMC_CSD_SPEED_TIME_GET(response_long.resp3);
    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if ((time_val != 0) && (rate_unit <= 3))
    61bc:	13a07001 	movne	r7, #1
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    card_info->max_w_blkln = 1 << ALT_SDMMC_CSD_MAX_W_BLK_GET(response_long.resp0);
    card_info->csd_ccc = ALT_SDMMC_CSD_CCC_GET(response_long.resp2);
    61c0:	e1a08a23 	lsr	r8, r3, #20
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    rate_unit = ALT_SDMMC_CSD_SPEED_RATE_GET(response_long.resp3);
    time_val = ALT_SDMMC_CSD_SPEED_TIME_GET(response_long.resp3);
    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if ((time_val != 0) && (rate_unit <= 3))
    61c4:	e3540003 	cmp	r4, #3
            (int)response_long.resp3,
            (int)response_long.resp2,
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    61c8:	e586100c 	str	r1, [r6, #12]
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    rate_unit = ALT_SDMMC_CSD_SPEED_RATE_GET(response_long.resp3);
    time_val = ALT_SDMMC_CSD_SPEED_TIME_GET(response_long.resp3);
    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if ((time_val != 0) && (rate_unit <= 3))
    61cc:	83a07000 	movhi	r7, #0
            (int)response_long.resp2,
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    card_info->max_w_blkln = 1 << ALT_SDMMC_CSD_MAX_W_BLK_GET(response_long.resp0);
    61d0:	e586a010 	str	r10, [r6, #16]
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    rate_unit = ALT_SDMMC_CSD_SPEED_RATE_GET(response_long.resp3);
    time_val = ALT_SDMMC_CSD_SPEED_TIME_GET(response_long.resp3);
    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if ((time_val != 0) && (rate_unit <= 3))
    61d4:	e3570000 	cmp	r7, #0
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    card_info->max_w_blkln = 1 << ALT_SDMMC_CSD_MAX_W_BLK_GET(response_long.resp0);
    card_info->csd_ccc = ALT_SDMMC_CSD_CCC_GET(response_long.resp2);
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    61d8:	e7e077d3 	ubfx	r7, r3, #15, #1
            (int)response_long.resp1,
            (int)response_long.resp0);
    #endif
    card_info->max_r_blkln = 1 << ALT_SDMMC_CSD_MAX_R_BLK_GET(response_long.resp2);
    card_info->max_w_blkln = 1 << ALT_SDMMC_CSD_MAX_W_BLK_GET(response_long.resp0);
    card_info->csd_ccc = ALT_SDMMC_CSD_CCC_GET(response_long.resp2);
    61dc:	e586801c 	str	r8, [r6, #28]
    card_info->partial_r_allowed = ALT_SDMMC_CSD_PART_R_ALLOW_GET(response_long.resp2);
    61e0:	e5c67014 	strb	r7, [r6, #20]
    card_info->partial_w_allowed = ALT_SDMMC_CSD_PART_W_ALLOW_GET(response_long.resp0);
    rate_unit = ALT_SDMMC_CSD_SPEED_RATE_GET(response_long.resp3);
    time_val = ALT_SDMMC_CSD_SPEED_TIME_GET(response_long.resp3);
    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if ((time_val != 0) && (rate_unit <= 3))
    61e4:	0a0000f1 	beq	65b0 <alt_sdmmc_card_enum_sd+0x5dc>
    {
        /*  uint32_t speed_rate = (rate_unit == 0) ? 100 : pow(10, rate_unit - 1) * 1000;*/
        uint32_t speed_rate = freq_unit[rate_unit];
        card_info->xfer_speed = speed_rate * tran_speed_mul_x10[time_val] / 10;
    61e8:	e3021348 	movw	r1, #9032	; 0x2348
    61ec:	e30ceccd 	movw	lr, #52429	; 0xcccd
    61f0:	e3401002 	movt	r1, #2
    61f4:	e34ceccc 	movt	lr, #52428	; 0xcccc
    time_val = ALT_SDMMC_CSD_SPEED_TIME_GET(response_long.resp3);
    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if ((time_val != 0) && (rate_unit <= 3))
    {
        /*  uint32_t speed_rate = (rate_unit == 0) ? 100 : pow(10, rate_unit - 1) * 1000;*/
        uint32_t speed_rate = freq_unit[rate_unit];
    61f8:	e0814104 	add	r4, r1, r4, lsl #2
        card_info->xfer_speed = speed_rate * tran_speed_mul_x10[time_val] / 10;
    61fc:	e791110c 	ldr	r1, [r1, r12, lsl #2]
    {
        return ALT_E_ERROR;
    }

    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if (csd_structure == ALT_SDMMC_CSD_CSD_STUCTURE_VERSION_1)
    6200:	e1b02f22 	lsrs	r2, r2, #30
    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if ((time_val != 0) && (rate_unit <= 3))
    {
        /*  uint32_t speed_rate = (rate_unit == 0) ? 100 : pow(10, rate_unit - 1) * 1000;*/
        uint32_t speed_rate = freq_unit[rate_unit];
        card_info->xfer_speed = speed_rate * tran_speed_mul_x10[time_val] / 10;
    6204:	e594c040 	ldr	r12, [r4, #64]	; 0x40
    6208:	e001019c 	mul	r1, r12, r1
    620c:	e081c19e 	umull	r12, r1, lr, r1
    6210:	e1a011a1 	lsr	r1, r1, #3
    6214:	e5861008 	str	r1, [r6, #8]
    {
        return ALT_E_ERROR;
    }

    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if (csd_structure == ALT_SDMMC_CSD_CSD_STUCTURE_VERSION_1)
    6218:	1a000033 	bne	62ec <alt_sdmmc_card_enum_sd+0x318>
    {
        uint32_t c_size_mult = ALT_SDMMC_CSD_V1_C_SIZE_MULT_GET(response_long.resp1);
        c_size_low = ALT_SDMMC_CSD_V1_C_SIZE_LOW_GET(response_long.resp1);
        c_size_high = ALT_SDMMC_CSD_V1_C_SIZE_HIGH_GET(response_long.resp2);
    621c:	e1a03b03 	lsl	r3, r3, #22

    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if (csd_structure == ALT_SDMMC_CSD_CSD_STUCTURE_VERSION_1)
    {
        uint32_t c_size_mult = ALT_SDMMC_CSD_V1_C_SIZE_MULT_GET(response_long.resp1);
        c_size_low = ALT_SDMMC_CSD_V1_C_SIZE_LOW_GET(response_long.resp1);
    6220:	e1a0cf20 	lsr	r12, r0, #30
        c_size_high = ALT_SDMMC_CSD_V1_C_SIZE_HIGH_GET(response_long.resp2);
    6224:	e1a03b23 	lsr	r3, r3, #22
    }

    csd_structure = ALT_SDMMC_CSD_CSD_STRUCTURE_GET(response_long.resp3);
    if (csd_structure == ALT_SDMMC_CSD_CSD_STUCTURE_VERSION_1)
    {
        uint32_t c_size_mult = ALT_SDMMC_CSD_V1_C_SIZE_MULT_GET(response_long.resp1);
    6228:	e7e217d0 	ubfx	r1, r0, #15, #3
        c_size_low = ALT_SDMMC_CSD_V1_C_SIZE_LOW_GET(response_long.resp1);
        c_size_high = ALT_SDMMC_CSD_V1_C_SIZE_HIGH_GET(response_long.resp2);
        card_info->blk_number_low = ( (((c_size_high << 2) | c_size_low) + 1 ) * (1 << (c_size_mult + 2)) );
    622c:	e2811002 	add	r1, r1, #2
    6230:	e18c3103 	orr	r3, r12, r3, lsl #2
    6234:	e2833001 	add	r3, r3, #1
    6238:	e1a03113 	lsl	r3, r3, r1
    623c:	e5862020 	str	r2, [r6, #32]
    }
    /*  END Stand-by State*/
    /*  Command toggles a card between the Stand-by */
    /*  and Transfer states or between the Programming */
    /*  and Disconnect state*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEL_DES_CARD, rca_number, &response);
    6240:	e3a00007 	mov	r0, #7
    6244:	e5863024 	str	r3, [r6, #36]	; 0x24
    6248:	e1a0200d 	mov	r2, sp
    624c:	e5951000 	ldr	r1, [r5]
    6250:	e3047000 	movw	r7, #16384	; 0x4000
    6254:	ebfff99b 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6258:	e2504000 	subs	r4, r0, #0
    }
    /*  END Stand-by State*/
    /*  Command toggles a card between the Stand-by */
    /*  and Transfer states or between the Programming */
    /*  and Disconnect state*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEL_DES_CARD, rca_number, &response);
    625c:	e3427673 	movt	r7, #9843	; 0x2673
    if (status != ALT_E_SUCCESS)
    6260:	1affff75 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
    dprintf("\nALT_SDMMC_SEL_DES_CARD response = %x\n", (int)response);
#endif

    /*  BEGIN Transfer State*/
    /*  Addressed card sends its status register*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_STATUS, rca_number, &response);
    6264:	e3a0000d 	mov	r0, #13
    6268:	e5971000 	ldr	r1, [r7]
    626c:	e1a0200d 	mov	r2, sp
    6270:	ebfff994 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6274:	e2504000 	subs	r4, r0, #0
    6278:	1affff6f 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    627c:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// FIFO reset
*/
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    6280:	e3a02a02 	mov	r2, #8192	; 0x2000
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    6284:	e34f3f70 	movt	r3, #65392	; 0xff70
    6288:	e5137fe3 	ldr	r7, [r3, #-4067]	; 0xfffff01d

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    628c:	e1a00003 	mov	r0, r3
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    6290:	e5131fe3 	ldr	r1, [r3, #-4067]	; 0xfffff01d
    6294:	e1a01821 	lsr	r1, r1, #16
    6298:	e1a01801 	lsl	r1, r1, #16
    629c:	e3811008 	orr	r1, r1, #8
    62a0:	e5031fe3 	str	r1, [r3, #-4067]	; 0xfffff01d
/*
// Set byte count
*/
static __inline ALT_STATUS_CODE alt_sdmmc_byte_count_set(uint32_t count)
{
    alt_replbits_word(ALT_SDMMC_BYTCNT_ADDR,
    62a4:	e5131fdf 	ldr	r1, [r3, #-4063]	; 0xfffff021
    62a8:	e3a01008 	mov	r1, #8
    62ac:	e5031fdf 	str	r1, [r3, #-4063]	; 0xfffff021
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    62b0:	e5131fff 	ldr	r1, [r3, #-4095]	; 0xfffff001
    62b4:	e3811002 	orr	r1, r1, #2
    62b8:	e5031fff 	str	r1, [r3, #-4095]	; 0xfffff001
    62bc:	ea000001 	b	62c8 <alt_sdmmc_card_enum_sd+0x2f4>
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
                                                && --timeout)
    62c0:	e2522001 	subs	r2, r2, #1
    62c4:	0a000006 	beq	62e4 <alt_sdmmc_card_enum_sd+0x310>

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    62c8:	e5101fff 	ldr	r1, [r0, #-4095]	; 0xfffff001
    62cc:	e3043fff 	movw	r3, #20479	; 0x4fff
    62d0:	e34f3f70 	movt	r3, #65392	; 0xff70
    62d4:	e3110002 	tst	r1, #2
    62d8:	1afffff8 	bne	62c0 <alt_sdmmc_card_enum_sd+0x2ec>
                                                && --timeout)
        ;

    /*  If fifo reset still are active, return timeout error*/
    if (timeout == 0)
    62dc:	e3520000 	cmp	r2, #0
    62e0:	1a000008 	bne	6308 <alt_sdmmc_card_enum_sd+0x334>
        uint32_t speed_rate = freq_unit[rate_unit];
        card_info->xfer_speed = speed_rate * tran_speed_mul_x10[time_val] / 10;
    }
    else
    {
        return ALT_E_ERROR;
    62e4:	e3e0400b 	mvn	r4, #11
    62e8:	eaffff53 	b	603c <alt_sdmmc_card_enum_sd+0x68>
        card_info->blk_number_high = 0;
    }
    else
    {
        uint64_t c_size_plus_1;
        c_size_low = ALT_SDMMC_CSD_V2_C_SIZE_LOW_GET(response_long.resp1);
    62ec:	e1a00820 	lsr	r0, r0, #16
        c_size_high = ALT_SDMMC_CSD_V2_C_SIZE_HIGH_GET(response_long.resp2);
    62f0:	e203303f 	and	r3, r3, #63	; 0x3f
        c_size_plus_1 = ((c_size_high << 16) | c_size_low) + 1;
    62f4:	e1803803 	orr	r3, r0, r3, lsl #16
    62f8:	e2833001 	add	r3, r3, #1
        card_info->blk_number_high = ( c_size_plus_1 >> 22); /*   ( c_size_plus_1 * 1024) >> 32)*/
    62fc:	e1a02b23 	lsr	r2, r3, #22
        card_info->blk_number_low = (c_size_plus_1 << 10) & 0xFFFFFFFF;
    6300:	e1a03503 	lsl	r3, r3, #10
    6304:	eaffffcc 	b	623c <alt_sdmmc_card_enum_sd+0x268>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6308:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    630c:	e3120402 	tst	r2, #33554432	; 0x2000000
    6310:	0a00000f 	beq	6354 <alt_sdmmc_card_enum_sd+0x380>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    6314:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    6318:	e3120080 	tst	r2, #128	; 0x80
    631c:	0a00000c 	beq	6354 <alt_sdmmc_card_enum_sd+0x380>
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    6320:	e5131fff 	ldr	r1, [r3, #-4095]	; 0xfffff001
/*
// DMA reset
*/
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    6324:	e3a02a02 	mov	r2, #8192	; 0x2000

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6328:	e1a00003 	mov	r0, r3
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    632c:	e3811004 	orr	r1, r1, #4
    6330:	e5031fff 	str	r1, [r3, #-4095]	; 0xfffff001
    6334:	ea000001 	b	6340 <alt_sdmmc_card_enum_sd+0x36c>
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
                                                && --timeout)
    6338:	e2522001 	subs	r2, r2, #1
    633c:	0affffe8 	beq	62e4 <alt_sdmmc_card_enum_sd+0x310>

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6340:	e5103fff 	ldr	r3, [r0, #-4095]	; 0xfffff001
    6344:	e3130004 	tst	r3, #4
    6348:	1afffffa 	bne	6338 <alt_sdmmc_card_enum_sd+0x364>
                                                && --timeout)
        ;

    /*  If dma reset still are active, return timeout error*/
    if (timeout == 0)
    634c:	e3520000 	cmp	r2, #0
    6350:	0affffe3 	beq	62e4 <alt_sdmmc_card_enum_sd+0x310>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6354:	e3043fff 	movw	r3, #20479	; 0x4fff
    6358:	e34f3f70 	movt	r3, #65392	; 0xff70
    635c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    6360:	e3120402 	tst	r2, #33554432	; 0x2000000
    6364:	0a000025 	beq	6400 <alt_sdmmc_card_enum_sd+0x42c>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    6368:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
    636c:	e3130080 	tst	r3, #128	; 0x80
    6370:	0a000022 	beq	6400 <alt_sdmmc_card_enum_sd+0x42c>
// Clear descriptors of chain for DMA operations
*/
static ALT_STATUS_CODE alt_sdmmc_desc_chain_clear()
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;
    6374:	e59f23e4 	ldr	r2, [pc, #996]	; 6760 <alt_sdmmc_card_enum_sd+0x78c>
    6378:	e1a03002 	mov	r3, r2
}

/*
// Enumerated Card Stack enumerate SD card type, including SDSC, SDHC and SDXC
*/
static ALT_STATUS_CODE alt_sdmmc_card_enum_sd(ALT_SDMMC_CARD_INFO_t *card_info)
    637c:	e2824b02 	add	r4, r2, #2048	; 0x800

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
    6380:	e5d3c000 	ldrb	r12, [r3]
    6384:	e2833010 	add	r3, r3, #16
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    6388:	e1530004 	cmp	r3, r4
    {
        dma_desc[count].des0.fld.own  = 0;
    638c:	e553e00d 	ldrb	lr, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    6390:	e20cc0f9 	and	r12, r12, #249	; 0xf9
        dma_desc[count].des1.fld.bs1  = 0;
    6394:	e15300bc 	ldrh	r0, [r3, #-12]
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    6398:	e7c3c19f 	bfc	r12, #3, #1
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    639c:	e5131008 	ldr	r1, [r3, #-8]
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    63a0:	e7c7e39f 	bfc	lr, #7, #1
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    63a4:	e543c010 	strb	r12, [r3, #-16]
        dma_desc[count].des1.fld.bs1  = 0;
    63a8:	e7cc001f 	bfc	r0, #0, #13
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    63ac:	e543e00d 	strb	lr, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    63b0:	e7df101f 	bfc	r1, #0, #32
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
    63b4:	e14300bc 	strh	r0, [r3, #-12]
        dma_desc[count].des2.fld.bap1 = 0;
    63b8:	e5031008 	str	r1, [r3, #-8]
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    63bc:	1affffef 	bne	6380 <alt_sdmmc_card_enum_sd+0x3ac>
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    63c0:	e59f0398 	ldr	r0, [pc, #920]	; 6760 <alt_sdmmc_card_enum_sd+0x78c>
    63c4:	e3a01b02 	mov	r1, #2048	; 0x800
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    63c8:	e5852820 	str	r2, [r5, #2080]	; 0x820
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    63cc:	ebffecb4 	bl	16a4 <alt_cache_system_purge>
    uint32_t bmod_set_mask = ALT_SDMMC_BMOD_PBL_SET_MSK
                           | ALT_SDMMC_BMOD_FB_SET_MSK
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);
    63d0:	e5952820 	ldr	r2, [r5, #2080]	; 0x820
    63d4:	e3043fff 	movw	r3, #20479	; 0x4fff
    63d8:	e34f3f70 	movt	r3, #65392	; 0xff70
    63dc:	e5032f77 	str	r2, [r3, #-3959]	; 0xfffff089

    alt_replbits_word(ALT_SDMMC_BMOD_ADDR, bmod_set_mask, bmod_set_value);
    63e0:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    63e4:	e3c22e77 	bic	r2, r2, #1904	; 0x770
    63e8:	e3c2200e 	bic	r2, r2, #14
    63ec:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
// Enable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_enable(const uint32_t mask)
{
    alt_setbits_word(ALT_SDMMC_IDINTEN_ADDR, mask);
    63f0:	e5132f6f 	ldr	r2, [r3, #-3951]	; 0xfffff091
    63f4:	e3822fcd 	orr	r2, r2, #820	; 0x334
    63f8:	e3822003 	orr	r2, r2, #3
    63fc:	e5032f6f 	str	r2, [r3, #-3951]	; 0xfffff091
    {
        return status;
    }

    /*  Activate ACMD commands*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, rca_number, NULL);
    6400:	e5951000 	ldr	r1, [r5]
    6404:	e3a00037 	mov	r0, #55	; 0x37
    6408:	e3a02000 	mov	r2, #0
    640c:	e3045000 	movw	r5, #16384	; 0x4000
    6410:	ebfff92c 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6414:	e2504000 	subs	r4, r0, #0
    {
        return status;
    }

    /*  Activate ACMD commands*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, rca_number, NULL);
    6418:	e3425673 	movt	r5, #9843	; 0x2673
    if (status != ALT_E_SUCCESS)
    641c:	1affff06 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
    alt_sdmmc_read_short_response(&response);
    dprintf("\nALT_SDMMC_APP_CMD response = %x\n", (int)response);
#endif
    
    /*  Send request for read SCR register*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_ACMD, ALT_SD_SEND_SCR, 0x0, NULL);
    6420:	e1a02004 	mov	r2, r4
    6424:	e1a03004 	mov	r3, r4
    6428:	e3a00001 	mov	r0, #1
    642c:	e3a01033 	mov	r1, #51	; 0x33
    6430:	ebfffc51 	bl	557c <alt_sdmmc_command_send>
    if (status != ALT_E_SUCCESS)
    6434:	e2504000 	subs	r4, r0, #0
    6438:	1afffeff 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    643c:	e3048fff 	movw	r8, #20479	; 0x4fff
    6440:	e34f8f70 	movt	r8, #65392	; 0xff70
    6444:	e5183fff 	ldr	r3, [r8, #-4095]	; 0xfffff001
    6448:	e3130402 	tst	r3, #33554432	; 0x2000000
    644c:	0a000061 	beq	65d8 <alt_sdmmc_card_enum_sd+0x604>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    6450:	e5183f7f 	ldr	r3, [r8, #-3967]	; 0xfffff081
    6454:	e3130080 	tst	r3, #128	; 0x80
    6458:	0a00005e 	beq	65d8 <alt_sdmmc_card_enum_sd+0x604>
    dprintf("\nalt_sdmmc_dma_trans_helper: buf_len = %d\n",
                                                (int)buf_len);
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    /* Pointer to current descriptor*/
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;
    645c:	e5954820 	ldr	r4, [r5, #2080]	; 0x820
    {
        uint64_t scr_reg;
        uint8_t * scr_buf_8;

        /*  Read SRC register*/
        status = alt_sdmmc_card_scr_get(&scr_reg);
    6460:	e28da008 	add	r10, sp, #8
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    /* Pointer to current descriptor*/
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;
    6464:	e3a05008 	mov	r5, #8
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    6468:	e3009337 	movw	r9, #823	; 0x337
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    646c:	e5181fbf 	ldr	r1, [r8, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    6470:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    6474:	e0013003 	and	r3, r1, r3
    6478:	e3530000 	cmp	r3, #0
    647c:	1a00004d 	bne	65b8 <alt_sdmmc_card_enum_sd+0x5e4>
        {
            status = ALT_E_ERROR;
            break;
        }
        /* If current descriptor is free then fill it*/
        if (cur_dma_desc->des0.fld.own == 0)
    6480:	e5d42003 	ldrb	r2, [r4, #3]
    6484:	e1b033a2 	lsrs	r3, r2, #7
    6488:	1a000015 	bne	64e4 <alt_sdmmc_card_enum_sd+0x510>
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
    648c:	e5d41000 	ldrb	r1, [r4]
            break;
        }
        /* If current descriptor is free then fill it*/
        if (cur_dma_desc->des0.fld.own == 0)
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
    6490:	e3550c02 	cmp	r5, #512	; 0x200
    6494:	31a03005 	movcc	r3, r5
    6498:	23a03c02 	movcs	r3, #512	; 0x200
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    649c:	e255c008 	subs	r12, r5, #8
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    64a0:	e1d400b4 	ldrh	r0, [r4, #4]
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    64a4:	e27ce000 	rsbs	lr, r12, #0
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
            /* Descriptor could be used*/
            cur_dma_desc->des0.fld.own = 1;
    64a8:	e3822080 	orr	r2, r2, #128	; 0x80
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    64ac:	e0bee00c 	adcs	lr, lr, r12
    64b0:	e3811002 	orr	r1, r1, #2

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    64b4:	e0555003 	subs	r5, r5, r3
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    64b8:	e7c3119e 	bfi	r1, lr, #3, #1

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    64bc:	13a0c000 	movne	r12, #0
    64c0:	03a0c001 	moveq	r12, #1
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    64c4:	e7cc0013 	bfi	r0, r3, #0, #13

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    64c8:	e7c2111c 	bfi	r1, r12, #2, #1
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
            /* Set address of buffer in memory*/
            cur_dma_desc->des2.fld.bap1 = cur_buffer;
    64cc:	e584a008 	str	r10, [r4, #8]
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    64d0:	e1c400b4 	strh	r0, [r4, #4]
            dprintf("socfpga_setup_dma_add: des_adrdr %08X des2_paddr %08X des1_len %08X len_left %08X\n", 
                        (int)cur_dma_desc, (int)cur_buffer, (int)set_len, (int)len_left);
#endif

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
    64d4:	e08aa003 	add	r10, r10, r3
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    64d8:	e5c41000 	strb	r1, [r4]
            /* Descriptor could be used*/
            cur_dma_desc->des0.fld.own = 1;
    64dc:	e5c42003 	strb	r2, [r4, #3]
            /* Currernt descriptor set to the next element */
            cur_dma_desc = (ALT_SDMMC_DMA_BUF_DESC_t *)cur_dma_desc->des3.fld.bap2_or_next;
    64e0:	e594400c 	ldr	r4, [r4, #12]
        }
        
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    64e4:	e3a01b02 	mov	r1, #2048	; 0x800
    64e8:	e59f0270 	ldr	r0, [pc, #624]	; 6760 <alt_sdmmc_card_enum_sd+0x78c>
    64ec:	ebffec6c 	bl	16a4 <alt_cache_system_purge>
/*
// Returns the current SD/MMC controller interrupt IDMAC status conditions.
*/
uint32_t alt_sdmmc_dma_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_IDSTS_ADDR);
    64f0:	e5183f73 	ldr	r3, [r8, #-3955]	; 0xfffff08d
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
        
        idmac_status = alt_sdmmc_dma_int_status_get();

        /*  If DMA status is as descriptor unavailable then resume transfer and clean interrupt status*/
        if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_DU)
    64f4:	e3130010 	tst	r3, #16
    64f8:	0a000078 	beq	66e0 <alt_sdmmc_card_enum_sd+0x70c>
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    64fc:	e3a03001 	mov	r3, #1
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    6500:	e5089f73 	str	r9, [r8, #-3955]	; 0xfffff08d
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    6504:	e5083f7b 	str	r3, [r8, #-3963]	; 0xfffff085
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    6508:	e3550000 	cmp	r5, #0
    650c:	1affffd6 	bne	646c <alt_sdmmc_card_enum_sd+0x498>
        dprintf("alt_sdmmc_transfer_helper failed\n");
        return status;
    }

    /*  Transfer complete*/
    status = alt_sdmmc_data_done_waiter();
    6510:	ebfff8ae 	bl	47d0 <alt_sdmmc_data_done_waiter>
    if (status != ALT_E_SUCCESS)
    6514:	e2504000 	subs	r4, r0, #0
    6518:	1a00008c 	bne	6750 <alt_sdmmc_card_enum_sd+0x77c>
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    651c:	e3043fff 	movw	r3, #20479	; 0x4fff
    6520:	e6ff7077 	uxth	r7, r7
    6524:	e34f3f70 	movt	r3, #65392	; 0xff70
    6528:	e513cfe3 	ldr	r12, [r3, #-4067]	; 0xfffff01d
}

static ALT_STATUS_CODE alt_sdmmc_card_read_switch(ALT_SDMMC_CARD_INFO_t * card_info)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint8_t switch_function[64] = {0};
    652c:	e28d0010 	add	r0, sp, #16
    6530:	e1a01004 	mov	r1, r4
    6534:	e3a02040 	mov	r2, #64	; 0x40
/*
// Set block size
*/
static __inline ALT_STATUS_CODE alt_sdmmc_block_size_set(uint16_t block_size)
{
    alt_replbits_word(ALT_SDMMC_BLKSIZ_ADDR,
    6538:	e1a0c82c 	lsr	r12, r12, #16
    653c:	e1a0c80c 	lsl	r12, r12, #16
    6540:	e187c00c 	orr	r12, r7, r12
    6544:	e503cfe3 	str	r12, [r3, #-4067]	; 0xfffff01d
        {
            return status;
        }
   
        scr_buf_8 = (uint8_t*)&scr_reg;
        card_info->scr_sd_spec = scr_buf_8[0] & 0xF;
    6548:	e5dd5008 	ldrb	r5, [sp, #8]
        card_info->scr_bus_widths = scr_buf_8[1] & 0xF;
    654c:	e5dd3009 	ldrb	r3, [sp, #9]
        {
            return status;
        }
   
        scr_buf_8 = (uint8_t*)&scr_reg;
        card_info->scr_sd_spec = scr_buf_8[0] & 0xF;
    6550:	e205500f 	and	r5, r5, #15
        card_info->scr_bus_widths = scr_buf_8[1] & 0xF;
    6554:	e203300f 	and	r3, r3, #15
        {
            return status;
        }
   
        scr_buf_8 = (uint8_t*)&scr_reg;
        card_info->scr_sd_spec = scr_buf_8[0] & 0xF;
    6558:	e5865018 	str	r5, [r6, #24]
        card_info->scr_bus_widths = scr_buf_8[1] & 0xF;
    655c:	e5863028 	str	r3, [r6, #40]	; 0x28
}

static ALT_STATUS_CODE alt_sdmmc_card_read_switch(ALT_SDMMC_CARD_INFO_t * card_info)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint8_t switch_function[64] = {0};
    6560:	eb004c73 	bl	19734 <memset>

    card_info->high_speed = false;
    if ((card_info->scr_sd_spec == 0) || !(card_info->csd_ccc & CCC_CLASS_10) )/*  version 1.01 or ! Class 10*/
    6564:	e3550000 	cmp	r5, #0
static ALT_STATUS_CODE alt_sdmmc_card_read_switch(ALT_SDMMC_CARD_INFO_t * card_info)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint8_t switch_function[64] = {0};

    card_info->high_speed = false;
    6568:	e5c64016 	strb	r4, [r6, #22]
    if ((card_info->scr_sd_spec == 0) || !(card_info->csd_ccc & CCC_CLASS_10) )/*  version 1.01 or ! Class 10*/
    656c:	0a000072 	beq	673c <alt_sdmmc_card_enum_sd+0x768>
    6570:	e596301c 	ldr	r3, [r6, #28]
    6574:	e3130b01 	tst	r3, #1024	; 0x400
    6578:	0a00006f 	beq	673c <alt_sdmmc_card_enum_sd+0x768>
    #ifdef LOGGER
    dprintf("\nSWITCH - Check Function\n");
    #endif
    /*  CMD6 should be supported. CMD6 is valid under the "Transfer State".*/
    /*  Mode bit31 = 0, everything else 0.*/
    status = alt_sdmmc_card_switch_function(ALT_SDMMC_SWITCH_FUNC_MODE_CHECK, switch_function);
    657c:	e1a00004 	mov	r0, r4
    6580:	e28d1010 	add	r1, sp, #16
    6584:	ebfffd84 	bl	5b9c <alt_sdmmc_card_switch_function>
    if (status == ALT_E_SUCCESS)
    6588:	e2504000 	subs	r4, r0, #0
    658c:	1afffeaa 	bne	603c <alt_sdmmc_card_enum_sd+0x68>
    {
        if (switch_function[13] & ALT_SDMMC_SD_MODE_HIGH_SPEED)
    6590:	e5dd301d 	ldrb	r3, [sp, #29]
    6594:	e2033002 	and	r3, r3, #2
    6598:	e6ef3073 	uxtb	r3, r3
    659c:	e3530000 	cmp	r3, #0
    65a0:	0a000061 	beq	672c <alt_sdmmc_card_enum_sd+0x758>
        {
            #ifdef LOGGER
                    dprintf("High speed supported. Switching...\n");
                    #endif
            card_info->high_speed = true;
    65a4:	e3a03001 	mov	r3, #1
    65a8:	e5c63016 	strb	r3, [r6, #22]
    65ac:	eafffea2 	b	603c <alt_sdmmc_card_enum_sd+0x68>
        uint32_t speed_rate = freq_unit[rate_unit];
        card_info->xfer_speed = speed_rate * tran_speed_mul_x10[time_val] / 10;
    }
    else
    {
        return ALT_E_ERROR;
    65b0:	e3e04000 	mvn	r4, #0
    65b4:	eafffea0 	b	603c <alt_sdmmc_card_enum_sd+0x68>
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    65b8:	e3020398 	movw	r0, #9112	; 0x2398
        uint32_t idmac_status;
        /* Error checking*/
        status = alt_sdmmc_error_status_detect();
        if (status != ALT_E_SUCCESS)
        {
            status = ALT_E_ERROR;
    65bc:	e3e04000 	mvn	r4, #0
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    65c0:	e3400002 	movt	r0, #2
    65c4:	ebffe7a2 	bl	454 <print_debug>
        status = alt_sdmmc_transfer_helper((uint32_t*)scr_reg, 8, ALT_SDMMC_TMOD_READ);
    }

    if (status != ALT_E_SUCCESS)
    {
        dprintf("alt_sdmmc_transfer_helper failed\n");
    65c8:	e30204cc 	movw	r0, #9420	; 0x24cc
    65cc:	e3400002 	movt	r0, #2
    65d0:	ebffe79f 	bl	454 <print_debug>
    65d4:	eafffe98 	b	603c <alt_sdmmc_card_enum_sd+0x68>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    65d8:	e3043fff 	movw	r3, #20479	; 0x4fff
    {
        uint64_t scr_reg;
        uint8_t * scr_buf_8;

        /*  Read SRC register*/
        status = alt_sdmmc_card_scr_get(&scr_reg);
    65dc:	e28d0008 	add	r0, sp, #8
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    65e0:	e3a0c008 	mov	r12, #8
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    65e4:	e34f3f70 	movt	r3, #65392	; 0xff70
    65e8:	e5131fbf 	ldr	r1, [r3, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    65ec:	e30b2bc2 	movw	r2, #48066	; 0xbbc2
    65f0:	e0012002 	and	r2, r1, r2
    65f4:	e3520000 	cmp	r2, #0
    65f8:	1a00003e 	bne	66f8 <alt_sdmmc_card_enum_sd+0x724>
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    65fc:	e5131fb7 	ldr	r1, [r3, #-4023]	; 0xfffff049
        }

        do
        {
            read_freeze =  ((transfer_mode == ALT_SDMMC_TMOD_READ)
                                            && (alt_sdmmc_fifo_is_empty() == true));
    6600:	e304223f 	movw	r2, #16959	; 0x423f
    6604:	e340200f 	movt	r2, #15
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6608:	e7e01151 	ubfx	r1, r1, #2, #1
    660c:	ea000003 	b	6620 <alt_sdmmc_card_enum_sd+0x64c>
    6610:	e5131fb7 	ldr	r1, [r3, #-4023]	; 0xfffff049
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
#ifdef LOGGER
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
    6614:	e2522001 	subs	r2, r2, #1
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6618:	e7e01151 	ubfx	r1, r1, #2, #1
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
#ifdef LOGGER
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
    661c:	0a00003d 	beq	6718 <alt_sdmmc_card_enum_sd+0x744>
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
                return status;
            }
        }
        while (read_freeze || write_freeze);
    6620:	e251e000 	subs	lr, r1, #0
    6624:	1afffff9 	bne	6610 <alt_sdmmc_card_enum_sd+0x63c>
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    6628:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
        /*  Read out the resulting received data as they come in.*/

        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);
    662c:	e1a0112c 	lsr	r1, r12, #2
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    6630:	e7ec28d2 	ubfx	r2, r2, #17, #13
        /*  Read out the resulting received data as they come in.*/

        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);
    6634:	e1510002 	cmp	r1, r2
    6638:	21a01002 	movcs	r1, r2

            for (i = 0; i < level; i++)
    663c:	e3510000 	cmp	r1, #0
    6640:	0a000023 	beq	66d4 <alt_sdmmc_card_enum_sd+0x700>
    6644:	e3510008 	cmp	r1, #8
}

/*
// Enumerated Card Stack enumerate SD card type, including SDSC, SDHC and SDXC
*/
static ALT_STATUS_CODE alt_sdmmc_card_enum_sd(ALT_SDMMC_CARD_INFO_t *card_info)
    6648:	e2418007 	sub	r8, r1, #7
    664c:	9a000027 	bls	66f0 <alt_sdmmc_card_enum_sd+0x71c>
    6650:	e2802020 	add	r2, r0, #32
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    6654:	e1a0500e 	mov	r5, lr
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    6658:	e513adff 	ldr	r10, [r3, #-3583]	; 0xfffff201
    665c:	f5d2f068 	pld	[r2, #104]	; 0x68
}

/*
// Enumerated Card Stack enumerate SD card type, including SDSC, SDHC and SDXC
*/
static ALT_STATUS_CODE alt_sdmmc_card_enum_sd(ALT_SDMMC_CARD_INFO_t *card_info)
    6660:	e1a04002 	mov	r4, r2
    6664:	e2822020 	add	r2, r2, #32
    6668:	e285e009 	add	lr, r5, #9
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    666c:	e502a040 	str	r10, [r2, #-64]	; 0xffffffc0
    6670:	e15e0008 	cmp	lr, r8
    6674:	e513adff 	ldr	r10, [r3, #-3583]	; 0xfffff201
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    6678:	e285e008 	add	lr, r5, #8
    667c:	e1a0500e 	mov	r5, lr
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    6680:	e502a03c 	str	r10, [r2, #-60]	; 0xffffffc4
    6684:	e513adff 	ldr	r10, [r3, #-3583]	; 0xfffff201
    6688:	e502a038 	str	r10, [r2, #-56]	; 0xffffffc8
    668c:	e513adff 	ldr	r10, [r3, #-3583]	; 0xfffff201
    6690:	e502a034 	str	r10, [r2, #-52]	; 0xffffffcc
    6694:	e513adff 	ldr	r10, [r3, #-3583]	; 0xfffff201
    6698:	e502a030 	str	r10, [r2, #-48]	; 0xffffffd0
    669c:	e513adff 	ldr	r10, [r3, #-3583]	; 0xfffff201
    66a0:	e502a02c 	str	r10, [r2, #-44]	; 0xffffffd4
    66a4:	e513adff 	ldr	r10, [r3, #-3583]	; 0xfffff201
    66a8:	e502a028 	str	r10, [r2, #-40]	; 0xffffffd8
    66ac:	e513adff 	ldr	r10, [r3, #-3583]	; 0xfffff201
    66b0:	e502a024 	str	r10, [r2, #-36]	; 0xffffffdc
    66b4:	3affffe7 	bcc	6658 <alt_sdmmc_card_enum_sd+0x684>
    66b8:	e5132dff 	ldr	r2, [r3, #-3583]	; 0xfffff201
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    66bc:	e28ee001 	add	lr, lr, #1
    66c0:	e151000e 	cmp	r1, lr
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    66c4:	e4842004 	str	r2, [r4], #4
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    66c8:	8afffffa 	bhi	66b8 <alt_sdmmc_card_enum_sd+0x6e4>
}

/*
// Enumerated Card Stack enumerate SD card type, including SDSC, SDHC and SDXC
*/
static ALT_STATUS_CODE alt_sdmmc_card_enum_sd(ALT_SDMMC_CARD_INFO_t *card_info)
    66cc:	e1a01101 	lsl	r1, r1, #2
    66d0:	e0800001 	add	r0, r0, r1

    uint32_t data_size = size;
    bool read_freeze  = false;
    bool write_freeze = false;
    
    while (data_size > 0)
    66d4:	e05cc001 	subs	r12, r12, r1
    66d8:	1affffc2 	bne	65e8 <alt_sdmmc_card_enum_sd+0x614>
    66dc:	eaffff8b 	b	6510 <alt_sdmmc_card_enum_sd+0x53c>
        {
            alt_sdmmc_dma_int_clear(ALT_SDMMC_DMA_INT_STATUS_ALL);
            alt_sdmmc_poll_demand_set(0x1);
        }
        /*  If DMA status is another abnormal then break with error*/
        else if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_AI)
    66e0:	e3130c02 	tst	r3, #512	; 0x200
    66e4:	0affff87 	beq	6508 <alt_sdmmc_card_enum_sd+0x534>
        {
            status = ALT_E_ERROR;
    66e8:	e3e04000 	mvn	r4, #0
    66ec:	eaffffb5 	b	65c8 <alt_sdmmc_card_enum_sd+0x5f4>
}

/*
// Enumerated Card Stack enumerate SD card type, including SDSC, SDHC and SDXC
*/
static ALT_STATUS_CODE alt_sdmmc_card_enum_sd(ALT_SDMMC_CARD_INFO_t *card_info)
    66f0:	e1a04000 	mov	r4, r0
    66f4:	eaffffef 	b	66b8 <alt_sdmmc_card_enum_sd+0x6e4>
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    66f8:	e3020398 	movw	r0, #9112	; 0x2398
        /*  Error checking*/
        status = alt_sdmmc_error_status_detect();

        if (status != ALT_E_SUCCESS)
        {
            dprintf("Interrupt error detected\n");
    66fc:	e3e04000 	mvn	r4, #0
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    6700:	e3400002 	movt	r0, #2
    6704:	ebffe752 	bl	454 <print_debug>
        /*  Error checking*/
        status = alt_sdmmc_error_status_detect();

        if (status != ALT_E_SUCCESS)
        {
            dprintf("Interrupt error detected\n");
    6708:	e3020464 	movw	r0, #9316	; 0x2464
    670c:	e3400002 	movt	r0, #2
    6710:	ebffe74f 	bl	454 <print_debug>
    6714:	eaffffab 	b	65c8 <alt_sdmmc_card_enum_sd+0x5f4>
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
            {
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
    6718:	e3020480 	movw	r0, #9344	; 0x2480
                return status;
    671c:	e3e0400b 	mvn	r4, #11
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
            {
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
    6720:	e3400002 	movt	r0, #2
    6724:	ebffe74a 	bl	454 <print_debug>
    6728:	eaffffa6 	b	65c8 <alt_sdmmc_card_enum_sd+0x5f4>
                    #endif
            card_info->high_speed = true;
        }
        else
        {
            dprintf("High speed not supported.\n");
    672c:	e302050c 	movw	r0, #9484	; 0x250c
    6730:	e3400002 	movt	r0, #2
    6734:	ebffe746 	bl	454 <print_debug>
    6738:	eafffe3f 	b	603c <alt_sdmmc_card_enum_sd+0x68>
    uint8_t switch_function[64] = {0};

    card_info->high_speed = false;
    if ((card_info->scr_sd_spec == 0) || !(card_info->csd_ccc & CCC_CLASS_10) )/*  version 1.01 or ! Class 10*/
    {
        dprintf("High speed not supported\n");
    673c:	e30204f0 	movw	r0, #9456	; 0x24f0
        return ALT_E_BAD_ARG;
    6740:	e3e04008 	mvn	r4, #8
    uint8_t switch_function[64] = {0};

    card_info->high_speed = false;
    if ((card_info->scr_sd_spec == 0) || !(card_info->csd_ccc & CCC_CLASS_10) )/*  version 1.01 or ! Class 10*/
    {
        dprintf("High speed not supported\n");
    6744:	e3400002 	movt	r0, #2
    6748:	ebffe741 	bl	454 <print_debug>
    674c:	eafffe3a 	b	603c <alt_sdmmc_card_enum_sd+0x68>

    /*  Transfer complete*/
    status = alt_sdmmc_data_done_waiter();
    if (status != ALT_E_SUCCESS)
    {
        dprintf("alt_sdmmc_data_done_waiter failed\n");
    6750:	e30204a8 	movw	r0, #9384	; 0x24a8
    6754:	e3400002 	movt	r0, #2
    6758:	ebffe73d 	bl	454 <print_debug>
    675c:	eafffe36 	b	603c <alt_sdmmc_card_enum_sd+0x68>
    6760:	26734020 	.word	0x26734020

00006764 <alt_sdmmc_card_identify>:

/*
// Enumerated Card Stack
*/
ALT_STATUS_CODE alt_sdmmc_card_identify(ALT_SDMMC_CARD_INFO_t * card_info)
{
    6764:	e92d4070 	push	{r4, r5, r6, lr}
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET(ALT_SDMMC_CTYPE_CARD_WIDTH2_E_MOD4BIT));
        break;

    case ALT_SDMMC_BUS_WIDTH_1:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    6768:	e3044fff 	movw	r4, #20479	; 0x4fff
    676c:	e34f4f70 	movt	r4, #65392	; 0xff70

/*
// Enumerated Card Stack
*/
ALT_STATUS_CODE alt_sdmmc_card_identify(ALT_SDMMC_CARD_INFO_t * card_info)
{
    6770:	e1a06000 	mov	r6, r0
#ifdef LOGGER
    dprintf("\nalt_sdmmc_card_identify\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    card_info->card_type = ALT_SDMMC_CARD_TYPE_NOTDETECT;
    6774:	e3a01000 	mov	r1, #0
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t int_status = 0;
    uint32_t response = 0;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    6778:	e3043000 	movw	r3, #16384	; 0x4000
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET(ALT_SDMMC_CTYPE_CARD_WIDTH2_E_MOD4BIT));
        break;

    case ALT_SDMMC_BUS_WIDTH_1:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    677c:	e5140fe7 	ldr	r0, [r4, #-4071]	; 0xfffff019
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t int_status = 0;
    uint32_t response = 0;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    6780:	e3423673 	movt	r3, #9843	; 0x2673
#ifdef LOGGER
    dprintf("\nalt_sdmmc_card_identify\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    card_info->card_type = ALT_SDMMC_CARD_TYPE_NOTDETECT;
    6784:	e5c61000 	strb	r1, [r6]
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t int_status = 0;
    uint32_t response = 0;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    6788:	e30e22d7 	movw	r2, #58071	; 0xe2d7

/*
// Enumerated Card Stack
*/
ALT_STATUS_CODE alt_sdmmc_card_identify(ALT_SDMMC_CARD_INFO_t * card_info)
{
    678c:	e24dd008 	sub	sp, sp, #8
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t int_status = 0;
    uint32_t response = 0;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    6790:	e3402053 	movt	r2, #83	; 0x53
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH2_SET(ALT_SDMMC_CTYPE_CARD_WIDTH2_E_MOD4BIT));
        break;

    case ALT_SDMMC_BUS_WIDTH_1:
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    6794:	e3c00801 	bic	r0, r0, #65536	; 0x10000
    6798:	e5040fe7 	str	r0, [r4, #-4071]	; 0xfffff019
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET_MSK, 
                          ALT_SDMMC_CTYPE_CARD_WIDTH1_SET(ALT_SDMMC_CTYPE_CARD_WIDTH1_E_NON8BIT));
        alt_replbits_word(ALT_SDMMC_CTYPE_ADDR,
    679c:	e5140fe7 	ldr	r0, [r4, #-4071]	; 0xfffff019
    67a0:	e3c00001 	bic	r0, r0, #1
    67a4:	e5040fe7 	str	r0, [r4, #-4071]	; 0xfffff019
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t int_status = 0;
    uint32_t response = 0;

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    67a8:	e5933004 	ldr	r3, [r3, #4]
    dprintf("\nalt_sdmmc_card_ident_sdhc\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t int_status = 0;
    uint32_t response = 0;
    67ac:	e58d1004 	str	r1, [sp, #4]

    uint32_t clk_div = clock_freq / (4 * 2 * 400000);
    67b0:	e1a03523 	lsr	r3, r3, #10
    67b4:	e0801392 	umull	r1, r0, r2, r3
    uint32_t timeout;
    
    status = alt_sdmmc_card_clk_div_set(clk_div);
    67b8:	e1a00120 	lsr	r0, r0, #2
    67bc:	ebfff955 	bl	4d18 <alt_sdmmc_card_clk_div_set>
    if (status != ALT_E_SUCCESS)
    67c0:	e2501000 	subs	r1, r0, #0
    67c4:	1a00001d 	bne	6840 <alt_sdmmc_card_identify+0xdc>
        dprintf("alt_sdmmc_card_clk_div_set failed\n");
        return status;
    }

    /*  Resets all cards to Idle State*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_GO_IDLE_STATE, 0x0, NULL);
    67c8:	e1a02001 	mov	r2, r1
    67cc:	ebfff83d 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    67d0:	e3500000 	cmp	r0, #0
    67d4:	0a00001d 	beq	6850 <alt_sdmmc_card_identify+0xec>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    67d8:	e5143fbf 	ldr	r3, [r4, #-4031]	; 0xfffff041
    /*  Resets all cards to Idle State*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_GO_IDLE_STATE, 0x0, NULL);
    if (status != ALT_E_SUCCESS)
    {
        int_status = alt_sdmmc_int_status_get();
        if (int_status & ALT_SDMMC_INT_STATUS_RTO)
    67dc:	e3130c01 	tst	r3, #256	; 0x100
        {
            dprintf("Response timeout\n");
    67e0:	1302054c 	movwne	r0, #9548	; 0x254c
            return status;
        }
        else
        {
            dprintf("Unexpected interrupt, not timeout\n");
    67e4:	03020560 	movweq	r0, #9568	; 0x2560
    if (status != ALT_E_SUCCESS)
    {
        int_status = alt_sdmmc_int_status_get();
        if (int_status & ALT_SDMMC_INT_STATUS_RTO)
        {
            dprintf("Response timeout\n");
    67e8:	13400002 	movtne	r0, #2
            return status;
        }
        else
        {
            dprintf("Unexpected interrupt, not timeout\n");
    67ec:	03400002 	movteq	r0, #2
    67f0:	ebffe717 	bl	454 <print_debug>
#endif
    /*  Enumerated Card Stack p.3e*/
    /*  Indicates to the card that the next command is an */
    /*  application specific command rather than a */
    /*  standard command */
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, 0x0, NULL);
    67f4:	e3a01000 	mov	r1, #0
    67f8:	e3a00037 	mov	r0, #55	; 0x37
    67fc:	e1a02001 	mov	r2, r1
    6800:	ebfff830 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6804:	e3500000 	cmp	r0, #0
    6808:	0a00004b 	beq	693c <alt_sdmmc_card_identify+0x1d8>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    680c:	e3043fff 	movw	r3, #20479	; 0x4fff
    6810:	e34f3f70 	movt	r3, #65392	; 0xff70
    6814:	e5133fbf 	ldr	r3, [r3, #-4031]	; 0xfffff041
    /*  line. */
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_ACMD, ALT_SD_SEND_OP_COND, 0x00FF8000, NULL);
    if (status != ALT_E_SUCCESS)
    {
        int_status = alt_sdmmc_int_status_get();
        if (int_status & ALT_SDMMC_INT_STATUS_RTO)
    6818:	e3130c01 	tst	r3, #256	; 0x100
    681c:	0a000005 	beq	6838 <alt_sdmmc_card_identify+0xd4>
    6820:	e5d63000 	ldrb	r3, [r6]
        }
    }
    if (status != ALT_E_SUCCESS)
    {
        status =  alt_sdmmc_card_ident_sd(card_info);
        if (card_info->card_type != ALT_SDMMC_CARD_TYPE_NOTDETECT && status == ALT_E_SUCCESS)
    6824:	e3530000 	cmp	r3, #0
    6828:	028d5004 	addeq	r5, sp, #4
    682c:	0a000033 	beq	6900 <alt_sdmmc_card_identify+0x19c>
        {
            /*  If card is identified as SD card then prepare it*/
            status = alt_sdmmc_card_enum_sd(card_info);
    6830:	e1a00006 	mov	r0, r6
    6834:	ebfffde6 	bl	5fd4 <alt_sdmmc_card_enum_sd>
            return status;
        }
    }

    return status;
}
    6838:	e28dd008 	add	sp, sp, #8
    683c:	e8bd8070 	pop	{r4, r5, r6, pc}
    uint32_t timeout;
    
    status = alt_sdmmc_card_clk_div_set(clk_div);
    if (status != ALT_E_SUCCESS)
    {
        dprintf("alt_sdmmc_card_clk_div_set failed\n");
    6840:	e3020528 	movw	r0, #9512	; 0x2528
    6844:	e3400002 	movt	r0, #2
    6848:	ebffe701 	bl	454 <print_debug>
    684c:	eaffffe8 	b	67f4 <alt_sdmmc_card_identify+0x90>
        }
    }
    
    /*  Enumerated Card Stack p.3a*/
    /*  For only SDC V2. Check voltage range.*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_IF_COND, 0x1AA, &response);
    6850:	e28d5004 	add	r5, sp, #4
    6854:	e3a00008 	mov	r0, #8
    6858:	e30011aa 	movw	r1, #426	; 0x1aa
    685c:	e1a02005 	mov	r2, r5
    6860:	ebfff818 	bl	48c8 <alt_sdmmc_command_send.constprop.14>

    if (status != ALT_E_SUCCESS)
    6864:	e3500000 	cmp	r0, #0
    6868:	1a00004a 	bne	6998 <alt_sdmmc_card_identify+0x234>
    #ifdef LOGGER
        alt_sdmmc_read_short_response(&response);
        dprintf("\nALT_SDMMC_IF_COND response = %x\n", (int)response);
    #endif

        if (response != 0x1AA) /*  R7 echo back expected*/
    686c:	e59d2004 	ldr	r2, [sp, #4]
    6870:	e30031aa 	movw	r3, #426	; 0x1aa
    6874:	e1520003 	cmp	r2, r3
    6878:	1affffdd 	bne	67f4 <alt_sdmmc_card_identify+0x90>
    687c:	e3044240 	movw	r4, #16960	; 0x4240
    6880:	e340400f 	movt	r4, #15
    6884:	ea000007 	b	68a8 <alt_sdmmc_card_identify+0x144>
        /*  Enumerated Card Stack p.3c*/
        /*  Asks the accessed card to send its operating condition*/
        /*  register (OCR) content in the response on the CMD*/
        /*  line.*/
        /*  SDHC/SDXC supported, power saving, use current signal voltage.*/
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_ACMD, ALT_SD_SEND_OP_COND, 0x40FF8000, &response);
    6888:	ebfffb3b 	bl	557c <alt_sdmmc_command_send>
        if (status != ALT_E_SUCCESS)
    688c:	e3500000 	cmp	r0, #0
    6890:	1a00004b 	bne	69c4 <alt_sdmmc_card_identify+0x260>
        alt_sdmmc_read_short_response(&response);
        dprintf("\nALT_SD_SEND_OP_COND response = %x\n", (int)response);
#endif

        /* Enumerated Card Stack p.3d*/
        if (response & 0x80000000) /*  Initialization Complete*/
    6894:	e59d3004 	ldr	r3, [sp, #4]
    6898:	e3530000 	cmp	r3, #0
    689c:	ba000052 	blt	69ec <alt_sdmmc_card_identify+0x288>
                card_info->card_type = ALT_SDMMC_CARD_TYPE_SDHC; /*  and SDXC*/
            else
                card_info->card_type = ALT_SDMMC_CARD_TYPE_SD;
           break;
        }
    } while (--timeout);
    68a0:	e2544001 	subs	r4, r4, #1
    68a4:	0affffd2 	beq	67f4 <alt_sdmmc_card_identify+0x90>
    do
    {
        /*  Indicates to the card that the next command is an*/
        /*  application specific command rather than a*/
        /*  standard command*/
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, 0x0, &response);
    68a8:	e3a01000 	mov	r1, #0
    68ac:	e1a02005 	mov	r2, r5
    68b0:	e3a00037 	mov	r0, #55	; 0x37
    68b4:	ebfff803 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
        if (status != ALT_E_SUCCESS)
    68b8:	e3500000 	cmp	r0, #0
        /*  Enumerated Card Stack p.3c*/
        /*  Asks the accessed card to send its operating condition*/
        /*  register (OCR) content in the response on the CMD*/
        /*  line.*/
        /*  SDHC/SDXC supported, power saving, use current signal voltage.*/
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_ACMD, ALT_SD_SEND_OP_COND, 0x40FF8000, &response);
    68bc:	e3a02902 	mov	r2, #32768	; 0x8000
    68c0:	e3a01029 	mov	r1, #41	; 0x29
    68c4:	e34420ff 	movt	r2, #16639	; 0x40ff
    68c8:	e1a03005 	mov	r3, r5
    68cc:	e3a00001 	mov	r0, #1
    {
        /*  Indicates to the card that the next command is an*/
        /*  application specific command rather than a*/
        /*  standard command*/
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, 0x0, &response);
        if (status != ALT_E_SUCCESS)
    68d0:	0affffec 	beq	6888 <alt_sdmmc_card_identify+0x124>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    68d4:	e3043fff 	movw	r3, #20479	; 0x4fff
    68d8:	e34f3f70 	movt	r3, #65392	; 0xff70
    68dc:	e5133fbf 	ldr	r3, [r3, #-4031]	; 0xfffff041
        /*  standard command*/
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_APP_CMD, 0x0, &response);
        if (status != ALT_E_SUCCESS)
        {
            int_status = alt_sdmmc_int_status_get();
            if (int_status & ALT_SDMMC_INT_STATUS_RTO)
    68e0:	e3130c01 	tst	r3, #256	; 0x100
    68e4:	0a000047 	beq	6a08 <alt_sdmmc_card_identify+0x2a4>
            {
                 dprintf("ALT_SDMMC_APP_CMD timed out\n");
    68e8:	e30205f0 	movw	r0, #9712	; 0x25f0
    68ec:	e3400002 	movt	r0, #2
    68f0:	ebffe6d7 	bl	454 <print_debug>
    68f4:	e5d63000 	ldrb	r3, [r6]
    /* Enumerated Card Stack p.1*/
    alt_sdmmc_bus_width_set(ALT_SDMMC_BUS_WIDTH_1);
    if (status == ALT_E_SUCCESS)
    {
        status =  alt_sdmmc_card_ident_sdhc(card_info);
        if (card_info->card_type != ALT_SDMMC_CARD_TYPE_NOTDETECT && status == ALT_E_SUCCESS)
    68f8:	e3530000 	cmp	r3, #0
    68fc:	1affffcb 	bne	6830 <alt_sdmmc_card_identify+0xcc>
    dprintf("\nalt_sdmmc_card_ident_io_only\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t int_status = 0;
    uint32_t response = 0;
    6900:	e3a03000 	mov	r3, #0
    bool is_sdio_combo;
    /*  Enumerated Card Stack p.2a - 2b*/
    /*  Activates the card's initialization process.*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_OP_COND, 0x0, &response);
    6904:	e3a00005 	mov	r0, #5
    6908:	e1a01003 	mov	r1, r3
    690c:	e1a02005 	mov	r2, r5
    dprintf("\nalt_sdmmc_card_ident_io_only\n");
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    uint32_t int_status = 0;
    uint32_t response = 0;
    6910:	e58d3004 	str	r3, [sp, #4]
    bool is_sdio_combo;
    /*  Enumerated Card Stack p.2a - 2b*/
    /*  Activates the card's initialization process.*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_OP_COND, 0x0, &response);
    6914:	ebfff7eb 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6918:	e3500000 	cmp	r0, #0
    691c:	0a000011 	beq	6968 <alt_sdmmc_card_identify+0x204>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    6920:	e3043fff 	movw	r3, #20479	; 0x4fff
    6924:	e34f3f70 	movt	r3, #65392	; 0xff70
    6928:	e5133fbf 	ldr	r3, [r3, #-4031]	; 0xfffff041
    /*  Enumerated Card Stack p.2c*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_OP_COND, 0x100000, &response);
    if (status != ALT_E_SUCCESS)
    {
        int_status = alt_sdmmc_int_status_get();
        if (int_status & ALT_SDMMC_INT_STATUS_RTO)
    692c:	e3130c01 	tst	r3, #256	; 0x100
    6930:	0affffc0 	beq	6838 <alt_sdmmc_card_identify+0xd4>
    6934:	e3a00000 	mov	r0, #0
    6938:	eaffffbe 	b	6838 <alt_sdmmc_card_identify+0xd4>
#endif
    
    /*  Asks the accessed card to send its operating condition */
    /*  register (OCR) content in the response on the CMD*/
    /*  line. */
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_ACMD, ALT_SD_SEND_OP_COND, 0x00FF8000, NULL);
    693c:	e3a02902 	mov	r2, #32768	; 0x8000
    6940:	e1a03000 	mov	r3, r0
    6944:	e3a01029 	mov	r1, #41	; 0x29
    6948:	e3a00001 	mov	r0, #1
    694c:	e34020ff 	movt	r2, #255	; 0xff
    6950:	ebfffb09 	bl	557c <alt_sdmmc_command_send>
    if (status != ALT_E_SUCCESS)
    6954:	e3500000 	cmp	r0, #0
    6958:	1affffab 	bne	680c <alt_sdmmc_card_identify+0xa8>
    alt_sdmmc_read_short_response(&response);
    dprintf("\nALT_SD_SEND_OP_COND response = %x\n", (int)response);
#endif
    
    /*  Enumerated Card Stack p.3f*/
    card_info->card_type = ALT_SDMMC_CARD_TYPE_SD;
    695c:	e3a03002 	mov	r3, #2
    6960:	e5c63000 	strb	r3, [r6]
    6964:	eaffffb1 	b	6830 <alt_sdmmc_card_identify+0xcc>
    alt_sdmmc_read_short_response(&response);
    dprintf("\nALT_SDMMC_SEND_OP_COND_1 = %x\n", (int)response);
#endif

    /*  Enumerated Card Stack p.2c*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_SEND_OP_COND, 0x100000, &response);
    6968:	e3a00005 	mov	r0, #5
    696c:	e3a01601 	mov	r1, #1048576	; 0x100000
    6970:	e1a02005 	mov	r2, r5
    6974:	ebfff7d3 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    if (status != ALT_E_SUCCESS)
    6978:	e3500000 	cmp	r0, #0
    697c:	1affffe7 	bne	6920 <alt_sdmmc_card_identify+0x1bc>
    
#ifdef LOGGER
    dprintf("\nALT_SDMMC_SEND_OP_COND_2 response = %x\n", (int)response);
#endif
    /*  Enumerated Card Stack p.2d*/
    is_sdio_combo = response & (1 << 27);
    6980:	e59d3004 	ldr	r3, [sp, #4]
    card_info->card_type = (is_sdio_combo) 
    6984:	e3130302 	tst	r3, #134217728	; 0x8000000
    6988:	03a03003 	moveq	r3, #3
    698c:	13a03000 	movne	r3, #0
    6990:	e5c63000 	strb	r3, [r6]
    6994:	eaffffe6 	b	6934 <alt_sdmmc_card_identify+0x1d0>
    /*  For only SDC V2. Check voltage range.*/
    status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_IF_COND, 0x1AA, &response);

    if (status != ALT_E_SUCCESS)
    {
        dprintf("ALT_SDMMC_IF_COND failed\n");
    6998:	e3020584 	movw	r0, #9604	; 0x2584
    699c:	e3400002 	movt	r0, #2
    69a0:	ebffe6ab 	bl	454 <print_debug>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    69a4:	e5143fbf 	ldr	r3, [r4, #-4031]	; 0xfffff041

    if (status != ALT_E_SUCCESS)
    {
        dprintf("ALT_SDMMC_IF_COND failed\n");
        int_status = alt_sdmmc_int_status_get();
        if (int_status & ALT_SDMMC_INT_STATUS_RTO)
    69a8:	e3130c01 	tst	r3, #256	; 0x100
        {
            dprintf("ALT_SDMMC_IF_COND response timed out\n"); /*  do not support 2.7V to 3.6V*/
    69ac:	130205a0 	movwne	r0, #9632	; 0x25a0
            return status;
        }
        else
        {
            dprintf("ALT_SDMMC_IF_COND interrupt unexpected\n");
    69b0:	030205c8 	movweq	r0, #9672	; 0x25c8
    {
        dprintf("ALT_SDMMC_IF_COND failed\n");
        int_status = alt_sdmmc_int_status_get();
        if (int_status & ALT_SDMMC_INT_STATUS_RTO)
        {
            dprintf("ALT_SDMMC_IF_COND response timed out\n"); /*  do not support 2.7V to 3.6V*/
    69b4:	13400002 	movtne	r0, #2
            return status;
        }
        else
        {
            dprintf("ALT_SDMMC_IF_COND interrupt unexpected\n");
    69b8:	03400002 	movteq	r0, #2
    69bc:	ebffe6a4 	bl	454 <print_debug>
    69c0:	eaffff8b 	b	67f4 <alt_sdmmc_card_identify+0x90>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    69c4:	e3043fff 	movw	r3, #20479	; 0x4fff
    69c8:	e34f3f70 	movt	r3, #65392	; 0xff70
    69cc:	e5133fbf 	ldr	r3, [r3, #-4031]	; 0xfffff041
        /*  SDHC/SDXC supported, power saving, use current signal voltage.*/
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_ACMD, ALT_SD_SEND_OP_COND, 0x40FF8000, &response);
        if (status != ALT_E_SUCCESS)
        {
            int_status = alt_sdmmc_int_status_get();
            if (int_status & ALT_SDMMC_INT_STATUS_RTO)
    69d0:	e3130c01 	tst	r3, #256	; 0x100
    69d4:	0affff86 	beq	67f4 <alt_sdmmc_card_identify+0x90>
            {
                dprintf("ALT_SDMMC_SEND_OP_COND timed out\n");
    69d8:	e3020638 	movw	r0, #9784	; 0x2638
    69dc:	e3400002 	movt	r0, #2
    69e0:	ebffe69b 	bl	454 <print_debug>
    69e4:	e5d63000 	ldrb	r3, [r6]
    69e8:	eaffffc2 	b	68f8 <alt_sdmmc_card_identify+0x194>
        if (response & 0x80000000) /*  Initialization Complete*/
        {
            if (response & 0x40000000)
                card_info->card_type = ALT_SDMMC_CARD_TYPE_SDHC; /*  and SDXC*/
            else
                card_info->card_type = ALT_SDMMC_CARD_TYPE_SD;
    69ec:	e3130101 	tst	r3, #1073741824	; 0x40000000
    69f0:	13a03005 	movne	r3, #5
    69f4:	03a03002 	moveq	r3, #2
           break;
        }
    } while (--timeout);
    
    if (timeout == 0)
    69f8:	e3540000 	cmp	r4, #0
    69fc:	e5c63000 	strb	r3, [r6]
    6a00:	1affff8a 	bne	6830 <alt_sdmmc_card_identify+0xcc>
    6a04:	eaffff7a 	b	67f4 <alt_sdmmc_card_identify+0x90>
                 dprintf("ALT_SDMMC_APP_CMD timed out\n");
                return ALT_E_SUCCESS;
            }
            else
            {
                dprintf("ALT_SDMMC_APP_CMD error not timed out\n");
    6a08:	e3020610 	movw	r0, #9744	; 0x2610
    6a0c:	e3400002 	movt	r0, #2
    6a10:	ebffe68f 	bl	454 <print_debug>
    6a14:	eaffff76 	b	67f4 <alt_sdmmc_card_identify+0x90>

00006a18 <alt_sdmmc_card_speed_set>:
    return speed_bps;
}

ALT_STATUS_CODE alt_sdmmc_card_speed_set(ALT_SDMMC_CARD_INFO_t * card_info, uint32_t xfer_speed)
{
    uint32_t        clk_div = clock_freq / (4 * 2 * xfer_speed);
    6a18:	e3043000 	movw	r3, #16384	; 0x4000

    return speed_bps;
}

ALT_STATUS_CODE alt_sdmmc_card_speed_set(ALT_SDMMC_CARD_INFO_t * card_info, uint32_t xfer_speed)
{
    6a1c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    uint32_t        clk_div = clock_freq / (4 * 2 * xfer_speed);
    6a20:	e3423673 	movt	r3, #9843	; 0x2673

    return speed_bps;
}

ALT_STATUS_CODE alt_sdmmc_card_speed_set(ALT_SDMMC_CARD_INFO_t * card_info, uint32_t xfer_speed)
{
    6a24:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    uint32_t        clk_div = clock_freq / (4 * 2 * xfer_speed);
    6a28:	e1a01181 	lsl	r1, r1, #3

    return speed_bps;
}

ALT_STATUS_CODE alt_sdmmc_card_speed_set(ALT_SDMMC_CARD_INFO_t * card_info, uint32_t xfer_speed)
{
    6a2c:	e1a07000 	mov	r7, r0
    uint32_t        clk_div = clock_freq / (4 * 2 * xfer_speed);
    6a30:	e5930004 	ldr	r0, [r3, #4]
    6a34:	eb0047c0 	bl	1893c <__aeabi_uidiv>
    uint32_t        current_clk_div;
    bool            clock_disabled = false;
    bool            low_power_enable =  false;

#ifdef soc_cv_av
       uint8_t switch_function[64] = {0}; /* switch function status 64 bytes long */
    6a38:	e3a01000 	mov	r1, #0
    return speed_bps;
}

ALT_STATUS_CODE alt_sdmmc_card_speed_set(ALT_SDMMC_CARD_INFO_t * card_info, uint32_t xfer_speed)
{
    uint32_t        clk_div = clock_freq / (4 * 2 * xfer_speed);
    6a3c:	e1a05000 	mov	r5, r0
    uint32_t        current_clk_div;
    bool            clock_disabled = false;
    bool            low_power_enable =  false;

#ifdef soc_cv_av
       uint8_t switch_function[64] = {0}; /* switch function status 64 bytes long */
    6a40:	e3a02040 	mov	r2, #64	; 0x40
    6a44:	e28d0008 	add	r0, sp, #8
    6a48:	eb004b39 	bl	19734 <memset>
/*
// Get config clock parameters
*/
uint32_t alt_sdmmc_card_clk_div_get(void)
{
    return ALT_SDMMC_CLKDIV_CLK_DIVR0_GET(alt_read_word(ALT_SDMMC_CLKDIV_ADDR));
    6a4c:	e3043fff 	movw	r3, #20479	; 0x4fff
    6a50:	e34f3f70 	movt	r3, #65392	; 0xff70
    6a54:	e5134ff7 	ldr	r4, [r3, #-4087]	; 0xfffff009
    6a58:	e6ef4074 	uxtb	r4, r4
#ifdef soc_cv_av
       uint8_t switch_function[64] = {0}; /* switch function status 64 bytes long */
#endif

    current_clk_div = alt_sdmmc_card_clk_div_get();
    if (current_clk_div != clk_div)
    6a5c:	e1550004 	cmp	r5, r4
}

ALT_STATUS_CODE alt_sdmmc_card_speed_set(ALT_SDMMC_CARD_INFO_t * card_info, uint32_t xfer_speed)
{
    uint32_t        clk_div = clock_freq / (4 * 2 * xfer_speed);
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    6a60:	03a04000 	moveq	r4, #0
#ifdef soc_cv_av
       uint8_t switch_function[64] = {0}; /* switch function status 64 bytes long */
#endif

    current_clk_div = alt_sdmmc_card_clk_div_get();
    if (current_clk_div != clk_div)
    6a64:	0a00000d 	beq	6aa0 <alt_sdmmc_card_speed_set+0x88>
/*
// Returns true if the card clock (sdmmc_cclk_out) is enabled otherwise returns false
*/
bool alt_sdmmc_card_clk_is_enabled(void)
{
    return ALT_SDMMC_CLKENA_CCLK_EN_GET(alt_read_word(ALT_SDMMC_CLKENA_ADDR));
    6a68:	e5131fef 	ldr	r1, [r3, #-4079]	; 0xfffff011
    current_clk_div = alt_sdmmc_card_clk_div_get();
    if (current_clk_div != clk_div)
    {
        /*  For backwards compatibility, the caller may have disabled the clk before calling this function.*/
        /*  Need to enable it for switch function to work.*/
        if (alt_sdmmc_card_clk_is_enabled() == false)
    6a6c:	e2111001 	ands	r1, r1, #1
ALT_STATUS_CODE alt_sdmmc_card_speed_set(ALT_SDMMC_CARD_INFO_t * card_info, uint32_t xfer_speed)
{
    uint32_t        clk_div = clock_freq / (4 * 2 * xfer_speed);
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        current_clk_div;
    bool            clock_disabled = false;
    6a70:	13a06000 	movne	r6, #0
    current_clk_div = alt_sdmmc_card_clk_div_get();
    if (current_clk_div != clk_div)
    {
        /*  For backwards compatibility, the caller may have disabled the clk before calling this function.*/
        /*  Need to enable it for switch function to work.*/
        if (alt_sdmmc_card_clk_is_enabled() == false)
    6a74:	0a000021 	beq	6b00 <alt_sdmmc_card_speed_set+0xe8>
            alt_sdmmc_card_clk_enable(low_power_enable);
        }
#ifdef soc_cv_av
       /* switch_function[64] = {0};  switch function status 64 bytes long */

        if (clk_div == 0) /*  need to switch from 25MHz to 50MHz*/
    6a78:	e3550000 	cmp	r5, #0
    6a7c:	0a00000a 	beq	6aac <alt_sdmmc_card_speed_set+0x94>
            else
            {
                dprintf("High speed not supported.\n");
            }
        }
        else if (current_clk_div == 0) /*  need to switch from 50MHz to 25MHz*/
    6a80:	e3540000 	cmp	r4, #0
    6a84:	0a00003b 	beq	6b78 <alt_sdmmc_card_speed_set+0x160>
            }
        }
#endif
        if (status == ALT_E_SUCCESS)
        {
            status = alt_sdmmc_card_clk_div_set(clk_div);
    6a88:	e1a00005 	mov	r0, r5
    6a8c:	ebfff8a1 	bl	4d18 <alt_sdmmc_card_clk_div_set>
            if (status !=  ALT_E_SUCCESS)
    6a90:	e2504000 	subs	r4, r0, #0
    6a94:	1a000050 	bne	6bdc <alt_sdmmc_card_speed_set+0x1c4>
            {
                dprintf("alt_sdmmc_card_clk_div_set failed\n");
                return status;
            }
        }
        if (clock_disabled)
    6a98:	e3560000 	cmp	r6, #0
    6a9c:	1a000024 	bne	6b34 <alt_sdmmc_card_speed_set+0x11c>
        {
            status = alt_sdmmc_card_clk_disable();
        }
    }
    return status;
}
    6aa0:	e1a00004 	mov	r0, r4
    6aa4:	e28dd04c 	add	sp, sp, #76	; 0x4c
    6aa8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
#ifdef soc_cv_av
       /* switch_function[64] = {0};  switch function status 64 bytes long */

        if (clk_div == 0) /*  need to switch from 25MHz to 50MHz*/
        {
            if (card_info->high_speed)
    6aac:	e5d73016 	ldrb	r3, [r7, #22]
    6ab0:	e3530000 	cmp	r3, #0
    6ab4:	0a00002b 	beq	6b68 <alt_sdmmc_card_speed_set+0x150>
            {
                #ifdef LOGGER
                dprintf("High speed supported. Switching...\n");
                #endif
                status = alt_sdmmc_card_switch_function(ALT_SDMMC_SWITCH_FUNC_MODE_SWITCH |
    6ab8:	e30f0ff1 	movw	r0, #65521	; 0xfff1
    6abc:	e28d1008 	add	r1, sp, #8
    6ac0:	e34800ff 	movt	r0, #33023	; 0x80ff
    6ac4:	ebfffc34 	bl	5b9c <alt_sdmmc_card_switch_function>
                                                            ALT_SDMMC_SWITCH_FUNC_G4_KEEP |
                                                            ALT_SDMMC_SWITCH_FUNC_G3_KEEP |
                                                            ALT_SDMMC_SWITCH_FUNC_G2_KEEP |
                                                            ALT_SDMMC_SWITCH_FUNC_HIGH_SPEED,
                                                            switch_function);
                if ((status == ALT_E_SUCCESS) && (switch_function[16] & 0xF) == 1)
    6ac8:	e2504000 	subs	r4, r0, #0
    6acc:	e5dd1018 	ldrb	r1, [sp, #24]
    6ad0:	1a000002 	bne	6ae0 <alt_sdmmc_card_speed_set+0xc8>
    6ad4:	e201300f 	and	r3, r1, #15
    6ad8:	e3530001 	cmp	r3, #1
    6adc:	0a000042 	beq	6bec <alt_sdmmc_card_speed_set+0x1d4>
                        --count;
                    }
                }
                else
                {
                    dprintf("Switching to high speed failed, switch_function[16] = 0x%x\n", (int)switch_function[16]);
    6ae0:	e302065c 	movw	r0, #9820	; 0x265c
    6ae4:	e3400002 	movt	r0, #2
    6ae8:	ebffe659 	bl	454 <print_debug>
            {
                dprintf("Switching to default speed failed\n");
            }
        }
#endif
        if (status == ALT_E_SUCCESS)
    6aec:	e3540000 	cmp	r4, #0
    6af0:	0affffe4 	beq	6a88 <alt_sdmmc_card_speed_set+0x70>
            {
                dprintf("alt_sdmmc_card_clk_div_set failed\n");
                return status;
            }
        }
        if (clock_disabled)
    6af4:	e3560000 	cmp	r6, #0
    6af8:	0affffe8 	beq	6aa0 <alt_sdmmc_card_speed_set+0x88>
    6afc:	ea00000c 	b	6b34 <alt_sdmmc_card_speed_set+0x11c>
/*
// Returns true if low-power mode (cclk_low_power) is enabled otherwise returns false
*/
bool alt_sdmmc_card_clk_low_power_is_enabled(void)
{
    return ALT_SDMMC_CLKENA_CCLK_LOW_POWER_GET(alt_read_word(ALT_SDMMC_CLKENA_ADDR));
    6b00:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6b04:	e5136fb7 	ldr	r6, [r3, #-4023]	; 0xfffff049
    6b08:	e7e064d6 	ubfx	r6, r6, #9, #1
    6b0c:	e3560001 	cmp	r6, #1
    6b10:	0affffd8 	beq	6a78 <alt_sdmmc_card_speed_set+0x60>
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    6b14:	e2022801 	and	r2, r2, #65536	; 0x10000
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    6b18:	e3e00000 	mvn	r0, #0
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    6b1c:	e3822001 	orr	r2, r2, #1
    {
        /*  For backwards compatibility, the caller may have disabled the clk before calling this function.*/
        /*  Need to enable it for switch function to work.*/
        if (alt_sdmmc_card_clk_is_enabled() == false)
        {
            clock_disabled = true;
    6b20:	e3a06001 	mov	r6, #1
    {
        return ALT_E_ERROR;
    }

    /*  Enable clock*/
    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(true)
    6b24:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011
                                        | ALT_SDMMC_CLKENA_CCLK_LOW_POWER_SET(use_low_pwr_mode));

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    6b28:	e1a02001 	mov	r2, r1
    6b2c:	ebfff765 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    6b30:	eaffffd0 	b	6a78 <alt_sdmmc_card_speed_set+0x60>
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6b34:	e3043fff 	movw	r3, #20479	; 0x4fff
    6b38:	e34f3f70 	movt	r3, #65392	; 0xff70
    6b3c:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
    6b40:	e3120c02 	tst	r2, #512	; 0x200

ALT_STATUS_CODE alt_sdmmc_card_clk_disable(void)
{
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    6b44:	13e04000 	mvnne	r4, #0
/*
// Returns ALT_E_TRUE if the SD/MMC controller is busy
*/
static ALT_STATUS_CODE alt_sdmmc_is_busy(void)
{
    if (ALT_SDMMC_STAT_DATA_BUSY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6b48:	1affffd4 	bne	6aa0 <alt_sdmmc_card_speed_set+0x88>
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    }

    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(false));
    6b4c:	e3a02000 	mov	r2, #0

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    6b50:	e3e00000 	mvn	r0, #0
    6b54:	e1a01002 	mov	r1, r2
    if (alt_sdmmc_is_busy() == ALT_E_TRUE)
    {
        return ALT_E_ERROR;
    }

    alt_write_word(ALT_SDMMC_CLKENA_ADDR, ALT_SDMMC_CLKENA_CCLK_EN_SET(false));
    6b58:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011

    return alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, ALT_SDMMC_CLK_INDEX, 0x0, NULL);
    6b5c:	ebfff759 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    6b60:	e1a04000 	mov	r4, r0
    6b64:	eaffffcd 	b	6aa0 <alt_sdmmc_card_speed_set+0x88>
                    dprintf("Switching to high speed failed, switch_function[16] = 0x%x\n", (int)switch_function[16]);
                }
            }
            else
            {
                dprintf("High speed not supported.\n");
    6b68:	e302050c 	movw	r0, #9484	; 0x250c
    6b6c:	e3400002 	movt	r0, #2
    6b70:	ebffe637 	bl	454 <print_debug>
    6b74:	eaffffc3 	b	6a88 <alt_sdmmc_card_speed_set+0x70>
            }
        }
        else if (current_clk_div == 0) /*  need to switch from 50MHz to 25MHz*/
        {
            /*  CMD 6 and switch function must be supported, otherwise, it couldn't have gone to high speed mode.*/
            status = alt_sdmmc_card_switch_function(ALT_SDMMC_SWITCH_FUNC_MODE_SWITCH     |
    6b78:	e30f0ff0 	movw	r0, #65520	; 0xfff0
    6b7c:	e28d1008 	add	r1, sp, #8
    6b80:	e34800ff 	movt	r0, #33023	; 0x80ff
    6b84:	ebfffc04 	bl	5b9c <alt_sdmmc_card_switch_function>
                                                            ALT_SDMMC_SWITCH_FUNC_G4_KEEP |
                                                            ALT_SDMMC_SWITCH_FUNC_G3_KEEP |
                                                            ALT_SDMMC_SWITCH_FUNC_G2_KEEP |
                                                            ALT_SDMMC_SWITCH_FUNC_DEFAULT_SPEED,
                                                            switch_function);
            if ((status == ALT_E_SUCCESS) && ((switch_function[16] & 0xF) == 0))
    6b88:	e2504000 	subs	r4, r0, #0
    6b8c:	1a00000e 	bne	6bcc <alt_sdmmc_card_speed_set+0x1b4>
    6b90:	e5dd3018 	ldrb	r3, [sp, #24]
    6b94:	e313000f 	tst	r3, #15
    6b98:	1a00000b 	bne	6bcc <alt_sdmmc_card_speed_set+0x1b4>
            {
                #ifdef LOGGER
                dprintf("Switching to default speed succeeded\n");
                #endif
                /*  Delay 8 cycle*/
                volatile uint32_t count = 0x8;
    6b9c:	e3a03008 	mov	r3, #8
    6ba0:	e58d3004 	str	r3, [sp, #4]
                while (count > 0)
    6ba4:	e59d3004 	ldr	r3, [sp, #4]
    6ba8:	e3530000 	cmp	r3, #0
    6bac:	0affffb5 	beq	6a88 <alt_sdmmc_card_speed_set+0x70>
                {
                    --count;
    6bb0:	e59d3004 	ldr	r3, [sp, #4]
    6bb4:	e2433001 	sub	r3, r3, #1
    6bb8:	e58d3004 	str	r3, [sp, #4]
                #ifdef LOGGER
                dprintf("Switching to default speed succeeded\n");
                #endif
                /*  Delay 8 cycle*/
                volatile uint32_t count = 0x8;
                while (count > 0)
    6bbc:	e59d3004 	ldr	r3, [sp, #4]
    6bc0:	e3530000 	cmp	r3, #0
    6bc4:	1afffff9 	bne	6bb0 <alt_sdmmc_card_speed_set+0x198>
    6bc8:	eaffffae 	b	6a88 <alt_sdmmc_card_speed_set+0x70>
                    --count;
                }
            }
            else
            {
                dprintf("Switching to default speed failed\n");
    6bcc:	e3020698 	movw	r0, #9880	; 0x2698
    6bd0:	e3400002 	movt	r0, #2
    6bd4:	ebffe61e 	bl	454 <print_debug>
    6bd8:	eaffffc3 	b	6aec <alt_sdmmc_card_speed_set+0xd4>
        if (status == ALT_E_SUCCESS)
        {
            status = alt_sdmmc_card_clk_div_set(clk_div);
            if (status !=  ALT_E_SUCCESS)
            {
                dprintf("alt_sdmmc_card_clk_div_set failed\n");
    6bdc:	e3020528 	movw	r0, #9512	; 0x2528
    6be0:	e3400002 	movt	r0, #2
    6be4:	ebffe61a 	bl	454 <print_debug>
    6be8:	eaffffac 	b	6aa0 <alt_sdmmc_card_speed_set+0x88>
                {
                    #ifdef LOGGER
                    dprintf("Switching to high speed succeeded\n");
                    #endif
                    /*  Delay 8 cycle*/
                    volatile uint32_t count = 0x8;
    6bec:	e3a03008 	mov	r3, #8
    6bf0:	e58d3000 	str	r3, [sp]
                    while (count > 0)
    6bf4:	e59d3000 	ldr	r3, [sp]
    6bf8:	e3530000 	cmp	r3, #0
    6bfc:	0affffa1 	beq	6a88 <alt_sdmmc_card_speed_set+0x70>
                    {
                        --count;
    6c00:	e59d3000 	ldr	r3, [sp]
    6c04:	e2433001 	sub	r3, r3, #1
    6c08:	e58d3000 	str	r3, [sp]
                    #ifdef LOGGER
                    dprintf("Switching to high speed succeeded\n");
                    #endif
                    /*  Delay 8 cycle*/
                    volatile uint32_t count = 0x8;
                    while (count > 0)
    6c0c:	e59d3000 	ldr	r3, [sp]
    6c10:	e3530000 	cmp	r3, #0
    6c14:	1afffff9 	bne	6c00 <alt_sdmmc_card_speed_set+0x1e8>
    6c18:	eaffff9a 	b	6a88 <alt_sdmmc_card_speed_set+0x70>

00006c1c <alt_sdmmc_write>:

/*
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
{
    6c1c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    uint32_t block_count;
    uint32_t byte_count;
    uint16_t block_size;
    uint32_t cmd_index = 0;

    if (buf_len == 0)
    6c20:	e253a000 	subs	r10, r3, #0

/*
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
{
    6c24:	e1a07000 	mov	r7, r0
    6c28:	e1a06001 	mov	r6, r1
    6c2c:	e1a05002 	mov	r5, r2
    uint32_t block_count;
    uint32_t byte_count;
    uint16_t block_size;
    uint32_t cmd_index = 0;

    if (buf_len == 0)
    6c30:	0a0000d3 	beq	6f84 <alt_sdmmc_write+0x368>
/*
// Returns ALT_E_TRUE if the SD/MMC and iddmac controller is in idle state
*/
static ALT_STATUS_CODE alt_sdmmc_is_idle(void)
{
    uint32_t mmc_state = ALT_SDMMC_STAT_CMD_FSM_STATES_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    6c34:	e3049fff 	movw	r9, #20479	; 0x4fff
    6c38:	e34f9f70 	movt	r9, #65392	; 0xff70
    6c3c:	e5193fb7 	ldr	r3, [r9, #-4023]	; 0xfffff049
    
    uint32_t dma_state = ALT_SDMMC_IDSTS_FSM_GET(alt_read_word(ALT_SDMMC_IDSTS_ADDR));
    6c40:	e5192f73 	ldr	r2, [r9, #-3955]	; 0xfffff08d
/*
// Returns ALT_E_TRUE if the SD/MMC and iddmac controller is in idle state
*/
static ALT_STATUS_CODE alt_sdmmc_is_idle(void)
{
    uint32_t mmc_state = ALT_SDMMC_STAT_CMD_FSM_STATES_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    6c44:	e7e33253 	ubfx	r3, r3, #4, #4
    
    uint32_t dma_state = ALT_SDMMC_IDSTS_FSM_GET(alt_read_word(ALT_SDMMC_IDSTS_ADDR));
    6c48:	e7e326d2 	ubfx	r2, r2, #13, #4
    
    if ((mmc_state != ALT_SDMMC_FSM_IDLE) || (dma_state != ALT_SDMMC_DMA_FSM_IDLE))
    6c4c:	e1923003 	orrs	r3, r2, r3
    6c50:	1a0000c9 	bne	6f7c <alt_sdmmc_write+0x360>
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    6c54:	e5194fe3 	ldr	r4, [r9, #-4067]	; 0xfffff01d
        return ALT_E_ERROR;
    }

    block_size = alt_sdmmc_block_size_get();

    if (   (start_addr % block_size != 0) 
    6c58:	e1a00001 	mov	r0, r1
    6c5c:	e6ff4074 	uxth	r4, r4
    6c60:	e1a01004 	mov	r1, r4
    6c64:	eb004771 	bl	18a30 <__aeabi_uidivmod>
    6c68:	e3510000 	cmp	r1, #0
    6c6c:	1a000111 	bne	70b8 <alt_sdmmc_write+0x49c>
        || (buf_len    % block_size != 0))
    6c70:	e1a0000a 	mov	r0, r10
    6c74:	e1a01004 	mov	r1, r4
    6c78:	eb00476c 	bl	18a30 <__aeabi_uidivmod>
    6c7c:	e3510000 	cmp	r1, #0
    6c80:	1a00010c 	bne	70b8 <alt_sdmmc_write+0x49c>
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    6c84:	e5193fff 	ldr	r3, [r9, #-4095]	; 0xfffff001
/*
// FIFO reset
*/
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    6c88:	e3a0ca02 	mov	r12, #8192	; 0x2000

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6c8c:	e1a08009 	mov	r8, r9
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    6c90:	e3833002 	orr	r3, r3, #2
    6c94:	e5093fff 	str	r3, [r9, #-4095]	; 0xfffff001
    6c98:	ea000001 	b	6ca4 <alt_sdmmc_write+0x88>
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
                                                && --timeout)
    6c9c:	e25cc001 	subs	r12, r12, #1
    6ca0:	0a0000bc 	beq	6f98 <alt_sdmmc_write+0x37c>

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6ca4:	e5181fff 	ldr	r1, [r8, #-4095]	; 0xfffff001
    6ca8:	e3042fff 	movw	r2, #20479	; 0x4fff
    6cac:	e34f2f70 	movt	r2, #65392	; 0xff70
    6cb0:	e3110002 	tst	r1, #2
    6cb4:	1afffff8 	bne	6c9c <alt_sdmmc_write+0x80>
                                                && --timeout)
        ;

    /*  If fifo reset still are active, return timeout error*/
    if (timeout == 0)
    6cb8:	e35c0000 	cmp	r12, #0
    6cbc:	0a0000b5 	beq	6f98 <alt_sdmmc_write+0x37c>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6cc0:	e5123fff 	ldr	r3, [r2, #-4095]	; 0xfffff001
    6cc4:	e3130402 	tst	r3, #33554432	; 0x2000000
    6cc8:	0a00000f 	beq	6d0c <alt_sdmmc_write+0xf0>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    6ccc:	e5123f7f 	ldr	r3, [r2, #-3967]	; 0xfffff081
    6cd0:	e3130080 	tst	r3, #128	; 0x80
    6cd4:	0a00000c 	beq	6d0c <alt_sdmmc_write+0xf0>
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    6cd8:	e5120fff 	ldr	r0, [r2, #-4095]	; 0xfffff001
/*
// DMA reset
*/
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    6cdc:	e3a03a02 	mov	r3, #8192	; 0x2000

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6ce0:	e1a01002 	mov	r1, r2
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    6ce4:	e3800004 	orr	r0, r0, #4
    6ce8:	e5020fff 	str	r0, [r2, #-4095]	; 0xfffff001
    6cec:	ea000001 	b	6cf8 <alt_sdmmc_write+0xdc>
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
                                                && --timeout)
    6cf0:	e2533001 	subs	r3, r3, #1
    6cf4:	0a0000a7 	beq	6f98 <alt_sdmmc_write+0x37c>

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6cf8:	e5112fff 	ldr	r2, [r1, #-4095]	; 0xfffff001
    6cfc:	e3120004 	tst	r2, #4
    6d00:	1afffffa 	bne	6cf0 <alt_sdmmc_write+0xd4>
                                                && --timeout)
        ;

    /*  If dma reset still are active, return timeout error*/
    if (timeout == 0)
    6d04:	e3530000 	cmp	r3, #0
    6d08:	0a0000a2 	beq	6f98 <alt_sdmmc_write+0x37c>
    {
        return ALT_E_BAD_ARG;
    }

    /*  Number of block to transfer*/
    block_count = buf_len / block_size;
    6d0c:	e1a0000a 	mov	r0, r10
    6d10:	e1a01004 	mov	r1, r4
    6d14:	eb004708 	bl	1893c <__aeabi_uidiv>
    /*  New count of reading byte*/
    byte_count = block_count * block_size;
    6d18:	e0080094 	mul	r8, r4, r0
/*
// Set byte count
*/
static __inline ALT_STATUS_CODE alt_sdmmc_byte_count_set(uint32_t count)
{
    alt_replbits_word(ALT_SDMMC_BYTCNT_ADDR,
    6d1c:	e3043fff 	movw	r3, #20479	; 0x4fff
    6d20:	e34f3f70 	movt	r3, #65392	; 0xff70
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    6d24:	e30f2ffe 	movw	r2, #65534	; 0xfffe
/*
// Set byte count
*/
static __inline ALT_STATUS_CODE alt_sdmmc_byte_count_set(uint32_t count)
{
    alt_replbits_word(ALT_SDMMC_BYTCNT_ADDR,
    6d28:	e5131fdf 	ldr	r1, [r3, #-4063]	; 0xfffff021
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    6d2c:	e34f2000 	movt	r2, #61440	; 0xf000
    }

    alt_sdmmc_byte_count_set(byte_count);
    alt_sdmmc_card_rd_threshold_enable(0x80);

    if (buf_len == block_size)
    6d30:	e15a0004 	cmp	r10, r4
/*
// Set byte count
*/
static __inline ALT_STATUS_CODE alt_sdmmc_byte_count_set(uint32_t count)
{
    alt_replbits_word(ALT_SDMMC_BYTCNT_ADDR,
    6d34:	e5038fdf 	str	r8, [r3, #-4063]	; 0xfffff021
    }

    alt_sdmmc_byte_count_set(byte_count);
    alt_sdmmc_card_rd_threshold_enable(0x80);

    if (buf_len == block_size)
    6d38:	13a0a019 	movne	r10, #25
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    6d3c:	e5131eff 	ldr	r1, [r3, #-3839]	; 0xfffff101
    }

    alt_sdmmc_byte_count_set(byte_count);
    alt_sdmmc_card_rd_threshold_enable(0x80);

    if (buf_len == block_size)
    6d40:	03a0a018 	moveq	r10, #24
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    6d44:	e0012002 	and	r2, r1, r2
    6d48:	e3822502 	orr	r2, r2, #8388608	; 0x800000
    6d4c:	e3822001 	orr	r2, r2, #1
    6d50:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6d54:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    6d58:	e3120402 	tst	r2, #33554432	; 0x2000000
    6d5c:	0a000027 	beq	6e00 <alt_sdmmc_write+0x1e4>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    6d60:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
    6d64:	e3130080 	tst	r3, #128	; 0x80
    6d68:	0a000024 	beq	6e00 <alt_sdmmc_write+0x1e4>
// Clear descriptors of chain for DMA operations
*/
static ALT_STATUS_CODE alt_sdmmc_desc_chain_clear()
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;
    6d6c:	e59f9368 	ldr	r9, [pc, #872]	; 70dc <alt_sdmmc_write+0x4c0>
    6d70:	e1a03009 	mov	r3, r9
}

/*
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    6d74:	e2890b02 	add	r0, r9, #2048	; 0x800

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
    6d78:	e5d32000 	ldrb	r2, [r3]
    6d7c:	e2833010 	add	r3, r3, #16
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    6d80:	e1530000 	cmp	r3, r0
    {
        dma_desc[count].des0.fld.own  = 0;
    6d84:	e553100d 	ldrb	r1, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    6d88:	e20220f9 	and	r2, r2, #249	; 0xf9
        dma_desc[count].des1.fld.bs1  = 0;
    6d8c:	e153e0bc 	ldrh	lr, [r3, #-12]
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    6d90:	e7c3219f 	bfc	r2, #3, #1
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    6d94:	e513c008 	ldr	r12, [r3, #-8]
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    6d98:	e7c7139f 	bfc	r1, #7, #1
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    6d9c:	e5432010 	strb	r2, [r3, #-16]
        dma_desc[count].des1.fld.bs1  = 0;
    6da0:	e7cce01f 	bfc	lr, #0, #13
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    6da4:	e543100d 	strb	r1, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    6da8:	e7dfc01f 	bfc	r12, #0, #32
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
    6dac:	e143e0bc 	strh	lr, [r3, #-12]
        dma_desc[count].des2.fld.bap1 = 0;
    6db0:	e503c008 	str	r12, [r3, #-8]
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    6db4:	1affffef 	bne	6d78 <alt_sdmmc_write+0x15c>
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    6db8:	e304b000 	movw	r11, #16384	; 0x4000
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    6dbc:	e3a01b02 	mov	r1, #2048	; 0x800
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    6dc0:	e342b673 	movt	r11, #9843	; 0x2673
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    6dc4:	e28b0020 	add	r0, r11, #32
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    6dc8:	e58b9820 	str	r9, [r11, #2080]	; 0x820
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    6dcc:	ebffea34 	bl	16a4 <alt_cache_system_purge>
    uint32_t bmod_set_mask = ALT_SDMMC_BMOD_PBL_SET_MSK
                           | ALT_SDMMC_BMOD_FB_SET_MSK
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);
    6dd0:	e59b2820 	ldr	r2, [r11, #2080]	; 0x820
    6dd4:	e3043fff 	movw	r3, #20479	; 0x4fff
    6dd8:	e34f3f70 	movt	r3, #65392	; 0xff70
    6ddc:	e5032f77 	str	r2, [r3, #-3959]	; 0xfffff089

    alt_replbits_word(ALT_SDMMC_BMOD_ADDR, bmod_set_mask, bmod_set_value);
    6de0:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    6de4:	e3c22e77 	bic	r2, r2, #1904	; 0x770
    6de8:	e3c2200e 	bic	r2, r2, #14
    6dec:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
// Enable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_enable(const uint32_t mask)
{
    alt_setbits_word(ALT_SDMMC_IDINTEN_ADDR, mask);
    6df0:	e5132f6f 	ldr	r2, [r3, #-3951]	; 0xfffff091
    6df4:	e3822fcd 	orr	r2, r2, #820	; 0x334
    6df8:	e3822003 	orr	r2, r2, #3
    6dfc:	e5032f6f 	str	r2, [r3, #-3951]	; 0xfffff091
    dprintf("\nstart_addr = %d\n", (int)start_addr);
#endif

    /* Send transfer command*/

    if (card_info->card_type == ALT_SDMMC_CARD_TYPE_SDHC)
    6e00:	e5d73000 	ldrb	r3, [r7]
    6e04:	e3530005 	cmp	r3, #5
    6e08:	0a0000a1 	beq	7094 <alt_sdmmc_write+0x478>
    {
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, (ALT_SDMMC_CMD_INDEX_t)cmd_index, start_addr / block_size, NULL);
    }
    else
    {
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, (ALT_SDMMC_CMD_INDEX_t)cmd_index, start_addr, NULL);
    6e0c:	e1a0000a 	mov	r0, r10
    6e10:	e1a01006 	mov	r1, r6
    6e14:	e3a02000 	mov	r2, #0
    6e18:	ebfff6aa 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    }

    if (status != ALT_E_SUCCESS)
    6e1c:	e3500000 	cmp	r0, #0
    6e20:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    6e24:	e3047fff 	movw	r7, #20479	; 0x4fff
    6e28:	e34f7f70 	movt	r7, #65392	; 0xff70
    6e2c:	e5173fff 	ldr	r3, [r7, #-4095]	; 0xfffff001
    6e30:	e3130402 	tst	r3, #33554432	; 0x2000000
    6e34:	1a000059 	bne	6fa0 <alt_sdmmc_write+0x384>

    uint32_t data_size = size;
    bool read_freeze  = false;
    bool write_freeze = false;
    
    while (data_size > 0)
    6e38:	e3580000 	cmp	r8, #0
    6e3c:	0a000092 	beq	708c <alt_sdmmc_write+0x470>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    6e40:	e3042fff 	movw	r2, #20479	; 0x4fff
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    6e44:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    6e48:	e34f2f70 	movt	r2, #65392	; 0xff70
    6e4c:	e5121fbf 	ldr	r1, [r2, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    6e50:	e0013003 	and	r3, r1, r3
    6e54:	e3530000 	cmp	r3, #0
    6e58:	1a00003f 	bne	6f5c <alt_sdmmc_write+0x340>
/*
// Returns ALT_E_TRUE when the receive FIFO is completely full.
*/
bool alt_sdmmc_fifo_is_full(void)
{
    if (ALT_SDMMC_STAT_FIFO_FULL_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6e5c:	e5121fb7 	ldr	r1, [r2, #-4023]	; 0xfffff049
        do
        {
            read_freeze =  ((transfer_mode == ALT_SDMMC_TMOD_READ)
                                            && (alt_sdmmc_fifo_is_empty() == true));
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
    6e60:	e304323f 	movw	r3, #16959	; 0x423f
    6e64:	e340300f 	movt	r3, #15
/*
// Returns ALT_E_TRUE when the receive FIFO is completely full.
*/
bool alt_sdmmc_fifo_is_full(void)
{
    if (ALT_SDMMC_STAT_FIFO_FULL_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6e68:	e7e011d1 	ubfx	r1, r1, #3, #1
    6e6c:	ea000003 	b	6e80 <alt_sdmmc_write+0x264>
    6e70:	e5121fb7 	ldr	r1, [r2, #-4023]	; 0xfffff049
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
#ifdef LOGGER
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
    6e74:	e2533001 	subs	r3, r3, #1
/*
// Returns ALT_E_TRUE when the receive FIFO is completely full.
*/
bool alt_sdmmc_fifo_is_full(void)
{
    if (ALT_SDMMC_STAT_FIFO_FULL_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    6e78:	e7e011d1 	ubfx	r1, r1, #3, #1
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
#ifdef LOGGER
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
    6e7c:	0a000042 	beq	6f8c <alt_sdmmc_write+0x370>
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
                return status;
            }
        }
        while (read_freeze || write_freeze);
    6e80:	e3510000 	cmp	r1, #0
    6e84:	1afffff9 	bne	6e70 <alt_sdmmc_write+0x254>
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    6e88:	e5123fb7 	ldr	r3, [r2, #-4023]	; 0xfffff049

        if (transfer_mode == ALT_SDMMC_TMOD_WRITE)
        {
            uint32_t i;
            uint32_t free_space = ALT_SDMMC_FIFO_NUM_ENTRIES - level;
            free_space = ALT_MIN(data_size / 4, free_space);
    6e8c:	e1a0c128 	lsr	r12, r8, #2
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    6e90:	e7ec38d3 	ubfx	r3, r3, #17, #13
        /*  Top up the TX FIFO with read issues*/

        if (transfer_mode == ALT_SDMMC_TMOD_WRITE)
        {
            uint32_t i;
            uint32_t free_space = ALT_SDMMC_FIFO_NUM_ENTRIES - level;
    6e94:	e2633b01 	rsb	r3, r3, #1024	; 0x400
            free_space = ALT_MIN(data_size / 4, free_space);
    6e98:	e15c0003 	cmp	r12, r3
    6e9c:	21a0c003 	movcs	r12, r3

            for (i = 0; i < free_space; i++)
    6ea0:	e35c0000 	cmp	r12, #0
    6ea4:	0a000025 	beq	6f40 <alt_sdmmc_write+0x324>
    6ea8:	e35c0008 	cmp	r12, #8
}

/*
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    6eac:	e24c7007 	sub	r7, r12, #7
    6eb0:	9a000082 	bls	70c0 <alt_sdmmc_write+0x4a4>
    6eb4:	e2853020 	add	r3, r5, #32
        {
            uint32_t i;
            uint32_t free_space = ALT_SDMMC_FIFO_NUM_ENTRIES - level;
            free_space = ALT_MIN(data_size / 4, free_space);

            for (i = 0; i < free_space; i++)
    6eb8:	e1a00001 	mov	r0, r1
            {
                alt_write_word(ALT_SDMMC_DATA_ADDR, *buffer);
    6ebc:	e5134020 	ldr	r4, [r3, #-32]	; 0xffffffe0
    6ec0:	f5d3f068 	pld	[r3, #104]	; 0x68
}

/*
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    6ec4:	e1a06003 	mov	r6, r3
    6ec8:	e2833020 	add	r3, r3, #32
    6ecc:	e2801009 	add	r1, r0, #9
            uint32_t free_space = ALT_SDMMC_FIFO_NUM_ENTRIES - level;
            free_space = ALT_MIN(data_size / 4, free_space);

            for (i = 0; i < free_space; i++)
            {
                alt_write_word(ALT_SDMMC_DATA_ADDR, *buffer);
    6ed0:	e5024dff 	str	r4, [r2, #-3583]	; 0xfffff201
    6ed4:	e1510007 	cmp	r1, r7
    6ed8:	e513403c 	ldr	r4, [r3, #-60]	; 0xffffffc4
        {
            uint32_t i;
            uint32_t free_space = ALT_SDMMC_FIFO_NUM_ENTRIES - level;
            free_space = ALT_MIN(data_size / 4, free_space);

            for (i = 0; i < free_space; i++)
    6edc:	e2801008 	add	r1, r0, #8
    6ee0:	e1a00001 	mov	r0, r1
            {
                alt_write_word(ALT_SDMMC_DATA_ADDR, *buffer);
    6ee4:	e5024dff 	str	r4, [r2, #-3583]	; 0xfffff201
    6ee8:	e5134038 	ldr	r4, [r3, #-56]	; 0xffffffc8
    6eec:	e5024dff 	str	r4, [r2, #-3583]	; 0xfffff201
    6ef0:	e5134034 	ldr	r4, [r3, #-52]	; 0xffffffcc
    6ef4:	e5024dff 	str	r4, [r2, #-3583]	; 0xfffff201
    6ef8:	e5134030 	ldr	r4, [r3, #-48]	; 0xffffffd0
    6efc:	e5024dff 	str	r4, [r2, #-3583]	; 0xfffff201
    6f00:	e513402c 	ldr	r4, [r3, #-44]	; 0xffffffd4
    6f04:	e5024dff 	str	r4, [r2, #-3583]	; 0xfffff201
    6f08:	e5134028 	ldr	r4, [r3, #-40]	; 0xffffffd8
    6f0c:	e5024dff 	str	r4, [r2, #-3583]	; 0xfffff201
    6f10:	e5134024 	ldr	r4, [r3, #-36]	; 0xffffffdc
    6f14:	e5024dff 	str	r4, [r2, #-3583]	; 0xfffff201
    6f18:	3affffe7 	bcc	6ebc <alt_sdmmc_write+0x2a0>
}

/*
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    6f1c:	e2863004 	add	r3, r6, #4
            uint32_t free_space = ALT_SDMMC_FIFO_NUM_ENTRIES - level;
            free_space = ALT_MIN(data_size / 4, free_space);

            for (i = 0; i < free_space; i++)
            {
                alt_write_word(ALT_SDMMC_DATA_ADDR, *buffer);
    6f20:	e5130004 	ldr	r0, [r3, #-4]
        {
            uint32_t i;
            uint32_t free_space = ALT_SDMMC_FIFO_NUM_ENTRIES - level;
            free_space = ALT_MIN(data_size / 4, free_space);

            for (i = 0; i < free_space; i++)
    6f24:	e2811001 	add	r1, r1, #1
    6f28:	e151000c 	cmp	r1, r12
    6f2c:	e2833004 	add	r3, r3, #4
            {
                alt_write_word(ALT_SDMMC_DATA_ADDR, *buffer);
    6f30:	e5020dff 	str	r0, [r2, #-3583]	; 0xfffff201
        {
            uint32_t i;
            uint32_t free_space = ALT_SDMMC_FIFO_NUM_ENTRIES - level;
            free_space = ALT_MIN(data_size / 4, free_space);

            for (i = 0; i < free_space; i++)
    6f34:	3afffff9 	bcc	6f20 <alt_sdmmc_write+0x304>
}

/*
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    6f38:	e1a0c10c 	lsl	r12, r12, #2
    6f3c:	e085500c 	add	r5, r5, r12

    uint32_t data_size = size;
    bool read_freeze  = false;
    bool write_freeze = false;
    
    while (data_size > 0)
    6f40:	e058800c 	subs	r8, r8, r12
    6f44:	0a000050 	beq	708c <alt_sdmmc_write+0x470>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    6f48:	e5121fbf 	ldr	r1, [r2, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    6f4c:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    6f50:	e0013003 	and	r3, r1, r3
    6f54:	e3530000 	cmp	r3, #0
    6f58:	0affffbf 	beq	6e5c <alt_sdmmc_write+0x240>
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    6f5c:	e3020398 	movw	r0, #9112	; 0x2398
    6f60:	e3400002 	movt	r0, #2
    6f64:	ebffe53a 	bl	454 <print_debug>
        /*  Error checking*/
        status = alt_sdmmc_error_status_detect();

        if (status != ALT_E_SUCCESS)
        {
            dprintf("Interrupt error detected\n");
    6f68:	e3020464 	movw	r0, #9316	; 0x2464
    6f6c:	e3400002 	movt	r0, #2
    6f70:	ebffe537 	bl	454 <print_debug>
    6f74:	e3e00000 	mvn	r0, #0
    6f78:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        return ALT_E_SUCCESS;
    }

    if (!alt_sdmmc_is_idle())
    {
        return ALT_E_ERROR;
    6f7c:	e3e00000 	mvn	r0, #0
    6f80:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    uint16_t block_size;
    uint32_t cmd_index = 0;

    if (buf_len == 0)
    {
        return ALT_E_SUCCESS;
    6f84:	e1a0000a 	mov	r0, r10
    6f88:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
            {
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
    6f8c:	e3020480 	movw	r0, #9344	; 0x2480
    6f90:	e3400002 	movt	r0, #2
    6f94:	ebffe52e 	bl	454 <print_debug>
                return status;
    6f98:	e3e0000b 	mvn	r0, #11
    6f9c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    6fa0:	e5173f7f 	ldr	r3, [r7, #-3967]	; 0xfffff081
    6fa4:	e3130080 	tst	r3, #128	; 0x80
    6fa8:	0affffa2 	beq	6e38 <alt_sdmmc_write+0x21c>
    dprintf("\nalt_sdmmc_dma_trans_helper: buf_len = %d\n",
                                                (int)buf_len);
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    /* Pointer to current descriptor*/
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;
    6fac:	e3043000 	movw	r3, #16384	; 0x4000

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    6fb0:	e3580000 	cmp	r8, #0
    dprintf("\nalt_sdmmc_dma_trans_helper: buf_len = %d\n",
                                                (int)buf_len);
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    /* Pointer to current descriptor*/
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;
    6fb4:	e3423673 	movt	r3, #9843	; 0x2673
    6fb8:	e5934820 	ldr	r4, [r3, #2080]	; 0x820

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    6fbc:	0a000032 	beq	708c <alt_sdmmc_write+0x470>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    6fc0:	e5171fbf 	ldr	r1, [r7, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    6fc4:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    6fc8:	e0013003 	and	r3, r1, r3
    6fcc:	e3530000 	cmp	r3, #0
    6fd0:	1a00003c 	bne	70c8 <alt_sdmmc_write+0x4ac>
    6fd4:	e1a06008 	mov	r6, r8
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    6fd8:	e3009337 	movw	r9, #823	; 0x337
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    6fdc:	e3a0a001 	mov	r10, #1
    6fe0:	ea000003 	b	6ff4 <alt_sdmmc_write+0x3d8>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    6fe4:	e5171fbf 	ldr	r1, [r7, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    6fe8:	e0013003 	and	r3, r1, r3
    6fec:	e3530000 	cmp	r3, #0
    6ff0:	1a000034 	bne	70c8 <alt_sdmmc_write+0x4ac>
        {
            status = ALT_E_ERROR;
            break;
        }
        /* If current descriptor is free then fill it*/
        if (cur_dma_desc->des0.fld.own == 0)
    6ff4:	e5d43003 	ldrb	r3, [r4, #3]
    6ff8:	e1b023a3 	lsrs	r2, r3, #7
    6ffc:	1a000015 	bne	7058 <alt_sdmmc_write+0x43c>
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
    7000:	e5d41000 	ldrb	r1, [r4]
            break;
        }
        /* If current descriptor is free then fill it*/
        if (cur_dma_desc->des0.fld.own == 0)
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
    7004:	e3560c02 	cmp	r6, #512	; 0x200
    7008:	31a02006 	movcc	r2, r6
    700c:	23a02c02 	movcs	r2, #512	; 0x200
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    7010:	e058c006 	subs	r12, r8, r6
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    7014:	e1d400b4 	ldrh	r0, [r4, #4]
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    7018:	e27ce000 	rsbs	lr, r12, #0
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
            /* Descriptor could be used*/
            cur_dma_desc->des0.fld.own = 1;
    701c:	e3833080 	orr	r3, r3, #128	; 0x80
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    7020:	e0bee00c 	adcs	lr, lr, r12
    7024:	e3811002 	orr	r1, r1, #2

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    7028:	e0566002 	subs	r6, r6, r2
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    702c:	e7c3119e 	bfi	r1, lr, #3, #1

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    7030:	13a0c000 	movne	r12, #0
    7034:	03a0c001 	moveq	r12, #1
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    7038:	e7cc0012 	bfi	r0, r2, #0, #13

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    703c:	e7c2111c 	bfi	r1, r12, #2, #1
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
            /* Set address of buffer in memory*/
            cur_dma_desc->des2.fld.bap1 = cur_buffer;
    7040:	e5845008 	str	r5, [r4, #8]
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    7044:	e1c400b4 	strh	r0, [r4, #4]
            dprintf("socfpga_setup_dma_add: des_adrdr %08X des2_paddr %08X des1_len %08X len_left %08X\n", 
                        (int)cur_dma_desc, (int)cur_buffer, (int)set_len, (int)len_left);
#endif

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
    7048:	e0855002 	add	r5, r5, r2
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    704c:	e5c41000 	strb	r1, [r4]
            /* Descriptor could be used*/
            cur_dma_desc->des0.fld.own = 1;
    7050:	e5c43003 	strb	r3, [r4, #3]
            /* Currernt descriptor set to the next element */
            cur_dma_desc = (ALT_SDMMC_DMA_BUF_DESC_t *)cur_dma_desc->des3.fld.bap2_or_next;
    7054:	e594400c 	ldr	r4, [r4, #12]
        }
        
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    7058:	e3a01b02 	mov	r1, #2048	; 0x800
    705c:	e59f0078 	ldr	r0, [pc, #120]	; 70dc <alt_sdmmc_write+0x4c0>
    7060:	ebffe98f 	bl	16a4 <alt_cache_system_purge>
/*
// Returns the current SD/MMC controller interrupt IDMAC status conditions.
*/
uint32_t alt_sdmmc_dma_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_IDSTS_ADDR);
    7064:	e5173f73 	ldr	r3, [r7, #-3955]	; 0xfffff08d
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
        
        idmac_status = alt_sdmmc_dma_int_status_get();

        /*  If DMA status is as descriptor unavailable then resume transfer and clean interrupt status*/
        if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_DU)
    7068:	e3130010 	tst	r3, #16
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    706c:	15079f73 	strne	r9, [r7, #-3955]	; 0xfffff08d
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    7070:	1507af7b 	strne	r10, [r7, #-3963]	; 0xfffff085
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
        
        idmac_status = alt_sdmmc_dma_int_status_get();

        /*  If DMA status is as descriptor unavailable then resume transfer and clean interrupt status*/
        if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_DU)
    7074:	1a000001 	bne	7080 <alt_sdmmc_write+0x464>
        {
            alt_sdmmc_dma_int_clear(ALT_SDMMC_DMA_INT_STATUS_ALL);
            alt_sdmmc_poll_demand_set(0x1);
        }
        /*  If DMA status is another abnormal then break with error*/
        else if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_AI)
    7078:	e3130c02 	tst	r3, #512	; 0x200
    707c:	1affffbe 	bne	6f7c <alt_sdmmc_write+0x360>
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    7080:	e3560000 	cmp	r6, #0
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    7084:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    7088:	1affffd5 	bne	6fe4 <alt_sdmmc_write+0x3c8>
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
{
    return alt_sdmmc_transfer(card_info, (uint32_t)dest, src, size, ALT_SDMMC_TMOD_WRITE);
}
    708c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    {
        return status;
    }

    /* Wait for data transfer complete*/
    status = alt_sdmmc_data_done_waiter();
    7090:	eafff5ce 	b	47d0 <alt_sdmmc_data_done_waiter>

    /* Send transfer command*/

    if (card_info->card_type == ALT_SDMMC_CARD_TYPE_SDHC)
    {
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, (ALT_SDMMC_CMD_INDEX_t)cmd_index, start_addr / block_size, NULL);
    7094:	e6afa07a 	sxtb	r10, r10
    7098:	e1a01004 	mov	r1, r4
    709c:	e1a00006 	mov	r0, r6
    70a0:	eb004625 	bl	1893c <__aeabi_uidiv>
    70a4:	e3a02000 	mov	r2, #0
    70a8:	e1a01000 	mov	r1, r0
    70ac:	e1a0000a 	mov	r0, r10
    70b0:	ebfff604 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    70b4:	eaffff58 	b	6e1c <alt_sdmmc_write+0x200>
    block_size = alt_sdmmc_block_size_get();

    if (   (start_addr % block_size != 0) 
        || (buf_len    % block_size != 0))
    {
        return ALT_E_BAD_ARG;
    70b8:	e3e00008 	mvn	r0, #8
    70bc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
}

/*
// This function performs SDMMC write.
*/
ALT_STATUS_CODE alt_sdmmc_write(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    70c0:	e1a06005 	mov	r6, r5
    70c4:	eaffff94 	b	6f1c <alt_sdmmc_write+0x300>
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    70c8:	e3020398 	movw	r0, #9112	; 0x2398
    70cc:	e3400002 	movt	r0, #2
    70d0:	ebffe4df 	bl	454 <print_debug>
        uint32_t idmac_status;
        /* Error checking*/
        status = alt_sdmmc_error_status_detect();
        if (status != ALT_E_SUCCESS)
        {
            status = ALT_E_ERROR;
    70d4:	e3e00000 	mvn	r0, #0
    70d8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    70dc:	26734020 	.word	0x26734020

000070e0 <alt_sdmmc_read>:

/*
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
{
    70e0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    uint32_t block_count;
    uint32_t byte_count;
    uint16_t block_size;
    uint32_t cmd_index = 0;

    if (buf_len == 0)
    70e4:	e253a000 	subs	r10, r3, #0

/*
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
{
    70e8:	e1a07000 	mov	r7, r0
    70ec:	e1a05001 	mov	r5, r1
    70f0:	e1a06002 	mov	r6, r2
    uint32_t block_count;
    uint32_t byte_count;
    uint16_t block_size;
    uint32_t cmd_index = 0;

    if (buf_len == 0)
    70f4:	0a0000d2 	beq	7444 <alt_sdmmc_read+0x364>
/*
// Returns ALT_E_TRUE if the SD/MMC and iddmac controller is in idle state
*/
static ALT_STATUS_CODE alt_sdmmc_is_idle(void)
{
    uint32_t mmc_state = ALT_SDMMC_STAT_CMD_FSM_STATES_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    70f8:	e3049fff 	movw	r9, #20479	; 0x4fff
    70fc:	e34f9f70 	movt	r9, #65392	; 0xff70
    7100:	e5193fb7 	ldr	r3, [r9, #-4023]	; 0xfffff049
    
    uint32_t dma_state = ALT_SDMMC_IDSTS_FSM_GET(alt_read_word(ALT_SDMMC_IDSTS_ADDR));
    7104:	e5192f73 	ldr	r2, [r9, #-3955]	; 0xfffff08d
/*
// Returns ALT_E_TRUE if the SD/MMC and iddmac controller is in idle state
*/
static ALT_STATUS_CODE alt_sdmmc_is_idle(void)
{
    uint32_t mmc_state = ALT_SDMMC_STAT_CMD_FSM_STATES_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    7108:	e7e33253 	ubfx	r3, r3, #4, #4
    
    uint32_t dma_state = ALT_SDMMC_IDSTS_FSM_GET(alt_read_word(ALT_SDMMC_IDSTS_ADDR));
    710c:	e7e326d2 	ubfx	r2, r2, #13, #4
    
    if ((mmc_state != ALT_SDMMC_FSM_IDLE) || (dma_state != ALT_SDMMC_DMA_FSM_IDLE))
    7110:	e1923003 	orrs	r3, r2, r3
    7114:	1a0000c8 	bne	743c <alt_sdmmc_read+0x35c>
/*
// Get block size
*/
static __inline uint16_t alt_sdmmc_block_size_get(void)
{
    uint32_t blksiz_register = alt_read_word(ALT_SDMMC_BLKSIZ_ADDR);
    7118:	e5194fe3 	ldr	r4, [r9, #-4067]	; 0xfffff01d
        return ALT_E_ERROR;
    }

    block_size = alt_sdmmc_block_size_get();

    if (   (start_addr % block_size != 0) 
    711c:	e1a00006 	mov	r0, r6
    7120:	e6ff4074 	uxth	r4, r4
    7124:	e1a01004 	mov	r1, r4
    7128:	eb004640 	bl	18a30 <__aeabi_uidivmod>
    712c:	e3510000 	cmp	r1, #0
    7130:	1a000110 	bne	7578 <alt_sdmmc_read+0x498>
        || (buf_len    % block_size != 0))
    7134:	e1a0000a 	mov	r0, r10
    7138:	e1a01004 	mov	r1, r4
    713c:	eb00463b 	bl	18a30 <__aeabi_uidivmod>
    7140:	e3510000 	cmp	r1, #0
    7144:	1a00010b 	bne	7578 <alt_sdmmc_read+0x498>
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    7148:	e5193fff 	ldr	r3, [r9, #-4095]	; 0xfffff001
/*
// FIFO reset
*/
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    714c:	e3a0ca02 	mov	r12, #8192	; 0x2000

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    7150:	e1a08009 	mov	r8, r9
ALT_STATUS_CODE alt_sdmmc_fifo_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    7154:	e3833002 	orr	r3, r3, #2
    7158:	e5093fff 	str	r3, [r9, #-4095]	; 0xfffff001
    715c:	ea000001 	b	7168 <alt_sdmmc_read+0x88>
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
                                                && --timeout)
    7160:	e25cc001 	subs	r12, r12, #1
    7164:	0a0000bb 	beq	7458 <alt_sdmmc_read+0x378>

    /*  Activate fifo reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_FIFO_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_FIFO_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    7168:	e5181fff 	ldr	r1, [r8, #-4095]	; 0xfffff001
    716c:	e3042fff 	movw	r2, #20479	; 0x4fff
    7170:	e34f2f70 	movt	r2, #65392	; 0xff70
    7174:	e3110002 	tst	r1, #2
    7178:	1afffff8 	bne	7160 <alt_sdmmc_read+0x80>
                                                && --timeout)
        ;

    /*  If fifo reset still are active, return timeout error*/
    if (timeout == 0)
    717c:	e35c0000 	cmp	r12, #0
    7180:	0a0000b4 	beq	7458 <alt_sdmmc_read+0x378>
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    7184:	e5123fff 	ldr	r3, [r2, #-4095]	; 0xfffff001
    7188:	e3130402 	tst	r3, #33554432	; 0x2000000
    718c:	0a00000f 	beq	71d0 <alt_sdmmc_read+0xf0>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    7190:	e5123f7f 	ldr	r3, [r2, #-3967]	; 0xfffff081
    7194:	e3130080 	tst	r3, #128	; 0x80
    7198:	0a00000c 	beq	71d0 <alt_sdmmc_read+0xf0>
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    719c:	e5120fff 	ldr	r0, [r2, #-4095]	; 0xfffff001
/*
// DMA reset
*/
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;
    71a0:	e3a03a02 	mov	r3, #8192	; 0x2000

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    71a4:	e1a01002 	mov	r1, r2
ALT_STATUS_CODE alt_sdmmc_dma_reset(void)
{
    uint32_t timeout = ALT_SDMMC_MAX_T_POLL_COUNT;

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    71a8:	e3800004 	orr	r0, r0, #4
    71ac:	e5020fff 	str	r0, [r2, #-4095]	; 0xfffff001
    71b0:	ea000001 	b	71bc <alt_sdmmc_read+0xdc>
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
                                                && --timeout)
    71b4:	e2533001 	subs	r3, r3, #1
    71b8:	0a0000a6 	beq	7458 <alt_sdmmc_read+0x378>

    /* Activate dma reset*/
    alt_setbits_word(ALT_SDMMC_CTL_ADDR, ALT_SDMMC_CTL_DMA_RST_SET_MSK);
    
    /*  Wait to complete reset or timeout*/
    while (ALT_SDMMC_CTL_DMA_RST_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    71bc:	e5112fff 	ldr	r2, [r1, #-4095]	; 0xfffff001
    71c0:	e3120004 	tst	r2, #4
    71c4:	1afffffa 	bne	71b4 <alt_sdmmc_read+0xd4>
                                                && --timeout)
        ;

    /*  If dma reset still are active, return timeout error*/
    if (timeout == 0)
    71c8:	e3530000 	cmp	r3, #0
    71cc:	0a0000a1 	beq	7458 <alt_sdmmc_read+0x378>
    {
        return ALT_E_BAD_ARG;
    }

    /*  Number of block to transfer*/
    block_count = buf_len / block_size;
    71d0:	e1a0000a 	mov	r0, r10
    71d4:	e1a01004 	mov	r1, r4
    71d8:	eb0045d7 	bl	1893c <__aeabi_uidiv>
    /*  New count of reading byte*/
    byte_count = block_count * block_size;
    71dc:	e0080094 	mul	r8, r4, r0
/*
// Set byte count
*/
static __inline ALT_STATUS_CODE alt_sdmmc_byte_count_set(uint32_t count)
{
    alt_replbits_word(ALT_SDMMC_BYTCNT_ADDR,
    71e0:	e3043fff 	movw	r3, #20479	; 0x4fff
    71e4:	e34f3f70 	movt	r3, #65392	; 0xff70
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    71e8:	e30f2ffe 	movw	r2, #65534	; 0xfffe
/*
// Set byte count
*/
static __inline ALT_STATUS_CODE alt_sdmmc_byte_count_set(uint32_t count)
{
    alt_replbits_word(ALT_SDMMC_BYTCNT_ADDR,
    71ec:	e5131fdf 	ldr	r1, [r3, #-4063]	; 0xfffff021
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    71f0:	e34f2000 	movt	r2, #61440	; 0xf000
    }

    alt_sdmmc_byte_count_set(byte_count);
    alt_sdmmc_card_rd_threshold_enable(0x80);

    if (buf_len == block_size)
    71f4:	e15a0004 	cmp	r10, r4
/*
// Set byte count
*/
static __inline ALT_STATUS_CODE alt_sdmmc_byte_count_set(uint32_t count)
{
    alt_replbits_word(ALT_SDMMC_BYTCNT_ADDR,
    71f8:	e5038fdf 	str	r8, [r3, #-4063]	; 0xfffff021
    }

    alt_sdmmc_byte_count_set(byte_count);
    alt_sdmmc_card_rd_threshold_enable(0x80);

    if (buf_len == block_size)
    71fc:	13a0a012 	movne	r10, #18
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    7200:	e5131eff 	ldr	r1, [r3, #-3839]	; 0xfffff101
    }

    alt_sdmmc_byte_count_set(byte_count);
    alt_sdmmc_card_rd_threshold_enable(0x80);

    if (buf_len == block_size)
    7204:	03a0a011 	moveq	r10, #17
/*
// Enable Card Read Threshold .
*/
ALT_STATUS_CODE alt_sdmmc_card_rd_threshold_enable(const uint32_t threshold)
{
    alt_replbits_word(ALT_SDMMC_CARDTHRCTL_ADDR,
    7208:	e0012002 	and	r2, r1, r2
    720c:	e3822502 	orr	r2, r2, #8388608	; 0x800000
    7210:	e3822001 	orr	r2, r2, #1
    7214:	e5032eff 	str	r2, [r3, #-3839]	; 0xfffff101
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    7218:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    721c:	e3120402 	tst	r2, #33554432	; 0x2000000
    7220:	0a000027 	beq	72c4 <alt_sdmmc_read+0x1e4>
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    7224:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
    7228:	e3130080 	tst	r3, #128	; 0x80
    722c:	0a000024 	beq	72c4 <alt_sdmmc_read+0x1e4>
// Clear descriptors of chain for DMA operations
*/
static ALT_STATUS_CODE alt_sdmmc_desc_chain_clear()
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;
    7230:	e59f9364 	ldr	r9, [pc, #868]	; 759c <alt_sdmmc_read+0x4bc>
    7234:	e1a03009 	mov	r3, r9
}

/*
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    7238:	e2890b02 	add	r0, r9, #2048	; 0x800

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
    723c:	e5d32000 	ldrb	r2, [r3]
    7240:	e2833010 	add	r3, r3, #16
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    7244:	e1530000 	cmp	r3, r0
    {
        dma_desc[count].des0.fld.own  = 0;
    7248:	e553100d 	ldrb	r1, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    724c:	e20220f9 	and	r2, r2, #249	; 0xf9
        dma_desc[count].des1.fld.bs1  = 0;
    7250:	e153e0bc 	ldrh	lr, [r3, #-12]
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    7254:	e7c3219f 	bfc	r2, #3, #1
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    7258:	e513c008 	ldr	r12, [r3, #-8]
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    725c:	e7c7139f 	bfc	r1, #7, #1
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
    7260:	e5432010 	strb	r2, [r3, #-16]
        dma_desc[count].des1.fld.bs1  = 0;
    7264:	e7cce01f 	bfc	lr, #0, #13
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    {
        dma_desc[count].des0.fld.own  = 0;
    7268:	e543100d 	strb	r1, [r3, #-13]
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    726c:	e7dfc01f 	bfc	r12, #0, #32
    {
        dma_desc[count].des0.fld.own  = 0;
        dma_desc[count].des0.fld.dic  = 0;
        dma_desc[count].des0.fld.ld   = 0;
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
    7270:	e143e0bc 	strh	lr, [r3, #-12]
        dma_desc[count].des2.fld.bap1 = 0;
    7274:	e503c008 	str	r12, [r3, #-8]
{
    uint32_t count;
    ALT_SDMMC_DMA_BUF_DESC_t * dma_desc = dma_descriptors;

    /*  Clean descriptions*/
    for (count = 0; count < ALT_SDMMC_DMA_DESC_COUNT; count++)
    7278:	1affffef 	bne	723c <alt_sdmmc_read+0x15c>
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    727c:	e304b000 	movw	r11, #16384	; 0x4000
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    7280:	e3a01b02 	mov	r1, #2048	; 0x800
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    7284:	e342b673 	movt	r11, #9843	; 0x2673
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    7288:	e28b0020 	add	r0, r11, #32
        dma_desc[count].des0.fld.fs   = 0;
        dma_desc[count].des1.fld.bs1  = 0;
        dma_desc[count].des2.fld.bap1 = 0;
    }

    dma_cur_descr = dma_desc;
    728c:	e58b9820 	str	r9, [r11, #2080]	; 0x820
        
    return alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    7290:	ebffe903 	bl	16a4 <alt_cache_system_purge>
    uint32_t bmod_set_mask = ALT_SDMMC_BMOD_PBL_SET_MSK
                           | ALT_SDMMC_BMOD_FB_SET_MSK
                           | ALT_SDMMC_BMOD_DSL_SET_MSK;

    /*  Set start address of descriptor chain*/
    alt_write_word(ALT_SDMMC_DBADDR_ADDR, (uint32_t)buf_desc_list);
    7294:	e59b2820 	ldr	r2, [r11, #2080]	; 0x820
    7298:	e3043fff 	movw	r3, #20479	; 0x4fff
    729c:	e34f3f70 	movt	r3, #65392	; 0xff70
    72a0:	e5032f77 	str	r2, [r3, #-3959]	; 0xfffff089

    alt_replbits_word(ALT_SDMMC_BMOD_ADDR, bmod_set_mask, bmod_set_value);
    72a4:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    72a8:	e3c22e77 	bic	r2, r2, #1904	; 0x770
    72ac:	e3c2200e 	bic	r2, r2, #14
    72b0:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
// Enable the specified SD/MMC controller interrupt status conditions identified in
// the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_enable(const uint32_t mask)
{
    alt_setbits_word(ALT_SDMMC_IDINTEN_ADDR, mask);
    72b4:	e5132f6f 	ldr	r2, [r3, #-3951]	; 0xfffff091
    72b8:	e3822fcd 	orr	r2, r2, #820	; 0x334
    72bc:	e3822003 	orr	r2, r2, #3
    72c0:	e5032f6f 	str	r2, [r3, #-3951]	; 0xfffff091
    dprintf("\nstart_addr = %d\n", (int)start_addr);
#endif

    /* Send transfer command*/

    if (card_info->card_type == ALT_SDMMC_CARD_TYPE_SDHC)
    72c4:	e5d73000 	ldrb	r3, [r7]
    72c8:	e3530005 	cmp	r3, #5
    72cc:	0a0000a0 	beq	7554 <alt_sdmmc_read+0x474>
    {
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, (ALT_SDMMC_CMD_INDEX_t)cmd_index, start_addr / block_size, NULL);
    }
    else
    {
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, (ALT_SDMMC_CMD_INDEX_t)cmd_index, start_addr, NULL);
    72d0:	e1a0000a 	mov	r0, r10
    72d4:	e1a01006 	mov	r1, r6
    72d8:	e3a02000 	mov	r2, #0
    72dc:	ebfff579 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    }

    if (status != ALT_E_SUCCESS)
    72e0:	e3500000 	cmp	r0, #0
    72e4:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
/*
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
    72e8:	e3047fff 	movw	r7, #20479	; 0x4fff
    72ec:	e34f7f70 	movt	r7, #65392	; 0xff70
    72f0:	e5173fff 	ldr	r3, [r7, #-4095]	; 0xfffff001
    72f4:	e3130402 	tst	r3, #33554432	; 0x2000000
    72f8:	1a000058 	bne	7460 <alt_sdmmc_read+0x380>

    uint32_t data_size = size;
    bool read_freeze  = false;
    bool write_freeze = false;
    
    while (data_size > 0)
    72fc:	e3580000 	cmp	r8, #0
    7300:	0a000091 	beq	754c <alt_sdmmc_read+0x46c>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    7304:	e3042fff 	movw	r2, #20479	; 0x4fff
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    7308:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    730c:	e34f2f70 	movt	r2, #65392	; 0xff70
    7310:	e5121fbf 	ldr	r1, [r2, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    7314:	e0013003 	and	r3, r1, r3
    7318:	e3530000 	cmp	r3, #0
    731c:	1a00003e 	bne	741c <alt_sdmmc_read+0x33c>
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    7320:	e5121fb7 	ldr	r1, [r2, #-4023]	; 0xfffff049
        }

        do
        {
            read_freeze =  ((transfer_mode == ALT_SDMMC_TMOD_READ)
                                            && (alt_sdmmc_fifo_is_empty() == true));
    7324:	e304323f 	movw	r3, #16959	; 0x423f
    7328:	e340300f 	movt	r3, #15
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    732c:	e7e01151 	ubfx	r1, r1, #2, #1
    7330:	ea000003 	b	7344 <alt_sdmmc_read+0x264>
    7334:	e5121fb7 	ldr	r1, [r2, #-4023]	; 0xfffff049
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
#ifdef LOGGER
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
    7338:	e2533001 	subs	r3, r3, #1
/*
// Returns ALT_E_TRUE when the receive FIFO is empty.
*/
bool alt_sdmmc_fifo_is_empty(void)
{
    if (ALT_SDMMC_STAT_FIFO_EMPTY_GET(alt_read_word(ALT_SDMMC_STAT_ADDR)) ==
    733c:	e7e01151 	ubfx	r1, r1, #2, #1
            write_freeze = ((transfer_mode == ALT_SDMMC_TMOD_WRITE)
                                            && (alt_sdmmc_fifo_is_full() == true));
#ifdef LOGGER
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
    7340:	0a000041 	beq	744c <alt_sdmmc_read+0x36c>
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
                return status;
            }
        }
        while (read_freeze || write_freeze);
    7344:	e3510000 	cmp	r1, #0
    7348:	1afffff9 	bne	7334 <alt_sdmmc_read+0x254>
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    734c:	e5123fb7 	ldr	r3, [r2, #-4023]	; 0xfffff049
        /*  Read out the resulting received data as they come in.*/

        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);
    7350:	e1a0c128 	lsr	r12, r8, #2
/*
// Returns the number of valid entries in the receive FIFO.
*/
int32_t alt_sdmmc_fifo_count(void)
{
    return (int32_t)ALT_SDMMC_STAT_FIFO_COUNT_GET(alt_read_word(ALT_SDMMC_STAT_ADDR));
    7354:	e7ec38d3 	ubfx	r3, r3, #17, #13
        /*  Read out the resulting received data as they come in.*/

        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);
    7358:	e15c0003 	cmp	r12, r3
    735c:	21a0c003 	movcs	r12, r3

            for (i = 0; i < level; i++)
    7360:	e35c0000 	cmp	r12, #0
    7364:	0a000025 	beq	7400 <alt_sdmmc_read+0x320>
    7368:	e35c0008 	cmp	r12, #8
}

/*
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    736c:	e24c7007 	sub	r7, r12, #7
    7370:	9a000082 	bls	7580 <alt_sdmmc_read+0x4a0>
    7374:	e2853020 	add	r3, r5, #32
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    7378:	e1a00001 	mov	r0, r1
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    737c:	e5124dff 	ldr	r4, [r2, #-3583]	; 0xfffff201
    7380:	f5d3f068 	pld	[r3, #104]	; 0x68
}

/*
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    7384:	e1a06003 	mov	r6, r3
    7388:	e2833020 	add	r3, r3, #32
    738c:	e2801009 	add	r1, r0, #9
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    7390:	e5034040 	str	r4, [r3, #-64]	; 0xffffffc0
    7394:	e1510007 	cmp	r1, r7
    7398:	e5124dff 	ldr	r4, [r2, #-3583]	; 0xfffff201
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    739c:	e2801008 	add	r1, r0, #8
    73a0:	e1a00001 	mov	r0, r1
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    73a4:	e503403c 	str	r4, [r3, #-60]	; 0xffffffc4
    73a8:	e5124dff 	ldr	r4, [r2, #-3583]	; 0xfffff201
    73ac:	e5034038 	str	r4, [r3, #-56]	; 0xffffffc8
    73b0:	e5124dff 	ldr	r4, [r2, #-3583]	; 0xfffff201
    73b4:	e5034034 	str	r4, [r3, #-52]	; 0xffffffcc
    73b8:	e5124dff 	ldr	r4, [r2, #-3583]	; 0xfffff201
    73bc:	e5034030 	str	r4, [r3, #-48]	; 0xffffffd0
    73c0:	e5124dff 	ldr	r4, [r2, #-3583]	; 0xfffff201
    73c4:	e503402c 	str	r4, [r3, #-44]	; 0xffffffd4
    73c8:	e5124dff 	ldr	r4, [r2, #-3583]	; 0xfffff201
    73cc:	e5034028 	str	r4, [r3, #-40]	; 0xffffffd8
    73d0:	e5124dff 	ldr	r4, [r2, #-3583]	; 0xfffff201
    73d4:	e5034024 	str	r4, [r3, #-36]	; 0xffffffdc
    73d8:	3affffe7 	bcc	737c <alt_sdmmc_read+0x29c>
}

/*
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    73dc:	e2863004 	add	r3, r6, #4
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    73e0:	e5120dff 	ldr	r0, [r2, #-3583]	; 0xfffff201
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    73e4:	e2811001 	add	r1, r1, #1
    73e8:	e151000c 	cmp	r1, r12
    73ec:	e2833004 	add	r3, r3, #4
            {
                *buffer = ALT_SDMMC_DATA_VALUE_GET(alt_read_word(ALT_SDMMC_DATA_ADDR));
    73f0:	e5030008 	str	r0, [r3, #-8]
        if (transfer_mode == ALT_SDMMC_TMOD_READ)
        {
            uint32_t i;
            level = ALT_MIN(data_size / 4, level);

            for (i = 0; i < level; i++)
    73f4:	3afffff9 	bcc	73e0 <alt_sdmmc_read+0x300>
}

/*
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    73f8:	e1a0c10c 	lsl	r12, r12, #2
    73fc:	e085500c 	add	r5, r5, r12

    uint32_t data_size = size;
    bool read_freeze  = false;
    bool write_freeze = false;
    
    while (data_size > 0)
    7400:	e058800c 	subs	r8, r8, r12
    7404:	0a000050 	beq	754c <alt_sdmmc_read+0x46c>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    7408:	e5121fbf 	ldr	r1, [r2, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    740c:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    7410:	e0013003 	and	r3, r1, r3
    7414:	e3530000 	cmp	r3, #0
    7418:	0affffc0 	beq	7320 <alt_sdmmc_read+0x240>
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    741c:	e3020398 	movw	r0, #9112	; 0x2398
    7420:	e3400002 	movt	r0, #2
    7424:	ebffe40a 	bl	454 <print_debug>
        /*  Error checking*/
        status = alt_sdmmc_error_status_detect();

        if (status != ALT_E_SUCCESS)
        {
            dprintf("Interrupt error detected\n");
    7428:	e3020464 	movw	r0, #9316	; 0x2464
    742c:	e3400002 	movt	r0, #2
    7430:	ebffe407 	bl	454 <print_debug>
    7434:	e3e00000 	mvn	r0, #0
    7438:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        return ALT_E_SUCCESS;
    }

    if (!alt_sdmmc_is_idle())
    {
        return ALT_E_ERROR;
    743c:	e3e00000 	mvn	r0, #0
    7440:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    uint16_t block_size;
    uint32_t cmd_index = 0;

    if (buf_len == 0)
    {
        return ALT_E_SUCCESS;
    7444:	e1a0000a 	mov	r0, r10
    7448:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
            dprintf("\nread_freeze = %x write_freeze = %x\n", (int)read_freeze, (int)write_freeze);
#endif
            if (--timeout == 0)
            {
                status = ALT_E_TMO;
                dprintf("Timed out due to FIFO not available\n");
    744c:	e3020480 	movw	r0, #9344	; 0x2480
    7450:	e3400002 	movt	r0, #2
    7454:	ebffe3fe 	bl	454 <print_debug>
                return status;
    7458:	e3e0000b 	mvn	r0, #11
    745c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
// Enables the SD/MMC Internal DMA Controller.
*/
ALT_STATUS_CODE alt_sdmmc_is_dma_enabled(void)
{
    if (   ALT_SDMMC_CTL_USE_INTERNAL_DMAC_GET(alt_read_word(ALT_SDMMC_CTL_ADDR))
        && ALT_SDMMC_BMOD_DE_GET(alt_read_word(ALT_SDMMC_BMOD_ADDR)))
    7460:	e5173f7f 	ldr	r3, [r7, #-3967]	; 0xfffff081
    7464:	e3130080 	tst	r3, #128	; 0x80
    7468:	0affffa3 	beq	72fc <alt_sdmmc_read+0x21c>
    dprintf("\nalt_sdmmc_dma_trans_helper: buf_len = %d\n",
                                                (int)buf_len);
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    /* Pointer to current descriptor*/
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;
    746c:	e3043000 	movw	r3, #16384	; 0x4000

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    7470:	e3580000 	cmp	r8, #0
    dprintf("\nalt_sdmmc_dma_trans_helper: buf_len = %d\n",
                                                (int)buf_len);
#endif
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    /* Pointer to current descriptor*/
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;
    7474:	e3423673 	movt	r3, #9843	; 0x2673
    7478:	e5934820 	ldr	r4, [r3, #2080]	; 0x820

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    747c:	0a000032 	beq	754c <alt_sdmmc_read+0x46c>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    7480:	e5171fbf 	ldr	r1, [r7, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    7484:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    7488:	e0013003 	and	r3, r1, r3
    748c:	e3530000 	cmp	r3, #0
    7490:	1a00003c 	bne	7588 <alt_sdmmc_read+0x4a8>
    7494:	e1a06008 	mov	r6, r8
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    7498:	e3009337 	movw	r9, #823	; 0x337
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    749c:	e3a0a001 	mov	r10, #1
    74a0:	ea000003 	b	74b4 <alt_sdmmc_read+0x3d4>
/*
// Returns the current SD/MMC controller interrupt status conditions.
*/
uint32_t alt_sdmmc_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_MINTSTS_ADDR);
    74a4:	e5171fbf 	ldr	r1, [r7, #-4031]	; 0xfffff041
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    74a8:	e0013003 	and	r3, r1, r3
    74ac:	e3530000 	cmp	r3, #0
    74b0:	1a000034 	bne	7588 <alt_sdmmc_read+0x4a8>
        {
            status = ALT_E_ERROR;
            break;
        }
        /* If current descriptor is free then fill it*/
        if (cur_dma_desc->des0.fld.own == 0)
    74b4:	e5d43003 	ldrb	r3, [r4, #3]
    74b8:	e1b023a3 	lsrs	r2, r3, #7
    74bc:	1a000015 	bne	7518 <alt_sdmmc_read+0x438>
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
    74c0:	e5d41000 	ldrb	r1, [r4]
            break;
        }
        /* If current descriptor is free then fill it*/
        if (cur_dma_desc->des0.fld.own == 0)
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
    74c4:	e3560c02 	cmp	r6, #512	; 0x200
    74c8:	31a02006 	movcc	r2, r6
    74cc:	23a02c02 	movcs	r2, #512	; 0x200
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    74d0:	e058c006 	subs	r12, r8, r6
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    74d4:	e1d400b4 	ldrh	r0, [r4, #4]
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    74d8:	e27ce000 	rsbs	lr, r12, #0
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
            /* Descriptor could be used*/
            cur_dma_desc->des0.fld.own = 1;
    74dc:	e3833080 	orr	r3, r3, #128	; 0x80
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    74e0:	e0bee00c 	adcs	lr, lr, r12
    74e4:	e3811002 	orr	r1, r1, #2

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    74e8:	e0566002 	subs	r6, r6, r2
        {
            int set_len = len_left > ALT_SDMMC_DMA_SEGMENT_SIZE ? ALT_SDMMC_DMA_SEGMENT_SIZE : len_left;
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
    74ec:	e7c3119e 	bfi	r1, lr, #3, #1

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    74f0:	13a0c000 	movne	r12, #0
    74f4:	03a0c001 	moveq	r12, #1
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    74f8:	e7cc0012 	bfi	r0, r2, #0, #13

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    74fc:	e7c2111c 	bfi	r1, r12, #2, #1
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
            /* Set address of buffer in memory*/
            cur_dma_desc->des2.fld.bap1 = cur_buffer;
    7500:	e5845008 	str	r5, [r4, #8]
            /* Disable interrupt after it will be free*/
            cur_dma_desc->des0.fld.dic = 1;/* socfpga->dma_cur_pos % 4;*/
            /* Set If it is first part of buffer for transfer*/
            cur_dma_desc->des0.fld.fs = (buf_len == len_left) ? 1 : 0;
            /* Set size of des2*/
            cur_dma_desc->des1.fld.bs1 = set_len;
    7504:	e1c400b4 	strh	r0, [r4, #4]
            dprintf("socfpga_setup_dma_add: des_adrdr %08X des2_paddr %08X des1_len %08X len_left %08X\n", 
                        (int)cur_dma_desc, (int)cur_buffer, (int)set_len, (int)len_left);
#endif

            /* Update address buffer and buffer len*/
            cur_buffer += set_len;
    7508:	e0855002 	add	r5, r5, r2
            len_left -= set_len;
            /* Set if it is last part of buffer*/
            cur_dma_desc->des0.fld.ld = (len_left == 0) ? 1 : 0;
    750c:	e5c41000 	strb	r1, [r4]
            /* Descriptor could be used*/
            cur_dma_desc->des0.fld.own = 1;
    7510:	e5c43003 	strb	r3, [r4, #3]
            /* Currernt descriptor set to the next element */
            cur_dma_desc = (ALT_SDMMC_DMA_BUF_DESC_t *)cur_dma_desc->des3.fld.bap2_or_next;
    7514:	e594400c 	ldr	r4, [r4, #12]
        }
        
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
    7518:	e3a01b02 	mov	r1, #2048	; 0x800
    751c:	e59f0078 	ldr	r0, [pc, #120]	; 759c <alt_sdmmc_read+0x4bc>
    7520:	ebffe85f 	bl	16a4 <alt_cache_system_purge>
/*
// Returns the current SD/MMC controller interrupt IDMAC status conditions.
*/
uint32_t alt_sdmmc_dma_int_status_get(void)
{
    return alt_read_word(ALT_SDMMC_IDSTS_ADDR);
    7524:	e5173f73 	ldr	r3, [r7, #-3955]	; 0xfffff08d
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
        
        idmac_status = alt_sdmmc_dma_int_status_get();

        /*  If DMA status is as descriptor unavailable then resume transfer and clean interrupt status*/
        if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_DU)
    7528:	e3130010 	tst	r3, #16
// Clears the specified SD/MMC controller interrupt status IDMAC conditions identified
// in the mask.
*/
ALT_STATUS_CODE alt_sdmmc_dma_int_clear(const uint32_t mask)
{
    alt_write_word(ALT_SDMMC_IDSTS_ADDR, mask);
    752c:	15079f73 	strne	r9, [r7, #-3955]	; 0xfffff08d
/*
// Sets value into this register for the IDMAC FSM to resume normal descriptor fetch operation.
*/
ALT_STATUS_CODE alt_sdmmc_poll_demand_set(const uint32_t value)
{
    alt_write_word(ALT_SDMMC_PLDMND_ADDR, ALT_SDMMC_PLDMND_PD_SET(value));
    7530:	1507af7b 	strne	r10, [r7, #-3963]	; 0xfffff085
        alt_cache_system_purge(dma_descriptors, ALT_SDMMC_DMA_BUF_DESC_CACHE_SIZE);
        
        idmac_status = alt_sdmmc_dma_int_status_get();

        /*  If DMA status is as descriptor unavailable then resume transfer and clean interrupt status*/
        if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_DU)
    7534:	1a000001 	bne	7540 <alt_sdmmc_read+0x460>
        {
            alt_sdmmc_dma_int_clear(ALT_SDMMC_DMA_INT_STATUS_ALL);
            alt_sdmmc_poll_demand_set(0x1);
        }
        /*  If DMA status is another abnormal then break with error*/
        else if (idmac_status & ALT_SDMMC_DMA_INT_STATUS_AI)
    7538:	e3130c02 	tst	r3, #512	; 0x200
    753c:	1affffbe 	bne	743c <alt_sdmmc_read+0x35c>
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    7540:	e3560000 	cmp	r6, #0
    {
        return status;
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    7544:	e30b3bc2 	movw	r3, #48066	; 0xbbc2
    ALT_SDMMC_DMA_BUF_DESC_t *cur_dma_desc = dma_cur_descr;

    uint32_t cur_buffer = (uint32_t)buffer;
    uint32_t len_left = buf_len;

    while (len_left > 0)
    7548:	1affffd5 	bne	74a4 <alt_sdmmc_read+0x3c4>
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
{
    return alt_sdmmc_transfer(card_info, (uint32_t)src, dest, size, ALT_SDMMC_TMOD_READ);
}
    754c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    {
        return status;
    }

    /* Wait for data transfer complete*/
    status = alt_sdmmc_data_done_waiter();
    7550:	eafff49e 	b	47d0 <alt_sdmmc_data_done_waiter>

    /* Send transfer command*/

    if (card_info->card_type == ALT_SDMMC_CARD_TYPE_SDHC)
    {
        status = alt_sdmmc_command_send(ALT_SDMMC_CMD_TYPE_BASIC, (ALT_SDMMC_CMD_INDEX_t)cmd_index, start_addr / block_size, NULL);
    7554:	e6afa07a 	sxtb	r10, r10
    7558:	e1a01004 	mov	r1, r4
    755c:	e1a00006 	mov	r0, r6
    7560:	eb0044f5 	bl	1893c <__aeabi_uidiv>
    7564:	e3a02000 	mov	r2, #0
    7568:	e1a01000 	mov	r1, r0
    756c:	e1a0000a 	mov	r0, r10
    7570:	ebfff4d4 	bl	48c8 <alt_sdmmc_command_send.constprop.14>
    7574:	eaffff59 	b	72e0 <alt_sdmmc_read+0x200>
    block_size = alt_sdmmc_block_size_get();

    if (   (start_addr % block_size != 0) 
        || (buf_len    % block_size != 0))
    {
        return ALT_E_BAD_ARG;
    7578:	e3e00008 	mvn	r0, #8
    757c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
}

/*
// This function performs SDMMC read.
*/
ALT_STATUS_CODE alt_sdmmc_read(ALT_SDMMC_CARD_INFO_t * card_info, void *dest, void *src, const size_t size)
    7580:	e1a06005 	mov	r6, r5
    7584:	eaffff94 	b	73dc <alt_sdmmc_read+0x2fc>
    }
    
    /*  Checking on errors*/
    if (int_status & err)
    {
        dprintf("alt_sdmmc_int_status_get err=0x%x\n", (unsigned int)int_status);
    7588:	e3020398 	movw	r0, #9112	; 0x2398
    758c:	e3400002 	movt	r0, #2
    7590:	ebffe3af 	bl	454 <print_debug>
        uint32_t idmac_status;
        /* Error checking*/
        status = alt_sdmmc_error_status_detect();
        if (status != ALT_E_SUCCESS)
        {
            status = ALT_E_ERROR;
    7594:	e3e00000 	mvn	r0, #0
    7598:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    759c:	26734020 	.word	0x26734020

000075a0 <alt_globaltmr_is_running>:
 * mode bit.
*************************************************************************************************************/

bool alt_globaltmr_is_running(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_ENABLE_BIT;
    75a0:	e3e03a13 	mvn	r3, #77824	; 0x13000
    75a4:	e5130df7 	ldr	r0, [r3, #-3575]	; 0xfffff209
}
    75a8:	e2000001 	and	r0, r0, #1
    75ac:	e12fff1e 	bx	lr

000075b0 <alt_globaltmr_uninit>:
/* alt_globaltmr_uninit() uninitializes the global timer modules                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_uninit(void)
{
    alt_clrbits_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    75b0:	e3e03a13 	mvn	r3, #77824	; 0x13000
                ALT_GLOBALTMR_COMP_ENABLE_BIT | ALT_GLOBALTMR_INT_ENABLE_BIT |
                ALT_GLOBALTMR_AUTOINC_ENABLE_BIT);
            /* do NOT clear the global timer enable bit or prescaler setting */
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, 0);
    75b4:	e3a02000 	mov	r2, #0
/* alt_globaltmr_uninit() uninitializes the global timer modules                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_uninit(void)
{
    alt_clrbits_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    75b8:	e5131df7 	ldr	r1, [r3, #-3575]	; 0xfffff209
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET, 0);
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_AUTOINC_REG_OFFSET, 0);
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_INT_STAT_REG_OFFSET, ALT_GLOBALTMR_INT_STATUS_BIT);
                /* clear any interrupts by writing one to sticky bit */
    return ALT_E_SUCCESS;
}
    75bc:	e1a00002 	mov	r0, r2
/* alt_globaltmr_uninit() uninitializes the global timer modules                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_uninit(void)
{
    alt_clrbits_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    75c0:	e3c1100e 	bic	r1, r1, #14
    75c4:	e5031df7 	str	r1, [r3, #-3575]	; 0xfffff209
                ALT_GLOBALTMR_COMP_ENABLE_BIT | ALT_GLOBALTMR_INT_ENABLE_BIT |
                ALT_GLOBALTMR_AUTOINC_ENABLE_BIT);
            /* do NOT clear the global timer enable bit or prescaler setting */
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, 0);
    75c8:	e5032def 	str	r2, [r3, #-3567]	; 0xfffff211
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET, 0);
    75cc:	e5032deb 	str	r2, [r3, #-3563]	; 0xfffff215
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_AUTOINC_REG_OFFSET, 0);
    75d0:	e5032de7 	str	r2, [r3, #-3559]	; 0xfffff219
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_INT_STAT_REG_OFFSET, ALT_GLOBALTMR_INT_STATUS_BIT);
    75d4:	e3a02001 	mov	r2, #1
    75d8:	e5032df3 	str	r2, [r3, #-3571]	; 0xfffff20d
                /* clear any interrupts by writing one to sticky bit */
    return ALT_E_SUCCESS;
}
    75dc:	e12fff1e 	bx	lr

000075e0 <alt_globaltmr_init>:
/* alt_globaltmr_uninit() uninitializes the global timer modules                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_uninit(void)
{
    alt_clrbits_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    75e0:	e3e03a13 	mvn	r3, #77824	; 0x13000
                ALT_GLOBALTMR_COMP_ENABLE_BIT | ALT_GLOBALTMR_INT_ENABLE_BIT |
                ALT_GLOBALTMR_AUTOINC_ENABLE_BIT);
            /* do NOT clear the global timer enable bit or prescaler setting */
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, 0);
    75e4:	e3a02000 	mov	r2, #0
/* alt_globaltmr_uninit() uninitializes the global timer modules                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_uninit(void)
{
    alt_clrbits_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    75e8:	e5131df7 	ldr	r1, [r3, #-3575]	; 0xfffff209
ALT_STATUS_CODE alt_globaltmr_init(void)
{
    alt_globaltmr_uninit();
    alt_setbits_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, ALT_GLOBALTMR_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    75ec:	e1a00002 	mov	r0, r2
/* alt_globaltmr_uninit() uninitializes the global timer modules                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_uninit(void)
{
    alt_clrbits_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    75f0:	e3c1100e 	bic	r1, r1, #14
    75f4:	e5031df7 	str	r1, [r3, #-3575]	; 0xfffff209
                ALT_GLOBALTMR_COMP_ENABLE_BIT | ALT_GLOBALTMR_INT_ENABLE_BIT |
                ALT_GLOBALTMR_AUTOINC_ENABLE_BIT);
            /* do NOT clear the global timer enable bit or prescaler setting */
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, 0);
    75f8:	e5032def 	str	r2, [r3, #-3567]	; 0xfffff211
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET, 0);
    75fc:	e5032deb 	str	r2, [r3, #-3563]	; 0xfffff215
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_AUTOINC_REG_OFFSET, 0);
    7600:	e5032de7 	str	r2, [r3, #-3559]	; 0xfffff219
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_INT_STAT_REG_OFFSET, ALT_GLOBALTMR_INT_STATUS_BIT);
    7604:	e3a02001 	mov	r2, #1
    7608:	e5032df3 	str	r2, [r3, #-3571]	; 0xfffff20d
/****************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_init(void)
{
    alt_globaltmr_uninit();
    alt_setbits_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, ALT_GLOBALTMR_ENABLE_BIT);
    760c:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    7610:	e3822001 	orr	r2, r2, #1
    7614:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
    return ALT_E_SUCCESS;
}
    7618:	e12fff1e 	bx	lr

0000761c <alt_globaltmr_stop>:

ALT_STATUS_CODE alt_globaltmr_stop(void)
{
    uint32_t        regdata;                /* value to read & write */

    regdata = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET);
    761c:	e3e03a13 	mvn	r3, #77824	; 0x13000
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, regdata & ~ALT_GLOBALTMR_COMP_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7620:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_globaltmr_stop(void)
{
    uint32_t        regdata;                /* value to read & write */

    regdata = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET);
    7624:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, regdata & ~ALT_GLOBALTMR_COMP_ENABLE_BIT);
    7628:	e3c22002 	bic	r2, r2, #2
    762c:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
    return ALT_E_SUCCESS;
}
    7630:	e12fff1e 	bx	lr

00007634 <alt_globaltmr_start>:

ALT_STATUS_CODE alt_globaltmr_start(void)
{
    uint32_t        regdata;                /* value to read & write */

    regdata = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET);
    7634:	e3e03a13 	mvn	r3, #77824	; 0x13000
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, regdata | (ALT_GLOBALTMR_COMP_ENABLE_BIT | ALT_GLOBALTMR_ENABLE_BIT));
    return ALT_E_SUCCESS;
}
    7638:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_globaltmr_start(void)
{
    uint32_t        regdata;                /* value to read & write */

    regdata = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET);
    763c:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, regdata | (ALT_GLOBALTMR_COMP_ENABLE_BIT | ALT_GLOBALTMR_ENABLE_BIT));
    7640:	e3822003 	orr	r2, r2, #3
    7644:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
    return ALT_E_SUCCESS;
}
    7648:	e12fff1e 	bx	lr

0000764c <alt_globaltmr_get>:
{
    ALT_STATUS_CODE     ret = ALT_E_ERROR;
    uint32_t            hi, lo, temp;                   /* temporary variables */
    uint32_t            cnt = 3;                        /* Timeout counter, do 3 tries */

    if ((highword == NULL) || (loword == NULL)) { ret = ALT_E_BAD_ARG; }
    764c:	e3500000 	cmp	r0, #0
    7650:	13510000 	cmpne	r1, #0
/*************************************************************************************************************
 * alt_globaltmr_get() returns the current value of the 64-bit global timer as two unsigned 32-bit quantities.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_get(uint32_t* highword, uint32_t* loword)
{
    7654:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    ALT_STATUS_CODE     ret = ALT_E_ERROR;
    uint32_t            hi, lo, temp;                   /* temporary variables */
    uint32_t            cnt = 3;                        /* Timeout counter, do 3 tries */

    if ((highword == NULL) || (loword == NULL)) { ret = ALT_E_BAD_ARG; }
    7658:	0a000017 	beq	76bc <alt_globaltmr_get+0x70>
    else
    {
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    765c:	e3e03a13 	mvn	r3, #77824	; 0x13000
    7660:	e5132dfb 	ldr	r2, [r3, #-3579]	; 0xfffff205
        do {
            temp = hi;
            lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    7664:	e513cdff 	ldr	r12, [r3, #-3583]	; 0xfffff201
            hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    7668:	e5134dfb 	ldr	r4, [r3, #-3579]	; 0xfffff205
        }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    766c:	e1520004 	cmp	r2, r4
    7670:	0a00000c 	beq	76a8 <alt_globaltmr_get+0x5c>
    else
    {
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
        do {
            temp = hi;
            lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    7674:	e513cdff 	ldr	r12, [r3, #-3583]	; 0xfffff201
            hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    7678:	e5132dfb 	ldr	r2, [r3, #-3579]	; 0xfffff205
        }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    767c:	e1540002 	cmp	r4, r2
    7680:	0a000008 	beq	76a8 <alt_globaltmr_get+0x5c>
    else
    {
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
        do {
            temp = hi;
            lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    7684:	e513cdff 	ldr	r12, [r3, #-3583]	; 0xfffff201
            hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    7688:	e5134dfb 	ldr	r4, [r3, #-3579]	; 0xfffff205
        }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    768c:	e1520004 	cmp	r2, r4
    7690:	0a000004 	beq	76a8 <alt_globaltmr_get+0x5c>
    else
    {
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
        do {
            temp = hi;
            lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    7694:	e513cdff 	ldr	r12, [r3, #-3583]	; 0xfffff201
            hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    7698:	e5132dfb 	ldr	r2, [r3, #-3579]	; 0xfffff205
        }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    769c:	e1520004 	cmp	r2, r4
 * alt_globaltmr_get() returns the current value of the 64-bit global timer as two unsigned 32-bit quantities.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_get(uint32_t* highword, uint32_t* loword)
{
    ALT_STATUS_CODE     ret = ALT_E_ERROR;
    76a0:	03e00000 	mvneq	r0, #0
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
        do {
            temp = hi;
            lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
            hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
        }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    76a4:	0a000002 	beq	76b4 <alt_globaltmr_get+0x68>
                       /* note that if the first condition is true, cnt is neither tested nor decremented */

        if (cnt) {
            *highword = hi;
    76a8:	e5802000 	str	r2, [r0]
            *loword = lo;
            ret = ALT_E_SUCCESS;
    76ac:	e3a00000 	mov	r0, #0
        }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
                       /* note that if the first condition is true, cnt is neither tested nor decremented */

        if (cnt) {
            *highword = hi;
            *loword = lo;
    76b0:	e581c000 	str	r12, [r1]
            ret = ALT_E_SUCCESS;
        }
    }
    return ret;
}
    76b4:	e8bd0010 	ldmfd	sp!, {r4}
    76b8:	e12fff1e 	bx	lr
{
    ALT_STATUS_CODE     ret = ALT_E_ERROR;
    uint32_t            hi, lo, temp;                   /* temporary variables */
    uint32_t            cnt = 3;                        /* Timeout counter, do 3 tries */

    if ((highword == NULL) || (loword == NULL)) { ret = ALT_E_BAD_ARG; }
    76bc:	e3e00008 	mvn	r0, #8
    76c0:	eafffffb 	b	76b4 <alt_globaltmr_get+0x68>

000076c4 <alt_globaltmr_get64>:

    uint64_t        ret = 0;                    /* zero a very unlikely value for this timer */
    uint32_t        hi, lo, temp;               /* temporary variables */
    uint32_t        cnt = 3;                    /* Timeout counter, do 3 tries */

    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    76c4:	e3e03a13 	mvn	r3, #77824	; 0x13000
    76c8:	e5131dfb 	ldr	r1, [r3, #-3579]	; 0xfffff205
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    76cc:	e5130dff 	ldr	r0, [r3, #-3583]	; 0xfffff201
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    76d0:	e5132dfb 	ldr	r2, [r3, #-3579]	; 0xfffff205
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    76d4:	e1510002 	cmp	r1, r2
    76d8:	0a00000d 	beq	7714 <alt_globaltmr_get64+0x50>
    uint32_t        cnt = 3;                    /* Timeout counter, do 3 tries */

    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    76dc:	e5130dff 	ldr	r0, [r3, #-3583]	; 0xfffff201
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    76e0:	e5131dfb 	ldr	r1, [r3, #-3579]	; 0xfffff205
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    76e4:	e1520001 	cmp	r2, r1
    76e8:	0a000009 	beq	7714 <alt_globaltmr_get64+0x50>
    uint32_t        cnt = 3;                    /* Timeout counter, do 3 tries */

    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    76ec:	e5130dff 	ldr	r0, [r3, #-3583]	; 0xfffff201
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    76f0:	e5132dfb 	ldr	r2, [r3, #-3579]	; 0xfffff205
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    76f4:	e1510002 	cmp	r1, r2
    76f8:	0a000005 	beq	7714 <alt_globaltmr_get64+0x50>
    uint32_t        cnt = 3;                    /* Timeout counter, do 3 tries */

    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    76fc:	e5130dff 	ldr	r0, [r3, #-3583]	; 0xfffff201
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    7700:	e5131dfb 	ldr	r1, [r3, #-3579]	; 0xfffff205
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    7704:	e1510002 	cmp	r1, r2
*************************************************************************************************************/

uint64_t  alt_globaltmr_get64(void)
{

    uint64_t        ret = 0;                    /* zero a very unlikely value for this timer */
    7708:	03a02000 	moveq	r2, #0
    770c:	03a03000 	moveq	r3, #0
    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    7710:	0a000002 	beq	7720 <alt_globaltmr_get64+0x5c>
                        /* note that if the first condition is true, cnt is neither tested nor decremented */

    if (cnt)
    {
        ret = (uint64_t) hi;
        ret = (ret << (sizeof(uint32_t)*8)) | lo;
    7714:	e3a02000 	mov	r2, #0
    7718:	e1a03001 	mov	r3, r1
    771c:	e1822000 	orr	r2, r2, r0
    }
    return ret;
}
    7720:	e1a00002 	mov	r0, r2
    7724:	e1a01003 	mov	r1, r3
    7728:	e12fff1e 	bx	lr

0000772c <alt_globaltmr_counter_get_low32>:
 * alt_globaltmr_counter_get_low32() returns the least-significant 32 bits of the current global timer value.
*************************************************************************************************************/

uint32_t alt_globaltmr_counter_get_low32(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    772c:	e3e03a13 	mvn	r3, #77824	; 0x13000
    7730:	e5130dff 	ldr	r0, [r3, #-3583]	; 0xfffff201

}
    7734:	e12fff1e 	bx	lr

00007738 <alt_globaltmr_counter_get_hi32>:
 * alt_globaltmr_counter_get_hi32() returns the most-significant 32 bits of the current global timer value.
*************************************************************************************************************/

uint32_t alt_globaltmr_counter_get_hi32(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    7738:	e3e03a13 	mvn	r3, #77824	; 0x13000
    773c:	e5130dfb 	ldr	r0, [r3, #-3579]	; 0xfffff205
}
    7740:	e12fff1e 	bx	lr

00007744 <alt_globaltmr_comp_set>:
 * alt_globaltmr_is_comp_mode() checks and returns the state of the comparison enable bit of the global timer.
*************************************************************************************************************/

bool alt_globaltmr_is_comp_mode(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_COMP_ENABLE_BIT;
    7744:	e3e03a13 	mvn	r3, #77824	; 0x13000
    7748:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
ALT_STATUS_CODE alt_globaltmr_comp_set(uint32_t highword, uint32_t loword)
{
    bool                was_comping = false;
    ALT_STATUS_CODE     ret = ALT_E_ERROR;

    if (alt_globaltmr_is_comp_mode())                   /* necessary to prevent a spurious interrupt */
    774c:	e3120002 	tst	r2, #2
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7750:	15132df7 	ldrne	r2, [r3, #-3575]	; 0xfffff209
    {
        was_comping = true;
        ret = alt_globaltmr_comp_mode_stop();
        if (ret != ALT_E_SUCCESS)   { return ret; }
    }
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, loword);
    7754:	05031def 	streq	r1, [r3, #-3567]	; 0xfffff211
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET, highword);
    7758:	05030deb 	streq	r0, [r3, #-3563]	; 0xfffff215
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    775c:	13c22002 	bicne	r2, r2, #2
    7760:	15032df7 	strne	r2, [r3, #-3575]	; 0xfffff209
    {
        was_comping = true;
        ret = alt_globaltmr_comp_mode_stop();
        if (ret != ALT_E_SUCCESS)   { return ret; }
    }
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, loword);
    7764:	15031def 	strne	r1, [r3, #-3567]	; 0xfffff211
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET, highword);
    7768:	15030deb 	strne	r0, [r3, #-3563]	; 0xfffff215
    ret = ALT_E_SUCCESS;

    if (was_comping)  { ret = alt_globaltmr_comp_mode_start(); }
                /* If global timer was in comparison mode before, re-enable it before returning */
    return    ret;
}
    776c:	e3a00000 	mov	r0, #0
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_start(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7770:	15132df7 	ldrne	r2, [r3, #-3575]	; 0xfffff209
    7774:	13822002 	orrne	r2, r2, #2
    7778:	15032df7 	strne	r2, [r3, #-3575]	; 0xfffff209
    ret = ALT_E_SUCCESS;

    if (was_comping)  { ret = alt_globaltmr_comp_mode_start(); }
                /* If global timer was in comparison mode before, re-enable it before returning */
    return    ret;
}
    777c:	e12fff1e 	bx	lr

00007780 <alt_globaltmr_comp_set64>:
 * alt_globaltmr_is_comp_mode() checks and returns the state of the comparison enable bit of the global timer.
*************************************************************************************************************/

bool alt_globaltmr_is_comp_mode(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_COMP_ENABLE_BIT;
    7780:	e3e03a13 	mvn	r3, #77824	; 0x13000
    7784:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
ALT_STATUS_CODE alt_globaltmr_comp_set64(uint64_t compval)
{
    ALT_STATUS_CODE     ret = ALT_E_ERROR;
    bool                was_comping = false;

    if (alt_globaltmr_is_comp_mode())
    7788:	e3120002 	tst	r2, #2
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    778c:	15132df7 	ldrne	r2, [r3, #-3575]	; 0xfffff209
        was_comping = true;
        ret = alt_globaltmr_comp_mode_stop();
        if (ret != ALT_E_SUCCESS)   { return ret; }
    }

    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, (uint32_t) (compval & UINT32_MAX));
    7790:	05030def 	streq	r0, [r3, #-3567]	; 0xfffff211
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET,
    7794:	05031deb 	streq	r1, [r3, #-3563]	; 0xfffff215
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7798:	13c22002 	bicne	r2, r2, #2
    779c:	15032df7 	strne	r2, [r3, #-3575]	; 0xfffff209
        was_comping = true;
        ret = alt_globaltmr_comp_mode_stop();
        if (ret != ALT_E_SUCCESS)   { return ret; }
    }

    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, (uint32_t) (compval & UINT32_MAX));
    77a0:	15030def 	strne	r0, [r3, #-3567]	; 0xfffff211
    ret = ALT_E_SUCCESS;

    if (was_comping)  { ret = alt_globaltmr_comp_mode_start(); }
                                /* If global timer was in comparison mode before, re-enable it */
    return    ret;
}
    77a4:	e3a00000 	mov	r0, #0
        ret = alt_globaltmr_comp_mode_stop();
        if (ret != ALT_E_SUCCESS)   { return ret; }
    }

    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET, (uint32_t) (compval & UINT32_MAX));
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET,
    77a8:	15031deb 	strne	r1, [r3, #-3563]	; 0xfffff215
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_start(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    77ac:	15132df7 	ldrne	r2, [r3, #-3575]	; 0xfffff209
    77b0:	13822002 	orrne	r2, r2, #2
    77b4:	15032df7 	strne	r2, [r3, #-3575]	; 0xfffff209
    ret = ALT_E_SUCCESS;

    if (was_comping)  { ret = alt_globaltmr_comp_mode_start(); }
                                /* If global timer was in comparison mode before, re-enable it */
    return    ret;
}
    77b8:	e12fff1e 	bx	lr

000077bc <alt_globaltmr_comp_get>:
 * uint32_t pointers.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_get(uint32_t *hiword, uint32_t *loword)
{
    if ((hiword == NULL) || (loword == NULL)) {return ALT_E_ERROR; }
    77bc:	e3500000 	cmp	r0, #0
    77c0:	13510000 	cmpne	r1, #0
    77c4:	e1a03000 	mov	r3, r0
    *loword = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET);
    77c8:	13e02a13 	mvnne	r2, #77824	; 0x13000
 * uint32_t pointers.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_get(uint32_t *hiword, uint32_t *loword)
{
    if ((hiword == NULL) || (loword == NULL)) {return ALT_E_ERROR; }
    77cc:	13a00000 	movne	r0, #0
    77d0:	03a00001 	moveq	r0, #1
    *loword = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET);
    77d4:	1512cdef 	ldrne	r12, [r2, #-3567]	; 0xfffff211
 * uint32_t pointers.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_get(uint32_t *hiword, uint32_t *loword)
{
    if ((hiword == NULL) || (loword == NULL)) {return ALT_E_ERROR; }
    77d8:	03e00000 	mvneq	r0, #0
    *loword = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET);
    77dc:	1581c000 	strne	r12, [r1]
    *hiword = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET);
    77e0:	15122deb 	ldrne	r2, [r2, #-3563]	; 0xfffff215
    77e4:	15832000 	strne	r2, [r3]
    /* no need to read these multiple times since the register is not expected to change mid-read */
    return    ALT_E_SUCCESS;
}
    77e8:	e12fff1e 	bx	lr

000077ec <alt_globaltmr_comp_get64>:

uint64_t alt_globaltmr_comp_get64(void)
{
    uint64_t        ret;

    ret = ((uint64_t) alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET)) << (sizeof(uint32_t)*8);
    77ec:	e3e03a13 	mvn	r3, #77824	; 0x13000
    77f0:	e3a00000 	mov	r0, #0
    77f4:	e5132deb 	ldr	r2, [r3, #-3563]	; 0xfffff215
    ret = ret | ((uint64_t) alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET));
    77f8:	e513cdef 	ldr	r12, [r3, #-3567]	; 0xfffff211

uint64_t alt_globaltmr_comp_get64(void)
{
    uint64_t        ret;

    ret = ((uint64_t) alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET)) << (sizeof(uint32_t)*8);
    77fc:	e1a01002 	mov	r1, r2
    ret = ret | ((uint64_t) alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET));
    7800:	e180200c 	orr	r2, r0, r12
    return ret;
}
    7804:	e1a00002 	mov	r0, r2
    7808:	e12fff1e 	bx	lr

0000780c <alt_globaltmr_remain_get>:

uint64_t alt_globaltmr_comp_get64(void)
{
    uint64_t        ret;

    ret = ((uint64_t) alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET)) << (sizeof(uint32_t)*8);
    780c:	e3e01a13 	mvn	r1, #77824	; 0x13000
 *  set the comparator value, however, this may not be true and more than 32 bits may be required to express
 *  the difference.
*************************************************************************************************************/

uint32_t alt_globaltmr_remain_get(void)
{
    7810:	e92d0030 	push	{r4, r5}

uint64_t alt_globaltmr_comp_get64(void)
{
    uint64_t        ret;

    ret = ((uint64_t) alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_HI_REG_OFFSET)) << (sizeof(uint32_t)*8);
    7814:	e5115deb 	ldr	r5, [r1, #-3563]	; 0xfffff215
    7818:	e3a02000 	mov	r2, #0
    ret = ret | ((uint64_t) alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_COMP_LO_REG_OFFSET));
    781c:	e5110def 	ldr	r0, [r1, #-3567]	; 0xfffff211

    uint64_t        ret = 0;                    /* zero a very unlikely value for this timer */
    uint32_t        hi, lo, temp;               /* temporary variables */
    uint32_t        cnt = 3;                    /* Timeout counter, do 3 tries */

    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    7820:	e511cdfb 	ldr	r12, [r1, #-3579]	; 0xfffff205
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    7824:	e5114dff 	ldr	r4, [r1, #-3583]	; 0xfffff201
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    7828:	e5115dfb 	ldr	r5, [r1, #-3579]	; 0xfffff205
 *  the difference.
*************************************************************************************************************/

uint32_t alt_globaltmr_remain_get(void)
{
    return (uint32_t) (alt_globaltmr_comp_get64() - alt_globaltmr_get64());
    782c:	e1800002 	orr	r0, r0, r2
    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    7830:	e15c0005 	cmp	r12, r5
    7834:	0a00000b 	beq	7868 <alt_globaltmr_remain_get+0x5c>
    uint32_t        cnt = 3;                    /* Timeout counter, do 3 tries */

    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    7838:	e5114dff 	ldr	r4, [r1, #-3583]	; 0xfffff201
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    783c:	e511cdfb 	ldr	r12, [r1, #-3579]	; 0xfffff205
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    7840:	e155000c 	cmp	r5, r12
    7844:	0a000007 	beq	7868 <alt_globaltmr_remain_get+0x5c>
    uint32_t        cnt = 3;                    /* Timeout counter, do 3 tries */

    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    7848:	e5114dff 	ldr	r4, [r1, #-3583]	; 0xfffff201
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    784c:	e5115dfb 	ldr	r5, [r1, #-3579]	; 0xfffff205
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    7850:	e15c0005 	cmp	r12, r5
    7854:	0a000003 	beq	7868 <alt_globaltmr_remain_get+0x5c>
    uint32_t        cnt = 3;                    /* Timeout counter, do 3 tries */

    hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    do {
        temp = hi;
        lo = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_LO_REG_OFFSET);
    7858:	e5114dff 	ldr	r4, [r1, #-3583]	; 0xfffff201
        hi = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CNTR_HI_REG_OFFSET);
    785c:	e511cdfb 	ldr	r12, [r1, #-3579]	; 0xfffff205
    }  while ((temp != hi) && (cnt--));             /* has the high-order word read the same twice yet? */
    7860:	e15c0005 	cmp	r12, r5
    7864:	0a000001 	beq	7870 <alt_globaltmr_remain_get+0x64>
                        /* note that if the first condition is true, cnt is neither tested nor decremented */

    if (cnt)
    {
        ret = (uint64_t) hi;
        ret = (ret << (sizeof(uint32_t)*8)) | lo;
    7868:	e3a02000 	mov	r2, #0
    786c:	e1842002 	orr	r2, r4, r2
*************************************************************************************************************/

uint32_t alt_globaltmr_remain_get(void)
{
    return (uint32_t) (alt_globaltmr_comp_get64() - alt_globaltmr_get64());
}
    7870:	e0620000 	rsb	r0, r2, r0
    7874:	e8bd0030 	pop	{r4, r5}
    7878:	e12fff1e 	bx	lr

0000787c <alt_globaltmr_comp_mode_start>:
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_start(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    787c:	e3e03a13 	mvn	r3, #77824	; 0x13000
                alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) | ALT_GLOBALTMR_COMP_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7880:	e3a00000 	mov	r0, #0
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_start(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7884:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    7888:	e3822002 	orr	r2, r2, #2
    788c:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
                alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) | ALT_GLOBALTMR_COMP_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7890:	e12fff1e 	bx	lr

00007894 <alt_globaltmr_comp_mode_stop>:
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7894:	e3e03a13 	mvn	r3, #77824	; 0x13000
                alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_COMP_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7898:	e3a00000 	mov	r0, #0
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    789c:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    78a0:	e3c22002 	bic	r2, r2, #2
    78a4:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
                alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_COMP_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    78a8:	e12fff1e 	bx	lr

000078ac <alt_globaltmr_is_comp_mode>:
 * alt_globaltmr_is_comp_mode() checks and returns the state of the comparison enable bit of the global timer.
*************************************************************************************************************/

bool alt_globaltmr_is_comp_mode(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_COMP_ENABLE_BIT;
    78ac:	e3e03a13 	mvn	r3, #77824	; 0x13000
    78b0:	e5130df7 	ldr	r0, [r3, #-3575]	; 0xfffff209
}
    78b4:	e7e000d0 	ubfx	r0, r0, #1, #1
    78b8:	e12fff1e 	bx	lr

000078bc <alt_globaltmr_prescaler_get>:
 * less than the actual counter divisor. Valid output = 0-255.
*************************************************************************************************************/

uint32_t alt_globaltmr_prescaler_get(void)
{
    return (alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_PS_MASK) >> ALT_GLOBALTMR_PS_SHIFT;
    78bc:	e3e03a13 	mvn	r3, #77824	; 0x13000
    78c0:	e5130df7 	ldr	r0, [r3, #-3575]	; 0xfffff209
}
    78c4:	e7e70450 	ubfx	r0, r0, #8, #8
    78c8:	e12fff1e 	bx	lr

000078cc <alt_globaltmr_prescaler_set>:
{
    /* It is not defined in the ARM global timer spec if the prescaler can be rewritten while
     *the global timer is counting or not. This is how we find out: */
    uint32_t        regdata;

    if (val > UINT8_MAX) return ALT_E_BAD_ARG;
    78cc:	e35000ff 	cmp	r0, #255	; 0xff
 * alt_globaltmr_prescaler_set() sets the prescaler value of the global timer, which is one
 * less than the actual counter divisor.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_prescaler_set(uint32_t val)
{
    78d0:	e1a03000 	mov	r3, r0
    /* It is not defined in the ARM global timer spec if the prescaler can be rewritten while
     *the global timer is counting or not. This is how we find out: */
    uint32_t        regdata;

    if (val > UINT8_MAX) return ALT_E_BAD_ARG;
    regdata = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_PS_MASK;
    78d4:	93e02a13 	mvnls	r2, #77824	; 0x13000
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, regdata | (val << ALT_GLOBALTMR_PS_SHIFT));
    return ALT_E_SUCCESS;
    78d8:	93a00000 	movls	r0, #0
    /* It is not defined in the ARM global timer spec if the prescaler can be rewritten while
     *the global timer is counting or not. This is how we find out: */
    uint32_t        regdata;

    if (val > UINT8_MAX) return ALT_E_BAD_ARG;
    regdata = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_PS_MASK;
    78dc:	95121df7 	ldrls	r1, [r2, #-3575]	; 0xfffff209
{
    /* It is not defined in the ARM global timer spec if the prescaler can be rewritten while
     *the global timer is counting or not. This is how we find out: */
    uint32_t        regdata;

    if (val > UINT8_MAX) return ALT_E_BAD_ARG;
    78e0:	83e00008 	mvnhi	r0, #8
    regdata = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_PS_MASK;
    78e4:	93c11cff 	bicls	r1, r1, #65280	; 0xff00
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, regdata | (val << ALT_GLOBALTMR_PS_SHIFT));
    78e8:	91813403 	orrls	r3, r1, r3, lsl #8
    78ec:	95023df7 	strls	r3, [r2, #-3575]	; 0xfffff209
    return ALT_E_SUCCESS;
}
    78f0:	e12fff1e 	bx	lr

000078f4 <alt_globaltmr_autoinc_set>:
 * alt_globaltmr_is_comp_mode() checks and returns the state of the comparison enable bit of the global timer.
*************************************************************************************************************/

bool alt_globaltmr_is_comp_mode(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_COMP_ENABLE_BIT;
    78f4:	e3e03a13 	mvn	r3, #77824	; 0x13000
    78f8:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
ALT_STATUS_CODE alt_globaltmr_autoinc_set(uint32_t inc)
{
    ALT_STATUS_CODE     ret = ALT_E_ERROR;
    bool                was_comping = false;

    if (alt_globaltmr_is_comp_mode())
    78fc:	e3120002 	tst	r2, #2
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7900:	15132df7 	ldrne	r2, [r3, #-3575]	; 0xfffff209
        ret = alt_globaltmr_comp_mode_stop();
                            /* if timer is currently in comparison mode, disable comparison mode */
        if (ret != ALT_E_SUCCESS)   { return ret; }
    }

    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_AUTOINC_REG_OFFSET, inc);
    7904:	05030de7 	streq	r0, [r3, #-3559]	; 0xfffff219
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7908:	13c22002 	bicne	r2, r2, #2
    790c:	15032df7 	strne	r2, [r3, #-3575]	; 0xfffff209
        ret = alt_globaltmr_comp_mode_stop();
                            /* if timer is currently in comparison mode, disable comparison mode */
        if (ret != ALT_E_SUCCESS)   { return ret; }
    }

    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_AUTOINC_REG_OFFSET, inc);
    7910:	15030de7 	strne	r0, [r3, #-3559]	; 0xfffff219
    ret = ALT_E_SUCCESS;

    if (was_comping)  { ret = alt_globaltmr_comp_mode_start(); }
                      /* If global timer was in comparison mode before, re-enable it */
    return    ret;
}
    7914:	e3a00000 	mov	r0, #0
 * comparison mode operation.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_comp_mode_start(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7918:	15132df7 	ldrne	r2, [r3, #-3575]	; 0xfffff209
    791c:	13822002 	orrne	r2, r2, #2
    7920:	15032df7 	strne	r2, [r3, #-3575]	; 0xfffff209
    ret = ALT_E_SUCCESS;

    if (was_comping)  { ret = alt_globaltmr_comp_mode_start(); }
                      /* If global timer was in comparison mode before, re-enable it */
    return    ret;
}
    7924:	e12fff1e 	bx	lr

00007928 <alt_globaltmr_autoinc_get>:
 * alt_globaltmr_autoinc_get() returns the value of the auto-increment register of the global timer.
*************************************************************************************************************/

uint32_t alt_globaltmr_autoinc_get(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_AUTOINC_REG_OFFSET);
    7928:	e3e03a13 	mvn	r3, #77824	; 0x13000
    792c:	e5130de7 	ldr	r0, [r3, #-3559]	; 0xfffff219
}
    7930:	e12fff1e 	bx	lr

00007934 <alt_globaltmr_autoinc_mode_start>:
 * auto-increment or periodic timer mode.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_autoinc_mode_start(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7934:	e3e03a13 	mvn	r3, #77824	; 0x13000
            alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) | ALT_GLOBALTMR_AUTOINC_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7938:	e3a00000 	mov	r0, #0
 * auto-increment or periodic timer mode.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_autoinc_mode_start(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    793c:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    7940:	e3822008 	orr	r2, r2, #8
    7944:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
            alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) | ALT_GLOBALTMR_AUTOINC_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7948:	e12fff1e 	bx	lr

0000794c <alt_globaltmr_autoinc_mode_stop>:
 * one-shot timer mode.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_autoinc_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    794c:	e3e03a13 	mvn	r3, #77824	; 0x13000
            alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_AUTOINC_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7950:	e3a00000 	mov	r0, #0
 * one-shot timer mode.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_autoinc_mode_stop(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7954:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    7958:	e3c22008 	bic	r2, r2, #8
    795c:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
            alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_AUTOINC_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7960:	e12fff1e 	bx	lr

00007964 <alt_globaltmr_is_autoinc_mode>:
 * timer.
*************************************************************************************************************/

bool alt_globaltmr_is_autoinc_mode(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_AUTOINC_ENABLE_BIT;
    7964:	e3e03a13 	mvn	r3, #77824	; 0x13000
    7968:	e5130df7 	ldr	r0, [r3, #-3575]	; 0xfffff209
}
    796c:	e7e001d0 	ubfx	r0, r0, #3, #1
    7970:	e12fff1e 	bx	lr

00007974 <alt_globaltmr_maxcounter_get>:
*************************************************************************************************************/

uint32_t alt_globaltmr_maxcounter_get(void)
{
    return ALT_GLOBALTMR_MAX;
}
    7974:	e3e00000 	mvn	r0, #0
    7978:	e12fff1e 	bx	lr

0000797c <alt_globaltmr_int_disable>:
 * alt_globaltmr_int_disable() clears the interrupt enable bit of the global timer.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_int_disable(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    797c:	e3e03a13 	mvn	r3, #77824	; 0x13000
            alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_INT_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7980:	e3a00000 	mov	r0, #0
 * alt_globaltmr_int_disable() clears the interrupt enable bit of the global timer.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_int_disable(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    7984:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    7988:	e3c22004 	bic	r2, r2, #4
    798c:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
            alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ~ALT_GLOBALTMR_INT_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7990:	e12fff1e 	bx	lr

00007994 <alt_globaltmr_int_enable>:
 * mode bit.
*************************************************************************************************************/

bool alt_globaltmr_is_running(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_ENABLE_BIT;
    7994:	e3e03a13 	mvn	r3, #77824	; 0x13000
        if ( alt_globaltmr_start() != ALT_E_SUCCESS)   { return ALT_E_ERROR; }
    }
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
            alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) | ALT_GLOBALTMR_INT_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    7998:	e3a00000 	mov	r0, #0
 * mode bit.
*************************************************************************************************************/

bool alt_globaltmr_is_running(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_ENABLE_BIT;
    799c:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
 * yet been started, it tries to start it first.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_int_enable(void)
{
    if (!alt_globaltmr_is_running())                        /* Is gbl timer running? */
    79a0:	e3120001 	tst	r2, #1

ALT_STATUS_CODE alt_globaltmr_start(void)
{
    uint32_t        regdata;                /* value to read & write */

    regdata = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET);
    79a4:	05132df7 	ldreq	r2, [r3, #-3575]	; 0xfffff209
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET, regdata | (ALT_GLOBALTMR_COMP_ENABLE_BIT | ALT_GLOBALTMR_ENABLE_BIT));
    79a8:	03822003 	orreq	r2, r2, #3
    79ac:	05032df7 	streq	r2, [r3, #-3575]	; 0xfffff209
{
    if (!alt_globaltmr_is_running())                        /* Is gbl timer running? */
    {
        if ( alt_globaltmr_start() != ALT_E_SUCCESS)   { return ALT_E_ERROR; }
    }
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET,
    79b0:	e3e03a13 	mvn	r3, #77824	; 0x13000
    79b4:	e5132df7 	ldr	r2, [r3, #-3575]	; 0xfffff209
    79b8:	e3822004 	orr	r2, r2, #4
    79bc:	e5032df7 	str	r2, [r3, #-3575]	; 0xfffff209
            alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) | ALT_GLOBALTMR_INT_ENABLE_BIT);
    return ALT_E_SUCCESS;
}
    79c0:	e12fff1e 	bx	lr

000079c4 <alt_globaltmr_int_is_enabled>:
 * alt_globaltmr_int_is_enabled() checks and returns the state of the interrupt bit of the global timer.
*************************************************************************************************************/

bool alt_globaltmr_int_is_enabled(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_CTRL_REG_OFFSET) & ALT_GLOBALTMR_INT_ENABLE_BIT;
    79c4:	e3e03a13 	mvn	r3, #77824	; 0x13000
    79c8:	e5130df7 	ldr	r0, [r3, #-3575]	; 0xfffff209
}
    79cc:	e7e00150 	ubfx	r0, r0, #2, #1
    79d0:	e12fff1e 	bx	lr

000079d4 <alt_globaltmr_int_clear_pending>:
 * alt_globaltmr_int_clear_pending() clears the status of the interrupt pending bit of the global timer.
*************************************************************************************************************/

ALT_STATUS_CODE alt_globaltmr_int_clear_pending(void)
{
    alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_INT_STAT_REG_OFFSET, ALT_GLOBALTMR_INT_STATUS_BIT);
    79d4:	e3a02001 	mov	r2, #1
    79d8:	e3e03a13 	mvn	r3, #77824	; 0x13000
    79dc:	e5032df3 	str	r2, [r3, #-3571]	; 0xfffff20d
                /* clear interrupt sticky bit by writing one to it */
    return    ALT_E_SUCCESS;
}
    79e0:	e3a00000 	mov	r0, #0
    79e4:	e12fff1e 	bx	lr

000079e8 <alt_globaltmr_int_is_pending>:
 * timer.
*************************************************************************************************************/

bool alt_globaltmr_int_is_pending(void)
{
    return alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_INT_STAT_REG_OFFSET) & ALT_GLOBALTMR_INT_STATUS_BIT;
    79e8:	e3e03a13 	mvn	r3, #77824	; 0x13000
    79ec:	e5130df3 	ldr	r0, [r3, #-3571]	; 0xfffff20d
}
    79f0:	e2000001 	and	r0, r0, #1
    79f4:	e12fff1e 	bx	lr

000079f8 <alt_globaltmr_int_if_pending_clear>:

bool alt_globaltmr_int_if_pending_clear(void)
{
    bool                ret;

    ret = alt_read_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_INT_STAT_REG_OFFSET) & ALT_GLOBALTMR_INT_STATUS_BIT;
    79f8:	e3e03a13 	mvn	r3, #77824	; 0x13000
    79fc:	e5130df3 	ldr	r0, [r3, #-3571]	; 0xfffff20d
    if (ret)
    7a00:	e2100001 	ands	r0, r0, #1
    {
        alt_write_word(ALT_GLOBALTMR_BASE + ALT_GLOBALTMR_INT_STAT_REG_OFFSET, ALT_GLOBALTMR_INT_STATUS_BIT);
    7a04:	13a02001 	movne	r2, #1
    7a08:	15032df3 	strne	r2, [r3, #-3571]	; 0xfffff20d
    }          /*clear int by writing to sticky bit */

    return  ret;
}
    7a0c:	e12fff1e 	bx	lr

00007a10 <alt_clk_pll_is_bypassed.part.1>:
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    7a10:	e3043fff 	movw	r3, #20479	; 0x4fff
    7a14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7a18:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    7a1c:	e3120001 	tst	r2, #1
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    7a20:	05130ffb 	ldreq	r0, [r3, #-4091]	; 0xfffff005
    7a24:	07e001d0 	ubfxeq	r0, r0, #3, #1
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    7a28:	13a00001 	movne	r0, #1
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    return status;
}
    7a2c:	e12fff1e 	bx	lr

00007a30 <alt_clk_pll_source_get.part.2>:
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        /* three possible clock sources for the SDRAM PLL */
        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    7a30:	e3043fff 	movw	r3, #20479	; 0x4fff
    7a34:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7a38:	e5130f3f 	ldr	r0, [r3, #-3903]	; 0xfffff0c1
    7a3c:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    7a40:	e3500000 	cmp	r0, #0
    7a44:	012fff1e 	bxeq	lr
        {
            ret = ALT_CLK_IN_PIN_OSC1;
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    7a48:	e3500001 	cmp	r0, #1
    7a4c:	012fff1e 	bxeq	lr
/* alt_clk_pll_source_get() returns the current input of the specified PLL.             */
/****************************************************************************************/

ALT_CLK_t alt_clk_pll_source_get(ALT_CLK_t pll)
{
    ALT_CLK_t      ret = ALT_CLK_UNKNOWN;
    7a50:	e3500002 	cmp	r0, #2
    7a54:	03a00003 	moveq	r0, #3
    7a58:	13a0004b 	movne	r0, #75	; 0x4b
        {
            ret = ALT_CLK_F2H_SDRAM_REF;
        }
    }
    return ret;
}
    7a5c:	e12fff1e 	bx	lr

00007a60 <alt_clk_plls_settle_wait>:
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7a60:	e3042fff 	movw	r2, #20479	; 0x4fff
        /* how many loops to wait for the SDRAM clock to come around */
        /* to zero and allow for writing a new divisor ratio to it */

ALT_STATUS_CODE alt_clk_plls_settle_wait(void)
{
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    7a64:	e3a00032 	mov	r0, #50	; 0x32
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7a68:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    7a6c:	ea000001 	b	7a78 <alt_clk_plls_settle_wait+0x18>
    } while (nofini && i--);
    7a70:	e2500001 	subs	r0, r0, #1
    7a74:	3a000006 	bcc	7a94 <alt_clk_plls_settle_wait+0x34>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7a78:	e5123feb 	ldr	r3, [r2, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7a7c:	e3130001 	tst	r3, #1
    7a80:	1afffffa 	bne	7a70 <alt_clk_plls_settle_wait+0x10>
            /* wait until clocks finish transitioning and become stable again */
    return (i > 0) ? ALT_E_SUCCESS : ALT_E_ERROR;
    7a84:	e3500000 	cmp	r0, #0
    7a88:	c3a00000 	movgt	r0, #0
    7a8c:	d3e00000 	mvnle	r0, #0
    7a90:	e12fff1e 	bx	lr
}
    7a94:	e12fff1e 	bx	lr

00007a98 <alt_clk_lock_status_clear>:
/* alt_clk_lock_status_clear() clears assertions of one or more of the PLL lock status  */
/* conditions.                                                                          */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_lock_status_clear(ALT_CLK_PLL_LOCK_STATUS_t lock_stat_mask)
{
    7a98:	e1a03000 	mov	r3, r0
    if (lock_stat_mask & (  ALT_CLKMGR_INTER_MAINPLLACHIEVED_CLR_MSK
    7a9c:	e3d0003f 	bics	r0, r0, #63	; 0x3f
    {
        return ALT_E_BAD_ARG;
    }
    else
    {
        alt_setbits_word(ALT_CLKMGR_INTER_ADDR, lock_stat_mask);
    7aa0:	03042fff 	movweq	r2, #20479	; 0x4fff
                          & ALT_CLKMGR_INTER_MAINPLLLOST_CLR_MSK
                          & ALT_CLKMGR_INTER_PERPLLLOST_CLR_MSK
                          & ALT_CLKMGR_INTER_SDRPLLLOST_CLR_MSK)
        )
    {
        return ALT_E_BAD_ARG;
    7aa4:	13e00008 	mvnne	r0, #8
    }
    else
    {
        alt_setbits_word(ALT_CLKMGR_INTER_ADDR, lock_stat_mask);
    7aa8:	034f2fd0 	movteq	r2, #65488	; 0xffd0
    7aac:	05121ff7 	ldreq	r1, [r2, #-4087]	; 0xfffff009
    7ab0:	01833001 	orreq	r3, r3, r1
    7ab4:	05023ff7 	streq	r3, [r2, #-4087]	; 0xfffff009
        return ALT_E_SUCCESS;
    }
}
    7ab8:	e12fff1e 	bx	lr

00007abc <alt_clk_lock_status_get>:
/* alt_clk_lock_status_get() returns the value of the PLL lock status conditions.       */
/****************************************************************************************/

uint32_t alt_clk_lock_status_get(void)
{
    return alt_read_word(ALT_CLKMGR_INTER_ADDR) & (  ALT_CLKMGR_INTER_MAINPLLACHIEVED_SET_MSK
    7abc:	e3043fff 	movw	r3, #20479	; 0x4fff
    7ac0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7ac4:	e5130ff7 	ldr	r0, [r3, #-4087]	; 0xfffff009
                                                   | ALT_CLKMGR_INTER_PERPLLLOST_SET_MSK
                                                   | ALT_CLKMGR_INTER_SDRPLLLOST_SET_MSK
                                                   | ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK
                                                   | ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK
                                                   | ALT_CLKMGR_INTER_SDRPLLLOCKED_SET_MSK );
}
    7ac8:	e1a00b80 	lsl	r0, r0, #23
    7acc:	e1a00ba0 	lsr	r0, r0, #23
    7ad0:	e12fff1e 	bx	lr

00007ad4 <alt_clk_pll_is_locked>:

ALT_STATUS_CODE alt_clk_pll_is_locked(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    7ad4:	e3500009 	cmp	r0, #9
    7ad8:	0a000008 	beq	7b00 <alt_clk_pll_is_locked+0x2c>
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK)
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    7adc:	e350000a 	cmp	r0, #10
    7ae0:	0a00000b 	beq	7b14 <alt_clk_pll_is_locked+0x40>
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK)
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    7ae4:	e350000b 	cmp	r0, #11
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_SDRPLLLOCKED_SET_MSK)
    7ae8:	03043fff 	movweq	r3, #20479	; 0x4fff
    7aec:	034f3fd0 	movteq	r3, #65488	; 0xffd0
    7af0:	05130ff7 	ldreq	r0, [r3, #-4087]	; 0xfffff009
                ? ALT_E_TRUE : ALT_E_FALSE;
    7af4:	07e00450 	ubfxeq	r0, r0, #8, #1
/* locked and ALT_E_FALSE if not.                                                       */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_is_locked(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;
    7af8:	13e00008 	mvnne	r0, #8
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_SDRPLLLOCKED_SET_MSK)
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    return status;
}
    7afc:	e12fff1e 	bx	lr
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK)
    7b00:	e3043fff 	movw	r3, #20479	; 0x4fff
    7b04:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7b08:	e5130ff7 	ldr	r0, [r3, #-4087]	; 0xfffff009
                ? ALT_E_TRUE : ALT_E_FALSE;
    7b0c:	e7e00350 	ubfx	r0, r0, #6, #1
    7b10:	e12fff1e 	bx	lr
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK)
    7b14:	e3043fff 	movw	r3, #20479	; 0x4fff
    7b18:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7b1c:	e5130ff7 	ldr	r0, [r3, #-4087]	; 0xfffff009
                ? ALT_E_TRUE : ALT_E_FALSE;
    7b20:	e7e003d0 	ubfx	r0, r0, #7, #1
    7b24:	e12fff1e 	bx	lr

00007b28 <alt_clk_safe_mode_clear>:
{
    ALT_STATUS_CODE status = ALT_E_ERROR;
#if ALT_PREVENT_GLITCH_EXSAFE
    uint32_t        temp;

    temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7b28:	e3043fff 	movw	r3, #20479	; 0x4fff
        /* how many loops to wait for the SDRAM clock to come around */
        /* to zero and allow for writing a new divisor ratio to it */

ALT_STATUS_CODE alt_clk_plls_settle_wait(void)
{
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    7b2c:	e3a00032 	mov	r0, #50	; 0x32
{
    ALT_STATUS_CODE status = ALT_E_ERROR;
#if ALT_PREVENT_GLITCH_EXSAFE
    uint32_t        temp;

    temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7b30:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7b34:	e5131f9f 	ldr	r1, [r3, #-3999]	; 0xfffff061
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7b38:	e1a02003 	mov	r2, r3
    ALT_STATUS_CODE status = ALT_E_ERROR;
#if ALT_PREVENT_GLITCH_EXSAFE
    uint32_t        temp;

    temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp &
    7b3c:	e3c1c00c 	bic	r12, r1, #12
    7b40:	e503cf9f 	str	r12, [r3, #-3999]	; 0xfffff061
            (ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK));
                    /* gate off l4MP and L4SP clocks (no matter their source) */

    alt_setbits_word(ALT_CLKMGR_CTL_ADDR, ALT_CLKMGR_CTL_SAFEMOD_SET_MSK);
    7b44:	e513cfff 	ldr	r12, [r3, #-4095]	; 0xfffff001
    7b48:	e38cc001 	orr	r12, r12, #1
    7b4c:	e503cfff 	str	r12, [r3, #-4095]	; 0xfffff001
    7b50:	ea000001 	b	7b5c <alt_clk_safe_mode_clear+0x34>
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    } while (nofini && i--);
    7b54:	e2500001 	subs	r0, r0, #1
    7b58:	3a000005 	bcc	7b74 <alt_clk_safe_mode_clear+0x4c>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7b5c:	e5123feb 	ldr	r3, [r2, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7b60:	e3130001 	tst	r3, #1
    7b64:	1afffffa 	bne	7b54 <alt_clk_safe_mode_clear+0x2c>
            /* wait until clocks finish transitioning and become stable again */
    return (i > 0) ? ALT_E_SUCCESS : ALT_E_ERROR;
    7b68:	e3500000 	cmp	r0, #0
    7b6c:	c3a00000 	movgt	r0, #0
    7b70:	d3e00000 	mvnle	r0, #0
                    /* gate off l4MP and L4SP clocks (no matter their source) */

    alt_setbits_word(ALT_CLKMGR_CTL_ADDR, ALT_CLKMGR_CTL_SAFEMOD_SET_MSK);
                    /* clear safe mode bit */
    status = alt_clk_plls_settle_wait();
    alt_replbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR,
    7b74:	e3043fff 	movw	r3, #20479	; 0x4fff
    7b78:	e201100c 	and	r1, r1, #12
    7b7c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7b80:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    7b84:	e3c2200c 	bic	r2, r2, #12
    7b88:	e1811002 	orr	r1, r1, r2
    7b8c:	e5031f9f 	str	r1, [r3, #-3999]	; 0xfffff061
                    /* clear safe mode bit */
    status = alt_clk_plls_settle_wait();

#endif
    return status;
}
    7b90:	e12fff1e 	bx	lr

00007b94 <alt_clk_is_in_safe_mode>:
bool alt_clk_is_in_safe_mode(ALT_CLK_SAFE_DOMAIN_t clk_domain)
{
    bool        ret = false;
    uint32_t    temp;

    if (clk_domain == ALT_CLK_DOMAIN_NORMAL)
    7b94:	e3500000 	cmp	r0, #0
    7b98:	0a00000c 	beq	7bd0 <alt_clk_is_in_safe_mode+0x3c>
    {
        ret = alt_read_word(ALT_CLKMGR_CTL_ADDR) & ALT_CLKMGR_CTL_SAFEMOD_SET_MSK;
                /* is the main clock domain in safe mode? */
    }
    else if (clk_domain == ALT_CLK_DOMAIN_DEBUG)
    7b9c:	e3500001 	cmp	r0, #1
    7ba0:	0a000001 	beq	7bac <alt_clk_is_in_safe_mode+0x18>
/* safe mode or not.                                                                    */
/****************************************************************************************/

bool alt_clk_is_in_safe_mode(ALT_CLK_SAFE_DOMAIN_t clk_domain)
{
    bool        ret = false;
    7ba4:	e3a00000 	mov	r0, #0
                    /* is the debug clock domain following the main clock domain */
                    /* AND is the main clock domain in safe mode? */
        }
    }
    return ret;
}
    7ba8:	e12fff1e 	bx	lr
        ret = alt_read_word(ALT_CLKMGR_CTL_ADDR) & ALT_CLKMGR_CTL_SAFEMOD_SET_MSK;
                /* is the main clock domain in safe mode? */
    }
    else if (clk_domain == ALT_CLK_DOMAIN_DEBUG)
    {
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    7bac:	e3043fff 	movw	r3, #20479	; 0x4fff
    7bb0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7bb4:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
        if (temp & ALT_CLKMGR_DBCTL_STAYOSC1_SET_MSK)
    7bb8:	e3120001 	tst	r2, #1
    7bbc:	112fff1e 	bxne	lr
        {
            ret = true;                /* is the debug clock domain in safe mode? */
        }
        else if (temp & ALT_CLKMGR_DBCTL_ENSFMDWR_SET_MSK)
    7bc0:	e2120002 	ands	r0, r2, #2
        {
            ret = alt_read_word(ALT_CLKMGR_CTL_ADDR) & ALT_CLKMGR_CTL_SAFEMOD_SET_MSK;
    7bc4:	15130fff 	ldrne	r0, [r3, #-4095]	; 0xfffff001
    7bc8:	12000001 	andne	r0, r0, #1
    7bcc:	e12fff1e 	bx	lr
    bool        ret = false;
    uint32_t    temp;

    if (clk_domain == ALT_CLK_DOMAIN_NORMAL)
    {
        ret = alt_read_word(ALT_CLKMGR_CTL_ADDR) & ALT_CLKMGR_CTL_SAFEMOD_SET_MSK;
    7bd0:	e3043fff 	movw	r3, #20479	; 0x4fff
    7bd4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7bd8:	e5130fff 	ldr	r0, [r3, #-4095]	; 0xfffff001
    7bdc:	e2000001 	and	r0, r0, #1
    7be0:	e12fff1e 	bx	lr

00007be4 <alt_clk_pll_bypass_disable>:

ALT_STATUS_CODE alt_clk_pll_is_locked(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    7be4:	e3500009 	cmp	r0, #9
/* it from bypass mode and allowing it to provide the output of the PLL to drive the    */
/* six main clocks.                                                                     */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_bypass_disable(ALT_CLK_t pll)
{
    7be8:	e92d0030 	push	{r4, r5}

ALT_STATUS_CODE alt_clk_pll_is_locked(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    7bec:	0a000029 	beq	7c98 <alt_clk_pll_bypass_disable+0xb4>
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK)
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    7bf0:	e350000a 	cmp	r0, #10
    7bf4:	0a000068 	beq	7d9c <alt_clk_pll_bypass_disable+0x1b8>
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK)
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    7bf8:	e350000b 	cmp	r0, #11
    7bfc:	1a0000aa 	bne	7eac <alt_clk_pll_bypass_disable+0x2c8>
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_SDRPLLLOCKED_SET_MSK)
    7c00:	e3042fff 	movw	r2, #20479	; 0x4fff
    7c04:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    7c08:	e5123ff7 	ldr	r3, [r2, #-4087]	; 0xfffff009
    bool            restore_0 = false;
    bool            restore_1 = false;
#endif

    /* this function should only be called after the selected PLL is locked */
    if (alt_clk_pll_is_locked(pll) == ALT_E_TRUE)
    7c0c:	e3130c01 	tst	r3, #256	; 0x100
    7c10:	0a0000a5 	beq	7eac <alt_clk_pll_bypass_disable+0x2c8>
        }

        else if (pll == ALT_CLK_SDRAM_PLL)
        {
            /* assert outresetall of SDRAM PLL */
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    7c14:	e5120f3f 	ldr	r0, [r2, #-3903]	; 0xfffff0c1
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7c18:	e1a01002 	mov	r1, r2
            /* assert outresetall of SDRAM PLL */
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp | ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK);

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
    7c1c:	e3a03033 	mov	r3, #51	; 0x33

        else if (pll == ALT_CLK_SDRAM_PLL)
        {
            /* assert outresetall of SDRAM PLL */
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp | ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK);
    7c20:	e380c401 	orr	r12, r0, #16777216	; 0x1000000

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
    7c24:	e3c00401 	bic	r0, r0, #16777216	; 0x1000000

        else if (pll == ALT_CLK_SDRAM_PLL)
        {
            /* assert outresetall of SDRAM PLL */
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp | ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK);
    7c28:	e502cf3f 	str	r12, [r2, #-3903]	; 0xfffff0c1

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
    7c2c:	e5020f3f 	str	r0, [r2, #-3903]	; 0xfffff0c1
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7c30:	e5112feb 	ldr	r2, [r1, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7c34:	e3120001 	tst	r2, #1
    7c38:	0a000004 	beq	7c50 <alt_clk_pll_bypass_disable+0x6c>
    7c3c:	e2533001 	subs	r3, r3, #1
    7c40:	0a000002 	beq	7c50 <alt_clk_pll_bypass_disable+0x6c>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7c44:	e5112feb 	ldr	r2, [r1, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7c48:	e3120001 	tst	r2, #1
    7c4c:	1afffffa 	bne	7c3c <alt_clk_pll_bypass_disable+0x58>
            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
            alt_clk_plls_settle_wait();

            /* remove bypass - don't think that there's any need to touch the bypass clock source */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_SDRPLLSRC_SET_MSK);
    7c50:	e3043fff 	movw	r3, #20479	; 0x4fff
        /* how many loops to wait for the SDRAM clock to come around */
        /* to zero and allow for writing a new divisor ratio to it */

ALT_STATUS_CODE alt_clk_plls_settle_wait(void)
{
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    7c54:	e3a00032 	mov	r0, #50	; 0x32
            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
            alt_clk_plls_settle_wait();

            /* remove bypass - don't think that there's any need to touch the bypass clock source */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_SDRPLLSRC_SET_MSK);
    7c58:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7c5c:	e5131ffb 	ldr	r1, [r3, #-4091]	; 0xfffff005
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7c60:	e1a02003 	mov	r2, r3
            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
            alt_clk_plls_settle_wait();

            /* remove bypass - don't think that there's any need to touch the bypass clock source */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_SDRPLLSRC_SET_MSK);
    7c64:	e3c11004 	bic	r1, r1, #4
    7c68:	e5031ffb 	str	r1, [r3, #-4091]	; 0xfffff005
    7c6c:	ea000001 	b	7c78 <alt_clk_pll_bypass_disable+0x94>
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    } while (nofini && i--);
    7c70:	e2500001 	subs	r0, r0, #1
    7c74:	3a000005 	bcc	7c90 <alt_clk_pll_bypass_disable+0xac>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7c78:	e5123feb 	ldr	r3, [r2, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7c7c:	e3130001 	tst	r3, #1
    7c80:	1afffffa 	bne	7c70 <alt_clk_pll_bypass_disable+0x8c>
            /* wait until clocks finish transitioning and become stable again */
    return (i > 0) ? ALT_E_SUCCESS : ALT_E_ERROR;
    7c84:	e3500000 	cmp	r0, #0
    7c88:	c3a00000 	movgt	r0, #0
    7c8c:	d3e00000 	mvnle	r0, #0
    {
        status = ALT_E_ERROR;
    }

    return status;
}
    7c90:	e8bd0030 	pop	{r4, r5}
    7c94:	e12fff1e 	bx	lr
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK)
    7c98:	e3043fff 	movw	r3, #20479	; 0x4fff
    7c9c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7ca0:	e5132ff7 	ldr	r2, [r3, #-4087]	; 0xfffff009
    bool            restore_0 = false;
    bool            restore_1 = false;
#endif

    /* this function should only be called after the selected PLL is locked */
    if (alt_clk_pll_is_locked(pll) == ALT_E_TRUE)
    7ca4:	e3120040 	tst	r2, #64	; 0x40
    7ca8:	0a00007f 	beq	7eac <alt_clk_pll_bypass_disable+0x2c8>
        if (pll == ALT_CLK_MAIN_PLL)
        {
#if  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    7cac:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7cb0:	e5134f9f 	ldr	r4, [r3, #-3999]	; 0xfffff061

            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK)))
    7cb4:	e2143004 	ands	r3, r4, #4
    7cb8:	12023001 	andne	r3, r2, #1
    7cbc:	12233001 	eorne	r3, r3, #1
            {
                restore_0 = true;
            }
            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
    7cc0:	e2141008 	ands	r1, r4, #8
    7cc4:	12222002 	eorne	r2, r2, #2
    7cc8:	17e010d2 	ubfxne	r1, r2, #1, #1
            {
                restore_1 = true;
            }
            temp = temp1;
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
    7ccc:	e3530000 	cmp	r3, #0
    7cd0:	13c42004 	bicne	r2, r4, #4
        {
#if  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7cd4:	01a02004 	moveq	r2, r4
            {
                restore_1 = true;
            }
            temp = temp1;
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
    7cd8:	e3510000 	cmp	r1, #0
    7cdc:	13c22008 	bicne	r2, r2, #8
    7ce0:	1a00006c 	bne	7e98 <alt_clk_pll_bypass_disable+0x2b4>
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    7ce4:	e3530000 	cmp	r3, #0
    7ce8:	01a0c003 	moveq	r12, r3
    7cec:	1a000069 	bne	7e98 <alt_clk_pll_bypass_disable+0x2b4>
#endif

            /* assert outresetall of main PLL */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    7cf0:	e3042fff 	movw	r2, #20479	; 0x4fff
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp | ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_SET_MSK);

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp & ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK);
    7cf4:	e3a03033 	mov	r3, #51	; 0x33
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
#endif

            /* assert outresetall of main PLL */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    7cf8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    7cfc:	e5120fbf 	ldr	r0, [r2, #-4031]	; 0xfffff041
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7d00:	e1a01002 	mov	r1, r2
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
#endif

            /* assert outresetall of main PLL */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp | ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_SET_MSK);
    7d04:	e3805401 	orr	r5, r0, #16777216	; 0x1000000

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp & ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK);
    7d08:	e3c00401 	bic	r0, r0, #16777216	; 0x1000000
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
#endif

            /* assert outresetall of main PLL */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp | ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_SET_MSK);
    7d0c:	e5025fbf 	str	r5, [r2, #-4031]	; 0xfffff041

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp & ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK);
    7d10:	e5020fbf 	str	r0, [r2, #-4031]	; 0xfffff041
    7d14:	ea000001 	b	7d20 <alt_clk_pll_bypass_disable+0x13c>
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    } while (nofini && i--);
    7d18:	e2533001 	subs	r3, r3, #1
    7d1c:	0a000002 	beq	7d2c <alt_clk_pll_bypass_disable+0x148>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7d20:	e5112feb 	ldr	r2, [r1, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7d24:	e3120001 	tst	r2, #1
    7d28:	1afffffa 	bne	7d18 <alt_clk_pll_bypass_disable+0x134>
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp & ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK);

            alt_clk_plls_settle_wait();

            /* remove bypass */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
    7d2c:	e3043fff 	movw	r3, #20479	; 0x4fff
        /* how many loops to wait for the SDRAM clock to come around */
        /* to zero and allow for writing a new divisor ratio to it */

ALT_STATUS_CODE alt_clk_plls_settle_wait(void)
{
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    7d30:	e3a00032 	mov	r0, #50	; 0x32
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp & ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK);

            alt_clk_plls_settle_wait();

            /* remove bypass */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
    7d34:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7d38:	e5131ffb 	ldr	r1, [r3, #-4091]	; 0xfffff005
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7d3c:	e1a02003 	mov	r2, r3
            alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp & ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK);

            alt_clk_plls_settle_wait();

            /* remove bypass */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
    7d40:	e3c11001 	bic	r1, r1, #1
    7d44:	e5031ffb 	str	r1, [r3, #-4091]	; 0xfffff005
    7d48:	ea000001 	b	7d54 <alt_clk_pll_bypass_disable+0x170>
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    } while (nofini && i--);
    7d4c:	e2500001 	subs	r0, r0, #1
    7d50:	3a000005 	bcc	7d6c <alt_clk_pll_bypass_disable+0x188>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7d54:	e5123feb 	ldr	r3, [r2, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7d58:	e3130001 	tst	r3, #1
    7d5c:	1afffffa 	bne	7d4c <alt_clk_pll_bypass_disable+0x168>
            /* wait until clocks finish transitioning and become stable again */
    return (i > 0) ? ALT_E_SUCCESS : ALT_E_ERROR;
    7d60:	e3500000 	cmp	r0, #0
    7d64:	c3a00000 	movgt	r0, #0
    7d68:	d3e00000 	mvnle	r0, #0
            /* remove bypass */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
            status = alt_clk_plls_settle_wait();

#if  ALT_PREVENT_GLITCH_BYP
            if (restore_0 || restore_1)
    7d6c:	e35c0000 	cmp	r12, #0
    7d70:	0affffc6 	beq	7c90 <alt_clk_pll_bypass_disable+0xac>

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    7d74:	e3041fff 	movw	r1, #20479	; 0x4fff
            /* remove bypass */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
            status = alt_clk_plls_settle_wait();

#if  ALT_PREVENT_GLITCH_BYP
            if (restore_0 || restore_1)
    7d78:	e3a0301e 	mov	r3, #30

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    7d7c:	e34f1fd0 	movt	r1, #65488	; 0xffd0
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    7d80:	e2533001 	subs	r3, r3, #1
    {
        (void) alt_read_word(reg);
    7d84:	e3042fff 	movw	r2, #20479	; 0x4fff
    7d88:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    7d8c:	e511cf9f 	ldr	r12, [r1, #-3999]	; 0xfffff061
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    7d90:	1afffffa 	bne	7d80 <alt_clk_pll_bypass_disable+0x19c>
#if  ALT_PREVENT_GLITCH_BYP
            if (restore_0 || restore_1)
            {
                alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
                            /* wait a bit more before reenabling the L4MP and L4SP clocks */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1);
    7d94:	e5024f9f 	str	r4, [r2, #-3999]	; 0xfffff061
    7d98:	eaffffbc 	b	7c90 <alt_clk_pll_bypass_disable+0xac>
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_MAINPLLLOCKED_SET_MSK)
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (alt_read_word(ALT_CLKMGR_INTER_ADDR) & ALT_CLKMGR_INTER_PERPLLLOCKED_SET_MSK)
    7d9c:	e3043fff 	movw	r3, #20479	; 0x4fff
    7da0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7da4:	e5132ff7 	ldr	r2, [r3, #-4087]	; 0xfffff009
    bool            restore_0 = false;
    bool            restore_1 = false;
#endif

    /* this function should only be called after the selected PLL is locked */
    if (alt_clk_pll_is_locked(pll) == ALT_E_TRUE)
    7da8:	e3120080 	tst	r2, #128	; 0x80
    7dac:	0a00003e 	beq	7eac <alt_clk_pll_bypass_disable+0x2c8>
        else if (pll == ALT_CLK_PERIPHERAL_PLL)
        {
#if  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    7db0:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7db4:	e5134f9f 	ldr	r4, [r3, #-3999]	; 0xfffff061

            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK))
    7db8:	e2143004 	ands	r3, r4, #4
    7dbc:	12023001 	andne	r3, r2, #1
            {
                    restore_0 = true;
            }
            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK))
    7dc0:	e2141008 	ands	r1, r4, #8
    7dc4:	17e010d2 	ubfxne	r1, r2, #1, #1
            {
                    restore_1 = true;
            }
            temp = temp1;
            if (restore_0)  { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
    7dc8:	e3530000 	cmp	r3, #0
    7dcc:	13c42004 	bicne	r2, r4, #4
        {
#if  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7dd0:	01a02004 	moveq	r2, r4
            {
                    restore_1 = true;
            }
            temp = temp1;
            if (restore_0)  { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
            if (restore_1)  { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
    7dd4:	e3510000 	cmp	r1, #0
    7dd8:	13c22008 	bicne	r2, r2, #8
    7ddc:	1a000034 	bne	7eb4 <alt_clk_pll_bypass_disable+0x2d0>
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    7de0:	e3530000 	cmp	r3, #0
    7de4:	01a0c003 	moveq	r12, r3
    7de8:	1a000031 	bne	7eb4 <alt_clk_pll_bypass_disable+0x2d0>
#endif

            /* assert outresetall of Peripheral PLL */
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    7dec:	e3042fff 	movw	r2, #20479	; 0x4fff
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp | ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_SET_MSK);
    7df0:	e3a03033 	mov	r3, #51	; 0x33
            if (restore_1)  { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
#endif

            /* assert outresetall of Peripheral PLL */
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    7df4:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    7df8:	e5120f7f 	ldr	r0, [r2, #-3967]	; 0xfffff081
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7dfc:	e1a01002 	mov	r1, r2
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
#endif

            /* assert outresetall of Peripheral PLL */
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp | ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_SET_MSK);
    7e00:	e3805401 	orr	r5, r0, #16777216	; 0x1000000
    7e04:	e5025f7f 	str	r5, [r2, #-3967]	; 0xfffff081
    7e08:	ea000001 	b	7e14 <alt_clk_pll_bypass_disable+0x230>
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    } while (nofini && i--);
    7e0c:	e2533001 	subs	r3, r3, #1
    7e10:	0a000002 	beq	7e20 <alt_clk_pll_bypass_disable+0x23c>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7e14:	e5112feb 	ldr	r2, [r1, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7e18:	e3120001 	tst	r2, #1
    7e1c:	1afffffa 	bne	7e0c <alt_clk_pll_bypass_disable+0x228>
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp | ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_SET_MSK);
            alt_clk_plls_settle_wait();

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp & ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_CLR_MSK);
    7e20:	e3043fff 	movw	r3, #20479	; 0x4fff
    7e24:	e3c02401 	bic	r2, r0, #16777216	; 0x1000000
    7e28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
        /* how many loops to wait for the SDRAM clock to come around */
        /* to zero and allow for writing a new divisor ratio to it */

ALT_STATUS_CODE alt_clk_plls_settle_wait(void)
{
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    7e2c:	e3a00032 	mov	r0, #50	; 0x32
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp | ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_SET_MSK);
            alt_clk_plls_settle_wait();

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp & ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_CLR_MSK);
    7e30:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7e34:	e1a02003 	mov	r2, r3

            /* deassert outresetall of main PLL */
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp & ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_CLR_MSK);

            /* remove bypass - don't think that there's any need to touch the bypass clock source */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_PERPLL_SET_MSK);
    7e38:	e5131ffb 	ldr	r1, [r3, #-4091]	; 0xfffff005
    7e3c:	e3c11008 	bic	r1, r1, #8
    7e40:	e5031ffb 	str	r1, [r3, #-4091]	; 0xfffff005
    7e44:	ea000001 	b	7e50 <alt_clk_pll_bypass_disable+0x26c>
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    } while (nofini && i--);
    7e48:	e2500001 	subs	r0, r0, #1
    7e4c:	3a000005 	bcc	7e68 <alt_clk_pll_bypass_disable+0x284>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7e50:	e5123feb 	ldr	r3, [r2, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7e54:	e3130001 	tst	r3, #1
    7e58:	1afffffa 	bne	7e48 <alt_clk_pll_bypass_disable+0x264>
            /* wait until clocks finish transitioning and become stable again */
    return (i > 0) ? ALT_E_SUCCESS : ALT_E_ERROR;
    7e5c:	e3500000 	cmp	r0, #0
    7e60:	c3a00000 	movgt	r0, #0
    7e64:	d3e00000 	mvnle	r0, #0
            /* remove bypass - don't think that there's any need to touch the bypass clock source */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_PERPLL_SET_MSK);
            status = alt_clk_plls_settle_wait();

#if  ALT_PREVENT_GLITCH_BYP
            if (restore_0 || restore_1)
    7e68:	e35c0000 	cmp	r12, #0
    7e6c:	0affff87 	beq	7c90 <alt_clk_pll_bypass_disable+0xac>

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    7e70:	e3041fff 	movw	r1, #20479	; 0x4fff
            /* remove bypass - don't think that there's any need to touch the bypass clock source */
            alt_clrbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_PERPLL_SET_MSK);
            status = alt_clk_plls_settle_wait();

#if  ALT_PREVENT_GLITCH_BYP
            if (restore_0 || restore_1)
    7e74:	e3a0301e 	mov	r3, #30

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    7e78:	e34f1fd0 	movt	r1, #65488	; 0xffd0
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    7e7c:	e2533001 	subs	r3, r3, #1
    {
        (void) alt_read_word(reg);
    7e80:	e3042fff 	movw	r2, #20479	; 0x4fff
    7e84:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    7e88:	e511cf9f 	ldr	r12, [r1, #-3999]	; 0xfffff061
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    7e8c:	1afffffa 	bne	7e7c <alt_clk_pll_bypass_disable+0x298>
#if  ALT_PREVENT_GLITCH_BYP
            if (restore_0 || restore_1)
            {
                alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
                            /* wait a bit more before reenabling the L4MP and L4SP clocks */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1);
    7e90:	e5024f9f 	str	r4, [r2, #-3999]	; 0xfffff061
    7e94:	eaffff7d 	b	7c90 <alt_clk_pll_bypass_disable+0xac>
                restore_1 = true;
            }
            temp = temp1;
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    7e98:	e3043fff 	movw	r3, #20479	; 0x4fff
    7e9c:	e3a0c001 	mov	r12, #1
    7ea0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7ea4:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
    7ea8:	eaffff90 	b	7cf0 <alt_clk_pll_bypass_disable+0x10c>
            status = alt_clk_plls_settle_wait();
        }
    }
    else
    {
        status = ALT_E_ERROR;
    7eac:	e3e00000 	mvn	r0, #0
    7eb0:	eaffff76 	b	7c90 <alt_clk_pll_bypass_disable+0xac>
                    restore_1 = true;
            }
            temp = temp1;
            if (restore_0)  { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
            if (restore_1)  { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    7eb4:	e3043fff 	movw	r3, #20479	; 0x4fff
    7eb8:	e3a0c001 	mov	r12, #1
    7ebc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7ec0:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
    7ec4:	eaffffc8 	b	7dec <alt_clk_pll_bypass_disable+0x208>

00007ec8 <alt_clk_pll_bypass_enable>:
    uint32_t        temp1;
    bool            restore_0 = false;
    bool            restore_1 = false;
#endif

    if (pll == ALT_CLK_MAIN_PLL)
    7ec8:	e3500009 	cmp	r0, #9
/****************************************************************************************/
/* alt_clk_pll_bypass_enable() enable bypass mode for the specified PLL.                */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_bypass_enable(ALT_CLK_t pll, bool use_input_mux)
{
    7ecc:	e92d0030 	push	{r4, r5}
    uint32_t        temp1;
    bool            restore_0 = false;
    bool            restore_1 = false;
#endif

    if (pll == ALT_CLK_MAIN_PLL)
    7ed0:	0a00000f 	beq	7f14 <alt_clk_pll_bypass_enable+0x4c>
        else
        {
            status =  ALT_E_BAD_ARG;
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    7ed4:	e350000a 	cmp	r0, #10
    7ed8:	0a000036 	beq	7fb8 <alt_clk_pll_bypass_enable+0xf0>
                    /* set bypass bit and optionally the source select bit */
#endif
        status = ALT_E_SUCCESS;
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
    7edc:	e350000b 	cmp	r0, #11
    7ee0:	1a000064 	bne	8078 <alt_clk_pll_bypass_enable+0x1b0>
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
    7ee4:	e3043fff 	movw	r3, #20479	; 0x4fff
                (ALT_CLKMGR_BYPASS_SDRPLL_CLR_MSK & ALT_CLKMGR_BYPASS_SDRPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_SDRPLL_SET_MSK |
    7ee8:	e3510000 	cmp	r1, #0
        status = ALT_E_SUCCESS;
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
    7eec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
                (ALT_CLKMGR_BYPASS_SDRPLL_CLR_MSK & ALT_CLKMGR_BYPASS_SDRPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_SDRPLL_SET_MSK |
    7ef0:	03a01002 	moveq	r1, #2
        status = ALT_E_SUCCESS;
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
    7ef4:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
                (ALT_CLKMGR_BYPASS_SDRPLL_CLR_MSK & ALT_CLKMGR_BYPASS_SDRPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_SDRPLL_SET_MSK |
    7ef8:	13a01006 	movne	r1, #6
                ALT_CLKMGR_BYPASS_SDRPLLSRC_SET_MSK : ALT_CLKMGR_BYPASS_SDRPLL_SET_MSK;
                    /* set bypass bit and optionally the source select bit */
        alt_write_word(ALT_CLKMGR_BYPASS_ADDR, temp);
        status = ALT_E_SUCCESS;
    7efc:	e3a00000 	mov	r0, #0
        status = ALT_E_SUCCESS;
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
    7f00:	e3c22006 	bic	r2, r2, #6
                (ALT_CLKMGR_BYPASS_SDRPLL_CLR_MSK & ALT_CLKMGR_BYPASS_SDRPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_SDRPLL_SET_MSK |
    7f04:	e1811002 	orr	r1, r1, r2
                ALT_CLKMGR_BYPASS_SDRPLLSRC_SET_MSK : ALT_CLKMGR_BYPASS_SDRPLL_SET_MSK;
                    /* set bypass bit and optionally the source select bit */
        alt_write_word(ALT_CLKMGR_BYPASS_ADDR, temp);
    7f08:	e5031ffb 	str	r1, [r3, #-4091]	; 0xfffff005
        status = ALT_E_SUCCESS;
    }
    return status;
}
    7f0c:	e8bd0030 	pop	{r4, r5}
    7f10:	e12fff1e 	bx	lr
    bool            restore_1 = false;
#endif

    if (pll == ALT_CLK_MAIN_PLL)
    {
        if (!use_input_mux)
    7f14:	e3510000 	cmp	r1, #0
    7f18:	1a000056 	bne	8078 <alt_clk_pll_bypass_enable+0x1b0>
        {
#ifdef  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    7f1c:	e3043fff 	movw	r3, #20479	; 0x4fff
    7f20:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7f24:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7f28:	e513cf9f 	ldr	r12, [r3, #-3999]	; 0xfffff061

            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK)))
    7f2c:	e21c3004 	ands	r3, r12, #4
    7f30:	12023001 	andne	r3, r2, #1
    7f34:	12233001 	eorne	r3, r3, #1
            {
                restore_0 = true;
            }
            if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
    7f38:	e21c1008 	ands	r1, r12, #8
    7f3c:	12222002 	eorne	r2, r2, #2
    7f40:	17e010d2 	ubfxne	r1, r2, #1, #1
            {
                restore_1 = true;
            }
            temp = temp1;
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
    7f44:	e3530000 	cmp	r3, #0
    7f48:	13cc2004 	bicne	r2, r12, #4
        {
#ifdef  ALT_PREVENT_GLITCH_BYP
            /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing */
            /* bypass state, then gate clock back on. FogBugz #63778 */
            temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7f4c:	01a0200c 	moveq	r2, r12
            {
                restore_1 = true;
            }
            temp = temp1;
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
    7f50:	e3510000 	cmp	r1, #0
    7f54:	13c22008 	bicne	r2, r2, #8
    7f58:	1a00003d 	bne	8054 <alt_clk_pll_bypass_enable+0x18c>
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    7f5c:	e3530000 	cmp	r3, #0
    7f60:	01a04003 	moveq	r4, r3
    7f64:	1a00003a 	bne	8054 <alt_clk_pll_bypass_enable+0x18c>

            alt_setbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
    7f68:	e3042fff 	movw	r2, #20479	; 0x4fff
    7f6c:	e3a03033 	mov	r3, #51	; 0x33
    7f70:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    7f74:	e5120ffb 	ldr	r0, [r2, #-4091]	; 0xfffff005
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7f78:	e1a01002 	mov	r1, r2
            temp = temp1;
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }

            alt_setbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
    7f7c:	e3800001 	orr	r0, r0, #1
    7f80:	e5020ffb 	str	r0, [r2, #-4091]	; 0xfffff005
    7f84:	ea000001 	b	7f90 <alt_clk_pll_bypass_enable+0xc8>
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    } while (nofini && i--);
    7f88:	e2533001 	subs	r3, r3, #1
    7f8c:	0a000002 	beq	7f9c <alt_clk_pll_bypass_enable+0xd4>
    int32_t     i = ALT_BYPASS_TIMEOUT_CNT;
    bool        nofini;

    do
    {
        nofini = alt_read_word(ALT_CLKMGR_STAT_ADDR) & ALT_CLKMGR_STAT_BUSY_SET_MSK;
    7f90:	e5112feb 	ldr	r2, [r1, #-4075]	; 0xfffff015
    } while (nofini && i--);
    7f94:	e3120001 	tst	r2, #1
    7f98:	1afffffa 	bne	7f88 <alt_clk_pll_bypass_enable+0xc0>
            alt_setbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
                        /* no input mux select on main PLL */

            status = alt_clk_plls_settle_wait();
                        /* wait before reenabling the L4MP and L4SP clocks */
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1); }
    7f9c:	e3540000 	cmp	r4, #0
    7fa0:	0a000029 	beq	804c <alt_clk_pll_bypass_enable+0x184>
    7fa4:	e3043fff 	movw	r3, #20479	; 0x4fff
            alt_setbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
                        /* no input mux select on main PLL */
            status = alt_clk_plls_settle_wait();

#endif
            status = ALT_E_SUCCESS;
    7fa8:	e3a00000 	mov	r0, #0
            alt_setbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
                        /* no input mux select on main PLL */

            status = alt_clk_plls_settle_wait();
                        /* wait before reenabling the L4MP and L4SP clocks */
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1); }
    7fac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7fb0:	e503cf9f 	str	r12, [r3, #-3999]	; 0xfffff061
    7fb4:	eaffffd4 	b	7f0c <alt_clk_pll_bypass_enable+0x44>
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
#ifdef  ALT_PREVENT_GLITCH_BYP
        /* if L4MP or L4SP source is set to Peripheral PLL C1, gate it off before changing */
        /* bypass state, then gate clock back on. FogBugz #63778 */
        temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    7fb8:	e3043fff 	movw	r3, #20479	; 0x4fff
    7fbc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7fc0:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
        temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7fc4:	e513cf9f 	ldr	r12, [r3, #-3999]	; 0xfffff061

        if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK))
    7fc8:	e21c3004 	ands	r3, r12, #4
    7fcc:	12023001 	andne	r3, r2, #1
        {
            restore_0 = true;
        }
        if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK))
    7fd0:	e21c0008 	ands	r0, r12, #8
    7fd4:	17e000d2 	ubfxne	r0, r2, #1, #1
        {
            restore_1 = true;
        }
        temp = temp1;
        if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
    7fd8:	e3530000 	cmp	r3, #0
    7fdc:	13cc2004 	bicne	r2, r12, #4
    {
#ifdef  ALT_PREVENT_GLITCH_BYP
        /* if L4MP or L4SP source is set to Peripheral PLL C1, gate it off before changing */
        /* bypass state, then gate clock back on. FogBugz #63778 */
        temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
        temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    7fe0:	01a0200c 	moveq	r2, r12
        {
            restore_1 = true;
        }
        temp = temp1;
        if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
        if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
    7fe4:	e3500000 	cmp	r0, #0
    7fe8:	13c22008 	bicne	r2, r2, #8
    7fec:	0a00001d 	beq	8068 <alt_clk_pll_bypass_enable+0x1a0>
        if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    7ff0:	e3043fff 	movw	r3, #20479	; 0x4fff
    7ff4:	e3a04001 	mov	r4, #1
    7ff8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    7ffc:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061

        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
    8000:	e3043fff 	movw	r3, #20479	; 0x4fff
                (ALT_CLKMGR_BYPASS_PERPLL_CLR_MSK & ALT_CLKMGR_BYPASS_PERPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_PERPLL_SET_MSK |
    8004:	e3510000 	cmp	r1, #0
        temp = temp1;
        if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
        if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
        if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }

        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
    8008:	e34f3fd0 	movt	r3, #65488	; 0xffd0
                (ALT_CLKMGR_BYPASS_PERPLL_CLR_MSK & ALT_CLKMGR_BYPASS_PERPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_PERPLL_SET_MSK |
    800c:	03a01008 	moveq	r1, #8
        temp = temp1;
        if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
        if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
        if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }

        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
    8010:	e5135ffb 	ldr	r5, [r3, #-4091]	; 0xfffff005
                (ALT_CLKMGR_BYPASS_PERPLL_CLR_MSK & ALT_CLKMGR_BYPASS_PERPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_PERPLL_SET_MSK |
    8014:	13a01018 	movne	r1, #24
                ALT_CLKMGR_BYPASS_PERPLLSRC_SET_MSK : ALT_CLKMGR_BYPASS_PERPLL_SET_MSK;
                    /* set bypass bit and optionally the source select bit */

        alt_write_word(ALT_CLKMGR_BYPASS_ADDR, temp);
    8018:	e3a0001e 	mov	r0, #30

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    801c:	e1a02003 	mov	r2, r3
        temp = temp1;
        if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
        if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
        if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }

        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR) &
    8020:	e3c55018 	bic	r5, r5, #24
                (ALT_CLKMGR_BYPASS_PERPLL_CLR_MSK & ALT_CLKMGR_BYPASS_PERPLLSRC_CLR_MSK);
        temp |= (use_input_mux) ? ALT_CLKMGR_BYPASS_PERPLL_SET_MSK |
    8024:	e1811005 	orr	r1, r1, r5
                ALT_CLKMGR_BYPASS_PERPLLSRC_SET_MSK : ALT_CLKMGR_BYPASS_PERPLL_SET_MSK;
                    /* set bypass bit and optionally the source select bit */

        alt_write_word(ALT_CLKMGR_BYPASS_ADDR, temp);
    8028:	e5031ffb 	str	r1, [r3, #-4091]	; 0xfffff005
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    802c:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    8030:	e3043fff 	movw	r3, #20479	; 0x4fff
    8034:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8038:	e5121f9f 	ldr	r1, [r2, #-3999]	; 0xfffff061
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    803c:	1afffffa 	bne	802c <alt_clk_pll_bypass_enable+0x164>
                    /* set bypass bit and optionally the source select bit */

        alt_write_word(ALT_CLKMGR_BYPASS_ADDR, temp);
        alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
                    /* wait a bit before reenabling the L4MP and L4SP clocks */
        if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1); }
    8040:	e3540000 	cmp	r4, #0
    8044:	1503cf9f 	strne	r12, [r3, #-3999]	; 0xfffff061
    8048:	1affffaf 	bne	7f0c <alt_clk_pll_bypass_enable+0x44>
            alt_setbits_word(ALT_CLKMGR_BYPASS_ADDR, ALT_CLKMGR_BYPASS_MAINPLL_SET_MSK);
                        /* no input mux select on main PLL */
            status = alt_clk_plls_settle_wait();

#endif
            status = ALT_E_SUCCESS;
    804c:	e3a00000 	mov	r0, #0
    8050:	eaffffad 	b	7f0c <alt_clk_pll_bypass_enable+0x44>
                restore_1 = true;
            }
            temp = temp1;
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
            if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    8054:	e3043fff 	movw	r3, #20479	; 0x4fff
    8058:	e3a04001 	mov	r4, #1
    805c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8060:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
    8064:	eaffffbf 	b	7f68 <alt_clk_pll_bypass_enable+0xa0>
            restore_1 = true;
        }
        temp = temp1;
        if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
        if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
        if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    8068:	e3530000 	cmp	r3, #0
    806c:	01a04003 	moveq	r4, r3
    8070:	0affffe2 	beq	8000 <alt_clk_pll_bypass_enable+0x138>
    8074:	eaffffdd 	b	7ff0 <alt_clk_pll_bypass_enable+0x128>
#endif
            status = ALT_E_SUCCESS;
        }
        else
        {
            status =  ALT_E_BAD_ARG;
    8078:	e3e00008 	mvn	r0, #8
    807c:	eaffffa2 	b	7f0c <alt_clk_pll_bypass_enable+0x44>

00008080 <alt_clk_pll_is_bypassed>:

ALT_STATUS_CODE alt_clk_pll_is_bypassed(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    8080:	e3500009 	cmp	r0, #9
    8084:	0a000012 	beq	80d4 <alt_clk_pll_is_bypassed+0x54>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    8088:	e350000a 	cmp	r0, #10
    808c:	0a000009 	beq	80b8 <alt_clk_pll_is_bypassed+0x38>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    8090:	e350000b 	cmp	r0, #11
    8094:	1a000019 	bne	8100 <alt_clk_pll_is_bypassed+0x80>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8098:	e3043fff 	movw	r3, #20479	; 0x4fff
    809c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    80a0:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    80a4:	e3120001 	tst	r2, #1
    80a8:	1a000007 	bne	80cc <alt_clk_pll_is_bypassed+0x4c>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    80ac:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
    80b0:	e7e000d0 	ubfx	r0, r0, #1, #1
    80b4:	e12fff1e 	bx	lr
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    80b8:	e3043fff 	movw	r3, #20479	; 0x4fff
    80bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    80c0:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    80c4:	e3120001 	tst	r2, #1
    80c8:	0a000009 	beq	80f4 <alt_clk_pll_is_bypassed+0x74>
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    80cc:	e3a00001 	mov	r0, #1
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    return status;
}
    80d0:	e12fff1e 	bx	lr
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    80d4:	e3043fff 	movw	r3, #20479	; 0x4fff
    80d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    80dc:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    80e0:	e3120001 	tst	r2, #1
    80e4:	1afffff8 	bne	80cc <alt_clk_pll_is_bypassed+0x4c>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    80e8:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
    80ec:	e2000001 	and	r0, r0, #1
    80f0:	e12fff1e 	bx	lr
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    80f4:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
    80f8:	e7e001d0 	ubfx	r0, r0, #3, #1
    80fc:	e12fff1e 	bx	lr
/* glitches which may affect downstream clock dividers and peripherals.                 */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_is_bypassed(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;
    8100:	e3e00008 	mvn	r0, #8
    8104:	e12fff1e 	bx	lr

00008108 <alt_clk_pll_source_get>:
{
    ALT_CLK_t      ret = ALT_CLK_UNKNOWN;
    uint32_t       temp;


    if (pll == ALT_CLK_MAIN_PLL)
    8108:	e3500009 	cmp	r0, #9
    810c:	0a00001c 	beq	8184 <alt_clk_pll_source_get+0x7c>
    {
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    8110:	e350000a 	cmp	r0, #10
    8114:	0a000003 	beq	8128 <alt_clk_pll_source_get+0x20>
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    8118:	e350000b 	cmp	r0, #11
    811c:	0a00000c 	beq	8154 <alt_clk_pll_source_get+0x4c>
/* alt_clk_pll_source_get() returns the current input of the specified PLL.             */
/****************************************************************************************/

ALT_CLK_t alt_clk_pll_source_get(ALT_CLK_t pll)
{
    ALT_CLK_t      ret = ALT_CLK_UNKNOWN;
    8120:	e3a0004b 	mov	r0, #75	; 0x4b
    8124:	e12fff1e 	bx	lr
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    8128:	e3043fff 	movw	r3, #20479	; 0x4fff
    812c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8130:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    8134:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    8138:	e3500000 	cmp	r0, #0
    813c:	012fff1e 	bxeq	lr
        {
            ret = ALT_CLK_IN_PIN_OSC1;
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    8140:	e3500001 	cmp	r0, #1
    8144:	012fff1e 	bxeq	lr
        {
            ret = ALT_CLK_IN_PIN_OSC2;
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    8148:	e3500002 	cmp	r0, #2
    814c:	1afffff3 	bne	8120 <alt_clk_pll_source_get+0x18>
    8150:	e12fff1e 	bx	lr
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        /* three possible clock sources for the SDRAM PLL */
        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    8154:	e3043fff 	movw	r3, #20479	; 0x4fff
    8158:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    815c:	e5130f3f 	ldr	r0, [r3, #-3903]	; 0xfffff0c1
    8160:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    8164:	e3500000 	cmp	r0, #0
    8168:	012fff1e 	bxeq	lr
        {
            ret = ALT_CLK_IN_PIN_OSC1;
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    816c:	e3500001 	cmp	r0, #1
    8170:	012fff1e 	bxeq	lr
/* alt_clk_pll_source_get() returns the current input of the specified PLL.             */
/****************************************************************************************/

ALT_CLK_t alt_clk_pll_source_get(ALT_CLK_t pll)
{
    ALT_CLK_t      ret = ALT_CLK_UNKNOWN;
    8174:	e3500002 	cmp	r0, #2
    8178:	03a00003 	moveq	r0, #3
    817c:	13a0004b 	movne	r0, #75	; 0x4b
    8180:	e12fff1e 	bx	lr
    uint32_t       temp;


    if (pll == ALT_CLK_MAIN_PLL)
    {
        ret = ALT_CLK_IN_PIN_OSC1;
    8184:	e3a00000 	mov	r0, #0
        {
            ret = ALT_CLK_F2H_SDRAM_REF;
        }
    }
    return ret;
}
    8188:	e12fff1e 	bx	lr

0000818c <alt_clk_clock_disable>:
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    switch (clk)
    818c:	e2403009 	sub	r3, r0, #9
    8190:	e3530037 	cmp	r3, #55	; 0x37
    8194:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8198:	ea0000ee 	b	8558 <alt_clk_clock_disable+0x3cc>
    819c:	00008550 	.word	0x00008550
    81a0:	00008550 	.word	0x00008550
    81a4:	00008550 	.word	0x00008550
    81a8:	00008558 	.word	0x00008558
    81ac:	00008558 	.word	0x00008558
    81b0:	00008558 	.word	0x00008558
    81b4:	00008558 	.word	0x00008558
    81b8:	00008558 	.word	0x00008558
    81bc:	00008558 	.word	0x00008558
    81c0:	00008558 	.word	0x00008558
    81c4:	00008558 	.word	0x00008558
    81c8:	00008558 	.word	0x00008558
    81cc:	00008558 	.word	0x00008558
    81d0:	00008558 	.word	0x00008558
    81d4:	00008534 	.word	0x00008534
    81d8:	00008558 	.word	0x00008558
    81dc:	00008518 	.word	0x00008518
    81e0:	000084fc 	.word	0x000084fc
    81e4:	000084e0 	.word	0x000084e0
    81e8:	00008558 	.word	0x00008558
    81ec:	000084c4 	.word	0x000084c4
    81f0:	000084a8 	.word	0x000084a8
    81f4:	0000848c 	.word	0x0000848c
    81f8:	00008470 	.word	0x00008470
    81fc:	00008558 	.word	0x00008558
    8200:	00008558 	.word	0x00008558
    8204:	00008454 	.word	0x00008454
    8208:	00008438 	.word	0x00008438
    820c:	00008558 	.word	0x00008558
    8210:	00008558 	.word	0x00008558
    8214:	00008558 	.word	0x00008558
    8218:	00008558 	.word	0x00008558
    821c:	00008558 	.word	0x00008558
    8220:	00008558 	.word	0x00008558
    8224:	00008430 	.word	0x00008430
    8228:	00008414 	.word	0x00008414
    822c:	000083f8 	.word	0x000083f8
    8230:	000083b0 	.word	0x000083b0
    8234:	00008430 	.word	0x00008430
    8238:	00008394 	.word	0x00008394
    823c:	00008378 	.word	0x00008378
    8240:	0000835c 	.word	0x0000835c
    8244:	00008340 	.word	0x00008340
    8248:	00008324 	.word	0x00008324
    824c:	00008308 	.word	0x00008308
    8250:	000082ec 	.word	0x000082ec
    8254:	00008558 	.word	0x00008558
    8258:	00008558 	.word	0x00008558
    825c:	00008558 	.word	0x00008558
    8260:	00008558 	.word	0x00008558
    8264:	00008558 	.word	0x00008558
    8268:	00008558 	.word	0x00008558
    826c:	000082d0 	.word	0x000082d0
    8270:	000082b4 	.word	0x000082b4
    8274:	00008298 	.word	0x00008298
    8278:	0000827c 	.word	0x0000827c
        break;
    case ALT_CLK_DDR_DQ:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER2:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK);
    827c:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8280:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DDR_DQ:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER2:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK);
    8284:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8288:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    828c:	e3c22008 	bic	r2, r2, #8
    8290:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
        break;
    8294:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_DDR_2X_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
        break;
    case ALT_CLK_DDR_DQ:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
    8298:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    829c:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DDR_2X_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
        break;
    case ALT_CLK_DDR_DQ:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
    82a0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    82a4:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    82a8:	e3c22004 	bic	r2, r2, #4
    82ac:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
        break;
    82b0:	e12fff1e 	bx	lr
        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
        break;
    case ALT_CLK_DDR_2X_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
    82b4:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    82b8:	e3a00000 	mov	r0, #0
        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
        break;
    case ALT_CLK_DDR_2X_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
    82bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    82c0:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    82c4:	e3c22002 	bic	r2, r2, #2
    82c8:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
        break;
    82cc:	e12fff1e 	bx	lr
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
        break;

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
    82d0:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    82d4:	e3a00000 	mov	r0, #0
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
        break;

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_clrbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
    82d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    82dc:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    82e0:	e3c22001 	bic	r2, r2, #1
    82e4:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
        break;
    82e8:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_GPIO_DB:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
    82ec:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    82f0:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_GPIO_DB:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
    82f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    82f8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    82fc:	e3c22080 	bic	r2, r2, #128	; 0x80
    8300:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8304:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_CAN1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
        break;
    case ALT_CLK_GPIO_DB:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
    8308:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    830c:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_CAN1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
        break;
    case ALT_CLK_GPIO_DB:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
    8310:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8314:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8318:	e3c22040 	bic	r2, r2, #64	; 0x40
    831c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8320:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_CAN0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
        break;
    case ALT_CLK_CAN1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
    8324:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8328:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_CAN0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
        break;
    case ALT_CLK_CAN1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
    832c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8330:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8334:	e3c22020 	bic	r2, r2, #32
    8338:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    833c:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_SPI_M:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
        break;
    case ALT_CLK_CAN0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
    8340:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8344:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_SPI_M:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
        break;
    case ALT_CLK_CAN0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
    8348:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    834c:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8350:	e3c22010 	bic	r2, r2, #16
    8354:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8358:	e12fff1e 	bx	lr
        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
        break;
    case ALT_CLK_EMAC1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
    835c:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8360:	e3a00000 	mov	r0, #0
        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
        break;
    case ALT_CLK_EMAC1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
    8364:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8368:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    836c:	e3c22002 	bic	r2, r2, #2
    8370:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8374:	e12fff1e 	bx	lr
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
        break;

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
    8378:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    837c:	e3a00000 	mov	r0, #0
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
        break;

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
    8380:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8384:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8388:	e3c22001 	bic	r2, r2, #1
    838c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8390:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_H2F_USER1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
        break;
    case ALT_CLK_SDMMC:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
    8394:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8398:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_H2F_USER1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
        break;
    case ALT_CLK_SDMMC:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
    839c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    83a0:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83a4:	e3c22c01 	bic	r2, r2, #256	; 0x100
    83a8:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    83ac:	e12fff1e 	bx	lr
    case ALT_CLK_NAND_X:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
    83b0:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    83b4:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_SDMMC:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
        break;
    case ALT_CLK_NAND_X:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
    83b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    83bc:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83c0:	e3c22b01 	bic	r2, r2, #1024	; 0x400
    83c4:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    83c8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83cc:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83d0:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83d4:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83d8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83dc:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83e0:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83e4:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    case ALT_CLK_NAND_X:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
        /* gate nand_clk off before nand_x_clk. */
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
    83e8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    83ec:	e3c22c02 	bic	r2, r2, #512	; 0x200
    83f0:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    83f4:	e12fff1e 	bx	lr
    case ALT_CLK_QSPI:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
    83f8:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    83fc:	e3a00000 	mov	r0, #0
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
        /* gate nand_clk off before nand_x_clk. */
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
        break;
    case ALT_CLK_QSPI:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
    8400:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8404:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8408:	e3c22b02 	bic	r2, r2, #2048	; 0x800
    840c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8410:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_EMAC1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
        break;
    case ALT_CLK_SPI_M:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
    8414:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8418:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_EMAC1:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
        break;
    case ALT_CLK_SPI_M:
        alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
    841c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8420:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8424:	e3c22008 	bic	r2, r2, #8
    8428:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    842c:	e12fff1e 	bx	lr
        break;

    case ALT_CLK_USB_MP:
    case ALT_CLK_NAND:
        /* Disabling either of these clocks can cause sdram to glitch, and thus we prevent */ 
        status = ALT_E_BAD_CLK;
    8430:	e3e0000d 	mvn	r0, #13
    8434:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_CFG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER0:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
    8438:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    843c:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_CFG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER0:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
    8440:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8444:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8448:	e3c22c02 	bic	r2, r2, #512	; 0x200
    844c:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8450:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_DBG_TIMER:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
        break;
    case ALT_CLK_CFG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
    8454:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8458:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DBG_TIMER:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
        break;
    case ALT_CLK_CFG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
    845c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8460:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8464:	e3c22c01 	bic	r2, r2, #256	; 0x100
    8468:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    846c:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_DBG_AT:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
        break;
    case ALT_CLK_DBG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
    8470:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8474:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DBG_AT:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
        break;
    case ALT_CLK_DBG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
    8478:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    847c:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8480:	e3c22020 	bic	r2, r2, #32
    8484:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8488:	e12fff1e 	bx	lr
    case ALT_CLK_DBG_TRACE:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
        break;
    case ALT_CLK_DBG_TIMER:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
    848c:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8490:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DBG_TRACE:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
        break;
    case ALT_CLK_DBG_TIMER:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
    8494:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8498:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    849c:	e3c22080 	bic	r2, r2, #128	; 0x80
    84a0:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    84a4:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_DBG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
        break;
    case ALT_CLK_DBG_TRACE:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
    84a8:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    84ac:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DBG:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
        break;
    case ALT_CLK_DBG_TRACE:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
    84b0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    84b4:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    84b8:	e3c22040 	bic	r2, r2, #64	; 0x40
    84bc:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    84c0:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_L4_SP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
        break;
    case ALT_CLK_DBG_AT:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
    84c4:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    84c8:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_L4_SP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
        break;
    case ALT_CLK_DBG_AT:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
    84cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    84d0:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    84d4:	e3c22010 	bic	r2, r2, #16
    84d8:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    84dc:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_L4_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
        break;
    case ALT_CLK_L4_SP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
    84e0:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    84e4:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_L4_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
        break;
    case ALT_CLK_L4_SP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
    84e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    84ec:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    84f0:	e3c22008 	bic	r2, r2, #8
    84f4:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    84f8:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_L3_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
        break;
    case ALT_CLK_L4_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
    84fc:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8500:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_L3_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
        break;
    case ALT_CLK_L4_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
    8504:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8508:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    850c:	e3c22004 	bic	r2, r2, #4
    8510:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8514:	e12fff1e 	bx	lr
        status = alt_clk_pll_bypass_enable(clk, false);
        break;

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_SET_MSK);
    8518:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    851c:	e3a00000 	mov	r0, #0
        status = alt_clk_pll_bypass_enable(clk, false);
        break;

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_SET_MSK);
    8520:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8524:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8528:	e3c22001 	bic	r2, r2, #1
    852c:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8530:	e12fff1e 	bx	lr
    case ALT_CLK_L3_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
    8534:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_disable() disables the specified clock. Once the clock is disabled,
// its clock signal does not propagate to its clocked elements.
*/
ALT_STATUS_CODE alt_clk_clock_disable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8538:	e3a00000 	mov	r0, #0
        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_SET_MSK);
        break;
    case ALT_CLK_L3_MP:
        alt_clrbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
    853c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8540:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8544:	e3c22002 	bic	r2, r2, #2
    8548:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    854c:	e12fff1e 	bx	lr
    {
        /* For PLLs, put them in bypass mode. */
    case ALT_CLK_MAIN_PLL:
    case ALT_CLK_PERIPHERAL_PLL:
    case ALT_CLK_SDRAM_PLL:
        status = alt_clk_pll_bypass_enable(clk, false);
    8550:	e3a01000 	mov	r1, #0
    8554:	eafffe5b 	b	7ec8 <alt_clk_pll_bypass_enable>
    case ALT_CLK_NAND:
        /* Disabling either of these clocks can cause sdram to glitch, and thus we prevent */ 
        status = ALT_E_BAD_CLK;
        break;
    default:
        status = ALT_E_BAD_ARG;
    8558:	e3e00008 	mvn	r0, #8
        break;
    }

    return status;
}
    855c:	e12fff1e 	bx	lr

00008560 <alt_clk_clock_enable>:
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    switch (clk)
    8560:	e2403009 	sub	r3, r0, #9
    8564:	e3530037 	cmp	r3, #55	; 0x37
    8568:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    856c:	ea000101 	b	8978 <alt_clk_clock_enable+0x418>
    8570:	00008974 	.word	0x00008974
    8574:	00008974 	.word	0x00008974
    8578:	00008974 	.word	0x00008974
    857c:	00008978 	.word	0x00008978
    8580:	00008978 	.word	0x00008978
    8584:	00008978 	.word	0x00008978
    8588:	00008978 	.word	0x00008978
    858c:	00008978 	.word	0x00008978
    8590:	00008978 	.word	0x00008978
    8594:	00008978 	.word	0x00008978
    8598:	00008978 	.word	0x00008978
    859c:	00008978 	.word	0x00008978
    85a0:	00008978 	.word	0x00008978
    85a4:	00008978 	.word	0x00008978
    85a8:	00008958 	.word	0x00008958
    85ac:	00008978 	.word	0x00008978
    85b0:	0000893c 	.word	0x0000893c
    85b4:	00008920 	.word	0x00008920
    85b8:	00008904 	.word	0x00008904
    85bc:	00008978 	.word	0x00008978
    85c0:	000088e8 	.word	0x000088e8
    85c4:	000088cc 	.word	0x000088cc
    85c8:	000088b0 	.word	0x000088b0
    85cc:	00008894 	.word	0x00008894
    85d0:	00008978 	.word	0x00008978
    85d4:	00008978 	.word	0x00008978
    85d8:	00008878 	.word	0x00008878
    85dc:	0000885c 	.word	0x0000885c
    85e0:	00008978 	.word	0x00008978
    85e4:	00008978 	.word	0x00008978
    85e8:	00008978 	.word	0x00008978
    85ec:	00008978 	.word	0x00008978
    85f0:	00008978 	.word	0x00008978
    85f4:	00008978 	.word	0x00008978
    85f8:	00008840 	.word	0x00008840
    85fc:	00008824 	.word	0x00008824
    8600:	00008808 	.word	0x00008808
    8604:	000087cc 	.word	0x000087cc
    8608:	00008784 	.word	0x00008784
    860c:	00008768 	.word	0x00008768
    8610:	0000874c 	.word	0x0000874c
    8614:	00008730 	.word	0x00008730
    8618:	00008714 	.word	0x00008714
    861c:	000086f8 	.word	0x000086f8
    8620:	000086dc 	.word	0x000086dc
    8624:	000086c0 	.word	0x000086c0
    8628:	00008978 	.word	0x00008978
    862c:	00008978 	.word	0x00008978
    8630:	00008978 	.word	0x00008978
    8634:	00008978 	.word	0x00008978
    8638:	00008978 	.word	0x00008978
    863c:	00008978 	.word	0x00008978
    8640:	000086a4 	.word	0x000086a4
    8644:	00008688 	.word	0x00008688
    8648:	0000866c 	.word	0x0000866c
    864c:	00008650 	.word	0x00008650
        break;
    case ALT_CLK_DDR_DQ:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER2:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK);
    8650:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8654:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DDR_DQ:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER2:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK);
    8658:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    865c:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    8660:	e3822008 	orr	r2, r2, #8
    8664:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
        break;
    8668:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_DDR_2X_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
        break;
    case ALT_CLK_DDR_DQ:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
    866c:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8670:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DDR_2X_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
        break;
    case ALT_CLK_DDR_DQ:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK);
    8674:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8678:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    867c:	e3822004 	orr	r2, r2, #4
    8680:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
        break;
    8684:	e12fff1e 	bx	lr
        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
        break;
    case ALT_CLK_DDR_2X_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
    8688:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    868c:	e3a00000 	mov	r0, #0
        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
        break;
    case ALT_CLK_DDR_2X_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK);
    8690:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8694:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    8698:	e3822002 	orr	r2, r2, #2
    869c:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
        break;
    86a0:	e12fff1e 	bx	lr
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
        break;

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
    86a4:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    86a8:	e3a00000 	mov	r0, #0
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
        break;

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK);
    86ac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    86b0:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    86b4:	e3822001 	orr	r2, r2, #1
    86b8:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
        break;
    86bc:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_GPIO_DB:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
    86c0:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    86c4:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_GPIO_DB:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
    86c8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    86cc:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    86d0:	e3822080 	orr	r2, r2, #128	; 0x80
    86d4:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    86d8:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_CAN1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
        break;
    case ALT_CLK_GPIO_DB:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
    86dc:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    86e0:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_CAN1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
        break;
    case ALT_CLK_GPIO_DB:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK);
    86e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    86e8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    86ec:	e3822040 	orr	r2, r2, #64	; 0x40
    86f0:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    86f4:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_CAN0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
        break;
    case ALT_CLK_CAN1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
    86f8:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    86fc:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_CAN0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
        break;
    case ALT_CLK_CAN1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK);
    8700:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8704:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8708:	e3822020 	orr	r2, r2, #32
    870c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8710:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_SPI_M:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
        break;
    case ALT_CLK_CAN0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
    8714:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8718:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_SPI_M:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
        break;
    case ALT_CLK_CAN0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK);
    871c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8720:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8724:	e3822010 	orr	r2, r2, #16
    8728:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    872c:	e12fff1e 	bx	lr
        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
        break;
    case ALT_CLK_EMAC1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
    8730:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8734:	e3a00000 	mov	r0, #0
        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
        break;
    case ALT_CLK_EMAC1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
    8738:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    873c:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8740:	e3822002 	orr	r2, r2, #2
    8744:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8748:	e12fff1e 	bx	lr
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
        break;

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
    874c:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8750:	e3a00000 	mov	r0, #0
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
        break;

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK);
    8754:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8758:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    875c:	e3822001 	orr	r2, r2, #1
    8760:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8764:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_H2F_USER1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
        break;
    case ALT_CLK_SDMMC:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
    8768:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    876c:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_H2F_USER1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK);
        break;
    case ALT_CLK_SDMMC:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
    8770:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8774:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8778:	e3822c01 	orr	r2, r2, #256	; 0x100
    877c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8780:	e12fff1e 	bx	lr
        /* implementation detail - should this wait be enforced here? */
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
        break;
    case ALT_CLK_NAND:
        /* enabling ALT_CLK_NAND always implies enabling ALT_CLK_NAND_X first */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
    8784:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8788:	e3a00000 	mov	r0, #0
        /* implementation detail - should this wait be enforced here? */
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
        break;
    case ALT_CLK_NAND:
        /* enabling ALT_CLK_NAND always implies enabling ALT_CLK_NAND_X first */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
    878c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8790:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8794:	e3822c02 	orr	r2, r2, #512	; 0x200
    8798:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    879c:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87a0:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87a4:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87a8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87ac:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87b0:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87b4:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87b8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    case ALT_CLK_NAND:
        /* enabling ALT_CLK_NAND always implies enabling ALT_CLK_NAND_X first */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
        /* gate nand_x_clk on at least 8 MCU clocks before nand_clk */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
    87bc:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87c0:	e3822b01 	orr	r2, r2, #1024	; 0x400
    87c4:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    87c8:	e12fff1e 	bx	lr
    case ALT_CLK_SDMMC:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
        break;
    case ALT_CLK_NAND_X:
        /* implementation detail - should ALK_CLK_NAND be gated off here before enabling ALT_CLK_NAND_X? */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
    87cc:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    87d0:	e3a00000 	mov	r0, #0
    case ALT_CLK_SDMMC:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
        break;
    case ALT_CLK_NAND_X:
        /* implementation detail - should ALK_CLK_NAND be gated off here before enabling ALT_CLK_NAND_X? */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
    87d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    87d8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87dc:	e3822c02 	orr	r2, r2, #512	; 0x200
    87e0:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    87e4:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87e8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87ec:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87f0:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87f4:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87f8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    87fc:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8800:	e5133f5f 	ldr	r3, [r3, #-3935]	; 0xfffff0a1
    8804:	e12fff1e 	bx	lr
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
        /* gate nand_x_clk on at least 8 MCU clocks before nand_clk */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
        break;
    case ALT_CLK_QSPI:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
    8808:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    880c:	e3a00000 	mov	r0, #0
        alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
        /* gate nand_x_clk on at least 8 MCU clocks before nand_clk */
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
        break;
    case ALT_CLK_QSPI:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
    8810:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8814:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8818:	e3822b02 	orr	r2, r2, #2048	; 0x800
    881c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8820:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_USB_MP:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK);
        break;
    case ALT_CLK_SPI_M:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
    8824:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8828:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_USB_MP:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK);
        break;
    case ALT_CLK_SPI_M:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK);
    882c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8830:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8834:	e3822008 	orr	r2, r2, #8
    8838:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    883c:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_EMAC1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
        break;
    case ALT_CLK_USB_MP:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK);
    8840:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8844:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_EMAC1:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK);
        break;
    case ALT_CLK_USB_MP:
        alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK);
    8848:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    884c:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    8850:	e3822004 	orr	r2, r2, #4
    8854:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
        break;
    8858:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_CFG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER0:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
    885c:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8860:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_CFG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
        break;
    case ALT_CLK_H2F_USER0:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK);
    8864:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8868:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    886c:	e3822c02 	orr	r2, r2, #512	; 0x200
    8870:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8874:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_DBG_TIMER:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
        break;
    case ALT_CLK_CFG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
    8878:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    887c:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DBG_TIMER:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
        break;
    case ALT_CLK_CFG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK);
    8880:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8884:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8888:	e3822c01 	orr	r2, r2, #256	; 0x100
    888c:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8890:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_DBG_AT:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
        break;
    case ALT_CLK_DBG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
    8894:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8898:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DBG_AT:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
        break;
    case ALT_CLK_DBG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
    889c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    88a0:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    88a4:	e3822020 	orr	r2, r2, #32
    88a8:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    88ac:	e12fff1e 	bx	lr
    case ALT_CLK_DBG_TRACE:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
        break;
    case ALT_CLK_DBG_TIMER:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
    88b0:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    88b4:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DBG_TRACE:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
        break;
    case ALT_CLK_DBG_TIMER:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_SET_MSK);
    88b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    88bc:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    88c0:	e3822080 	orr	r2, r2, #128	; 0x80
    88c4:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    88c8:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_DBG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
        break;
    case ALT_CLK_DBG_TRACE:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
    88cc:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    88d0:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_DBG:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK);
        break;
    case ALT_CLK_DBG_TRACE:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK);
    88d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    88d8:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    88dc:	e3822040 	orr	r2, r2, #64	; 0x40
    88e0:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    88e4:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_L4_SP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
        break;
    case ALT_CLK_DBG_AT:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
    88e8:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    88ec:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_L4_SP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
        break;
    case ALT_CLK_DBG_AT:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK);
    88f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    88f4:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    88f8:	e3822010 	orr	r2, r2, #16
    88fc:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8900:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_L4_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
        break;
    case ALT_CLK_L4_SP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
    8904:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8908:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_L4_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
        break;
    case ALT_CLK_L4_SP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
    890c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8910:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8914:	e3822008 	orr	r2, r2, #8
    8918:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    891c:	e12fff1e 	bx	lr
        break;
    case ALT_CLK_L3_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
        break;
    case ALT_CLK_L4_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
    8920:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8924:	e3a00000 	mov	r0, #0
        break;
    case ALT_CLK_L3_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
        break;
    case ALT_CLK_L4_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
    8928:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    892c:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8930:	e3822004 	orr	r2, r2, #4
    8934:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8938:	e12fff1e 	bx	lr
        status = alt_clk_pll_bypass_disable(clk);
        break;

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_SET_MSK);
    893c:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    8940:	e3a00000 	mov	r0, #0
        status = alt_clk_pll_bypass_disable(clk);
        break;

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_SET_MSK);
    8944:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8948:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    894c:	e3822001 	orr	r2, r2, #1
    8950:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8954:	e12fff1e 	bx	lr
    case ALT_CLK_L3_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
    8958:	e3043fff 	movw	r3, #20479	; 0x4fff
// alt_clk_clock_enable() enables the specified clock. Once the clock is enabled, its
// clock signal propagates to its elements.
*/
ALT_STATUS_CODE alt_clk_clock_enable(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    895c:	e3a00000 	mov	r0, #0
        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_SET_MSK);
        break;
    case ALT_CLK_L3_MP:
        alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK);
    8960:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8964:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    8968:	e3822002 	orr	r2, r2, #2
    896c:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
        break;
    8970:	e12fff1e 	bx	lr
    {
        /* For PLLs, take them out of bypass mode. */
    case ALT_CLK_MAIN_PLL:
    case ALT_CLK_PERIPHERAL_PLL:
    case ALT_CLK_SDRAM_PLL:
        status = alt_clk_pll_bypass_disable(clk);
    8974:	eafffc9a 	b	7be4 <alt_clk_pll_bypass_disable>
    case ALT_CLK_H2F_USER2:
        alt_setbits_word(ALT_CLKMGR_SDRPLL_EN_ADDR, ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK);
        break;

    default:
        status = ALT_E_BAD_ARG;
    8978:	e3e00008 	mvn	r0, #8
        break;
    }

    return status;
}
    897c:	e12fff1e 	bx	lr

00008980 <alt_clk_is_enabled>:
*/
ALT_STATUS_CODE alt_clk_is_enabled(ALT_CLK_t clk)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    switch (clk)
    8980:	e2403009 	sub	r3, r0, #9
    8984:	e3530037 	cmp	r3, #55	; 0x37
    8988:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    898c:	ea0000b4 	b	8c64 <alt_clk_is_enabled+0x2e4>
    8990:	00008c6c 	.word	0x00008c6c
    8994:	00008c6c 	.word	0x00008c6c
    8998:	00008c6c 	.word	0x00008c6c
    899c:	00008c64 	.word	0x00008c64
    89a0:	00008c64 	.word	0x00008c64
    89a4:	00008c64 	.word	0x00008c64
    89a8:	00008c64 	.word	0x00008c64
    89ac:	00008c64 	.word	0x00008c64
    89b0:	00008c64 	.word	0x00008c64
    89b4:	00008c64 	.word	0x00008c64
    89b8:	00008c64 	.word	0x00008c64
    89bc:	00008c64 	.word	0x00008c64
    89c0:	00008c64 	.word	0x00008c64
    89c4:	00008c64 	.word	0x00008c64
    89c8:	00008c50 	.word	0x00008c50
    89cc:	00008c64 	.word	0x00008c64
    89d0:	00008c3c 	.word	0x00008c3c
    89d4:	00008c28 	.word	0x00008c28
    89d8:	00008c14 	.word	0x00008c14
    89dc:	00008c64 	.word	0x00008c64
    89e0:	00008c00 	.word	0x00008c00
    89e4:	00008bec 	.word	0x00008bec
    89e8:	00008bd8 	.word	0x00008bd8
    89ec:	00008bc4 	.word	0x00008bc4
    89f0:	00008c64 	.word	0x00008c64
    89f4:	00008c64 	.word	0x00008c64
    89f8:	00008bb0 	.word	0x00008bb0
    89fc:	00008b9c 	.word	0x00008b9c
    8a00:	00008c64 	.word	0x00008c64
    8a04:	00008c64 	.word	0x00008c64
    8a08:	00008c64 	.word	0x00008c64
    8a0c:	00008c64 	.word	0x00008c64
    8a10:	00008c64 	.word	0x00008c64
    8a14:	00008c64 	.word	0x00008c64
    8a18:	00008b88 	.word	0x00008b88
    8a1c:	00008b74 	.word	0x00008b74
    8a20:	00008b60 	.word	0x00008b60
    8a24:	00008b4c 	.word	0x00008b4c
    8a28:	00008b38 	.word	0x00008b38
    8a2c:	00008b24 	.word	0x00008b24
    8a30:	00008b10 	.word	0x00008b10
    8a34:	00008afc 	.word	0x00008afc
    8a38:	00008ae8 	.word	0x00008ae8
    8a3c:	00008ad4 	.word	0x00008ad4
    8a40:	00008ac0 	.word	0x00008ac0
    8a44:	00008aac 	.word	0x00008aac
    8a48:	00008c64 	.word	0x00008c64
    8a4c:	00008c64 	.word	0x00008c64
    8a50:	00008c64 	.word	0x00008c64
    8a54:	00008c64 	.word	0x00008c64
    8a58:	00008c64 	.word	0x00008c64
    8a5c:	00008c64 	.word	0x00008c64
    8a60:	00008a98 	.word	0x00008a98
    8a64:	00008a84 	.word	0x00008a84
    8a68:	00008a70 	.word	0x00008a70
    8a6c:	00008ca0 	.word	0x00008ca0
    case ALT_CLK_DDR_2X_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DDR_DQ:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
    8a70:	e3043fff 	movw	r3, #20479	; 0x4fff
    8a74:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8a78:	e5130f27 	ldr	r0, [r3, #-3879]	; 0xfffff0d9
    8a7c:	e7e00150 	ubfx	r0, r0, #2, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8a80:	e12fff1e 	bx	lr
    case ALT_CLK_DDR_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DDR_2X_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
    8a84:	e3043fff 	movw	r3, #20479	; 0x4fff
    8a88:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8a8c:	e5130f27 	ldr	r0, [r3, #-3879]	; 0xfffff0d9
    8a90:	e7e000d0 	ubfx	r0, r0, #1, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8a94:	e12fff1e 	bx	lr
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;

        /* Clocks that originate at the SDRAM PLL. */
    case ALT_CLK_DDR_DQS:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
    8a98:	e3043fff 	movw	r3, #20479	; 0x4fff
    8a9c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8aa0:	e5130f27 	ldr	r0, [r3, #-3879]	; 0xfffff0d9
    8aa4:	e2000001 	and	r0, r0, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8aa8:	e12fff1e 	bx	lr
    case ALT_CLK_GPIO_DB:
        status = (ALT_CLKMGR_PERPLL_EN_GPIOCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_H2F_USER1:
        status = (ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8aac:	e3043fff 	movw	r3, #20479	; 0x4fff
    8ab0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8ab4:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8ab8:	e7e003d0 	ubfx	r0, r0, #7, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8abc:	e12fff1e 	bx	lr
    case ALT_CLK_CAN1:
        status = (ALT_CLKMGR_PERPLL_EN_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_GPIO_DB:
        status = (ALT_CLKMGR_PERPLL_EN_GPIOCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8ac0:	e3043fff 	movw	r3, #20479	; 0x4fff
    8ac4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8ac8:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8acc:	e7e00350 	ubfx	r0, r0, #6, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8ad0:	e12fff1e 	bx	lr
    case ALT_CLK_CAN0:
        status = (ALT_CLKMGR_PERPLL_EN_CAN0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_CAN1:
        status = (ALT_CLKMGR_PERPLL_EN_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8ad4:	e3043fff 	movw	r3, #20479	; 0x4fff
    8ad8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8adc:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8ae0:	e7e002d0 	ubfx	r0, r0, #5, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8ae4:	e12fff1e 	bx	lr
    case ALT_CLK_SPI_M:
        status = (ALT_CLKMGR_PERPLL_EN_SPIMCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_CAN0:
        status = (ALT_CLKMGR_PERPLL_EN_CAN0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8ae8:	e3043fff 	movw	r3, #20479	; 0x4fff
    8aec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8af0:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8af4:	e7e00250 	ubfx	r0, r0, #4, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8af8:	e12fff1e 	bx	lr
    case ALT_CLK_EMAC0:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_EMAC1:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8afc:	e3043fff 	movw	r3, #20479	; 0x4fff
    8b00:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8b04:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8b08:	e7e000d0 	ubfx	r0, r0, #1, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8b0c:	e12fff1e 	bx	lr
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;

        /* Clocks that originate at the Peripheral PLL. */
    case ALT_CLK_EMAC0:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8b10:	e3043fff 	movw	r3, #20479	; 0x4fff
    8b14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8b18:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8b1c:	e2000001 	and	r0, r0, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8b20:	e12fff1e 	bx	lr
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;

        /* Clocks that may originate at the Main PLL, the Peripheral PLL, or the FPGA. */
    case ALT_CLK_SDMMC:
        status = (ALT_CLKMGR_PERPLL_EN_SDMMCCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8b24:	e3043fff 	movw	r3, #20479	; 0x4fff
    8b28:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8b2c:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8b30:	e7e00450 	ubfx	r0, r0, #8, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8b34:	e12fff1e 	bx	lr
    case ALT_CLK_NAND_X:
        status = (ALT_CLKMGR_PERPLL_EN_NANDXCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_NAND:
        status = (ALT_CLKMGR_PERPLL_EN_NANDCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8b38:	e3043fff 	movw	r3, #20479	; 0x4fff
    8b3c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8b40:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8b44:	e7e00550 	ubfx	r0, r0, #10, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8b48:	e12fff1e 	bx	lr
    case ALT_CLK_SDMMC:
        status = (ALT_CLKMGR_PERPLL_EN_SDMMCCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_NAND_X:
        status = (ALT_CLKMGR_PERPLL_EN_NANDXCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8b4c:	e3043fff 	movw	r3, #20479	; 0x4fff
    8b50:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8b54:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8b58:	e7e004d0 	ubfx	r0, r0, #9, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8b5c:	e12fff1e 	bx	lr
    case ALT_CLK_NAND:
        status = (ALT_CLKMGR_PERPLL_EN_NANDCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_QSPI:
        status = (ALT_CLKMGR_PERPLL_EN_QSPICLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8b60:	e3043fff 	movw	r3, #20479	; 0x4fff
    8b64:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8b68:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8b6c:	e7e005d0 	ubfx	r0, r0, #11, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8b70:	e12fff1e 	bx	lr
    case ALT_CLK_USB_MP:
        status = (ALT_CLKMGR_PERPLL_EN_USBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_SPI_M:
        status = (ALT_CLKMGR_PERPLL_EN_SPIMCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8b74:	e3043fff 	movw	r3, #20479	; 0x4fff
    8b78:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8b7c:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8b80:	e7e001d0 	ubfx	r0, r0, #3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8b84:	e12fff1e 	bx	lr
    case ALT_CLK_EMAC1:
        status = (ALT_CLKMGR_PERPLL_EN_EMAC1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_USB_MP:
        status = (ALT_CLKMGR_PERPLL_EN_USBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)))
    8b88:	e3043fff 	movw	r3, #20479	; 0x4fff
    8b8c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8b90:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    8b94:	e7e00150 	ubfx	r0, r0, #2, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8b98:	e12fff1e 	bx	lr
    case ALT_CLK_CFG:
        status = (ALT_CLKMGR_MAINPLL_EN_CFGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_H2F_USER0:
        status = (ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8b9c:	e3043fff 	movw	r3, #20479	; 0x4fff
    8ba0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8ba4:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8ba8:	e7e004d0 	ubfx	r0, r0, #9, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8bac:	e12fff1e 	bx	lr
    case ALT_CLK_DBG_TIMER:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_CFG:
        status = (ALT_CLKMGR_MAINPLL_EN_CFGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8bb0:	e3043fff 	movw	r3, #20479	; 0x4fff
    8bb4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8bb8:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8bbc:	e7e00450 	ubfx	r0, r0, #8, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8bc0:	e12fff1e 	bx	lr
    case ALT_CLK_DBG_AT:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGATCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DBG:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8bc4:	e3043fff 	movw	r3, #20479	; 0x4fff
    8bc8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8bcc:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8bd0:	e7e002d0 	ubfx	r0, r0, #5, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8bd4:	e12fff1e 	bx	lr
    case ALT_CLK_DBG_TRACE:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DBG_TIMER:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTMRCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8bd8:	e3043fff 	movw	r3, #20479	; 0x4fff
    8bdc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8be0:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8be4:	e7e003d0 	ubfx	r0, r0, #7, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8be8:	e12fff1e 	bx	lr
    case ALT_CLK_DBG:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DBG_TRACE:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8bec:	e3043fff 	movw	r3, #20479	; 0x4fff
    8bf0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8bf4:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8bf8:	e7e00350 	ubfx	r0, r0, #6, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8bfc:	e12fff1e 	bx	lr
    case ALT_CLK_L4_SP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_DBG_AT:
        status = (ALT_CLKMGR_MAINPLL_EN_DBGATCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8c00:	e3043fff 	movw	r3, #20479	; 0x4fff
    8c04:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8c08:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8c0c:	e7e00250 	ubfx	r0, r0, #4, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8c10:	e12fff1e 	bx	lr
    case ALT_CLK_L4_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_L4_SP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8c14:	e3043fff 	movw	r3, #20479	; 0x4fff
    8c18:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8c1c:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8c20:	e7e001d0 	ubfx	r0, r0, #3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8c24:	e12fff1e 	bx	lr
    case ALT_CLK_L3_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L3MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_L4_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8c28:	e3043fff 	movw	r3, #20479	; 0x4fff
    8c2c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8c30:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8c34:	e7e00150 	ubfx	r0, r0, #2, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8c38:	e12fff1e 	bx	lr
        status = ALT_E_BAD_ARG;
        break;

        /* Clocks that originate at the Main PLL. */
    case ALT_CLK_L4_MAIN:
        status = (ALT_CLKMGR_MAINPLL_EN_L4MAINCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8c3c:	e3043fff 	movw	r3, #20479	; 0x4fff
    8c40:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8c44:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8c48:	e2000001 	and	r0, r0, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8c4c:	e12fff1e 	bx	lr
    case ALT_CLK_L3_MP:
        status = (ALT_CLKMGR_MAINPLL_EN_L3MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR)))
    8c50:	e3043fff 	movw	r3, #20479	; 0x4fff
    8c54:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8c58:	e5130f9f 	ldr	r0, [r3, #-3999]	; 0xfffff061
    8c5c:	e7e000d0 	ubfx	r0, r0, #1, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8c60:	e12fff1e 	bx	lr
    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_SDRAM_PLL_C5:
        status = ALT_E_BAD_ARG;
    8c64:	e3e00008 	mvn	r0, #8
        break;

    }

    return status;
}
    8c68:	e12fff1e 	bx	lr
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8c6c:	e3043fff 	movw	r3, #20479	; 0x4fff

ALT_STATUS_CODE alt_clk_pll_is_bypassed(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    8c70:	e3500009 	cmp	r0, #9
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8c74:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8c78:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001

ALT_STATUS_CODE alt_clk_pll_is_bypassed(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    8c7c:	0a00000e 	beq	8cbc <alt_clk_is_enabled+0x33c>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    8c80:	e350000a 	cmp	r0, #10
    8c84:	0a000012 	beq	8cd4 <alt_clk_is_enabled+0x354>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8c88:	e3120001 	tst	r2, #1
    8c8c:	1a000008 	bne	8cb4 <alt_clk_is_enabled+0x334>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8c90:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
    8c94:	e7e000d0 	ubfx	r0, r0, #1, #1
    8c98:	e2200001 	eor	r0, r0, #1
    8c9c:	e12fff1e 	bx	lr
    case ALT_CLK_DDR_DQ:
        status = (ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    case ALT_CLK_H2F_USER2:
        status = (ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_GET(alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR)))
    8ca0:	e3043fff 	movw	r3, #20479	; 0x4fff
    8ca4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8ca8:	e5130f27 	ldr	r0, [r3, #-3879]	; 0xfffff0d9
    8cac:	e7e001d0 	ubfx	r0, r0, #3, #1
            ? ALT_E_TRUE : ALT_E_FALSE;
        break;
    8cb0:	e12fff1e 	bx	lr
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8cb4:	e3a00000 	mov	r0, #0
        /* For PLLs, this function checks if the PLL is bypassed or not. */
    case ALT_CLK_MAIN_PLL:
    case ALT_CLK_PERIPHERAL_PLL:
    case ALT_CLK_SDRAM_PLL:
        status = (alt_clk_pll_is_bypassed(clk) != ALT_E_TRUE);
        break;
    8cb8:	e12fff1e 	bx	lr
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8cbc:	e3120001 	tst	r2, #1
    8cc0:	1afffffb 	bne	8cb4 <alt_clk_is_enabled+0x334>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8cc4:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
    8cc8:	e2000001 	and	r0, r0, #1
    8ccc:	e2200001 	eor	r0, r0, #1
    8cd0:	e12fff1e 	bx	lr
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8cd4:	e3120001 	tst	r2, #1
    8cd8:	1afffff5 	bne	8cb4 <alt_clk_is_enabled+0x334>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8cdc:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
    8ce0:	e7e001d0 	ubfx	r0, r0, #3, #1
    8ce4:	e2200001 	eor	r0, r0, #1
    8ce8:	e12fff1e 	bx	lr

00008cec <alt_clk_source_get>:
/*
// alt_clk_source_get() gets the input reference clock source selection value for the
// specified clock or PLL.
*/
ALT_CLK_t alt_clk_source_get(ALT_CLK_t clk)
{
    8cec:	e92d4008 	push	{r3, lr}
    ALT_CLK_t ret = ALT_CLK_UNKNOWN;
    uint32_t  temp;

    switch (clk)
    8cf0:	e350004a 	cmp	r0, #74	; 0x4a
    8cf4:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    8cf8:	ea00004b 	b	8e2c <alt_clk_source_get+0x140>
    8cfc:	00008e28 	.word	0x00008e28
    8d00:	00008e28 	.word	0x00008e28
    8d04:	00008e28 	.word	0x00008e28
    8d08:	00008e28 	.word	0x00008e28
    8d0c:	00008e28 	.word	0x00008e28
    8d10:	00008e28 	.word	0x00008e28
    8d14:	00008e28 	.word	0x00008e28
    8d18:	00008e28 	.word	0x00008e28
    8d1c:	00008e28 	.word	0x00008e28
    8d20:	00008e44 	.word	0x00008e44
    8d24:	00008eb8 	.word	0x00008eb8
    8d28:	00008f10 	.word	0x00008f10
    8d2c:	00008e44 	.word	0x00008e44
    8d30:	00008ee8 	.word	0x00008ee8
    8d34:	00008ee8 	.word	0x00008ee8
    8d38:	00008ee8 	.word	0x00008ee8
    8d3c:	00008ee8 	.word	0x00008ee8
    8d40:	00008ee8 	.word	0x00008ee8
    8d44:	00008ee8 	.word	0x00008ee8
    8d48:	00008ff4 	.word	0x00008ff4
    8d4c:	00008ff4 	.word	0x00008ff4
    8d50:	00008ff4 	.word	0x00008ff4
    8d54:	00008fa8 	.word	0x00008fa8
    8d58:	00008fa8 	.word	0x00008fa8
    8d5c:	00008fa8 	.word	0x00008fa8
    8d60:	00008fa8 	.word	0x00008fa8
    8d64:	00008f74 	.word	0x00008f74
    8d68:	00008f40 	.word	0x00008f40
    8d6c:	00008fcc 	.word	0x00008fcc
    8d70:	00008fcc 	.word	0x00008fcc
    8d74:	00008fcc 	.word	0x00008fcc
    8d78:	00008fcc 	.word	0x00008fcc
    8d7c:	00008fcc 	.word	0x00008fcc
    8d80:	00008e4c 	.word	0x00008e4c
    8d84:	00009224 	.word	0x00009224
    8d88:	000090bc 	.word	0x000090bc
    8d8c:	000090bc 	.word	0x000090bc
    8d90:	000091fc 	.word	0x000091fc
    8d94:	000091fc 	.word	0x000091fc
    8d98:	000091fc 	.word	0x000091fc
    8d9c:	000091fc 	.word	0x000091fc
    8da0:	000091fc 	.word	0x000091fc
    8da4:	000091fc 	.word	0x000091fc
    8da8:	00009094 	.word	0x00009094
    8dac:	00009094 	.word	0x00009094
    8db0:	00009058 	.word	0x00009058
    8db4:	0000901c 	.word	0x0000901c
    8db8:	0000901c 	.word	0x0000901c
    8dbc:	00008e74 	.word	0x00008e74
    8dc0:	000090e4 	.word	0x000090e4
    8dc4:	000091ac 	.word	0x000091ac
    8dc8:	00009094 	.word	0x00009094
    8dcc:	00009094 	.word	0x00009094
    8dd0:	00009094 	.word	0x00009094
    8dd4:	00009184 	.word	0x00009184
    8dd8:	000091d4 	.word	0x000091d4
    8ddc:	000091d4 	.word	0x000091d4
    8de0:	000091d4 	.word	0x000091d4
    8de4:	000091d4 	.word	0x000091d4
    8de8:	000091d4 	.word	0x000091d4
    8dec:	000091d4 	.word	0x000091d4
    8df0:	00009134 	.word	0x00009134
    8df4:	0000910c 	.word	0x0000910c
    8df8:	0000915c 	.word	0x0000915c
    8dfc:	00008e90 	.word	0x00008e90
    8e00:	00008e2c 	.word	0x00008e2c
    8e04:	00008e2c 	.word	0x00008e2c
    8e08:	00008e2c 	.word	0x00008e2c
    8e0c:	00008e2c 	.word	0x00008e2c
    8e10:	00008e2c 	.word	0x00008e2c
    8e14:	00008e2c 	.word	0x00008e2c
    8e18:	00008e2c 	.word	0x00008e2c
    8e1c:	00008e2c 	.word	0x00008e2c
    8e20:	00008e2c 	.word	0x00008e2c
    8e24:	00008e2c 	.word	0x00008e2c
        ret = ALT_CLK_UNKNOWN;
        break;
    }

    return ret;
}
    8e28:	e8bd8008 	pop	{r3, pc}
// alt_clk_source_get() gets the input reference clock source selection value for the
// specified clock or PLL.
*/
ALT_CLK_t alt_clk_source_get(ALT_CLK_t clk)
{
    ALT_CLK_t ret = ALT_CLK_UNKNOWN;
    8e2c:	e3a0004b 	mov	r0, #75	; 0x4b
    8e30:	e8bd8008 	pop	{r3, pc}
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    8e34:	e3a00009 	mov	r0, #9
    8e38:	ebfffc90 	bl	8080 <alt_clk_pll_is_bypassed>
    8e3c:	e3500001 	cmp	r0, #1
    8e40:	1a0000ff 	bne	9244 <alt_clk_source_get+0x558>

    case ALT_CLK_L4_MAIN:
    case ALT_CLK_L3_MAIN:
    case ALT_CLK_L3_MP:
    case ALT_CLK_L3_SP:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    8e44:	e3a00000 	mov	r0, #0
    8e48:	e8bd8008 	pop	{r3, pc}
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8e4c:	e3043fff 	movw	r3, #20479	; 0x4fff
    8e50:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8e54:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    8e58:	e3120001 	tst	r2, #1
    8e5c:	1a0000fc 	bne	9254 <alt_clk_source_get+0x568>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8e60:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    8e64:	e3130001 	tst	r3, #1
    8e68:	1a0000f9 	bne	9254 <alt_clk_source_get+0x568>
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    8e6c:	e3a00010 	mov	r0, #16
    8e70:	e8bd8008 	pop	{r3, pc}
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C5;
        break;

    case ALT_CLK_SDMMC:
        temp = ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    8e74:	e3043fff 	movw	r3, #20479	; 0x4fff
    8e78:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8e7c:	e5133f53 	ldr	r3, [r3, #-3923]	; 0xfffff0ad
        if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK)
    8e80:	e2133003 	ands	r3, r3, #3
    8e84:	1a00006a 	bne	9034 <alt_clk_source_get+0x348>
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
    8e88:	e3a00002 	mov	r0, #2
    8e8c:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8e90:	e3043fff 	movw	r3, #20479	; 0x4fff
    8e94:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8e98:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    8e9c:	e3120001 	tst	r2, #1
    8ea0:	1a0000e9 	bne	924c <alt_clk_source_get+0x560>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8ea4:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    8ea8:	e3130002 	tst	r3, #2
    8eac:	1a0000e6 	bne	924c <alt_clk_source_get+0x560>
    case ALT_CLK_DDR_DQ:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL_C2;
        break;
    case ALT_CLK_H2F_USER2:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
    8eb0:	e3a0003c 	mov	r0, #60	; 0x3c
    8eb4:	e8bd8008 	pop	{r3, pc}
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    8eb8:	e3043fff 	movw	r3, #20479	; 0x4fff
    8ebc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8ec0:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    8ec4:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    8ec8:	e3500000 	cmp	r0, #0
    8ecc:	08bd8008 	popeq	{r3, pc}
        {
            ret = ALT_CLK_IN_PIN_OSC1;
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    8ed0:	e3500001 	cmp	r0, #1
    8ed4:	08bd8008 	popeq	{r3, pc}
/* alt_clk_pll_source_get() returns the current input of the specified PLL.             */
/****************************************************************************************/

ALT_CLK_t alt_clk_pll_source_get(ALT_CLK_t pll)
{
    ALT_CLK_t      ret = ALT_CLK_UNKNOWN;
    8ed8:	e3500002 	cmp	r0, #2
    8edc:	03a00002 	moveq	r0, #2
    8ee0:	13a0004b 	movne	r0, #75	; 0x4b
    8ee4:	e8bd8008 	pop	{r3, pc}
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8ee8:	e3043fff 	movw	r3, #20479	; 0x4fff
    8eec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8ef0:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    8ef4:	e3120001 	tst	r2, #1
    8ef8:	1affffd1 	bne	8e44 <alt_clk_source_get+0x158>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8efc:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    8f00:	e3130001 	tst	r3, #1
    8f04:	1affffce 	bne	8e44 <alt_clk_source_get+0x158>
    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_MAIN_PLL_C3:
    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_PLL_C5:
        /* check bypass, return either osc1 or PLL ID */
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    8f08:	e3a00009 	mov	r0, #9
    8f0c:	e8bd8008 	pop	{r3, pc}
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        /* three possible clock sources for the SDRAM PLL */
        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    8f10:	e3043fff 	movw	r3, #20479	; 0x4fff
    8f14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8f18:	e5130f3f 	ldr	r0, [r3, #-3903]	; 0xfffff0c1
    8f1c:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    8f20:	e3500000 	cmp	r0, #0
    8f24:	08bd8008 	popeq	{r3, pc}
        {
            ret = ALT_CLK_IN_PIN_OSC1;
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    8f28:	e3500001 	cmp	r0, #1
    8f2c:	08bd8008 	popeq	{r3, pc}
/* alt_clk_pll_source_get() returns the current input of the specified PLL.             */
/****************************************************************************************/

ALT_CLK_t alt_clk_pll_source_get(ALT_CLK_t pll)
{
    ALT_CLK_t      ret = ALT_CLK_UNKNOWN;
    8f30:	e3500002 	cmp	r0, #2
    8f34:	03a00003 	moveq	r0, #3
    8f38:	13a0004b 	movne	r0, #75	; 0x4b
    8f3c:	e8bd8008 	pop	{r3, pc}
        }
        break;

    case ALT_CLK_L4_SP:
        /* read the state of the source bit */
        if ((ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR)))
    8f40:	e3043fff 	movw	r3, #20479	; 0x4fff
    8f44:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8f48:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
    8f4c:	e3120002 	tst	r2, #2
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8f50:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
        }
        break;

    case ALT_CLK_L4_SP:
        /* read the state of the source bit */
        if ((ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR)))
    8f54:	1a0000ef 	bne	9318 <alt_clk_source_get+0x62c>
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8f58:	e3120001 	tst	r2, #1
    8f5c:	1affffb8 	bne	8e44 <alt_clk_source_get+0x158>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8f60:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    8f64:	e3130001 	tst	r3, #1
    8f68:	1affffb5 	bne	8e44 <alt_clk_source_get+0x158>
    case ALT_CLK_L4_SP:
        /* read the state of the source bit */
        if ((ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR)))
            == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_MAINPLL)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    8f6c:	e3a0000e 	mov	r0, #14
    8f70:	e8bd8008 	pop	{r3, pc}
            ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C1;
        break;

    case ALT_CLK_L4_MP:
        /* read the state of the L4_mp source bit */
        if ((ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR)))
    8f74:	e3043fff 	movw	r3, #20479	; 0x4fff
    8f78:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8f7c:	e5130f8f 	ldr	r0, [r3, #-3983]	; 0xfffff071
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8f80:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
            ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C1;
        break;

    case ALT_CLK_L4_MP:
        /* read the state of the L4_mp source bit */
        if ((ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR)))
    8f84:	e2100001 	ands	r0, r0, #1
    8f88:	1a0000d6 	bne	92e8 <alt_clk_source_get+0x5fc>
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8f8c:	e2122001 	ands	r2, r2, #1
    8f90:	18bd8008 	popne	{r3, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8f94:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    8f98:	e3130001 	tst	r3, #1
    8f9c:	0afffff2 	beq	8f6c <alt_clk_source_get+0x280>
    case ALT_CLK_L4_MP:
        /* read the state of the L4_mp source bit */
        if ((ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR)))
            == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_MAINPLL)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    8fa0:	e1a00002 	mov	r0, r2
    8fa4:	e8bd8008 	pop	{r3, pc}
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8fa8:	e3043fff 	movw	r3, #20479	; 0x4fff
    8fac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8fb0:	e5130fff 	ldr	r0, [r3, #-4095]	; 0xfffff001
    8fb4:	e2100001 	ands	r0, r0, #1
    8fb8:	1affffa1 	bne	8e44 <alt_clk_source_get+0x158>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8fbc:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    8fc0:	e3130001 	tst	r3, #1
    8fc4:	0affffe8 	beq	8f6c <alt_clk_source_get+0x280>
    8fc8:	e8bd8008 	pop	{r3, pc}
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8fcc:	e3043fff 	movw	r3, #20479	; 0x4fff
    8fd0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8fd4:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    8fd8:	e3120001 	tst	r2, #1
    8fdc:	1a00009c 	bne	9254 <alt_clk_source_get+0x568>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    8fe0:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_AT:
    case ALT_CLK_DBG_TRACE:
    case ALT_CLK_DBG_TIMER:
    case ALT_CLK_DBG:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    8fe4:	e3130001 	tst	r3, #1
    8fe8:	13a0000c 	movne	r0, #12
    8fec:	03a0000f 	moveq	r0, #15
    8ff0:	e8bd8008 	pop	{r3, pc}
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    8ff4:	e3043fff 	movw	r3, #20479	; 0x4fff
    8ff8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    8ffc:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9000:	e3120001 	tst	r2, #1
    9004:	1affff8e 	bne	8e44 <alt_clk_source_get+0x158>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9008:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
        break;

    case ALT_CLK_MPU_PERIPH:
    case ALT_CLK_MPU_L2_RAM:
    case ALT_CLK_MPU:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    900c:	e3130001 	tst	r3, #1
    9010:	13a00000 	movne	r0, #0
    9014:	03a0000d 	moveq	r0, #13
    9018:	e8bd8008 	pop	{r3, pc}
        }
        break;

    case ALT_CLK_NAND_X:
    case ALT_CLK_NAND:
        temp = ALT_CLKMGR_PERPLL_SRC_NAND_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    901c:	e3043fff 	movw	r3, #20479	; 0x4fff
    9020:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9024:	e5133f53 	ldr	r3, [r3, #-3923]	; 0xfffff0ad
    9028:	e7e13153 	ubfx	r3, r3, #2, #2
        if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK)
    902c:	e3530000 	cmp	r3, #0
    9030:	0affff94 	beq	8e88 <alt_clk_source_get+0x19c>
        temp = ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
        if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK)
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
    9034:	e3530001 	cmp	r3, #1
    9038:	0affff7d 	beq	8e34 <alt_clk_source_get+0x148>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C4;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
    903c:	e3530002 	cmp	r3, #2
    9040:	1affff79 	bne	8e2c <alt_clk_source_get+0x140>
    9044:	ebfffa71 	bl	7a10 <alt_clk_pll_is_bypassed.part.1>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    9048:	e3500001 	cmp	r0, #1
    904c:	0a0000c2 	beq	935c <alt_clk_source_get+0x670>
    9050:	e3a00028 	mov	r0, #40	; 0x28
    9054:	e8bd8008 	pop	{r3, pc}
                alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C3;
        }
        break;

    case ALT_CLK_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    9058:	e3043fff 	movw	r3, #20479	; 0x4fff
    905c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9060:	e5133f53 	ldr	r3, [r3, #-3923]	; 0xfffff0ad
    9064:	e7e13253 	ubfx	r3, r3, #4, #2
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
    9068:	e3530000 	cmp	r3, #0
    906c:	0affff85 	beq	8e88 <alt_clk_source_get+0x19c>
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
    9070:	e3530001 	cmp	r3, #1
    9074:	0a0000b3 	beq	9348 <alt_clk_source_get+0x65c>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C3;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
    9078:	e3530002 	cmp	r3, #2
    907c:	1affff6a 	bne	8e2c <alt_clk_source_get+0x140>
    9080:	ebfffa62 	bl	7a10 <alt_clk_pll_is_bypassed.part.1>
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    9084:	e3500001 	cmp	r0, #1
    9088:	0a0000b3 	beq	935c <alt_clk_source_get+0x670>
    908c:	e3a00027 	mov	r0, #39	; 0x27
    9090:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    9094:	e3043fff 	movw	r3, #20479	; 0x4fff
    9098:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    909c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    90a0:	e3120001 	tst	r2, #1
    90a4:	1a00006c 	bne	925c <alt_clk_source_get+0x570>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    90a8:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    90ac:	e3130008 	tst	r3, #8
    90b0:	1a000069 	bne	925c <alt_clk_source_get+0x570>
    case ALT_CLK_USB_MP:
    case ALT_CLK_SPI_M:
    case ALT_CLK_CAN0:
    case ALT_CLK_CAN1:
    case ALT_CLK_GPIO_DB:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    90b4:	e3a00029 	mov	r0, #41	; 0x29
    90b8:	e8bd8008 	pop	{r3, pc}
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    90bc:	e3043fff 	movw	r3, #20479	; 0x4fff
    90c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    90c4:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    90c8:	e3120001 	tst	r2, #1
    90cc:	1a000060 	bne	9254 <alt_clk_source_get+0x568>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    90d0:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    90d4:	e3130001 	tst	r3, #1
    90d8:	1a00005d 	bne	9254 <alt_clk_source_get+0x568>
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
            ALT_CLK_OSC1 : ALT_CLK_MAIN_PLL_C4;
        break;
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    90dc:	e3a00012 	mov	r0, #18
    90e0:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    90e4:	e3043fff 	movw	r3, #20479	; 0x4fff
    90e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    90ec:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    90f0:	e3120001 	tst	r2, #1
    90f4:	1a000066 	bne	9294 <alt_clk_source_get+0x5a8>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    90f8:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    90fc:	e3130008 	tst	r3, #8
    9100:	1a000063 	bne	9294 <alt_clk_source_get+0x5a8>
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) : ALT_CLK_PERIPHERAL_PLL;
        break;

    case ALT_CLK_EMAC0:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    9104:	e3a00025 	mov	r0, #37	; 0x25
    9108:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    910c:	e3043fff 	movw	r3, #20479	; 0x4fff
    9110:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9114:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9118:	e3120001 	tst	r2, #1
    911c:	1a00004a 	bne	924c <alt_clk_source_get+0x560>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9120:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    9124:	e3130002 	tst	r3, #2
    9128:	1a000047 	bne	924c <alt_clk_source_get+0x560>
    case ALT_CLK_DDR_DQS:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL_C0;
        break;
    case ALT_CLK_DDR_2X_DQS:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
    912c:	e3a00038 	mov	r0, #56	; 0x38
    9130:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    9134:	e3043fff 	movw	r3, #20479	; 0x4fff
    9138:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    913c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9140:	e3120001 	tst	r2, #1
    9144:	1a000040 	bne	924c <alt_clk_source_get+0x560>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9148:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    914c:	e3130002 	tst	r3, #2
    9150:	1a00003d 	bne	924c <alt_clk_source_get+0x560>
    case ALT_CLK_SDRAM_PLL_C5:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL;
        break;
    case ALT_CLK_DDR_DQS:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
    9154:	e3a00037 	mov	r0, #55	; 0x37
    9158:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    915c:	e3043fff 	movw	r3, #20479	; 0x4fff
    9160:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9164:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9168:	e3120001 	tst	r2, #1
    916c:	1a000036 	bne	924c <alt_clk_source_get+0x560>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9170:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    9174:	e3130002 	tst	r3, #2
    9178:	1a000033 	bne	924c <alt_clk_source_get+0x560>
    case ALT_CLK_DDR_2X_DQS:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
            alt_clk_pll_source_get(ALT_CLK_SDRAM_PLL) :  ALT_CLK_SDRAM_PLL_C1;
        break;
    case ALT_CLK_DDR_DQ:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
    917c:	e3a00039 	mov	r0, #57	; 0x39
    9180:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    9184:	e3043fff 	movw	r3, #20479	; 0x4fff
    9188:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    918c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9190:	e3120001 	tst	r2, #1
    9194:	1a000045 	bne	92b0 <alt_clk_source_get+0x5c4>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9198:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    919c:	e3130008 	tst	r3, #8
    91a0:	1a000042 	bne	92b0 <alt_clk_source_get+0x5c4>
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C4;
        break;

    case ALT_CLK_H2F_USER1:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    91a4:	e3a0002a 	mov	r0, #42	; 0x2a
    91a8:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    91ac:	e3043fff 	movw	r3, #20479	; 0x4fff
    91b0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    91b4:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    91b8:	e3120001 	tst	r2, #1
    91bc:	1a000042 	bne	92cc <alt_clk_source_get+0x5e0>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    91c0:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    91c4:	e3130008 	tst	r3, #8
    91c8:	1a00003f 	bne	92cc <alt_clk_source_get+0x5e0>
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
            alt_clk_pll_source_get(ALT_CLK_PERIPHERAL_PLL) :  ALT_CLK_PERIPHERAL_PLL_C0;
        break;

    case ALT_CLK_EMAC1:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    91cc:	e3a00026 	mov	r0, #38	; 0x26
    91d0:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    91d4:	e3043fff 	movw	r3, #20479	; 0x4fff
    91d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    91dc:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    91e0:	e3120001 	tst	r2, #1
    91e4:	1a000018 	bne	924c <alt_clk_source_get+0x560>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    91e8:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    91ec:	e3130002 	tst	r3, #2
    91f0:	1a000015 	bne	924c <alt_clk_source_get+0x560>
    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_SDRAM_PLL_C3:
    case ALT_CLK_SDRAM_PLL_C4:
    case ALT_CLK_SDRAM_PLL_C5:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE) ?
    91f4:	e3a0000b 	mov	r0, #11
    91f8:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    91fc:	e3043fff 	movw	r3, #20479	; 0x4fff
    9200:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9204:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9208:	e3120001 	tst	r2, #1
    920c:	1a000019 	bne	9278 <alt_clk_source_get+0x58c>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9210:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    9214:	e3130008 	tst	r3, #8
    9218:	1a000016 	bne	9278 <alt_clk_source_get+0x58c>
    case ALT_CLK_PERIPHERAL_PLL_C2:
    case ALT_CLK_PERIPHERAL_PLL_C3:
    case ALT_CLK_PERIPHERAL_PLL_C4:
    case ALT_CLK_PERIPHERAL_PLL_C5:
        /* if the clock comes from periph_base_clk */
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    921c:	e3a0000a 	mov	r0, #10
    9220:	e8bd8008 	pop	{r3, pc}
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    9224:	e3043fff 	movw	r3, #20479	; 0x4fff
    9228:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    922c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9230:	e3120001 	tst	r2, #1
    9234:	1a000006 	bne	9254 <alt_clk_source_get+0x568>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9238:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    923c:	e3130001 	tst	r3, #1
    9240:	1a000003 	bne	9254 <alt_clk_source_get+0x568>
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    9244:	e3a00011 	mov	r0, #17
    9248:	e8bd8008 	pop	{r3, pc}
        ret = ALT_CLK_UNKNOWN;
        break;
    }

    return ret;
}
    924c:	e8bd4008 	pop	{r3, lr}
    9250:	eafff9f6 	b	7a30 <alt_clk_pll_source_get.part.2>
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_AT:
    case ALT_CLK_DBG_TRACE:
    case ALT_CLK_DBG_TIMER:
    case ALT_CLK_DBG:
        ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    9254:	e3a0000c 	mov	r0, #12
    9258:	e8bd8008 	pop	{r3, pc}
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    925c:	e3043fff 	movw	r3, #20479	; 0x4fff
    9260:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9264:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    9268:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    926c:	e3500000 	cmp	r0, #0
    9270:	1affff16 	bne	8ed0 <alt_clk_source_get+0x1e4>
    9274:	e8bd8008 	pop	{r3, pc}
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    9278:	e3043fff 	movw	r3, #20479	; 0x4fff
    927c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9280:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    9284:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    9288:	e3500000 	cmp	r0, #0
    928c:	1affff0f 	bne	8ed0 <alt_clk_source_get+0x1e4>
    9290:	e8bd8008 	pop	{r3, pc}
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    9294:	e3043fff 	movw	r3, #20479	; 0x4fff
    9298:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    929c:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    92a0:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    92a4:	e3500000 	cmp	r0, #0
    92a8:	1affff08 	bne	8ed0 <alt_clk_source_get+0x1e4>
    92ac:	e8bd8008 	pop	{r3, pc}
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    92b0:	e3043fff 	movw	r3, #20479	; 0x4fff
    92b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    92b8:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    92bc:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    92c0:	e3500000 	cmp	r0, #0
    92c4:	1affff01 	bne	8ed0 <alt_clk_source_get+0x1e4>
    92c8:	e8bd8008 	pop	{r3, pc}
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    92cc:	e3043fff 	movw	r3, #20479	; 0x4fff
    92d0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    92d4:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    92d8:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    92dc:	e3500000 	cmp	r0, #0
    92e0:	1afffefa 	bne	8ed0 <alt_clk_source_get+0x1e4>
    92e4:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    92e8:	e3120001 	tst	r2, #1
    92ec:	1a000002 	bne	92fc <alt_clk_source_get+0x610>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    92f0:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    92f4:	e3130008 	tst	r3, #8
    92f8:	0affff6d 	beq	90b4 <alt_clk_source_get+0x3c8>
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    92fc:	e3043fff 	movw	r3, #20479	; 0x4fff
    9300:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9304:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    9308:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    930c:	e3500000 	cmp	r0, #0
    9310:	1afffeee 	bne	8ed0 <alt_clk_source_get+0x1e4>
    9314:	e8bd8008 	pop	{r3, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    9318:	e3120001 	tst	r2, #1
    931c:	1a000002 	bne	932c <alt_clk_source_get+0x640>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9320:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    9324:	e3130008 	tst	r3, #8
    9328:	0affff61 	beq	90b4 <alt_clk_source_get+0x3c8>
        ret = ALT_CLK_IN_PIN_OSC1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        /* three possible clock sources for the peripheral PLL */
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    932c:	e3043fff 	movw	r3, #20479	; 0x4fff
    9330:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9334:	e5130f7f 	ldr	r0, [r3, #-3967]	; 0xfffff081
    9338:	e7e10b50 	ubfx	r0, r0, #22, #2
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    933c:	e3500000 	cmp	r0, #0
    9340:	1afffee2 	bne	8ed0 <alt_clk_source_get+0x1e4>
    9344:	e8bd8008 	pop	{r3, pc}
        {
            ret = ALT_CLK_F2H_PERIPH_REF;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
    9348:	e3a00009 	mov	r0, #9
    934c:	ebfffb4b 	bl	8080 <alt_clk_pll_is_bypassed>
    9350:	e3500001 	cmp	r0, #1
    9354:	1afffec4 	bne	8e6c <alt_clk_source_get+0x180>
    9358:	eafffeb9 	b	8e44 <alt_clk_source_get+0x158>
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C3;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    935c:	e3a0000a 	mov	r0, #10
        ret = ALT_CLK_UNKNOWN;
        break;
    }

    return ret;
}
    9360:	e8bd4008 	pop	{r3, lr}
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE) ?
                ALT_CLK_IN_PIN_OSC1 : ALT_CLK_MAIN_PLL_C3;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
        {
            ret = (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE) ?
    9364:	eafffb67 	b	8108 <alt_clk_pll_source_get>

00009368 <alt_clk_source_set>:
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        temp;

    if (ALT_CLK_MAIN_PLL == clk)
    9368:	e3500009 	cmp	r0, #9
    936c:	0a00001f 	beq	93f0 <alt_clk_source_set+0x88>
        else
        {
            status = ALT_E_BAD_ARG;
        }
    }
    else if (ALT_CLK_PERIPHERAL_PLL == clk)
    9370:	e350000a 	cmp	r0, #10
    9374:	0a000022 	beq	9404 <alt_clk_source_set+0x9c>
        else
        {
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_SDRAM_PLL == clk)
    9378:	e350000b 	cmp	r0, #11
    937c:	0a000030 	beq	9444 <alt_clk_source_set+0xdc>
        else
        {
            status = ALT_E_INV_OPTION;
        }
    }
    else if ( ALT_CLK_L4_MP == clk)
    9380:	e350001a 	cmp	r0, #26
    9384:	0a00004b 	beq	94b8 <alt_clk_source_set+0x150>
        else
        {
            status = ALT_E_INV_OPTION;
        }
    }
    else if ( ALT_CLK_L4_SP == clk)
    9388:	e350001b 	cmp	r0, #27
    938c:	0a00003e 	beq	948c <alt_clk_source_set+0x124>
        else
        {
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_SDMMC == clk)
    9390:	e3500030 	cmp	r0, #48	; 0x30
    9394:	0a000055 	beq	94f0 <alt_clk_source_set+0x188>
        else
        {
            status = ALT_E_INV_OPTION;
        }
    }
    else if ((ALT_CLK_NAND_X == clk) || ( ALT_CLK_NAND == clk))
    9398:	e240302e 	sub	r3, r0, #46	; 0x2e
    939c:	e3530001 	cmp	r3, #1
    93a0:	9a000065 	bls	953c <alt_clk_source_set+0x1d4>
        else
        {
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_QSPI == clk)
    93a4:	e350002d 	cmp	r0, #45	; 0x2d
    93a8:	1a000013 	bne	93fc <alt_clk_source_set+0x94>
    {
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    93ac:	e3043fff 	movw	r3, #20479	; 0x4fff
        temp &= ALT_CLKMGR_PERPLL_SRC_QSPI_CLR_MSK;

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
    93b0:	e3510002 	cmp	r1, #2
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_QSPI == clk)
    {
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    93b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    93b8:	e5132f53 	ldr	r2, [r3, #-3923]	; 0xfffff0ad
        temp &= ALT_CLKMGR_PERPLL_SRC_QSPI_CLR_MSK;
    93bc:	e3c22030 	bic	r2, r2, #48	; 0x30

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
    93c0:	0a00005a 	beq	9530 <alt_clk_source_set+0x1c8>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C3) || (ref_clk == ALT_CLK_MAIN_QSPI))
    93c4:	e3510010 	cmp	r1, #16
    93c8:	13510021 	cmpne	r1, #33	; 0x21
    93cc:	0a000085 	beq	95e8 <alt_clk_source_set+0x280>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C2)
    93d0:	e3510027 	cmp	r1, #39	; 0x27
    93d4:	1a000069 	bne	9580 <alt_clk_source_set+0x218>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    93d8:	e3043fff 	movw	r3, #20479	; 0x4fff
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C2)
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK);
    93dc:	e3822020 	orr	r2, r2, #32
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    93e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    93e4:	e3a00000 	mov	r0, #0
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C2)
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    93e8:	e5032f53 	str	r2, [r3, #-3923]	; 0xfffff0ad
    93ec:	e12fff1e 	bx	lr
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        temp;

    if (ALT_CLK_MAIN_PLL == clk)
    {
        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
    93f0:	e3510000 	cmp	r1, #0
    93f4:	1351000c 	cmpne	r1, #12
    93f8:	1a000084 	bne	9610 <alt_clk_source_set+0x2a8>
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    93fc:	e3a00000 	mov	r0, #0
    9400:	e12fff1e 	bx	lr
        }
    }
    else if (ALT_CLK_PERIPHERAL_PLL == clk)
    {
        /* the PLL must be bypassed before getting here */
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9404:	e3043fff 	movw	r3, #20479	; 0x4fff
        temp &= ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
    9408:	e3510000 	cmp	r1, #0
    940c:	1351000c 	cmpne	r1, #12
        }
    }
    else if (ALT_CLK_PERIPHERAL_PLL == clk)
    {
        /* the PLL must be bypassed before getting here */
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9410:	e34f3fd0 	movt	r3, #65488	; 0xffd0
        temp &= ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
    9414:	13a00000 	movne	r0, #0
    9418:	03a00001 	moveq	r0, #1
        }
    }
    else if (ALT_CLK_PERIPHERAL_PLL == clk)
    {
        /* the PLL must be bypassed before getting here */
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    941c:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
        temp &= ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
    9420:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
    9424:	0a000016 	beq	9484 <alt_clk_source_set+0x11c>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_IN_PIN_OSC2)
    9428:	e3510001 	cmp	r1, #1
    942c:	0a000055 	beq	9588 <alt_clk_source_set+0x220>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
    9430:	e3510002 	cmp	r1, #2
    9434:	1a000051 	bne	9580 <alt_clk_source_set+0x218>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF);
    9438:	e3822502 	orr	r2, r2, #8388608	; 0x800000
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
    943c:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    9440:	e12fff1e 	bx	lr
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_SDRAM_PLL == clk)
    {
        temp  = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9444:	e3043fff 	movw	r3, #20479	; 0x4fff
        temp &= ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
    9448:	e3510000 	cmp	r1, #0
    944c:	1351000c 	cmpne	r1, #12
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_SDRAM_PLL == clk)
    {
        temp  = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9450:	e34f3fd0 	movt	r3, #65488	; 0xffd0
        temp &= ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
    9454:	13a00000 	movne	r0, #0
    9458:	03a00001 	moveq	r0, #1
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_SDRAM_PLL == clk)
    {
        temp  = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    945c:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
        temp &= ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;
    9460:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
    9464:	0a00001e 	beq	94e4 <alt_clk_source_set+0x17c>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1);
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_IN_PIN_OSC2)
    9468:	e3510001 	cmp	r1, #1
    946c:	0a00004f 	beq	95b0 <alt_clk_source_set+0x248>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2);
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_F2H_SDRAM_REF)
    9470:	e3510003 	cmp	r1, #3
    9474:	1a000041 	bne	9580 <alt_clk_source_set+0x218>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF);
    9478:	e3822502 	orr	r2, r2, #8388608	; 0x800000
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
    947c:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
    9480:	e12fff1e 	bx	lr
        temp &= ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
    9484:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    9488:	eaffffdb 	b	93fc <alt_clk_source_set+0x94>
            status = ALT_E_INV_OPTION;
        }
    }
    else if ( ALT_CLK_L4_SP == clk)
    {
        if (ref_clk == ALT_CLK_MAIN_PLL_C1)
    948c:	e351000e 	cmp	r1, #14
    9490:	0a00004d 	beq	95cc <alt_clk_source_set+0x264>
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C4)
    9494:	e3510029 	cmp	r1, #41	; 0x29
    9498:	1a000038 	bne	9580 <alt_clk_source_set+0x218>
        {
            alt_setbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK);
    949c:	e3043fff 	movw	r3, #20479	; 0x4fff
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    94a0:	e3a00000 	mov	r0, #0
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C4)
        {
            alt_setbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK);
    94a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    94a8:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
    94ac:	e3822002 	orr	r2, r2, #2
    94b0:	e5032f8f 	str	r2, [r3, #-3983]	; 0xfffff071
    94b4:	e12fff1e 	bx	lr
        }
    }
    else if ( ALT_CLK_L4_MP == clk)
    {
        /* clock is gated off */
        if (ref_clk == ALT_CLK_MAIN_PLL_C1)
    94b8:	e351000e 	cmp	r1, #14
    94bc:	0a000034 	beq	9594 <alt_clk_source_set+0x22c>
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C4)
    94c0:	e3510029 	cmp	r1, #41	; 0x29
    94c4:	1a00002d 	bne	9580 <alt_clk_source_set+0x218>
        {
            alt_setbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK);
    94c8:	e3043fff 	movw	r3, #20479	; 0x4fff
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    94cc:	e3a00000 	mov	r0, #0
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C4)
        {
            alt_setbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK);
    94d0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    94d4:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
    94d8:	e3822001 	orr	r2, r2, #1
    94dc:	e5032f8f 	str	r2, [r3, #-3983]	; 0xfffff071
    94e0:	e12fff1e 	bx	lr
        temp &= ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;

        if ((ref_clk == ALT_CLK_IN_PIN_OSC1) || (ref_clk == ALT_CLK_OSC1))
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1);
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
    94e4:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    94e8:	e3a00000 	mov	r0, #0
    94ec:	e12fff1e 	bx	lr
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_SDMMC == clk)
    {
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    94f0:	e3043fff 	movw	r3, #20479	; 0x4fff
        temp &= ALT_CLKMGR_PERPLL_SRC_SDMMC_CLR_MSK;

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
    94f4:	e3510002 	cmp	r1, #2
            status = ALT_E_INV_OPTION;
        }
    }
    else if (ALT_CLK_SDMMC == clk)
    {
        temp  = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    94f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    94fc:	e5132f53 	ldr	r2, [r3, #-3923]	; 0xfffff0ad
        temp &= ALT_CLKMGR_PERPLL_SRC_SDMMC_CLR_MSK;
    9500:	e3c22003 	bic	r2, r2, #3

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
    9504:	0a000009 	beq	9530 <alt_clk_source_set+0x1c8>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
    9508:	e3510011 	cmp	r1, #17
    950c:	13510022 	cmpne	r1, #34	; 0x22
    9510:	13a00000 	movne	r0, #0
    9514:	03a00001 	moveq	r0, #1
    9518:	0a000027 	beq	95bc <alt_clk_source_set+0x254>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C3)
    951c:	e3510028 	cmp	r1, #40	; 0x28
    9520:	1a000016 	bne	9580 <alt_clk_source_set+0x218>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK);
    9524:	e3822002 	orr	r2, r2, #2
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    9528:	e5032f53 	str	r2, [r3, #-3923]	; 0xfffff0ad
    952c:	e12fff1e 	bx	lr
        temp &= ALT_CLKMGR_PERPLL_SRC_QSPI_CLR_MSK;

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    9530:	e5032f53 	str	r2, [r3, #-3923]	; 0xfffff0ad
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    9534:	e3a00000 	mov	r0, #0
    9538:	e12fff1e 	bx	lr
            status = ALT_E_INV_OPTION;
        }
    }
    else if ((ALT_CLK_NAND_X == clk) || ( ALT_CLK_NAND == clk))
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    953c:	e3043fff 	movw	r3, #20479	; 0x4fff
        temp &= ALT_CLKMGR_PERPLL_SRC_NAND_CLR_MSK;

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
    9540:	e3510002 	cmp	r1, #2
            status = ALT_E_INV_OPTION;
        }
    }
    else if ((ALT_CLK_NAND_X == clk) || ( ALT_CLK_NAND == clk))
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    9544:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9548:	e5132f53 	ldr	r2, [r3, #-3923]	; 0xfffff0ad
        temp &= ALT_CLKMGR_PERPLL_SRC_NAND_CLR_MSK;
    954c:	e3c2200c 	bic	r2, r2, #12

        if (ref_clk == ALT_CLK_F2H_PERIPH_REF)
    9550:	0afffff6 	beq	9530 <alt_clk_source_set+0x1c8>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
    9554:	e3510011 	cmp	r1, #17
    9558:	13510022 	cmpne	r1, #34	; 0x22
    955c:	0a000027 	beq	9600 <alt_clk_source_set+0x298>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C3)
    9560:	e3510028 	cmp	r1, #40	; 0x28
    9564:	1a000005 	bne	9580 <alt_clk_source_set+0x218>
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    9568:	e3043fff 	movw	r3, #20479	; 0x4fff
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C3)
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);
    956c:	e3822008 	orr	r2, r2, #8
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    9570:	e34f3fd0 	movt	r3, #65488	; 0xffd0
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    9574:	e3a00000 	mov	r0, #0
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_PERIPHERAL_PLL_C3)
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    9578:	e5032f53 	str	r2, [r3, #-3923]	; 0xfffff0ad
    957c:	e12fff1e 	bx	lr
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
        }
        else
        {
            status = ALT_E_INV_OPTION;
    9580:	e3e0000a 	mvn	r0, #10
            status = ALT_E_INV_OPTION;
        }
    }

    return status;
}
    9584:	e12fff1e 	bx	lr
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1);
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_IN_PIN_OSC2)
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2);
    9588:	e3822501 	orr	r2, r2, #4194304	; 0x400000
            alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
    958c:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    9590:	e12fff1e 	bx	lr
    else if ( ALT_CLK_L4_MP == clk)
    {
        /* clock is gated off */
        if (ref_clk == ALT_CLK_MAIN_PLL_C1)
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK);
    9594:	e3043fff 	movw	r3, #20479	; 0x4fff
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    9598:	e3a00000 	mov	r0, #0
    else if ( ALT_CLK_L4_MP == clk)
    {
        /* clock is gated off */
        if (ref_clk == ALT_CLK_MAIN_PLL_C1)
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK);
    959c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    95a0:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
    95a4:	e3c22001 	bic	r2, r2, #1
    95a8:	e5032f8f 	str	r2, [r3, #-3983]	; 0xfffff071
    95ac:	e12fff1e 	bx	lr
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1);
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
        }
        else if (ref_clk == ALT_CLK_IN_PIN_OSC2)
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2);
    95b0:	e3822501 	orr	r2, r2, #4194304	; 0x400000
            alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
    95b4:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
    95b8:	e12fff1e 	bx	lr
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK);
    95bc:	e3822001 	orr	r2, r2, #1
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    95c0:	e3a00000 	mov	r0, #0
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_SDMMC_SET(ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    95c4:	e5032f53 	str	r2, [r3, #-3923]	; 0xfffff0ad
    95c8:	e12fff1e 	bx	lr
    }
    else if ( ALT_CLK_L4_SP == clk)
    {
        if (ref_clk == ALT_CLK_MAIN_PLL_C1)
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK);
    95cc:	e3043fff 	movw	r3, #20479	; 0x4fff
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    95d0:	e3a00000 	mov	r0, #0
    }
    else if ( ALT_CLK_L4_SP == clk)
    {
        if (ref_clk == ALT_CLK_MAIN_PLL_C1)
        {
            alt_clrbits_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK);
    95d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    95d8:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
    95dc:	e3c22002 	bic	r2, r2, #2
    95e0:	e5032f8f 	str	r2, [r3, #-3983]	; 0xfffff071
    95e4:	e12fff1e 	bx	lr
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C3) || (ref_clk == ALT_CLK_MAIN_QSPI))
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    95e8:	e3043fff 	movw	r3, #20479	; 0x4fff
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C3) || (ref_clk == ALT_CLK_MAIN_QSPI))
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK);
    95ec:	e3822010 	orr	r2, r2, #16
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    95f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    95f4:	e3a00000 	mov	r0, #0
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C3) || (ref_clk == ALT_CLK_MAIN_QSPI))
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_QSPI_SET(ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    95f8:	e5032f53 	str	r2, [r3, #-3923]	; 0xfffff0ad
    95fc:	e12fff1e 	bx	lr
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK);
    9600:	e3822004 	orr	r2, r2, #4
// verify that the clock is off before changing the divider or PLL. Note that the PLL
// must have regained phase-lock before being the bypass is disabled.
*/
ALT_STATUS_CODE alt_clk_source_set(ALT_CLK_t clk, ALT_CLK_t ref_clk)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    9604:	e3a00000 	mov	r0, #0
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
        }
        else if ((ref_clk == ALT_CLK_MAIN_PLL_C4) || (ref_clk == ALT_CLK_MAIN_NAND_SDMMC))
        {
            temp |= ALT_CLKMGR_PERPLL_SRC_NAND_SET(ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK);
            alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, temp);
    9608:	e5032f53 	str	r2, [r3, #-3923]	; 0xfffff0ad
    960c:	e12fff1e 	bx	lr
        {
            /* ret = ALT_E_SUCCESS; */
        }
        else
        {
            status = ALT_E_BAD_ARG;
    9610:	e3e00008 	mvn	r0, #8
    9614:	e12fff1e 	bx	lr

00009618 <alt_clk_ext_clk_freq_set>:
*/
ALT_STATUS_CODE alt_clk_ext_clk_freq_set(ALT_CLK_t clk, alt_freq_t freq)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if ((clk == ALT_CLK_IN_PIN_OSC1) || (clk == ALT_CLK_OSC1))      /* two names for one input */
    9618:	e3500000 	cmp	r0, #0
    961c:	1350000c 	cmpne	r0, #12
    9620:	13a03000 	movne	r3, #0
    9624:	03a03001 	moveq	r3, #1
    9628:	1a00000a 	bne	9658 <alt_clk_ext_clk_freq_set+0x40>
    {
        if ((freq >= alt_ext_clk_paramblok.clkosc1.freqmin) && (freq <= alt_ext_clk_paramblok.clkosc1.freqmax))
    962c:	e3023a94 	movw	r3, #10900	; 0x2a94
    9630:	e3403002 	movt	r3, #2
    9634:	e5932004 	ldr	r2, [r3, #4]
    9638:	e1520001 	cmp	r2, r1
    963c:	8a000021 	bhi	96c8 <alt_clk_ext_clk_freq_set+0xb0>
    9640:	e5932008 	ldr	r2, [r3, #8]
    9644:	e1510002 	cmp	r1, r2
    9648:	8a00001e 	bhi	96c8 <alt_clk_ext_clk_freq_set+0xb0>
        {
            alt_ext_clk_paramblok.clkosc1.freqcur = freq;
    964c:	e5831000 	str	r1, [r3]
            status = ALT_E_SUCCESS;
    9650:	e3a00000 	mov	r0, #0
    9654:	e12fff1e 	bx	lr
        else
        {
            status = ALT_E_ARG_RANGE;
        }
    }
    else if (clk == ALT_CLK_IN_PIN_OSC2)                            /* the other clock input pin */
    9658:	e3500001 	cmp	r0, #1
    965c:	0a00000e 	beq	969c <alt_clk_ext_clk_freq_set+0x84>
        else
        {
            status = ALT_E_ARG_RANGE;
        }
    }
    else if (clk == ALT_CLK_F2H_PERIPH_REF)                         /* clock from the FPGA */
    9660:	e3500002 	cmp	r0, #2
    9664:	0a000019 	beq	96d0 <alt_clk_ext_clk_freq_set+0xb8>
        else
        {
            status = ALT_E_ARG_RANGE;
        }
    }
    else if (clk == ALT_CLK_F2H_SDRAM_REF)                          /* clock from the FPGA SDRAM */
    9668:	e3500003 	cmp	r0, #3
    966c:	1a000022 	bne	96fc <alt_clk_ext_clk_freq_set+0xe4>
    {
        if ((freq >= alt_ext_clk_paramblok.sdram.freqmin) && (freq <= alt_ext_clk_paramblok.sdram.freqmax))
    9670:	e3022a94 	movw	r2, #10900	; 0x2a94
    9674:	e3402002 	movt	r2, #2
    9678:	e5920034 	ldr	r0, [r2, #52]	; 0x34
    967c:	e1510000 	cmp	r1, r0
    9680:	3a000010 	bcc	96c8 <alt_clk_ext_clk_freq_set+0xb0>
    9684:	e5920038 	ldr	r0, [r2, #56]	; 0x38
    9688:	e1510000 	cmp	r1, r0
    968c:	8a00000d 	bhi	96c8 <alt_clk_ext_clk_freq_set+0xb0>
        {
            alt_ext_clk_paramblok.sdram.freqcur = freq;
    9690:	e5821030 	str	r1, [r2, #48]	; 0x30
            status = ALT_E_SUCCESS;
    9694:	e1a00003 	mov	r0, r3
    9698:	e12fff1e 	bx	lr
            status = ALT_E_ARG_RANGE;
        }
    }
    else if (clk == ALT_CLK_IN_PIN_OSC2)                            /* the other clock input pin */
    {
        if ((freq >= alt_ext_clk_paramblok.clkosc2.freqmin) && (freq <= alt_ext_clk_paramblok.clkosc2.freqmax))
    969c:	e3022a94 	movw	r2, #10900	; 0x2a94
    96a0:	e3402002 	movt	r2, #2
    96a4:	e5920014 	ldr	r0, [r2, #20]
    96a8:	e1510000 	cmp	r1, r0
    96ac:	3a000005 	bcc	96c8 <alt_clk_ext_clk_freq_set+0xb0>
    96b0:	e5920018 	ldr	r0, [r2, #24]
    96b4:	e1510000 	cmp	r1, r0
    96b8:	8a000002 	bhi	96c8 <alt_clk_ext_clk_freq_set+0xb0>
        {
            alt_ext_clk_paramblok.clkosc2.freqcur = freq;
    96bc:	e5821010 	str	r1, [r2, #16]
            status = ALT_E_SUCCESS;
    96c0:	e1a00003 	mov	r0, r3
    96c4:	e12fff1e 	bx	lr
            alt_ext_clk_paramblok.clkosc1.freqcur = freq;
            status = ALT_E_SUCCESS;
        }
        else
        {
            status = ALT_E_ARG_RANGE;
    96c8:	e3e00007 	mvn	r0, #7
    {
        status = ALT_E_BAD_ARG;
    }

    return status;
}
    96cc:	e12fff1e 	bx	lr
            status = ALT_E_ARG_RANGE;
        }
    }
    else if (clk == ALT_CLK_F2H_PERIPH_REF)                         /* clock from the FPGA */
    {
        if ((freq >= alt_ext_clk_paramblok.periph.freqmin) && (freq <= alt_ext_clk_paramblok.periph.freqmax))
    96d0:	e3022a94 	movw	r2, #10900	; 0x2a94
    96d4:	e3402002 	movt	r2, #2
    96d8:	e5920024 	ldr	r0, [r2, #36]	; 0x24
    96dc:	e1510000 	cmp	r1, r0
    96e0:	3afffff8 	bcc	96c8 <alt_clk_ext_clk_freq_set+0xb0>
    96e4:	e5920028 	ldr	r0, [r2, #40]	; 0x28
    96e8:	e1510000 	cmp	r1, r0
    96ec:	8afffff5 	bhi	96c8 <alt_clk_ext_clk_freq_set+0xb0>
        {
            alt_ext_clk_paramblok.periph.freqcur = freq;
    96f0:	e5821020 	str	r1, [r2, #32]
            status = ALT_E_SUCCESS;
    96f4:	e1a00003 	mov	r0, r3
    96f8:	e12fff1e 	bx	lr
            status = ALT_E_ARG_RANGE;
        }
    }
    else
    {
        status = ALT_E_BAD_ARG;
    96fc:	e3e00008 	mvn	r0, #8
    9700:	e12fff1e 	bx	lr

00009704 <alt_clk_ext_clk_freq_get>:
*/
alt_freq_t alt_clk_ext_clk_freq_get(ALT_CLK_t clk)
{
    uint32_t ret = 0;

    if ((clk == ALT_CLK_IN_PIN_OSC1) || (clk == ALT_CLK_OSC1))      /* two names for one input */
    9704:	e3500000 	cmp	r0, #0
    9708:	1350000c 	cmpne	r0, #12
    970c:	13a03000 	movne	r3, #0
    9710:	03a03001 	moveq	r3, #1
    9714:	0a000009 	beq	9740 <alt_clk_ext_clk_freq_get+0x3c>
    {
        ret = alt_ext_clk_paramblok.clkosc1.freqcur;
    }
    else if (clk == ALT_CLK_IN_PIN_OSC2)
    9718:	e3500001 	cmp	r0, #1
    971c:	0a00000b 	beq	9750 <alt_clk_ext_clk_freq_get+0x4c>
    {
        ret = alt_ext_clk_paramblok.clkosc2.freqcur;
    }
    else if (clk == ALT_CLK_F2H_PERIPH_REF)                         /* clock from the FPGA */
    9720:	e3500002 	cmp	r0, #2
    9724:	0a00000d 	beq	9760 <alt_clk_ext_clk_freq_get+0x5c>
    {
        ret = alt_ext_clk_paramblok.periph.freqcur;
    }
    else if (clk == ALT_CLK_F2H_SDRAM_REF)                         /* clock from the FPGA */
    9728:	e3500003 	cmp	r0, #3
    {
        ret = alt_ext_clk_paramblok.sdram.freqcur;
    972c:	03023a94 	movweq	r3, #10900	; 0x2a94
    9730:	03403002 	movteq	r3, #2
    9734:	05930030 	ldreq	r0, [r3, #48]	; 0x30
// alt_clk_ext_clk_freq_get returns the frequency of the external clock source as
// a measure of Hz. This value is stored in a static array.
*/
alt_freq_t alt_clk_ext_clk_freq_get(ALT_CLK_t clk)
{
    uint32_t ret = 0;
    9738:	11a00003 	movne	r0, r3
    else if (clk == ALT_CLK_F2H_SDRAM_REF)                         /* clock from the FPGA */
    {
        ret = alt_ext_clk_paramblok.sdram.freqcur;
    }
    return ret;
}
    973c:	e12fff1e 	bx	lr
{
    uint32_t ret = 0;

    if ((clk == ALT_CLK_IN_PIN_OSC1) || (clk == ALT_CLK_OSC1))      /* two names for one input */
    {
        ret = alt_ext_clk_paramblok.clkosc1.freqcur;
    9740:	e3023a94 	movw	r3, #10900	; 0x2a94
    9744:	e3403002 	movt	r3, #2
    9748:	e5930000 	ldr	r0, [r3]
    974c:	e12fff1e 	bx	lr
    }
    else if (clk == ALT_CLK_IN_PIN_OSC2)
    {
        ret = alt_ext_clk_paramblok.clkosc2.freqcur;
    9750:	e3023a94 	movw	r3, #10900	; 0x2a94
    9754:	e3403002 	movt	r3, #2
    9758:	e5930010 	ldr	r0, [r3, #16]
    975c:	e12fff1e 	bx	lr
    }
    else if (clk == ALT_CLK_F2H_PERIPH_REF)                         /* clock from the FPGA */
    {
        ret = alt_ext_clk_paramblok.periph.freqcur;
    9760:	e3023a94 	movw	r3, #10900	; 0x2a94
    9764:	e3403002 	movt	r3, #2
    9768:	e5930020 	ldr	r0, [r3, #32]
    976c:	e12fff1e 	bx	lr

00009770 <alt_clk_pll_cfg_get>:
ALT_STATUS_CODE alt_clk_pll_cfg_get(ALT_CLK_t pll, ALT_CLK_PLL_CFG_t * pll_cfg)
{
    ALT_STATUS_CODE        ret = ALT_E_ERROR;                  /* return value */
    uint32_t               temp;                               /* temp variable */
 
    if (pll_cfg == NULL)
    9770:	e3510000 	cmp	r1, #0

/*
// alt_clk_pll_cfg_get() returns the current PLL configuration.
*/
ALT_STATUS_CODE alt_clk_pll_cfg_get(ALT_CLK_t pll, ALT_CLK_PLL_CFG_t * pll_cfg)
{
    9774:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    ALT_STATUS_CODE        ret = ALT_E_ERROR;                  /* return value */
    uint32_t               temp;                               /* temp variable */
 
    if (pll_cfg == NULL)
    9778:	0a000099 	beq	99e4 <alt_clk_pll_cfg_get+0x274>
    {
        ret = ALT_E_BAD_ARG;
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    977c:	e3500009 	cmp	r0, #9
    9780:	0a000006 	beq	97a0 <alt_clk_pll_cfg_get+0x30>
        /* The Main PLL C0-C5 outputs have no phase shift capabilities : */
        pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
            pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
        ret = ALT_E_SUCCESS;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    9784:	e350000a 	cmp	r0, #10
    9788:	0a00002c 	beq	9840 <alt_clk_pll_cfg_get+0xd0>
            pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
                pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
            ret = ALT_E_SUCCESS;
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    978c:	e350000b 	cmp	r0, #11
    9790:	0a00005c 	beq	9908 <alt_clk_pll_cfg_get+0x198>
/*
// alt_clk_pll_cfg_get() returns the current PLL configuration.
*/
ALT_STATUS_CODE alt_clk_pll_cfg_get(ALT_CLK_t pll, ALT_CLK_PLL_CFG_t * pll_cfg)
{
    ALT_STATUS_CODE        ret = ALT_E_ERROR;                  /* return value */
    9794:	e3e00000 	mvn	r0, #0
            ret = ALT_E_SUCCESS;
        }
    }

    return ret;
}
    9798:	e8bd0010 	ldmfd	sp!, {r4}
    979c:	e12fff1e 	bx	lr
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    97a0:	e3042fff 	movw	r2, #20479	; 0x4fff
        pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC1;
    97a4:	e3a03000 	mov	r3, #0
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    97a8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
        /* C5 - cfg_s2f_user0_clk aka cfg_h2f_user0_clk */

        /* The Main PLL C0-C5 outputs have no phase shift capabilities : */
        pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
            pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
        ret = ALT_E_SUCCESS;
    97ac:	e1a00003 	mov	r0, r3
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    97b0:	e512cfbf 	ldr	r12, [r2, #-4031]	; 0xfffff041
        pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC1;
    97b4:	e5c13000 	strb	r3, [r1]
        pll_cfg->mult = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    97b8:	e7ec41dc 	ubfx	r4, r12, #3, #13
        pll_cfg->div = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    97bc:	e7e5c85c 	ubfx	r12, r12, #16, #6
    97c0:	e9811010 	stmib	r1, {r4, r12}

        /* Get the C0-C5 divider values: */
        pll_cfg->cntrs[0] = ALT_CLKMGR_MAINPLL_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR));
    97c4:	e512cfb7 	ldr	r12, [r2, #-4023]	; 0xfffff049
    97c8:	e1a0cb8c 	lsl	r12, r12, #23
    97cc:	e1a0cbac 	lsr	r12, r12, #23
    97d0:	e581c00c 	str	r12, [r1, #12]
        /* C0 - mpu_clk */

        pll_cfg->cntrs[1] = ALT_CLKMGR_MAINPLL_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR));
    97d4:	e512cfb3 	ldr	r12, [r2, #-4019]	; 0xfffff04d
    97d8:	e1a0cb8c 	lsl	r12, r12, #23
    97dc:	e1a0cbac 	lsr	r12, r12, #23
    97e0:	e581c010 	str	r12, [r1, #16]
        /* C1 - main_clk */

        pll_cfg->cntrs[2] = ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR));
    97e4:	e512cfaf 	ldr	r12, [r2, #-4015]	; 0xfffff051
    97e8:	e1a0cb8c 	lsl	r12, r12, #23
    97ec:	e1a0cbac 	lsr	r12, r12, #23
    97f0:	e581c014 	str	r12, [r1, #20]
        /* C2 - dbg_base_clk */

        pll_cfg->cntrs[3] = ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR));
    97f4:	e512cfab 	ldr	r12, [r2, #-4011]	; 0xfffff055
    97f8:	e1a0cb8c 	lsl	r12, r12, #23
    97fc:	e1a0cbac 	lsr	r12, r12, #23
    9800:	e581c018 	str	r12, [r1, #24]
        /* C3 - main_qspi_clk */

        pll_cfg->cntrs[4] = ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR));
    9804:	e512cfa7 	ldr	r12, [r2, #-4007]	; 0xfffff059
    9808:	e1a0cb8c 	lsl	r12, r12, #23
    980c:	e1a0cbac 	lsr	r12, r12, #23
    9810:	e581c01c 	str	r12, [r1, #28]
        /* C4 - main_nand_sdmmc_clk */

        pll_cfg->cntrs[5] = ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR));
    9814:	e5122fa3 	ldr	r2, [r2, #-4003]	; 0xfffff05d
        /* C5 - cfg_s2f_user0_clk aka cfg_h2f_user0_clk */

        /* The Main PLL C0-C5 outputs have no phase shift capabilities : */
        pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
            pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
    9818:	e5813038 	str	r3, [r1, #56]	; 0x38
    981c:	e5813034 	str	r3, [r1, #52]	; 0x34
    9820:	e5813030 	str	r3, [r1, #48]	; 0x30
        /* C3 - main_qspi_clk */

        pll_cfg->cntrs[4] = ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR));
        /* C4 - main_nand_sdmmc_clk */

        pll_cfg->cntrs[5] = ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR));
    9824:	e1a02b82 	lsl	r2, r2, #23
        /* C5 - cfg_s2f_user0_clk aka cfg_h2f_user0_clk */

        /* The Main PLL C0-C5 outputs have no phase shift capabilities : */
        pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
    9828:	e581302c 	str	r3, [r1, #44]	; 0x2c
    982c:	e5813028 	str	r3, [r1, #40]	; 0x28
        /* C3 - main_qspi_clk */

        pll_cfg->cntrs[4] = ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR));
        /* C4 - main_nand_sdmmc_clk */

        pll_cfg->cntrs[5] = ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR));
    9830:	e1a02ba2 	lsr	r2, r2, #23
        /* C5 - cfg_s2f_user0_clk aka cfg_h2f_user0_clk */

        /* The Main PLL C0-C5 outputs have no phase shift capabilities : */
        pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
    9834:	e5813024 	str	r3, [r1, #36]	; 0x24
        /* C3 - main_qspi_clk */

        pll_cfg->cntrs[4] = ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR));
        /* C4 - main_nand_sdmmc_clk */

        pll_cfg->cntrs[5] = ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR));
    9838:	e5812020 	str	r2, [r1, #32]
    983c:	eaffffd5 	b	9798 <alt_clk_pll_cfg_get+0x28>
            pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
        ret = ALT_E_SUCCESS;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    9840:	e3043fff 	movw	r3, #20479	; 0x4fff
    9844:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9848:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
    984c:	e7e13b53 	ubfx	r3, r3, #22, #2
        if (temp <= 2)
    9850:	e3530003 	cmp	r3, #3
    9854:	0affffce 	beq	9794 <alt_clk_pll_cfg_get+0x24>
        {
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    9858:	e3530000 	cmp	r3, #0
    985c:	0a000001 	beq	9868 <alt_clk_pll_cfg_get+0xf8>
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC1;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    9860:	e3530001 	cmp	r3, #1
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC2;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_PERIPH_REF;
    9864:	13a03002 	movne	r3, #2
    9868:	e5c13000 	strb	r3, [r1]
            }

            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    986c:	e3043fff 	movw	r3, #20479	; 0x4fff
    9870:	e34f3fd0 	movt	r3, #65488	; 0xffd0
            pll_cfg->cntrs[5] = ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR));
            /* C5 - s2f_user1_clk */

            /* The Peripheral PLL C0-C5 outputs have no phase shift capabilities : */
            pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
                pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
    9874:	e3a02000 	mov	r2, #0
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_PERIPH_REF;
            }

            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9878:	e513cf7f 	ldr	r12, [r3, #-3967]	; 0xfffff081
            /* C5 - s2f_user1_clk */

            /* The Peripheral PLL C0-C5 outputs have no phase shift capabilities : */
            pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
                pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
            ret = ALT_E_SUCCESS;
    987c:	e1a00002 	mov	r0, r2
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_PERIPH_REF;
            }

            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            pll_cfg->mult = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    9880:	e7ec41dc 	ubfx	r4, r12, #3, #13
            pll_cfg->div = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    9884:	e7e5c85c 	ubfx	r12, r12, #16, #6
    9888:	e9811010 	stmib	r1, {r4, r12}

            /* Get the C0-C5 divider values: */
            pll_cfg->cntrs[0] = ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR));
    988c:	e513cf77 	ldr	r12, [r3, #-3959]	; 0xfffff089
    9890:	e1a0cb8c 	lsl	r12, r12, #23
    9894:	e1a0cbac 	lsr	r12, r12, #23
    9898:	e581c00c 	str	r12, [r1, #12]
            /* C0 - emac0_clk */

            pll_cfg->cntrs[1] = ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR));
    989c:	e513cf73 	ldr	r12, [r3, #-3955]	; 0xfffff08d
    98a0:	e1a0cb8c 	lsl	r12, r12, #23
    98a4:	e1a0cbac 	lsr	r12, r12, #23
    98a8:	e581c010 	str	r12, [r1, #16]
            /* C1 - emac1_clk */

            pll_cfg->cntrs[2] = ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR));
    98ac:	e513cf6f 	ldr	r12, [r3, #-3951]	; 0xfffff091
    98b0:	e1a0cb8c 	lsl	r12, r12, #23
    98b4:	e1a0cbac 	lsr	r12, r12, #23
    98b8:	e581c014 	str	r12, [r1, #20]
            /* C2 - periph_qspi_clk */

            pll_cfg->cntrs[3] = ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR));
    98bc:	e513cf6b 	ldr	r12, [r3, #-3947]	; 0xfffff095
    98c0:	e1a0cb8c 	lsl	r12, r12, #23
    98c4:	e1a0cbac 	lsr	r12, r12, #23
    98c8:	e581c018 	str	r12, [r1, #24]
            /* C3 - periph_nand_sdmmc_clk */

            pll_cfg->cntrs[4] = ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR));
    98cc:	e513cf67 	ldr	r12, [r3, #-3943]	; 0xfffff099
    98d0:	e1a0cb8c 	lsl	r12, r12, #23
    98d4:	e1a0cbac 	lsr	r12, r12, #23
    98d8:	e581c01c 	str	r12, [r1, #28]
            /* C4 - periph_base_clk */

            pll_cfg->cntrs[5] = ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR));
    98dc:	e5133f63 	ldr	r3, [r3, #-3939]	; 0xfffff09d
            /* C5 - s2f_user1_clk */

            /* The Peripheral PLL C0-C5 outputs have no phase shift capabilities : */
            pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
                pll_cfg->pshift[3] = pll_cfg->pshift[4] = pll_cfg->pshift[5] = 0;
    98e0:	e5812038 	str	r2, [r1, #56]	; 0x38
    98e4:	e5812034 	str	r2, [r1, #52]	; 0x34
    98e8:	e5812030 	str	r2, [r1, #48]	; 0x30
            /* C3 - periph_nand_sdmmc_clk */

            pll_cfg->cntrs[4] = ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR));
            /* C4 - periph_base_clk */

            pll_cfg->cntrs[5] = ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR));
    98ec:	e1a03b83 	lsl	r3, r3, #23
            /* C5 - s2f_user1_clk */

            /* The Peripheral PLL C0-C5 outputs have no phase shift capabilities : */
            pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
    98f0:	e581202c 	str	r2, [r1, #44]	; 0x2c
    98f4:	e5812028 	str	r2, [r1, #40]	; 0x28
            /* C3 - periph_nand_sdmmc_clk */

            pll_cfg->cntrs[4] = ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR));
            /* C4 - periph_base_clk */

            pll_cfg->cntrs[5] = ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR));
    98f8:	e1a03ba3 	lsr	r3, r3, #23
            /* C5 - s2f_user1_clk */

            /* The Peripheral PLL C0-C5 outputs have no phase shift capabilities : */
            pll_cfg->pshift[0] = pll_cfg->pshift[1] = pll_cfg->pshift[2] =
    98fc:	e5812024 	str	r2, [r1, #36]	; 0x24
            /* C3 - periph_nand_sdmmc_clk */

            pll_cfg->cntrs[4] = ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR));
            /* C4 - periph_base_clk */

            pll_cfg->cntrs[5] = ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR));
    9900:	e5813020 	str	r3, [r1, #32]
    9904:	eaffffa3 	b	9798 <alt_clk_pll_cfg_get+0x28>
            ret = ALT_E_SUCCESS;
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    9908:	e3043fff 	movw	r3, #20479	; 0x4fff
    990c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9910:	e5133f3f 	ldr	r3, [r3, #-3903]	; 0xfffff0c1
    9914:	e7e13b53 	ubfx	r3, r3, #22, #2
        if (temp <= 2)
    9918:	e3530003 	cmp	r3, #3
    991c:	0affff9c 	beq	9794 <alt_clk_pll_cfg_get+0x24>
        {
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    9920:	e3530000 	cmp	r3, #0
    9924:	1a00002b 	bne	99d8 <alt_clk_pll_cfg_get+0x268>
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC2;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_SDRAM_REF;
    9928:	e5c13000 	strb	r3, [r1]
            }

            pll_cfg->mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    992c:	e3043fff 	movw	r3, #20479	; 0x4fff
    9930:	e34f3fd0 	movt	r3, #65488	; 0xffd0

            pll_cfg->cntrs[2]  = ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
            pll_cfg->pshift[2] = ALT_CLKMGR_SDRPLL_DDRDQCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
            /* C2  - ddr_dq_clk */

            pll_cfg->cntrs[3]  = pll_cfg->cntrs[4] = pll_cfg->pshift[3] = pll_cfg->pshift[4] = 0;
    9934:	e3a02000 	mov	r2, #0
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_SDRAM_REF;
            }

            pll_cfg->mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    9938:	e513cf3f 	ldr	r12, [r3, #-3903]	; 0xfffff0c1

            pll_cfg->cntrs[5]  = ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR));
            pll_cfg->pshift[5] = ALT_CLKMGR_SDRPLL_S2FUSER2CLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR));
            /* C5  - s2f_user2_clk or h2f_user2_clk */

            ret = ALT_E_SUCCESS;
    993c:	e1a00002 	mov	r0, r2
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_SDRAM_REF;
            }

            pll_cfg->mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    9940:	e7ecc1dc 	ubfx	r12, r12, #3, #13
    9944:	e581c004 	str	r12, [r1, #4]
            pll_cfg->div = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    9948:	e513cf3f 	ldr	r12, [r3, #-3903]	; 0xfffff0c1
    994c:	e7e5c85c 	ubfx	r12, r12, #16, #6
    9950:	e581c008 	str	r12, [r1, #8]

            /* Get the C0-C5 divider values: */
            pll_cfg->cntrs[0]  = ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR));
    9954:	e513cf37 	ldr	r12, [r3, #-3895]	; 0xfffff0c9
    9958:	e1a0cb8c 	lsl	r12, r12, #23
    995c:	e1a0cbac 	lsr	r12, r12, #23
    9960:	e581c00c 	str	r12, [r1, #12]
            pll_cfg->pshift[0] = ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR));
    9964:	e513cf37 	ldr	r12, [r3, #-3895]	; 0xfffff0c9
    9968:	e7ebc4dc 	ubfx	r12, r12, #9, #12
    996c:	e581c024 	str	r12, [r1, #36]	; 0x24
            /* C0  - ddr_dqs_clk */

            pll_cfg->cntrs[1]  = ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR));
    9970:	e513cf33 	ldr	r12, [r3, #-3891]	; 0xfffff0cd
    9974:	e1a0cb8c 	lsl	r12, r12, #23
    9978:	e1a0cbac 	lsr	r12, r12, #23
    997c:	e581c010 	str	r12, [r1, #16]
            pll_cfg->pshift[1] = ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR));
    9980:	e513cf33 	ldr	r12, [r3, #-3891]	; 0xfffff0cd
    9984:	e7ebc4dc 	ubfx	r12, r12, #9, #12
    9988:	e581c028 	str	r12, [r1, #40]	; 0x28
            /* C1  - ddr_2x_dqs_clk */

            pll_cfg->cntrs[2]  = ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
    998c:	e513cf2f 	ldr	r12, [r3, #-3887]	; 0xfffff0d1
    9990:	e1a0cb8c 	lsl	r12, r12, #23
    9994:	e1a0cbac 	lsr	r12, r12, #23
    9998:	e581c014 	str	r12, [r1, #20]
            pll_cfg->pshift[2] = ALT_CLKMGR_SDRPLL_DDRDQCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
    999c:	e513cf2f 	ldr	r12, [r3, #-3887]	; 0xfffff0d1
            /* C2  - ddr_dq_clk */

            pll_cfg->cntrs[3]  = pll_cfg->cntrs[4] = pll_cfg->pshift[3] = pll_cfg->pshift[4] = 0;
    99a0:	e5812034 	str	r2, [r1, #52]	; 0x34
    99a4:	e5812030 	str	r2, [r1, #48]	; 0x30
            pll_cfg->cntrs[1]  = ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR));
            pll_cfg->pshift[1] = ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR));
            /* C1  - ddr_2x_dqs_clk */

            pll_cfg->cntrs[2]  = ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
            pll_cfg->pshift[2] = ALT_CLKMGR_SDRPLL_DDRDQCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
    99a8:	e7ebc4dc 	ubfx	r12, r12, #9, #12
            /* C2  - ddr_dq_clk */

            pll_cfg->cntrs[3]  = pll_cfg->cntrs[4] = pll_cfg->pshift[3] = pll_cfg->pshift[4] = 0;
    99ac:	e581201c 	str	r2, [r1, #28]
            pll_cfg->cntrs[1]  = ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR));
            pll_cfg->pshift[1] = ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR));
            /* C1  - ddr_2x_dqs_clk */

            pll_cfg->cntrs[2]  = ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
            pll_cfg->pshift[2] = ALT_CLKMGR_SDRPLL_DDRDQCLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR));
    99b0:	e581c02c 	str	r12, [r1, #44]	; 0x2c
            /* C2  - ddr_dq_clk */

            pll_cfg->cntrs[3]  = pll_cfg->cntrs[4] = pll_cfg->pshift[3] = pll_cfg->pshift[4] = 0;
    99b4:	e5812018 	str	r2, [r1, #24]
            /* C3  & C4 outputs don't exist on the SDRAM PLL */

            pll_cfg->cntrs[5]  = ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR));
    99b8:	e5132f2b 	ldr	r2, [r3, #-3883]	; 0xfffff0d5
    99bc:	e1a02b82 	lsl	r2, r2, #23
    99c0:	e1a02ba2 	lsr	r2, r2, #23
    99c4:	e5812020 	str	r2, [r1, #32]
            pll_cfg->pshift[5] = ALT_CLKMGR_SDRPLL_S2FUSER2CLK_PHASE_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR));
    99c8:	e5133f2b 	ldr	r3, [r3, #-3883]	; 0xfffff0d5
    99cc:	e7eb34d3 	ubfx	r3, r3, #9, #12
    99d0:	e5813038 	str	r3, [r1, #56]	; 0x38
    99d4:	eaffff6f 	b	9798 <alt_clk_pll_cfg_get+0x28>
        {
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC1;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    99d8:	e3530001 	cmp	r3, #1
            {
                pll_cfg->ref_clk = ALT_CLK_IN_PIN_OSC2;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                pll_cfg->ref_clk = ALT_CLK_F2H_SDRAM_REF;
    99dc:	13a03003 	movne	r3, #3
    99e0:	eaffffd0 	b	9928 <alt_clk_pll_cfg_get+0x1b8>
    uint32_t               temp;                               /* temp variable */
 
    if (pll_cfg == NULL)
    {
        ret = ALT_E_BAD_ARG;
        return ret;
    99e4:	e3e00008 	mvn	r0, #8
    99e8:	eaffff6a 	b	9798 <alt_clk_pll_cfg_get+0x28>

000099ec <alt_clk_pll_cfg_set>:
ALT_STATUS_CODE alt_clk_pll_cfg_set(ALT_CLK_t pll, const ALT_CLK_PLL_CFG_t * pll_cfg)
{
    ALT_STATUS_CODE ret = ALT_E_ERROR;
    uint32_t        temp;

    if (pll_cfg == NULL)
    99ec:	e3510000 	cmp	r1, #0
/*
// alt_clk_pll_cfg_set() sets the PLL configuration using the configuration parameters
// specified in pll_cfg.
*/
ALT_STATUS_CODE alt_clk_pll_cfg_set(ALT_CLK_t pll, const ALT_CLK_PLL_CFG_t * pll_cfg)
{
    99f0:	e92d0030 	push	{r4, r5}
    99f4:	e24dd008 	sub	sp, sp, #8
    ALT_STATUS_CODE ret = ALT_E_ERROR;
    uint32_t        temp;

    if (pll_cfg == NULL)
    99f8:	0a0000a0 	beq	9c80 <alt_clk_pll_cfg_set+0x294>

ALT_STATUS_CODE alt_clk_pll_is_bypassed(ALT_CLK_t pll)
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    99fc:	e3500009 	cmp	r0, #9
    9a00:	0a00003b 	beq	9af4 <alt_clk_pll_cfg_set+0x108>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    9a04:	e350000a 	cmp	r0, #10
    9a08:	0a00006c 	beq	9bc0 <alt_clk_pll_cfg_set+0x1d4>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    9a0c:	e350000b 	cmp	r0, #11
    9a10:	1a00003f 	bne	9b14 <alt_clk_pll_cfg_set+0x128>
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    9a14:	e3043fff 	movw	r3, #20479	; 0x4fff
    9a18:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9a1c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9a20:	e3120001 	tst	r2, #1
    9a24:	0a00005a 	beq	9b94 <alt_clk_pll_cfg_set+0x1a8>
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_SDRPLL_VCO_NUMER_SET(pll_cfg->mult)
            | ALT_CLKMGR_SDRPLL_VCO_DENOM_SET(pll_cfg->div)
    9a28:	e5915008 	ldr	r5, [r1, #8]
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9a2c:	e3040fff 	movw	r0, #20479	; 0x4fff
        temp |= ALT_CLKMGR_SDRPLL_VCO_NUMER_SET(pll_cfg->mult)
    9a30:	e5914004 	ldr	r4, [r1, #4]
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9a34:	e34f0fd0 	movt	r0, #65488	; 0xffd0
    9a38:	e510cf3f 	ldr	r12, [r0, #-3903]	; 0xfffff0c1
    9a3c:	e3a03007 	mov	r3, #7
            | ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK;
        /* setting this bit aligns the output phase of the counters and prevents
        // glitches and too-short clock periods when restarting.
        // this bit is cleared at the end of this routine */

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
    9a40:	e5d12000 	ldrb	r2, [r1]
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9a44:	e34f3f00 	movt	r3, #65280	; 0xff00
        temp |= ALT_CLKMGR_SDRPLL_VCO_NUMER_SET(pll_cfg->mult)
            | ALT_CLKMGR_SDRPLL_VCO_DENOM_SET(pll_cfg->div)
    9a48:	e1a00805 	lsl	r0, r5, #16
    {
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_SDRPLL_VCO_NUMER_SET(pll_cfg->mult)
    9a4c:	e1a04984 	lsl	r4, r4, #19
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9a50:	e00c3003 	and	r3, r12, r3
        temp |= ALT_CLKMGR_SDRPLL_VCO_NUMER_SET(pll_cfg->mult)
            | ALT_CLKMGR_SDRPLL_VCO_DENOM_SET(pll_cfg->div)
    9a54:	e200083f 	and	r0, r0, #4128768	; 0x3f0000
    9a58:	e1800824 	orr	r0, r0, r4, lsr #16
            | ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK;
        /* setting this bit aligns the output phase of the counters and prevents
        // glitches and too-short clock periods when restarting.
        // this bit is cleared at the end of this routine */

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
    9a5c:	e3520000 	cmp	r2, #0
    9a60:	1352000c 	cmpne	r2, #12
    {
        /* write the SDRAM PLL VCO Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_SDRPLL_VCO_SSRC_CLR_MSK;           /* make a mask */
        temp &= alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_SDRPLL_VCO_NUMER_SET(pll_cfg->mult)
    9a64:	e1803003 	orr	r3, r0, r3
    9a68:	03830401 	orreq	r0, r3, #16777216	; 0x1000000
            | ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_SET_MSK;
        /* setting this bit aligns the output phase of the counters and prevents
        // glitches and too-short clock periods when restarting.
        // this bit is cleared at the end of this routine */

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
    9a6c:	1a00004c 	bne	9ba4 <alt_clk_pll_cfg_set+0x1b8>
        else
        {
            return ret;
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
    9a70:	e3043fff 	movw	r3, #20479	; 0x4fff

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
            | ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_SET(pll_cfg->pshift[0]);
    9a74:	e3a02cfe 	mov	r2, #65024	; 0xfe00
        else
        {
            return ret;
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
    9a78:	e34f3fd0 	movt	r3, #65488	; 0xffd0

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
            | ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_SET(pll_cfg->pshift[0]);
    9a7c:	e340201f 	movt	r2, #31
        else
        {
            return ret;
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);
    9a80:	e5030f3f 	str	r0, [r3, #-3903]	; 0xfffff0c1
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    do
    {
        temp = alt_read_word(stataddr);
    9a84:	e1a00003 	mov	r0, r3
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
    9a88:	e591500c 	ldr	r5, [r1, #12]
            | ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_SET(pll_cfg->pshift[0]);
    9a8c:	e5914024 	ldr	r4, [r1, #36]	; 0x24
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    9a90:	e513cf3f 	ldr	r12, [r3, #-3903]	; 0xfffff0c1
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
    9a94:	e1a01b85 	lsl	r1, r5, #23
            | ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_SET(pll_cfg->pshift[0]);
    9a98:	e1a04484 	lsl	r4, r4, #9
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
    9a9c:	e1a01ba1 	lsr	r1, r1, #23
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    9aa0:	e1e0caac 	mvn	r12, r12, lsr #21

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
            | ALT_CLKMGR_SDRPLL_DDRDQSCLK_PHASE_SET(pll_cfg->pshift[0]);
    9aa4:	e0042002 	and	r2, r4, r2
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    9aa8:	e1e0ca8c 	mvn	r12, r12, lsl #21
        }

        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, temp);

        /* write the SDRAM PLL C0 Divide Counter ----------------------------- */
        temp =  ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET(pll_cfg->cntrs[0])
    9aac:	e1821001 	orr	r1, r2, r1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    9ab0:	e503cf3f 	str	r12, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    9ab4:	e5102feb 	ldr	r2, [r0, #-4075]	; 0xfffff015
    9ab8:	e3043fff 	movw	r3, #20479	; 0x4fff
    9abc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9ac0:	e58d2004 	str	r2, [sp, #4]
    } while (!(temp & msk));
    9ac4:	e59d2004 	ldr	r2, [sp, #4]
    9ac8:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    9acc:	e3c2260e 	bic	r2, r2, #14680064	; 0xe00000
    9ad0:	e3520000 	cmp	r2, #0
    9ad4:	0afffff6 	beq	9ab4 <alt_clk_pll_cfg_set+0xc8>

    alt_write_word(cntraddr, val);
    9ad8:	e5031f37 	str	r1, [r3, #-3895]	; 0xfffff0c9
// alt_clk_pll_cfg_set() sets the PLL configuration using the configuration parameters
// specified in pll_cfg.
*/
ALT_STATUS_CODE alt_clk_pll_cfg_set(ALT_CLK_t pll, const ALT_CLK_PLL_CFG_t * pll_cfg)
{
    ALT_STATUS_CODE ret = ALT_E_ERROR;
    9adc:	e3e00000 	mvn	r0, #0
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    9ae0:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    9ae4:	e1a02aa2 	lsr	r2, r2, #21
    9ae8:	e1a02a82 	lsl	r2, r2, #21
    9aec:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
    9af0:	ea000008 	b	9b18 <alt_clk_pll_cfg_set+0x12c>
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    9af4:	e3043fff 	movw	r3, #20479	; 0x4fff
    9af8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9afc:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9b00:	e3120001 	tst	r2, #1
    9b04:	1a000006 	bne	9b24 <alt_clk_pll_cfg_set+0x138>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9b08:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    9b0c:	e3130001 	tst	r3, #1
    9b10:	1a000003 	bne	9b24 <alt_clk_pll_cfg_set+0x138>
        return ALT_E_BAD_ARG;
    }

    if (alt_clk_pll_is_bypassed(pll) != ALT_E_TRUE)         /* safe to write the PLL registers? */
    {
        return ALT_E_ERROR;
    9b14:	e3e00000 	mvn	r0, #0
            /* allow the phase multiplexer and output counter to leave reset */
        }
    }

    return ret;
}
    9b18:	e28dd008 	add	sp, sp, #8
    9b1c:	e8bd0030 	pop	{r4, r5}
    9b20:	e12fff1e 	bx	lr
    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_MAINPLL_VCO_NUMER_SET(pll_cfg->mult) |
            ALT_CLKMGR_MAINPLL_VCO_DENOM_SET(pll_cfg->div);
    9b24:	e591c008 	ldr	r12, [r1, #8]
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    9b28:	e3043fff 	movw	r3, #20479	; 0x4fff
        temp |= ALT_CLKMGR_MAINPLL_VCO_NUMER_SET(pll_cfg->mult) |
    9b2c:	e5914004 	ldr	r4, [r1, #4]
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    9b30:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9b34:	e5135fbf 	ldr	r5, [r3, #-4031]	; 0xfffff041
        return ALT_E_ERROR;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
    9b38:	e3a02007 	mov	r2, #7
    9b3c:	e34f2fc0 	movt	r2, #65472	; 0xffc0
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR,          pll_cfg->cntrs[1]);
        alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR,         pll_cfg->cntrs[2]);
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR,      pll_cfg->cntrs[3]);
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR, pll_cfg->cntrs[4]);
        alt_write_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR,   pll_cfg->cntrs[5]);
        ret = ALT_E_SUCCESS;
    9b40:	e3a00000 	mov	r0, #0
    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_MAINPLL_VCO_NUMER_SET(pll_cfg->mult) |
            ALT_CLKMGR_MAINPLL_VCO_DENOM_SET(pll_cfg->div);
    9b44:	e1a0c80c 	lsl	r12, r12, #16

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_MAINPLL_VCO_NUMER_SET(pll_cfg->mult) |
    9b48:	e1a04984 	lsl	r4, r4, #19
        return ALT_E_ERROR;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
    9b4c:	e0052002 	and	r2, r5, r2
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_MAINPLL_VCO_NUMER_SET(pll_cfg->mult) |
            ALT_CLKMGR_MAINPLL_VCO_DENOM_SET(pll_cfg->div);
    9b50:	e20cc83f 	and	r12, r12, #4128768	; 0x3f0000

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp  = (ALT_CLKMGR_MAINPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_DENOM_CLR_MSK)
            & alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_MAINPLL_VCO_NUMER_SET(pll_cfg->mult) |
    9b54:	e18cc824 	orr	r12, r12, r4, lsr #16
    9b58:	e18c2002 	orr	r2, r12, r2
            ALT_CLKMGR_MAINPLL_VCO_DENOM_SET(pll_cfg->div);

        alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, temp);
    9b5c:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
        alt_write_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,           pll_cfg->cntrs[0]);
    9b60:	e591200c 	ldr	r2, [r1, #12]
    9b64:	e5032fb7 	str	r2, [r3, #-4023]	; 0xfffff049
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR,          pll_cfg->cntrs[1]);
    9b68:	e5912010 	ldr	r2, [r1, #16]
    9b6c:	e5032fb3 	str	r2, [r3, #-4019]	; 0xfffff04d
        alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR,         pll_cfg->cntrs[2]);
    9b70:	e5912014 	ldr	r2, [r1, #20]
    9b74:	e5032faf 	str	r2, [r3, #-4015]	; 0xfffff051
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR,      pll_cfg->cntrs[3]);
    9b78:	e5912018 	ldr	r2, [r1, #24]
    9b7c:	e5032fab 	str	r2, [r3, #-4011]	; 0xfffff055
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR, pll_cfg->cntrs[4]);
    9b80:	e591201c 	ldr	r2, [r1, #28]
    9b84:	e5032fa7 	str	r2, [r3, #-4007]	; 0xfffff059
        alt_write_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR,   pll_cfg->cntrs[5]);
    9b88:	e5912020 	ldr	r2, [r1, #32]
    9b8c:	e5032fa3 	str	r2, [r3, #-4003]	; 0xfffff05d
    9b90:	eaffffe0 	b	9b18 <alt_clk_pll_cfg_set+0x12c>
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9b94:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    9b98:	e3130002 	tst	r3, #2
    9b9c:	1affffa1 	bne	9a28 <alt_clk_pll_cfg_set+0x3c>
    9ba0:	eaffffdb 	b	9b14 <alt_clk_pll_cfg_set+0x128>

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1);
        }
        else if (pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC2)
    9ba4:	e3520001 	cmp	r2, #1
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2);
    9ba8:	03830505 	orreq	r0, r3, #20971520	; 0x1400000

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1);
        }
        else if (pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC2)
    9bac:	0affffaf 	beq	9a70 <alt_clk_pll_cfg_set+0x84>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2);
        }
        else if (pll_cfg->ref_clk == ALT_CLK_F2H_PERIPH_REF)
    9bb0:	e3520002 	cmp	r2, #2
    9bb4:	1affffd6 	bne	9b14 <alt_clk_pll_cfg_set+0x128>
        {
            temp |= ALT_CLKMGR_SDRPLL_VCO_SSRC_SET(ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF);
    9bb8:	e3830506 	orr	r0, r3, #25165824	; 0x1800000
    9bbc:	eaffffab 	b	9a70 <alt_clk_pll_cfg_set+0x84>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    9bc0:	e3043fff 	movw	r3, #20479	; 0x4fff
    9bc4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9bc8:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    9bcc:	e3120001 	tst	r2, #1
    9bd0:	1a000002 	bne	9be0 <alt_clk_pll_cfg_set+0x1f4>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    9bd4:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
    if (pll_cfg == NULL)
    {
        return ALT_E_BAD_ARG;
    }

    if (alt_clk_pll_is_bypassed(pll) != ALT_E_TRUE)         /* safe to write the PLL registers? */
    9bd8:	e3130008 	tst	r3, #8
    9bdc:	0affffcc 	beq	9b14 <alt_clk_pll_cfg_set+0x128>
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);
    9be0:	e591c008 	ldr	r12, [r1, #8]
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9be4:	e3040fff 	movw	r0, #20479	; 0x4fff
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
    9be8:	e5914004 	ldr	r4, [r1, #4]
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9bec:	e34f0fd0 	movt	r0, #65488	; 0xffd0
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
    9bf0:	e5d12000 	ldrb	r2, [r1]
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9bf4:	e3a03007 	mov	r3, #7
    9bf8:	e5100f7f 	ldr	r0, [r0, #-3967]	; 0xfffff081
    9bfc:	e34f3f00 	movt	r3, #65280	; 0xff00
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);
    9c00:	e1a0c80c 	lsl	r12, r12, #16
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
    9c04:	e1a04984 	lsl	r4, r4, #19
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
    9c08:	e3520000 	cmp	r2, #0
    9c0c:	1352000c 	cmpne	r2, #12
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);
    9c10:	e20cc83f 	and	r12, r12, #4128768	; 0x3f0000
    9c14:	e18cc824 	orr	r12, r12, r4, lsr #16
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp =  ALT_CLKMGR_PERPLL_VCO_NUMER_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_DENOM_CLR_MSK
            & ALT_CLKMGR_PERPLL_VCO_PSRC_CLR_MSK;
        temp &= alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9c18:	e0003003 	and	r3, r0, r3
        temp |= ALT_CLKMGR_PERPLL_VCO_NUMER_SET(pll_cfg->mult)
    9c1c:	e18cc003 	orr	r12, r12, r3
            | ALT_CLKMGR_PERPLL_VCO_DENOM_SET(pll_cfg->div);

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
    9c20:	0a000005 	beq	9c3c <alt_clk_pll_cfg_set+0x250>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1);
        }
        else if (pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC2)
    9c24:	e3520001 	cmp	r2, #1
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2);
    9c28:	038cc501 	orreq	r12, r12, #4194304	; 0x400000

        if ((pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC1) || (pll_cfg->ref_clk == ALT_CLK_OSC1))
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1);
        }
        else if (pll_cfg->ref_clk == ALT_CLK_IN_PIN_OSC2)
    9c2c:	0a000002 	beq	9c3c <alt_clk_pll_cfg_set+0x250>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2);
        }
        else if (pll_cfg->ref_clk == ALT_CLK_F2H_PERIPH_REF)
    9c30:	e3520002 	cmp	r2, #2
    9c34:	1affffb6 	bne	9b14 <alt_clk_pll_cfg_set+0x128>
        {
            temp |= ALT_CLKMGR_PERPLL_VCO_PSRC_SET(ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF);
    9c38:	e38cc502 	orr	r12, r12, #8388608	; 0x800000
        else
        {
            return ret;
        }

        alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
    9c3c:	e3043fff 	movw	r3, #20479	; 0x4fff
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR,        pll_cfg->cntrs[1]);
        alt_write_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR,      pll_cfg->cntrs[2]);
        alt_write_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, pll_cfg->cntrs[3]);
        alt_write_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR,      pll_cfg->cntrs[4]);
        alt_write_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR,     pll_cfg->cntrs[5]);
        ret = ALT_E_SUCCESS;
    9c40:	e3a00000 	mov	r0, #0
        else
        {
            return ret;
        }

        alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, temp);
    9c44:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    9c48:	e503cf7f 	str	r12, [r3, #-3967]	; 0xfffff081
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR,        pll_cfg->cntrs[0]);
    9c4c:	e591200c 	ldr	r2, [r1, #12]
    9c50:	e5032f77 	str	r2, [r3, #-3959]	; 0xfffff089
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR,        pll_cfg->cntrs[1]);
    9c54:	e5912010 	ldr	r2, [r1, #16]
    9c58:	e5032f73 	str	r2, [r3, #-3955]	; 0xfffff08d
        alt_write_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR,      pll_cfg->cntrs[2]);
    9c5c:	e5912014 	ldr	r2, [r1, #20]
    9c60:	e5032f6f 	str	r2, [r3, #-3951]	; 0xfffff091
        alt_write_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, pll_cfg->cntrs[3]);
    9c64:	e5912018 	ldr	r2, [r1, #24]
    9c68:	e5032f6b 	str	r2, [r3, #-3947]	; 0xfffff095
        alt_write_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR,      pll_cfg->cntrs[4]);
    9c6c:	e591201c 	ldr	r2, [r1, #28]
    9c70:	e5032f67 	str	r2, [r3, #-3943]	; 0xfffff099
        alt_write_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR,     pll_cfg->cntrs[5]);
    9c74:	e5912020 	ldr	r2, [r1, #32]
    9c78:	e5032f63 	str	r2, [r3, #-3939]	; 0xfffff09d
    9c7c:	eaffffa5 	b	9b18 <alt_clk_pll_cfg_set+0x12c>
    ALT_STATUS_CODE ret = ALT_E_ERROR;
    uint32_t        temp;

    if (pll_cfg == NULL)
    {
        return ALT_E_BAD_ARG;
    9c80:	e3e00008 	mvn	r0, #8
    9c84:	eaffffa3 	b	9b18 <alt_clk_pll_cfg_set+0x12c>

00009c88 <alt_clk_pll_vco_cfg_get>:
ALT_STATUS_CODE alt_clk_pll_vco_cfg_get(ALT_CLK_t pll, uint32_t * mult, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        temp;

    if ( (mult == NULL) || (div == NULL) )
    9c88:	e3510000 	cmp	r1, #0
    9c8c:	13520000 	cmpne	r2, #0
    9c90:	13a03000 	movne	r3, #0
    9c94:	03a03001 	moveq	r3, #1
    9c98:	0a00001c 	beq	9d10 <alt_clk_pll_vco_cfg_get+0x88>
    {
        return ALT_E_BAD_ARG;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    9c9c:	e3500009 	cmp	r0, #9
    9ca0:	0a000005 	beq	9cbc <alt_clk_pll_vco_cfg_get+0x34>
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
        *mult = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp) + 1;
        *div  = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    9ca4:	e350000a 	cmp	r0, #10
    9ca8:	0a00000e 	beq	9ce8 <alt_clk_pll_vco_cfg_get+0x60>
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
        *mult = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp) + 1;
        *div  = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    9cac:	e350000b 	cmp	r0, #11
    9cb0:	0a000011 	beq	9cfc <alt_clk_pll_vco_cfg_get+0x74>
        *mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp) + 1;
        *div  = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp) + 1;
    }
    else
    {
        status = ALT_E_ERROR;
    9cb4:	e3e00000 	mvn	r0, #0
    }

    return status;
}
    9cb8:	e12fff1e 	bx	lr
        return ALT_E_BAD_ARG;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    9cbc:	e304cfff 	movw	r12, #20479	; 0x4fff
/*
// alt_clk_pll_vco_cfg_get() returns the current PLL VCO frequency configuration.
*/
ALT_STATUS_CODE alt_clk_pll_vco_cfg_get(ALT_CLK_t pll, uint32_t * mult, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    9cc0:	e1a00003 	mov	r0, r3
        return ALT_E_BAD_ARG;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    9cc4:	e34fcfd0 	movt	r12, #65488	; 0xffd0
    9cc8:	e51c3fbf 	ldr	r3, [r12, #-4031]	; 0xfffff041
        *div  = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
        *mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp) + 1;
    9ccc:	e7ecc1d3 	ubfx	r12, r3, #3, #13
        *div  = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp) + 1;
    9cd0:	e7e53853 	ubfx	r3, r3, #16, #6
        *div  = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
        *mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp) + 1;
    9cd4:	e28cc001 	add	r12, r12, #1
        *div  = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp) + 1;
    9cd8:	e2833001 	add	r3, r3, #1
        *div  = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
        *mult = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp) + 1;
    9cdc:	e581c000 	str	r12, [r1]
        *div  = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp) + 1;
    9ce0:	e5823000 	str	r3, [r2]
    9ce4:	e12fff1e 	bx	lr
        *mult = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp) + 1;
        *div  = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9ce8:	e304cfff 	movw	r12, #20479	; 0x4fff
/*
// alt_clk_pll_vco_cfg_get() returns the current PLL VCO frequency configuration.
*/
ALT_STATUS_CODE alt_clk_pll_vco_cfg_get(ALT_CLK_t pll, uint32_t * mult, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    9cec:	e1a00003 	mov	r0, r3
        *mult = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp) + 1;
        *div  = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9cf0:	e34fcfd0 	movt	r12, #65488	; 0xffd0
    9cf4:	e51c3f7f 	ldr	r3, [r12, #-3967]	; 0xfffff081
    9cf8:	eafffff3 	b	9ccc <alt_clk_pll_vco_cfg_get+0x44>
        *mult = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp) + 1;
        *div  = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9cfc:	e304cfff 	movw	r12, #20479	; 0x4fff
/*
// alt_clk_pll_vco_cfg_get() returns the current PLL VCO frequency configuration.
*/
ALT_STATUS_CODE alt_clk_pll_vco_cfg_get(ALT_CLK_t pll, uint32_t * mult, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    9d00:	e1a00003 	mov	r0, r3
        *mult = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp) + 1;
        *div  = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp) + 1;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9d04:	e34fcfd0 	movt	r12, #65488	; 0xffd0
    9d08:	e51c3f3f 	ldr	r3, [r12, #-3903]	; 0xfffff0c1
    9d0c:	eaffffee 	b	9ccc <alt_clk_pll_vco_cfg_get+0x44>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        temp;

    if ( (mult == NULL) || (div == NULL) )
    {
        return ALT_E_BAD_ARG;
    9d10:	e3e00008 	mvn	r0, #8
    9d14:	e12fff1e 	bx	lr

00009d18 <alt_clk_pll_vco_cfg_set>:
/* bypassed. alt_clk_pll_vco_cfg_set() then carries out the actions required to effect  */
/* the method chosen to change the VCO settings.                                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_vco_cfg_set(ALT_CLK_t pll, uint32_t mult, uint32_t div)
{
    9d18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    bool                            numerchg = false;
    bool                            denomchg = false;
    bool                            within_gb;

    /* check PLL max value limits */
    if (   (mult == 0) || (mult > ALT_CLK_PLL_MULT_MAX)
    9d1c:	e2416001 	sub	r6, r1, #1
    9d20:	e3560a01 	cmp	r6, #4096	; 0x1000
/* bypassed. alt_clk_pll_vco_cfg_set() then carries out the actions required to effect  */
/* the method chosen to change the VCO settings.                                        */
/****************************************************************************************/

ALT_STATUS_CODE alt_clk_pll_vco_cfg_set(ALT_CLK_t pll, uint32_t mult, uint32_t div)
{
    9d24:	e24dd01c 	sub	sp, sp, #28
    9d28:	e1a05001 	mov	r5, r1
    9d2c:	e1a04000 	mov	r4, r0
    bool                            numerchg = false;
    bool                            denomchg = false;
    bool                            within_gb;

    /* check PLL max value limits */
    if (   (mult == 0) || (mult > ALT_CLK_PLL_MULT_MAX)
    9d30:	2a000076 	bcs	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
        || (div  == 0) || (div  > ALT_CLK_PLL_DIV_MAX)
    9d34:	e242a001 	sub	r10, r2, #1
    9d38:	e35a003f 	cmp	r10, #63	; 0x3f
    9d3c:	8a000073 	bhi	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
    {
        return ALT_VCO_CHG_NONE_VALID;
    }

    /* gather data values according to PLL */
    if (pll == ALT_CLK_MAIN_PLL)
    9d40:	e3500009 	cmp	r0, #9
    9d44:	0a0000bc 	beq	a03c <alt_clk_pll_vco_cfg_set+0x324>
        guardband = alt_pll_clk_paramblok.MainPLL_800.guardband;

        inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
    }

    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    9d48:	e350000a 	cmp	r0, #10
    9d4c:	0a000073 	beq	9f20 <alt_clk_pll_vco_cfg_set+0x208>
        {
            return ret;
        }
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
    9d50:	e350000b 	cmp	r0, #11
    9d54:	1a00006d 	bne	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9d58:	e3040fff 	movw	r0, #20479	; 0x4fff

        numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmax;
    9d5c:	e3021a94 	movw	r1, #10900	; 0x2a94
        }
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9d60:	e34f0fd0 	movt	r0, #65488	; 0xffd0

        numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmax;
    9d64:	e3401002 	movt	r1, #2
        }
    }

    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    9d68:	e5109f3f 	ldr	r9, [r0, #-3903]	; 0xfffff0c1
        numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;
    9d6c:	e5d1c09c 	ldrb	r12, [r1, #156]	; 0x9c
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);

        numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmax;
    9d70:	e5917098 	ldr	r7, [r1, #152]	; 0x98
        freqmin   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;

        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
    9d74:	e7e10b59 	ubfx	r0, r9, #22, #2

    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);

        numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
    9d78:	e7ecb1d9 	ubfx	r11, r9, #3, #13
        freqmax   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;

        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
        if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    9d7c:	e3500000 	cmp	r0, #0
        numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;
    9d80:	e20cc07f 	and	r12, r12, #127	; 0x7f
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);

        numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
    9d84:	e7e59859 	ubfx	r9, r9, #16, #6

        freqmax   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.SDRAMPLL_800.freqmin;
    9d88:	e5918094 	ldr	r8, [r1, #148]	; 0x94
        guardband = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;
    9d8c:	e58dc010 	str	r12, [sp, #16]

        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
        if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    9d90:	1a0000b9 	bne	a07c <alt_clk_pll_vco_cfg_set+0x364>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
    9d94:	e5911000 	ldr	r1, [r1]
    9d98:	e1a00001 	mov	r0, r1
    9d9c:	e58d100c 	str	r1, [sp, #12]
    else
    {
        return ret;
    }

    temp = mult * (inputfreq / div);
    9da0:	e1a01002 	mov	r1, r2
    9da4:	e58d2004 	str	r2, [sp, #4]
    9da8:	eb003ae3 	bl	1893c <__aeabi_uidiv>
    9dac:	e0010095 	mul	r1, r5, r0
    9db0:	e1a0c000 	mov	r12, r0
    if ((temp <= freqmax) && (temp >= freqmin))     /* are the final values within frequency limits? */
    9db4:	e59d2004 	ldr	r2, [sp, #4]
    9db8:	e1510008 	cmp	r1, r8
    9dbc:	33a00000 	movcc	r0, #0
    9dc0:	23a00001 	movcs	r0, #1
    9dc4:	e1510007 	cmp	r1, r7
    9dc8:	83a00000 	movhi	r0, #0
    9dcc:	e3500000 	cmp	r0, #0
    9dd0:	0a00004e 	beq	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
    {
        numer++;
    9dd4:	e28bb001 	add	r11, r11, #1
    9dd8:	e58db014 	str	r11, [sp, #20]
        denom++;
    9ddc:	e289b001 	add	r11, r9, #1
        numerchg = (mult != numer);
    9de0:	e59d3014 	ldr	r3, [sp, #20]
    9de4:	e0551003 	subs	r1, r5, r3
    9de8:	13a01001 	movne	r1, #1
        denomchg = (div != denom);
    9dec:	e052900b 	subs	r9, r2, r11
    9df0:	13a09001 	movne	r9, #1

        if (!numerchg && !denomchg)
    9df4:	e2213001 	eor	r3, r1, #1
    9df8:	e2290001 	eor	r0, r9, #1
    9dfc:	e1100003 	tst	r0, r3
    9e00:	1a00008b 	bne	a034 <alt_clk_pll_vco_cfg_set+0x31c>
        {
            ret = ALT_VCO_CHG_NOCHANGE;
        }
        else if (numerchg && !denomchg)
    9e04:	e1100001 	tst	r0, r1
    9e08:	1a0000a3 	bne	a09c <alt_clk_pll_vco_cfg_set+0x384>
            {
                ret = ALT_VCO_CHG_NUM;
                if (!within_gb) ret |= ALT_VCO_CHG_NUM_BYP;
            }
        }
        else if (!numerchg && denomchg)
    9e0c:	e1130009 	tst	r3, r9
    9e10:	0a000059 	beq	9f7c <alt_clk_pll_vco_cfg_set+0x264>
        {
            within_gb = alt_within_delta(denom, div, guardband);
    9e14:	e3a00064 	mov	r0, #100	; 0x64
    9e18:	e1a0100b 	mov	r1, r11
    9e1c:	e0000290 	mul	r0, r0, r2
    9e20:	e58dc008 	str	r12, [sp, #8]
    9e24:	eb003ac4 	bl	1893c <__aeabi_uidiv>
    9e28:	e59d3010 	ldr	r3, [sp, #16]
    9e2c:	e59dc008 	ldr	r12, [sp, #8]
    9e30:	e2832064 	add	r2, r3, #100	; 0x64
    9e34:	e1500002 	cmp	r0, r2
    9e38:	3a000145 	bcc	a354 <alt_clk_pll_vco_cfg_set+0x63c>
            temp = numer * (inputfreq / div);
    9e3c:	e59d3014 	ldr	r3, [sp, #20]
    9e40:	e00c039c 	mul	r12, r12, r3
            if ((temp <= freqmax) && (temp >= freqmin))
    9e44:	e158000c 	cmp	r8, r12
    9e48:	83a08000 	movhi	r8, #0
    9e4c:	93a08001 	movls	r8, #1
    9e50:	e157000c 	cmp	r7, r12
    9e54:	33a08000 	movcc	r8, #0
    9e58:	e3580000 	cmp	r8, #0
    9e5c:	0a00002b 	beq	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
            {
                ret = ALT_VCO_CHG_DENOM;
                if (!within_gb)
                {
                    ret |= ALT_VCO_CHG_DENOM_BYP;
    9e60:	e3a05018 	mov	r5, #24
    {
        ret = ALT_E_INV_OPTION;
    }
    else
    {
        if (pll == ALT_CLK_MAIN_PLL)
    9e64:	e3540009 	cmp	r4, #9
    9e68:	0a0000af 	beq	a12c <alt_clk_pll_vco_cfg_set+0x414>
            numermask = ALT_CLKMGR_MAINPLL_VCO_NUMER_SET_MSK;
            denommask = ALT_CLKMGR_MAINPLL_VCO_DENOM_SET_MSK;
            numershift = ALT_CLKMGR_MAINPLL_VCO_NUMER_LSB;
            denomshift = ALT_CLKMGR_MAINPLL_VCO_DENOM_LSB;
        }
        else if (pll == ALT_CLK_PERIPHERAL_PLL)
    9e6c:	e354000a 	cmp	r4, #10
    9e70:	0a0000cb 	beq	a1a4 <alt_clk_pll_vco_cfg_set+0x48c>
            numermask = ALT_CLKMGR_PERPLL_VCO_NUMER_SET_MSK;
            denommask = ALT_CLKMGR_PERPLL_VCO_DENOM_SET_MSK;
            numershift = ALT_CLKMGR_PERPLL_VCO_NUMER_LSB;
            denomshift = ALT_CLKMGR_PERPLL_VCO_DENOM_LSB;
        }
        else if (pll == ALT_CLK_SDRAM_PLL)
    9e74:	e354000b 	cmp	r4, #11
    9e78:	1a000104 	bne	a290 <alt_clk_pll_vco_cfg_set+0x578>
        {
            vaddr = ALT_CLKMGR_SDRPLL_VCO_ADDR;
    9e7c:	e30470c0 	movw	r7, #16576	; 0x40c0
    9e80:	e34f7fd0 	movt	r7, #65488	; 0xffd0
        else { return ALT_E_BAD_ARG; }

        mult--;
        div--;

        if (method & ALT_VCO_CHG_NUM)
    9e84:	e2051002 	and	r1, r5, #2
    9e88:	e6ff1071 	uxth	r1, r1
    9e8c:	e3510000 	cmp	r1, #0
    9e90:	0a000096 	beq	a0f0 <alt_clk_pll_vco_cfg_set+0x3d8>
        {
            if (method & ALT_VCO_CHG_NUM_BYP)
    9e94:	e2055004 	and	r5, r5, #4
    9e98:	e6ff5075 	uxth	r5, r5
    9e9c:	e3550000 	cmp	r5, #0
    9ea0:	1a0000c4 	bne	a1b8 <alt_clk_pll_vco_cfg_set+0x4a0>
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
                alt_clk_mgr_wait(vaddr, ALT_SW_MANAGED_CLK_WAIT_BYPASS);
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    9ea4:	e5972000 	ldr	r2, [r7]
    9ea8:	e1a06186 	lsl	r6, r6, #3
    9eac:	e30f3ff8 	movw	r3, #65528	; 0xfff8
    9eb0:	e0063003 	and	r3, r6, r3
    9eb4:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
    9eb8:	e3c220f8 	bic	r2, r2, #248	; 0xf8
    9ebc:	e1823003 	orr	r3, r2, r3
    9ec0:	e5873000 	str	r3, [r7]
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    9ec4:	e3041fff 	movw	r1, #20479	; 0x4fff

ALT_STATUS_CODE alt_clk_pll_vco_cfg_set(ALT_CLK_t pll, uint32_t mult, uint32_t div)
{
    ALT_STATUS_CODE                 ret = ALT_E_ERROR;
    ALT_CLK_PLL_VCO_CHG_METHOD_t    method;
    bool                            byp = false;
    9ec8:	e30033e9 	movw	r3, #1001	; 0x3e9
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    9ecc:	e34f1fd0 	movt	r1, #65488	; 0xffd0
    9ed0:	ea000001 	b	9edc <alt_clk_pll_vco_cfg_set+0x1c4>
        if (int_status & locked_mask)
        {
            return ALT_E_SUCCESS;
        }

    } while (timeout--);
    9ed4:	e2533001 	subs	r3, r3, #1
    9ed8:	0a0000b4 	beq	a1b0 <alt_clk_pll_vco_cfg_set+0x498>
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    9edc:	e5112ff7 	ldr	r2, [r1, #-4087]	; 0xfffff009
        if (int_status & locked_mask)
    9ee0:	e3120040 	tst	r2, #64	; 0x40
    9ee4:	0afffffa 	beq	9ed4 <alt_clk_pll_vco_cfg_set+0x1bc>
        {
            return ALT_E_SUCCESS;
    9ee8:	e3a06000 	mov	r6, #0
            alt_replbits_word(vaddr, denommask, div << denomshift);
        }

        ret = alt_clk_pll_lock_wait(ALT_CLK_MAIN_PLL, 1000);
              /* verify PLL is still locked or wait for it to lock again */
        if (byp)
    9eec:	e3550000 	cmp	r5, #0
    9ef0:	0a000007 	beq	9f14 <alt_clk_pll_vco_cfg_set+0x1fc>
        {
            alt_clk_pll_bypass_disable(pll);
    9ef4:	e1a00004 	mov	r0, r4
    9ef8:	ebfff739 	bl	7be4 <alt_clk_pll_bypass_disable>
    9efc:	e3a0301e 	mov	r3, #30
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    9f00:	e2533001 	subs	r3, r3, #1
    {
        (void) alt_read_word(reg);
    9f04:	e5972000 	ldr	r2, [r7]
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    9f08:	1afffffc 	bne	9f00 <alt_clk_pll_vco_cfg_set+0x1e8>
    9f0c:	ea000000 	b	9f14 <alt_clk_pll_vco_cfg_set+0x1fc>

    method = alt_clk_pll_vco_chg_methods_get(pll, mult, div);

    if (method == ALT_VCO_CHG_NONE_VALID)
    {
        ret = ALT_E_BAD_CLK;
    9f10:	e3e0600d 	mvn	r6, #13
            alt_clk_mgr_wait(vaddr, ALT_SW_MANAGED_CLK_WAIT_BYPASS);
                /* wait for PLL to come out of bypass mode completely */
        }
    }
    return ret;
}
    9f14:	e1a00006 	mov	r0, r6
    9f18:	e28dd01c 	add	sp, sp, #28
    9f1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
        inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
    }

    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9f20:	e3040fff 	movw	r0, #20479	; 0x4fff

        numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.PeriphPLL_800.freqmax;
    9f24:	e3021a94 	movw	r1, #10900	; 0x2a94
        inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
    }

    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9f28:	e34f0fd0 	movt	r0, #65488	; 0xffd0

        numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.PeriphPLL_800.freqmax;
    9f2c:	e3401002 	movt	r1, #2
        inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
    }

    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    9f30:	e5109f7f 	ldr	r9, [r0, #-3967]	; 0xfffff081
        numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.PeriphPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.PeriphPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.PeriphPLL_800.guardband;
    9f34:	e5d1c08c 	ldrb	r12, [r1, #140]	; 0x8c
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);

        numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.PeriphPLL_800.freqmax;
    9f38:	e5917088 	ldr	r7, [r1, #136]	; 0x88
        freqmin   = alt_pll_clk_paramblok.PeriphPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.PeriphPLL_800.guardband;

        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    9f3c:	e7e10b59 	ubfx	r0, r9, #22, #2

    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);

        numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    9f40:	e7ecb1d9 	ubfx	r11, r9, #3, #13
        freqmax   = alt_pll_clk_paramblok.PeriphPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.PeriphPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.PeriphPLL_800.guardband;

        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    9f44:	e3500000 	cmp	r0, #0
        numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.PeriphPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.PeriphPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.PeriphPLL_800.guardband;
    9f48:	e20cc07f 	and	r12, r12, #127	; 0x7f
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);

        numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    9f4c:	e7e59859 	ubfx	r9, r9, #16, #6

        freqmax   = alt_pll_clk_paramblok.PeriphPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.PeriphPLL_800.freqmin;
    9f50:	e5918084 	ldr	r8, [r1, #132]	; 0x84
        guardband = alt_pll_clk_paramblok.PeriphPLL_800.guardband;
    9f54:	e58dc010 	str	r12, [sp, #16]

        temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
        if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    9f58:	0affff8d 	beq	9d94 <alt_clk_pll_vco_cfg_set+0x7c>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    9f5c:	e3500001 	cmp	r0, #1
    9f60:	0a0000ba 	beq	a250 <alt_clk_pll_vco_cfg_set+0x538>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc2.freqcur;
        }
        else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    9f64:	e3500002 	cmp	r0, #2
    9f68:	1affffe8 	bne	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
        {
            inputfreq = alt_ext_clk_paramblok.periph.freqcur;
    9f6c:	e5911020 	ldr	r1, [r1, #32]
    9f70:	e58d100c 	str	r1, [sp, #12]
    9f74:	e1a00001 	mov	r0, r1
    9f78:	eaffff88 	b	9da0 <alt_clk_pll_vco_cfg_set+0x88>
                }
            }
        }
        else    /*numerchg && denomchg */
        {
            within_gb = alt_within_delta(numer, mult, guardband);
    9f7c:	e59d3010 	ldr	r3, [sp, #16]
    9f80:	e3a00064 	mov	r0, #100	; 0x64
    9f84:	e59d1014 	ldr	r1, [sp, #20]
    9f88:	e0000590 	mul	r0, r0, r5
    9f8c:	e98d1004 	stmib	sp, {r2, r12}
    9f90:	e2839064 	add	r9, r3, #100	; 0x64
    9f94:	eb003a68 	bl	1893c <__aeabi_uidiv>
    9f98:	e1500009 	cmp	r0, r9
    9f9c:	e99d1004 	ldmib	sp, {r2, r12}
    9fa0:	3a0000db 	bcc	a314 <alt_clk_pll_vco_cfg_set+0x5fc>
            temp = mult * (inputfreq / denom);
    9fa4:	e59d000c 	ldr	r0, [sp, #12]
    9fa8:	e1a0100b 	mov	r1, r11
    9fac:	e98d1004 	stmib	sp, {r2, r12}
    9fb0:	eb003a61 	bl	1893c <__aeabi_uidiv>
    9fb4:	e0000095 	mul	r0, r5, r0
    9fb8:	e99d1004 	ldmib	sp, {r2, r12}
            if ((temp <= freqmax) && (temp >= freqmin))
    9fbc:	e1580000 	cmp	r8, r0
    9fc0:	83a05000 	movhi	r5, #0
    9fc4:	93a05001 	movls	r5, #1
    9fc8:	e1570000 	cmp	r7, r0
    9fcc:	33a05000 	movcc	r5, #0
            {
                ret = ALT_VCO_CHG_NUM_DENOM;
                if (!within_gb)
                {
                    ret |= ALT_VCO_CHG_NUM_DENOM_BYP;
    9fd0:	e3550000 	cmp	r5, #0
    9fd4:	13a05060 	movne	r5, #96	; 0x60
    9fd8:	03a05000 	moveq	r5, #0
                }
            }
            within_gb = alt_within_delta(denom, div, guardband);
    9fdc:	e3a00064 	mov	r0, #100	; 0x64
    9fe0:	e1a0100b 	mov	r1, r11
    9fe4:	e0000290 	mul	r0, r0, r2
    9fe8:	e58dc008 	str	r12, [sp, #8]
    9fec:	eb003a52 	bl	1893c <__aeabi_uidiv>
    9ff0:	e1590000 	cmp	r9, r0
    9ff4:	e59dc008 	ldr	r12, [sp, #8]
    9ff8:	8a0000b6 	bhi	a2d8 <alt_clk_pll_vco_cfg_set+0x5c0>
            temp = numer * (inputfreq / div);
    9ffc:	e59d3014 	ldr	r3, [sp, #20]
    a000:	e00c039c 	mul	r12, r12, r3
            if ((temp <= freqmax) && (temp >= freqmin))
    a004:	e158000c 	cmp	r8, r12
    a008:	83a08000 	movhi	r8, #0
    a00c:	93a08001 	movls	r8, #1
    a010:	e157000c 	cmp	r7, r12
    a014:	33a08000 	movcc	r8, #0
    a018:	e3580000 	cmp	r8, #0
            {
                ret = ALT_VCO_CHG_DENOM_NUM;
                if (!within_gb)
                {
                    ret |= ALT_VCO_CHG_DENOM_NUM_BYP;
    a01c:	13a05d06 	movne	r5, #384	; 0x180
                    ret |= ALT_VCO_CHG_NUM_DENOM_BYP;
                }
            }
            within_gb = alt_within_delta(denom, div, guardband);
            temp = numer * (inputfreq / div);
            if ((temp <= freqmax) && (temp >= freqmin))
    a020:	1affff8f 	bne	9e64 <alt_clk_pll_vco_cfg_set+0x14c>
    uint32_t                        numershift, denomshift;


    method = alt_clk_pll_vco_chg_methods_get(pll, mult, div);

    if (method == ALT_VCO_CHG_NONE_VALID)
    a024:	e3550000 	cmp	r5, #0
    a028:	0affffb8 	beq	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
    {
        ret = ALT_E_BAD_CLK;
    }
    else if (method == ALT_VCO_CHG_NOCHANGE)
    a02c:	e3550001 	cmp	r5, #1
    a030:	1affff8b 	bne	9e64 <alt_clk_pll_vco_cfg_set+0x14c>
    {
        ret = ALT_E_INV_OPTION;
    a034:	e3e0600a 	mvn	r6, #10
    a038:	eaffffb5 	b	9f14 <alt_clk_pll_vco_cfg_set+0x1fc>
    }

    /* gather data values according to PLL */
    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    a03c:	e3040fff 	movw	r0, #20479	; 0x4fff

        numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.MainPLL_800.freqmax;
    a040:	e3021a94 	movw	r1, #10900	; 0x2a94
    a044:	e3401002 	movt	r1, #2
    }

    /* gather data values according to PLL */
    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    a048:	e34f0fd0 	movt	r0, #65488	; 0xffd0
    a04c:	e5109fbf 	ldr	r9, [r0, #-4031]	; 0xfffff041
        numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.MainPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.MainPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.MainPLL_800.guardband;
    a050:	e5d1007c 	ldrb	r0, [r1, #124]	; 0x7c
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);

        numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.MainPLL_800.freqmax;
    a054:	e5917078 	ldr	r7, [r1, #120]	; 0x78
        freqmin   = alt_pll_clk_paramblok.MainPLL_800.freqmin;
    a058:	e5918074 	ldr	r8, [r1, #116]	; 0x74
    /* gather data values according to PLL */
    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);

        numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    a05c:	e7ecb1d9 	ubfx	r11, r9, #3, #13

        freqmax   = alt_pll_clk_paramblok.MainPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.MainPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.MainPLL_800.guardband;

        inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
    a060:	e5911000 	ldr	r1, [r1]
        numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);

        freqmax   = alt_pll_clk_paramblok.MainPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.MainPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.MainPLL_800.guardband;
    a064:	e200007f 	and	r0, r0, #127	; 0x7f
    a068:	e58d0010 	str	r0, [sp, #16]
    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);

        numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
        denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    a06c:	e7e59859 	ubfx	r9, r9, #16, #6

        freqmax   = alt_pll_clk_paramblok.MainPLL_800.freqmax;
        freqmin   = alt_pll_clk_paramblok.MainPLL_800.freqmin;
        guardband = alt_pll_clk_paramblok.MainPLL_800.guardband;

        inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
    a070:	e58d100c 	str	r1, [sp, #12]
    a074:	e1a00001 	mov	r0, r1
    a078:	eaffff48 	b	9da0 <alt_clk_pll_vco_cfg_set+0x88>
        temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
        if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
        {
            inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    a07c:	e3500001 	cmp	r0, #1
    a080:	0a000072 	beq	a250 <alt_clk_pll_vco_cfg_set+0x538>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc2.freqcur;
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    a084:	e3500002 	cmp	r0, #2
    a088:	1affffa0 	bne	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
        {
            inputfreq = alt_ext_clk_paramblok.sdram.freqcur;
    a08c:	e5911030 	ldr	r1, [r1, #48]	; 0x30
    a090:	e58d100c 	str	r1, [sp, #12]
    a094:	e1a00001 	mov	r0, r1
    a098:	eaffff40 	b	9da0 <alt_clk_pll_vco_cfg_set+0x88>
        {
            ret = ALT_VCO_CHG_NOCHANGE;
        }
        else if (numerchg && !denomchg)
        {
            within_gb = alt_within_delta(numer, mult, guardband);
    a09c:	e3a00064 	mov	r0, #100	; 0x64
    a0a0:	e59d1014 	ldr	r1, [sp, #20]
    a0a4:	e0000590 	mul	r0, r0, r5
    a0a8:	eb003a23 	bl	1893c <__aeabi_uidiv>
    a0ac:	e59d3010 	ldr	r3, [sp, #16]
    a0b0:	e2832064 	add	r2, r3, #100	; 0x64
    a0b4:	e1500002 	cmp	r0, r2
    a0b8:	3a000076 	bcc	a298 <alt_clk_pll_vco_cfg_set+0x580>
            /* check if change is within the guardband limits */
            temp = mult * (inputfreq / denom);
    a0bc:	e59d000c 	ldr	r0, [sp, #12]
    a0c0:	e1a0100b 	mov	r1, r11
    a0c4:	eb003a1c 	bl	1893c <__aeabi_uidiv>
    a0c8:	e0000095 	mul	r0, r5, r0
            if ((temp <= freqmax) && (temp >= freqmin))
    a0cc:	e1570000 	cmp	r7, r0
    a0d0:	33a07000 	movcc	r7, #0
    a0d4:	23a07001 	movcs	r7, #1
    a0d8:	e1580000 	cmp	r8, r0
    a0dc:	83a07000 	movhi	r7, #0
    a0e0:	e3570000 	cmp	r7, #0
    a0e4:	0affff89 	beq	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
            {
                ret = ALT_VCO_CHG_NUM;
                if (!within_gb) ret |= ALT_VCO_CHG_NUM_BYP;
    a0e8:	e3a05006 	mov	r5, #6
    a0ec:	eaffff5c 	b	9e64 <alt_clk_pll_vco_cfg_set+0x14c>
                alt_clk_mgr_wait(vaddr, ALT_SW_MANAGED_CLK_WAIT_BYPASS);
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
        }

        else if (method & ALT_VCO_CHG_DENOM)
    a0f0:	e2052008 	and	r2, r5, #8
    a0f4:	e6ff2072 	uxth	r2, r2
    a0f8:	e3520000 	cmp	r2, #0
    a0fc:	0a00000d 	beq	a138 <alt_clk_pll_vco_cfg_set+0x420>
        {
            if (method & ALT_VCO_CHG_DENOM_BYP)
    a100:	e2055010 	and	r5, r5, #16
    a104:	e6ff5075 	uxth	r5, r5
    a108:	e3550000 	cmp	r5, #0
    a10c:	1a00004b 	bne	a240 <alt_clk_pll_vco_cfg_set+0x528>
            if (!byp)       /* if PLL is not bypassed */
            {
                ret = alt_clk_pll_lock_wait(ALT_CLK_MAIN_PLL, 1000);
                      /* verify PLL is still locked or wait for it to lock again */
            }
            alt_replbits_word(vaddr, denommask, div << denomshift);
    a110:	e5972000 	ldr	r2, [r7]
    a114:	e1a0380a 	lsl	r3, r10, #16
    a118:	e203383f 	and	r3, r3, #4128768	; 0x3f0000
    a11c:	e3c2283f 	bic	r2, r2, #4128768	; 0x3f0000
    a120:	e1823003 	orr	r3, r2, r3
    a124:	e5873000 	str	r3, [r7]
    a128:	eaffff65 	b	9ec4 <alt_clk_pll_vco_cfg_set+0x1ac>
    }
    else
    {
        if (pll == ALT_CLK_MAIN_PLL)
        {
            vaddr = ALT_CLKMGR_MAINPLL_VCO_ADDR;
    a12c:	e3047040 	movw	r7, #16448	; 0x4040
    a130:	e34f7fd0 	movt	r7, #65488	; 0xffd0
    a134:	eaffff52 	b	9e84 <alt_clk_pll_vco_cfg_set+0x16c>
                byp = true;
            }
            alt_replbits_word(vaddr, denommask, div << denomshift);
        }

        else if (method & ALT_VCO_CHG_NUM_DENOM)
    a138:	e2051020 	and	r1, r5, #32
    a13c:	e6ff1071 	uxth	r1, r1
    a140:	e3510000 	cmp	r1, #0
    a144:	0a000024 	beq	a1dc <alt_clk_pll_vco_cfg_set+0x4c4>
        {
            if (method & ALT_VCO_CHG_NUM_DENOM_BYP)
    a148:	e3150040 	tst	r5, #64	; 0x40
            {
                alt_clk_pll_bypass_enable(pll, 0);
    a14c:	11a00004 	movne	r0, r4
    a150:	11a01002 	movne	r1, r2
            alt_replbits_word(vaddr, denommask, div << denomshift);
        }

        else if (method & ALT_VCO_CHG_NUM_DENOM)
        {
            if (method & ALT_VCO_CHG_NUM_DENOM_BYP)
    a154:	1a000042 	bne	a264 <alt_clk_pll_vco_cfg_set+0x54c>
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    a158:	e597c000 	ldr	r12, [r7]
    a15c:	e1a06186 	lsl	r6, r6, #3
    a160:	e30f1ff8 	movw	r1, #65528	; 0xfff8
    a164:	e0061001 	and	r1, r6, r1
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    a168:	e3040fff 	movw	r0, #20479	; 0x4fff
            if (method & ALT_VCO_CHG_NUM_DENOM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    a16c:	e3ccccff 	bic	r12, r12, #65280	; 0xff00
    a170:	e30023e9 	movw	r2, #1001	; 0x3e9
    a174:	e3ccc0f8 	bic	r12, r12, #248	; 0xf8
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    a178:	e34f0fd0 	movt	r0, #65488	; 0xffd0
            if (method & ALT_VCO_CHG_NUM_DENOM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    a17c:	e18c1001 	orr	r1, r12, r1
    a180:	e5871000 	str	r1, [r7]
    a184:	ea000001 	b	a190 <alt_clk_pll_vco_cfg_set+0x478>
        if (int_status & locked_mask)
        {
            return ALT_E_SUCCESS;
        }

    } while (timeout--);
    a188:	e2522001 	subs	r2, r2, #1
    a18c:	0a000002 	beq	a19c <alt_clk_pll_vco_cfg_set+0x484>
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    a190:	e5103ff7 	ldr	r3, [r0, #-4087]	; 0xfffff009
        if (int_status & locked_mask)
    a194:	e3130040 	tst	r3, #64	; 0x40
    a198:	0afffffa 	beq	a188 <alt_clk_pll_vco_cfg_set+0x470>

ALT_STATUS_CODE alt_clk_pll_vco_cfg_set(ALT_CLK_t pll, uint32_t mult, uint32_t div)
{
    ALT_STATUS_CODE                 ret = ALT_E_ERROR;
    ALT_CLK_PLL_VCO_CHG_METHOD_t    method;
    bool                            byp = false;
    a19c:	e3a05000 	mov	r5, #0
    a1a0:	eaffffda 	b	a110 <alt_clk_pll_vco_cfg_set+0x3f8>
            numershift = ALT_CLKMGR_MAINPLL_VCO_NUMER_LSB;
            denomshift = ALT_CLKMGR_MAINPLL_VCO_DENOM_LSB;
        }
        else if (pll == ALT_CLK_PERIPHERAL_PLL)
        {
            vaddr = ALT_CLKMGR_PERPLL_VCO_ADDR;
    a1a4:	e3047080 	movw	r7, #16512	; 0x4080
    a1a8:	e34f7fd0 	movt	r7, #65488	; 0xffd0
    a1ac:	eaffff34 	b	9e84 <alt_clk_pll_vco_cfg_set+0x16c>
            return ALT_E_SUCCESS;
        }

    } while (timeout--);

    return ALT_E_TMO;
    a1b0:	e3e0600b 	mvn	r6, #11
    a1b4:	eaffff4c 	b	9eec <alt_clk_pll_vco_cfg_set+0x1d4>

        if (method & ALT_VCO_CHG_NUM)
        {
            if (method & ALT_VCO_CHG_NUM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
    a1b8:	e1a00004 	mov	r0, r4
    a1bc:	e3a01000 	mov	r1, #0
    a1c0:	ebfff740 	bl	7ec8 <alt_clk_pll_bypass_enable>
    a1c4:	e3a0301e 	mov	r3, #30
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    a1c8:	e2533001 	subs	r3, r3, #1
    {
        (void) alt_read_word(reg);
    a1cc:	e5972000 	ldr	r2, [r7]
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    a1d0:	1afffffc 	bne	a1c8 <alt_clk_pll_vco_cfg_set+0x4b0>
        if (method & ALT_VCO_CHG_NUM)
        {
            if (method & ALT_VCO_CHG_NUM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
    a1d4:	e3a05001 	mov	r5, #1
    a1d8:	eaffff31 	b	9ea4 <alt_clk_pll_vco_cfg_set+0x18c>
                      /* verify PLL is still locked or wait for it to lock again */
            }
            alt_replbits_word(vaddr, denommask, div << denomshift);
        }

        else if (method & ALT_VCO_CHG_DENOM_NUM)
    a1dc:	e2052080 	and	r2, r5, #128	; 0x80
    a1e0:	e6ff2072 	uxth	r2, r2
    a1e4:	e3520000 	cmp	r2, #0

ALT_STATUS_CODE alt_clk_pll_vco_cfg_set(ALT_CLK_t pll, uint32_t mult, uint32_t div)
{
    ALT_STATUS_CODE                 ret = ALT_E_ERROR;
    ALT_CLK_PLL_VCO_CHG_METHOD_t    method;
    bool                            byp = false;
    a1e8:	01a05002 	moveq	r5, r2
                      /* verify PLL is still locked or wait for it to lock again */
            }
            alt_replbits_word(vaddr, denommask, div << denomshift);
        }

        else if (method & ALT_VCO_CHG_DENOM_NUM)
    a1ec:	0affff34 	beq	9ec4 <alt_clk_pll_vco_cfg_set+0x1ac>
        {
            if (method & ALT_VCO_CHG_DENOM_NUM_BYP)
    a1f0:	e3150c01 	tst	r5, #256	; 0x100
    a1f4:	1a000019 	bne	a260 <alt_clk_pll_vco_cfg_set+0x548>
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    a1f8:	e5970000 	ldr	r0, [r7]
    a1fc:	e1a06186 	lsl	r6, r6, #3
    a200:	e30f2ff8 	movw	r2, #65528	; 0xfff8
    a204:	e0062002 	and	r2, r6, r2
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    a208:	e3041fff 	movw	r1, #20479	; 0x4fff
            if (method & ALT_VCO_CHG_DENOM_NUM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    a20c:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
    a210:	e30053e9 	movw	r5, #1001	; 0x3e9
    a214:	e3c000f8 	bic	r0, r0, #248	; 0xf8
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    a218:	e34f1fd0 	movt	r1, #65488	; 0xffd0
            if (method & ALT_VCO_CHG_DENOM_NUM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    a21c:	e1802002 	orr	r2, r0, r2
    a220:	e5872000 	str	r2, [r7]
    a224:	ea000001 	b	a230 <alt_clk_pll_vco_cfg_set+0x518>
        if (int_status & locked_mask)
        {
            return ALT_E_SUCCESS;
        }

    } while (timeout--);
    a228:	e2555001 	subs	r5, r5, #1
    a22c:	0affffb7 	beq	a110 <alt_clk_pll_vco_cfg_set+0x3f8>
        return ALT_E_BAD_ARG;
    }

    do
    {
        uint32_t int_status = alt_read_word(ALT_CLKMGR_INTER_ADDR);
    a230:	e5113ff7 	ldr	r3, [r1, #-4087]	; 0xfffff009
        if (int_status & locked_mask)
    a234:	e3130040 	tst	r3, #64	; 0x40
    a238:	0afffffa 	beq	a228 <alt_clk_pll_vco_cfg_set+0x510>
    a23c:	eaffffd6 	b	a19c <alt_clk_pll_vco_cfg_set+0x484>

        else if (method & ALT_VCO_CHG_DENOM)
        {
            if (method & ALT_VCO_CHG_DENOM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
    a240:	e1a00004 	mov	r0, r4
                byp = true;
    a244:	e3a05001 	mov	r5, #1

        else if (method & ALT_VCO_CHG_DENOM)
        {
            if (method & ALT_VCO_CHG_DENOM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
    a248:	ebfff71e 	bl	7ec8 <alt_clk_pll_bypass_enable>
    a24c:	eaffffaf 	b	a110 <alt_clk_pll_vco_cfg_set+0x3f8>
        {
            inputfreq = alt_ext_clk_paramblok.clkosc1.freqcur;
        }
        else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
        {
            inputfreq = alt_ext_clk_paramblok.clkosc2.freqcur;
    a250:	e5911010 	ldr	r1, [r1, #16]
    a254:	e58d100c 	str	r1, [sp, #12]
    a258:	e1a00001 	mov	r0, r1
    a25c:	eafffecf 	b	9da0 <alt_clk_pll_vco_cfg_set+0x88>

        else if (method & ALT_VCO_CHG_DENOM_NUM)
        {
            if (method & ALT_VCO_CHG_DENOM_NUM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
    a260:	e1a00004 	mov	r0, r4
    a264:	ebfff717 	bl	7ec8 <alt_clk_pll_bypass_enable>
                byp = true;
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    a268:	e5971000 	ldr	r1, [r7]
    a26c:	e1a06186 	lsl	r6, r6, #3
    a270:	e30f2ff8 	movw	r2, #65528	; 0xfff8
    a274:	e0062002 	and	r2, r6, r2
        else if (method & ALT_VCO_CHG_DENOM_NUM)
        {
            if (method & ALT_VCO_CHG_DENOM_NUM_BYP)
            {
                alt_clk_pll_bypass_enable(pll, 0);
                byp = true;
    a278:	e3a05001 	mov	r5, #1
            }
            alt_replbits_word(vaddr, numermask, mult << numershift);
    a27c:	e3c11cff 	bic	r1, r1, #65280	; 0xff00
    a280:	e3c110f8 	bic	r1, r1, #248	; 0xf8
    a284:	e1812002 	orr	r2, r1, r2
    a288:	e5872000 	str	r2, [r7]
    a28c:	eaffff9f 	b	a110 <alt_clk_pll_vco_cfg_set+0x3f8>
            numermask = ALT_CLKMGR_SDRPLL_VCO_NUMER_SET_MSK;
            denommask = ALT_CLKMGR_SDRPLL_VCO_DENOM_SET_MSK;
            numershift = ALT_CLKMGR_SDRPLL_VCO_NUMER_LSB;
            denomshift = ALT_CLKMGR_SDRPLL_VCO_DENOM_LSB;
        }
        else { return ALT_E_BAD_ARG; }
    a290:	e3e06008 	mvn	r6, #8
    a294:	eaffff1e 	b	9f14 <alt_clk_pll_vco_cfg_set+0x1fc>
        {
            ret = ALT_VCO_CHG_NOCHANGE;
        }
        else if (numerchg && !denomchg)
        {
            within_gb = alt_within_delta(numer, mult, guardband);
    a298:	e2632064 	rsb	r2, r3, #100	; 0x64
    a29c:	e1500002 	cmp	r0, r2
    a2a0:	9affff85 	bls	a0bc <alt_clk_pll_vco_cfg_set+0x3a4>
            /* check if change is within the guardband limits */
            temp = mult * (inputfreq / denom);
    a2a4:	e59d000c 	ldr	r0, [sp, #12]
    a2a8:	e1a0100b 	mov	r1, r11
    a2ac:	eb0039a2 	bl	1893c <__aeabi_uidiv>
    a2b0:	e0000095 	mul	r0, r5, r0
            if ((temp <= freqmax) && (temp >= freqmin))
    a2b4:	e1580000 	cmp	r8, r0
    a2b8:	83a08000 	movhi	r8, #0
    a2bc:	93a08001 	movls	r8, #1
    a2c0:	e1570000 	cmp	r7, r0
    a2c4:	33a08000 	movcc	r8, #0
    a2c8:	e3580000 	cmp	r8, #0
    a2cc:	0affff0f 	beq	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
            {
                ret = ALT_VCO_CHG_NUM;
    a2d0:	e3a05002 	mov	r5, #2
    a2d4:	eafffee2 	b	9e64 <alt_clk_pll_vco_cfg_set+0x14c>
                if (!within_gb)
                {
                    ret |= ALT_VCO_CHG_NUM_DENOM_BYP;
                }
            }
            within_gb = alt_within_delta(denom, div, guardband);
    a2d8:	e59d3010 	ldr	r3, [sp, #16]
    a2dc:	e2632064 	rsb	r2, r3, #100	; 0x64
    a2e0:	e1500002 	cmp	r0, r2
    a2e4:	9affff44 	bls	9ffc <alt_clk_pll_vco_cfg_set+0x2e4>
            temp = numer * (inputfreq / div);
    a2e8:	e59d3014 	ldr	r3, [sp, #20]
    a2ec:	e00c039c 	mul	r12, r12, r3
            if ((temp <= freqmax) && (temp >= freqmin))
    a2f0:	e158000c 	cmp	r8, r12
    a2f4:	83a08000 	movhi	r8, #0
    a2f8:	93a08001 	movls	r8, #1
    a2fc:	e157000c 	cmp	r7, r12
    a300:	33a08000 	movcc	r8, #0
    a304:	e3580000 	cmp	r8, #0
    a308:	0affff45 	beq	a024 <alt_clk_pll_vco_cfg_set+0x30c>
            {
                ret = ALT_VCO_CHG_DENOM_NUM;
    a30c:	e3a05080 	mov	r5, #128	; 0x80
    a310:	eafffed3 	b	9e64 <alt_clk_pll_vco_cfg_set+0x14c>
                }
            }
        }
        else    /*numerchg && denomchg */
        {
            within_gb = alt_within_delta(numer, mult, guardband);
    a314:	e59d3010 	ldr	r3, [sp, #16]
    a318:	e2631064 	rsb	r1, r3, #100	; 0x64
    a31c:	e1500001 	cmp	r0, r1
    a320:	9affff1f 	bls	9fa4 <alt_clk_pll_vco_cfg_set+0x28c>
            temp = mult * (inputfreq / denom);
    a324:	e59d000c 	ldr	r0, [sp, #12]
    a328:	e1a0100b 	mov	r1, r11
    a32c:	eb003982 	bl	1893c <__aeabi_uidiv>
    a330:	e0000095 	mul	r0, r5, r0
            if ((temp <= freqmax) && (temp >= freqmin))
            {
                ret = ALT_VCO_CHG_NUM_DENOM;
    a334:	e99d1004 	ldmib	sp, {r2, r12}
        }
        else    /*numerchg && denomchg */
        {
            within_gb = alt_within_delta(numer, mult, guardband);
            temp = mult * (inputfreq / denom);
            if ((temp <= freqmax) && (temp >= freqmin))
    a338:	e1580000 	cmp	r8, r0
    a33c:	83a05000 	movhi	r5, #0
    a340:	93a05001 	movls	r5, #1
    a344:	e1570000 	cmp	r7, r0
    a348:	33a05000 	movcc	r5, #0
            {
                ret = ALT_VCO_CHG_NUM_DENOM;
    a34c:	e1a05285 	lsl	r5, r5, #5
    a350:	eaffff21 	b	9fdc <alt_clk_pll_vco_cfg_set+0x2c4>
                if (!within_gb) ret |= ALT_VCO_CHG_NUM_BYP;
            }
        }
        else if (!numerchg && denomchg)
        {
            within_gb = alt_within_delta(denom, div, guardband);
    a354:	e2632064 	rsb	r2, r3, #100	; 0x64
    a358:	e1500002 	cmp	r0, r2
    a35c:	9afffeb6 	bls	9e3c <alt_clk_pll_vco_cfg_set+0x124>
            temp = numer * (inputfreq / div);
    a360:	e59d3014 	ldr	r3, [sp, #20]
    a364:	e00c039c 	mul	r12, r12, r3
            if ((temp <= freqmax) && (temp >= freqmin))
    a368:	e158000c 	cmp	r8, r12
    a36c:	83a08000 	movhi	r8, #0
    a370:	93a08001 	movls	r8, #1
    a374:	e157000c 	cmp	r7, r12
    a378:	33a08000 	movcc	r8, #0
    a37c:	e3580000 	cmp	r8, #0
    a380:	0afffee2 	beq	9f10 <alt_clk_pll_vco_cfg_set+0x1f8>
            {
                ret = ALT_VCO_CHG_DENOM;
    a384:	e3a05008 	mov	r5, #8
    a388:	eafffeb5 	b	9e64 <alt_clk_pll_vco_cfg_set+0x14c>

0000a38c <alt_clk_pll_vco_freq_get>:
// Note that since there is at present no known way for software to obtain the speed
// bin of the SoC or MPU that it is running on, the function below only deals with the
// 800 MHz part. This may need to be revised in the future.
*/
ALT_STATUS_CODE alt_clk_pll_vco_freq_get(ALT_CLK_t pll, alt_freq_t * freq)
{
    a38c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    uint32_t            temp;
    uint32_t            numer;
    uint32_t            denom;
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;

    if (freq == NULL)
    a390:	e2516000 	subs	r6, r1, #0
    a394:	0a000005 	beq	a3b0 <alt_clk_pll_vco_freq_get+0x24>
    {
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    a398:	e3500009 	cmp	r0, #9
    a39c:	0a000005 	beq	a3b8 <alt_clk_pll_vco_freq_get+0x2c>
            {
                ret = ALT_E_ERROR;
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    a3a0:	e350000a 	cmp	r0, #10
    a3a4:	0a00001e 	beq	a424 <alt_clk_pll_vco_freq_get+0x98>
                    ret = ALT_E_ERROR;
                }
            }
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    a3a8:	e350000b 	cmp	r0, #11
    a3ac:	0a00003f 	beq	a4b0 <alt_clk_pll_vco_freq_get+0x124>
    uint32_t            denom;
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;

    if (freq == NULL)
    {
        return ret;
    a3b0:	e3e00008 	mvn	r0, #8
    a3b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    a3b8:	e3042fff 	movw	r2, #20479	; 0x4fff
    a3bc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    a3c0:	e5120ffb 	ldr	r0, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    a3c4:	e2108001 	ands	r8, r0, #1
    a3c8:	1a000045 	bne	a4e4 <alt_clk_pll_vco_freq_get+0x158>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    a3cc:	e3027a94 	movw	r7, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    a3d0:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    a3d4:	e3407002 	movt	r7, #2
            temp1 *= (numer + 1);
            temp1 /= (denom + 1);
    a3d8:	e1a03008 	mov	r3, r8
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    a3dc:	e5971000 	ldr	r1, [r7]
            temp1 *= (numer + 1);
            temp1 /= (denom + 1);

            if (temp1 <= UINT32_MAX)
    a3e0:	e3e04000 	mvn	r4, #0
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    a3e4:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    a3e8:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    a3ec:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    a3f0:	e2822001 	add	r2, r2, #1

            if (temp1 <= UINT32_MAX)
    a3f4:	e3a05000 	mov	r5, #0
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
            temp1 /= (denom + 1);
    a3f8:	e0810190 	umull	r0, r1, r0, r1
    a3fc:	eb003994 	bl	18a54 <__aeabi_uldivmod>
    a400:	e1a02000 	mov	r2, r0
    a404:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    a408:	e1550003 	cmp	r5, r3
    a40c:	01540002 	cmpeq	r4, r2
    a410:	3a000042 	bcc	a520 <alt_clk_pll_vco_freq_get+0x194>
            {
                temp = (alt_freq_t) temp1;
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    a414:	e5870070 	str	r0, [r7, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
                /* should NOT check value against PLL frequency limits */
                ret = ALT_E_SUCCESS;
    a418:	e1a00008 	mov	r0, r8
            if (temp1 <= UINT32_MAX)
            {
                temp = (alt_freq_t) temp1;
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
                /* store this value in the parameter block table */
                *freq = temp;
    a41c:	e5862000 	str	r2, [r6]
    a420:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    a424:	e3043fff 	movw	r3, #20479	; 0x4fff
    a428:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a42c:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    a430:	e3100008 	tst	r0, #8
    a434:	1a000030 	bne	a4fc <alt_clk_pll_vco_freq_get+0x170>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    a438:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    a43c:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    a440:	e3520000 	cmp	r2, #0
    a444:	1a000059 	bne	a5b0 <alt_clk_pll_vco_freq_get+0x224>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    a448:	e3027a94 	movw	r7, #10900	; 0x2a94
    a44c:	e3a05000 	mov	r5, #0
    a450:	e3407002 	movt	r7, #2
    a454:	e5972000 	ldr	r2, [r7]
    a458:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    a45c:	e1942005 	orrs	r2, r4, r5
    a460:	0affffd2 	beq	a3b0 <alt_clk_pll_vco_freq_get+0x24>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    a464:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    a468:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    a46c:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    a470:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    a474:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    a478:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    a47c:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    a480:	eb003973 	bl	18a54 <__aeabi_uldivmod>
    a484:	e1a02000 	mov	r2, r0
    a488:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    a48c:	e3e00000 	mvn	r0, #0
    a490:	e3a01000 	mov	r1, #0
    a494:	e1510003 	cmp	r1, r3
    a498:	01500002 	cmpeq	r0, r2
    a49c:	3a00001f 	bcc	a520 <alt_clk_pll_vco_freq_get+0x194>
                {
                    temp = (alt_freq_t) temp1;
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    a4a0:	e5872080 	str	r2, [r7, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
                    ret = ALT_E_SUCCESS;
    a4a4:	e3a00000 	mov	r0, #0
                {
                    temp = (alt_freq_t) temp1;
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    a4a8:	e5862000 	str	r2, [r6]
    a4ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            }
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    a4b0:	e3043fff 	movw	r3, #20479	; 0x4fff
    a4b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a4b8:	e5130ffb 	ldr	r0, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
    a4bc:	e3100001 	tst	r0, #1
    a4c0:	0a000018 	beq	a528 <alt_clk_pll_vco_freq_get+0x19c>
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
    a4c4:	e7e00150 	ubfx	r0, r0, #2, #1
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    a4c8:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
    a4cc:	e3500000 	cmp	r0, #0
    a4d0:	1a000046 	bne	a5f0 <alt_clk_pll_vco_freq_get+0x264>
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    a4d4:	e3403002 	movt	r3, #2
    a4d8:	e5933000 	ldr	r3, [r3]
    a4dc:	e5863000 	str	r3, [r6]
    a4e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    a4e4:	e3023a94 	movw	r3, #10900	; 0x2a94
            ret = ALT_E_SUCCESS;
    a4e8:	e3a00000 	mov	r0, #0
    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    a4ec:	e3403002 	movt	r3, #2
    a4f0:	e5933000 	ldr	r3, [r3]
    a4f4:	e5863000 	str	r3, [r6]
    a4f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    a4fc:	e7e00250 	ubfx	r0, r0, #4, #1
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    a500:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    a504:	e3500000 	cmp	r0, #0
    a508:	0afffff1 	beq	a4d4 <alt_clk_pll_vco_freq_get+0x148>
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    a50c:	e3403002 	movt	r3, #2
            ret = ALT_E_SUCCESS;
    a510:	e3a00000 	mov	r0, #0
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    a514:	e5933020 	ldr	r3, [r3, #32]
    a518:	e5863000 	str	r3, [r6]
    a51c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                /* should NOT check value against PLL frequency limits */
                ret = ALT_E_SUCCESS;
            }
            else
            {
                ret = ALT_E_ERROR;
    a520:	e3e00000 	mvn	r0, #0
            }
        }
    }       /* which returns ALT_BAD_ARG if the source isn't known */

    return ret;
}
    a524:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    a528:	e5133f3f 	ldr	r3, [r3, #-3903]	; 0xfffff0c1
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
    a52c:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    a530:	e3520000 	cmp	r2, #0
    a534:	0a000027 	beq	a5d8 <alt_clk_pll_vco_freq_get+0x24c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    a538:	e3520001 	cmp	r2, #1
    a53c:	0a000036 	beq	a61c <alt_clk_pll_vco_freq_get+0x290>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    a540:	e3520002 	cmp	r2, #2
    a544:	1affff99 	bne	a3b0 <alt_clk_pll_vco_freq_get+0x24>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
    a548:	e3027a94 	movw	r7, #10900	; 0x2a94
    a54c:	e3a05000 	mov	r5, #0
    a550:	e3407002 	movt	r7, #2
    a554:	e5972030 	ldr	r2, [r7, #48]	; 0x30
    a558:	e1a04002 	mov	r4, r2
            }
    
            if (temp1 != 0)
    a55c:	e1942005 	orrs	r2, r4, r5
    a560:	0affff92 	beq	a3b0 <alt_clk_pll_vco_freq_get+0x24>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
    a564:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
    a568:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    a56c:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    a570:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    a574:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    a578:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    a57c:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    a580:	eb003933 	bl	18a54 <__aeabi_uldivmod>
    a584:	e1a02000 	mov	r2, r0
    a588:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    a58c:	e3e00000 	mvn	r0, #0
    a590:	e3a01000 	mov	r1, #0
    a594:	e1510003 	cmp	r1, r3
    a598:	01500002 	cmpeq	r0, r2
    a59c:	3affffdf 	bcc	a520 <alt_clk_pll_vco_freq_get+0x194>
                {
                    temp = (alt_freq_t) temp1;
                    alt_pll_clk_paramblok.SDRAMPLL_800.freqcur = temp;
    a5a0:	e5872090 	str	r2, [r7, #144]	; 0x90
                    /* store this value in the parameter block table */
    
                    *freq = temp;
                    ret = ALT_E_SUCCESS;
    a5a4:	e3a00000 	mov	r0, #0
                {
                    temp = (alt_freq_t) temp1;
                    alt_pll_clk_paramblok.SDRAMPLL_800.freqcur = temp;
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    a5a8:	e5862000 	str	r2, [r6]
    a5ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    a5b0:	e3520001 	cmp	r2, #1
    a5b4:	0a000012 	beq	a604 <alt_clk_pll_vco_freq_get+0x278>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    a5b8:	e3520002 	cmp	r2, #2
    a5bc:	1affff7b 	bne	a3b0 <alt_clk_pll_vco_freq_get+0x24>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    a5c0:	e3027a94 	movw	r7, #10900	; 0x2a94
    a5c4:	e3a05000 	mov	r5, #0
    a5c8:	e3407002 	movt	r7, #2
    a5cc:	e5972020 	ldr	r2, [r7, #32]
    a5d0:	e1a04002 	mov	r4, r2
    a5d4:	eaffffa0 	b	a45c <alt_clk_pll_vco_freq_get+0xd0>
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    a5d8:	e3027a94 	movw	r7, #10900	; 0x2a94
    a5dc:	e3a05000 	mov	r5, #0
    a5e0:	e3407002 	movt	r7, #2
    a5e4:	e5972000 	ldr	r2, [r7]
    a5e8:	e1a04002 	mov	r4, r2
    a5ec:	eaffffda 	b	a55c <alt_clk_pll_vco_freq_get+0x1d0>
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            else
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
    a5f0:	e3403002 	movt	r3, #2
            ret = ALT_E_SUCCESS;
    a5f4:	e3a00000 	mov	r0, #0
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            else
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
    a5f8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    a5fc:	e5863000 	str	r3, [r6]
    a600:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    a604:	e3027a94 	movw	r7, #10900	; 0x2a94
    a608:	e3a05000 	mov	r5, #0
    a60c:	e3407002 	movt	r7, #2
    a610:	e5972010 	ldr	r2, [r7, #16]
    a614:	e1a04002 	mov	r4, r2
    a618:	eaffff8f 	b	a45c <alt_clk_pll_vco_freq_get+0xd0>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    a61c:	e3027a94 	movw	r7, #10900	; 0x2a94
    a620:	e3a05000 	mov	r5, #0
    a624:	e3407002 	movt	r7, #2
    a628:	e5972010 	ldr	r2, [r7, #16]
    a62c:	e1a04002 	mov	r4, r2
    a630:	eaffffc9 	b	a55c <alt_clk_pll_vco_freq_get+0x1d0>

0000a634 <alt_clk_pll_guard_band_get>:
*/
uint32_t alt_clk_pll_guard_band_get(ALT_CLK_t pll)
{
    uint32_t ret = 0;

    if (pll == ALT_CLK_MAIN_PLL)
    a634:	e3500009 	cmp	r0, #9
    a638:	0a000008 	beq	a660 <alt_clk_pll_guard_band_get+0x2c>
    {
        ret = alt_pll_clk_paramblok.MainPLL_800.guardband;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    a63c:	e350000a 	cmp	r0, #10
    a640:	0a00000b 	beq	a674 <alt_clk_pll_guard_band_get+0x40>
    {
        ret = alt_pll_clk_paramblok.PeriphPLL_800.guardband;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    a644:	e350000b 	cmp	r0, #11
    {
        ret = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;
    a648:	03023a94 	movweq	r3, #10900	; 0x2a94
    a64c:	03403002 	movteq	r3, #2
    a650:	05d3009c 	ldrbeq	r0, [r3, #156]	; 0x9c
    a654:	0200007f 	andeq	r0, r0, #127	; 0x7f
/*
// Returns the current guard band range in effect for the PLL.
*/
uint32_t alt_clk_pll_guard_band_get(ALT_CLK_t pll)
{
    uint32_t ret = 0;
    a658:	13a00000 	movne	r0, #0
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        ret = alt_pll_clk_paramblok.SDRAMPLL_800.guardband;
    }
    return ret;
}
    a65c:	e12fff1e 	bx	lr
{
    uint32_t ret = 0;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        ret = alt_pll_clk_paramblok.MainPLL_800.guardband;
    a660:	e3023a94 	movw	r3, #10900	; 0x2a94
    a664:	e3403002 	movt	r3, #2
    a668:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
    a66c:	e200007f 	and	r0, r0, #127	; 0x7f
    a670:	e12fff1e 	bx	lr
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        ret = alt_pll_clk_paramblok.PeriphPLL_800.guardband;
    a674:	e3023a94 	movw	r3, #10900	; 0x2a94
    a678:	e3403002 	movt	r3, #2
    a67c:	e5d3008c 	ldrb	r0, [r3, #140]	; 0x8c
    a680:	e200007f 	and	r0, r0, #127	; 0x7f
    a684:	e12fff1e 	bx	lr

0000a688 <alt_clk_pll_guard_band_set>:
ALT_STATUS_CODE alt_clk_pll_guard_band_set(ALT_CLK_t pll, uint32_t guard_band)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    if (   (guard_band > UINT12_MAX) || (guard_band <= 0)
        || (guard_band > ALT_GUARDBAND_LIMIT)
    a688:	e2413001 	sub	r3, r1, #1
*/
ALT_STATUS_CODE alt_clk_pll_guard_band_set(ALT_CLK_t pll, uint32_t guard_band)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;

    if (   (guard_band > UINT12_MAX) || (guard_band <= 0)
    a68c:	e3530013 	cmp	r3, #19
    a690:	8a00001c 	bhi	a708 <alt_clk_pll_guard_band_set+0x80>
       )
    {
        return ALT_E_ARG_RANGE;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    a694:	e3500009 	cmp	r0, #9
    a698:	0a000005 	beq	a6b4 <alt_clk_pll_guard_band_set+0x2c>
    {
        alt_pll_clk_paramblok.MainPLL_800.guardband = guard_band;
        /* alt_pll_clk_paramblok.MainPLL_600.guardband = guard_band;
        // ??? Don't know how to check the MPU speed bin yet, so only 800 MHz struct is used */
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    a69c:	e350000a 	cmp	r0, #10
    a6a0:	0a00000a 	beq	a6d0 <alt_clk_pll_guard_band_set+0x48>
    {
        alt_pll_clk_paramblok.PeriphPLL_800.guardband = guard_band;
        /*alt_pll_clk_paramblok.PeriphPLL_600.guardband = guard_band; */
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    a6a4:	e350000b 	cmp	r0, #11
    a6a8:	0a00000f 	beq	a6ec <alt_clk_pll_guard_band_set+0x64>
        alt_pll_clk_paramblok.SDRAMPLL_800.guardband = guard_band;
        /*alt_pll_clk_paramblok.SDRAMPLL_600.guardband = guard_band; */
    }
    else
    {
        status = ALT_E_ERROR;
    a6ac:	e3e00000 	mvn	r0, #0
    }

    return status;
}
    a6b0:	e12fff1e 	bx	lr
        return ALT_E_ARG_RANGE;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        alt_pll_clk_paramblok.MainPLL_800.guardband = guard_band;
    a6b4:	e3023a94 	movw	r3, #10900	; 0x2a94
// a more lenient or stringent policy to be in effect for the implementation of the
// functions configuring PLL VCO frequency.
*/
ALT_STATUS_CODE alt_clk_pll_guard_band_set(ALT_CLK_t pll, uint32_t guard_band)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a6b8:	e3a00000 	mov	r0, #0
        return ALT_E_ARG_RANGE;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        alt_pll_clk_paramblok.MainPLL_800.guardband = guard_band;
    a6bc:	e3403002 	movt	r3, #2
    a6c0:	e5d3207c 	ldrb	r2, [r3, #124]	; 0x7c
    a6c4:	e7c62011 	bfi	r2, r1, #0, #7
    a6c8:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
    a6cc:	e12fff1e 	bx	lr
        /* alt_pll_clk_paramblok.MainPLL_600.guardband = guard_band;
        // ??? Don't know how to check the MPU speed bin yet, so only 800 MHz struct is used */
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        alt_pll_clk_paramblok.PeriphPLL_800.guardband = guard_band;
    a6d0:	e3023a94 	movw	r3, #10900	; 0x2a94
// a more lenient or stringent policy to be in effect for the implementation of the
// functions configuring PLL VCO frequency.
*/
ALT_STATUS_CODE alt_clk_pll_guard_band_set(ALT_CLK_t pll, uint32_t guard_band)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a6d4:	e3a00000 	mov	r0, #0
        /* alt_pll_clk_paramblok.MainPLL_600.guardband = guard_band;
        // ??? Don't know how to check the MPU speed bin yet, so only 800 MHz struct is used */
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        alt_pll_clk_paramblok.PeriphPLL_800.guardband = guard_band;
    a6d8:	e3403002 	movt	r3, #2
    a6dc:	e5d3208c 	ldrb	r2, [r3, #140]	; 0x8c
    a6e0:	e7c62011 	bfi	r2, r1, #0, #7
    a6e4:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
    a6e8:	e12fff1e 	bx	lr
        /*alt_pll_clk_paramblok.PeriphPLL_600.guardband = guard_band; */
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        alt_pll_clk_paramblok.SDRAMPLL_800.guardband = guard_band;
    a6ec:	e3023a94 	movw	r3, #10900	; 0x2a94
// a more lenient or stringent policy to be in effect for the implementation of the
// functions configuring PLL VCO frequency.
*/
ALT_STATUS_CODE alt_clk_pll_guard_band_set(ALT_CLK_t pll, uint32_t guard_band)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a6f0:	e3a00000 	mov	r0, #0
        alt_pll_clk_paramblok.PeriphPLL_800.guardband = guard_band;
        /*alt_pll_clk_paramblok.PeriphPLL_600.guardband = guard_band; */
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        alt_pll_clk_paramblok.SDRAMPLL_800.guardband = guard_band;
    a6f4:	e3403002 	movt	r3, #2
    a6f8:	e5d3209c 	ldrb	r2, [r3, #156]	; 0x9c
    a6fc:	e7c62011 	bfi	r2, r1, #0, #7
    a700:	e5c3209c 	strb	r2, [r3, #156]	; 0x9c
    a704:	e12fff1e 	bx	lr

    if (   (guard_band > UINT12_MAX) || (guard_band <= 0)
        || (guard_band > ALT_GUARDBAND_LIMIT)
       )
    {
        return ALT_E_ARG_RANGE;
    a708:	e3e00007 	mvn	r0, #7
    a70c:	e12fff1e 	bx	lr

0000a710 <alt_clk_divider_get>:
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        temp;

    if (div == NULL)
    a710:	e3510000 	cmp	r1, #0
    a714:	0a00003b 	beq	a808 <alt_clk_divider_get+0xf8>
    {
        return ALT_E_BAD_ARG;
    }

    switch (clk)
    a718:	e240000d 	sub	r0, r0, #13
    a71c:	e3500033 	cmp	r0, #51	; 0x33
    a720:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    a724:	ea000037 	b	a808 <alt_clk_divider_get+0xf8>
    a728:	0000abb4 	.word	0x0000abb4
    a72c:	0000aa1c 	.word	0x0000aa1c
    a730:	0000a9e8 	.word	0x0000a9e8
    a734:	0000ab90 	.word	0x0000ab90
    a738:	0000ab6c 	.word	0x0000ab6c
    a73c:	0000ab48 	.word	0x0000ab48
    a740:	0000abb4 	.word	0x0000abb4
    a744:	0000ab38 	.word	0x0000ab38
    a748:	0000a7f8 	.word	0x0000a7f8
    a74c:	0000aa1c 	.word	0x0000aa1c
    a750:	0000aaf8 	.word	0x0000aaf8
    a754:	0000a8b0 	.word	0x0000a8b0
    a758:	0000aa1c 	.word	0x0000aa1c
    a75c:	0000a894 	.word	0x0000a894
    a760:	0000a85c 	.word	0x0000a85c
    a764:	0000a9e8 	.word	0x0000a9e8
    a768:	0000a878 	.word	0x0000a878
    a76c:	0000a83c 	.word	0x0000a83c
    a770:	0000a9e8 	.word	0x0000a9e8
    a774:	0000a810 	.word	0x0000a810
    a778:	0000ab90 	.word	0x0000ab90
    a77c:	0000ab6c 	.word	0x0000ab6c
    a780:	0000ab48 	.word	0x0000ab48
    a784:	0000ab48 	.word	0x0000ab48
    a788:	0000a97c 	.word	0x0000a97c
    a78c:	0000a958 	.word	0x0000a958
    a790:	0000a934 	.word	0x0000a934
    a794:	0000a910 	.word	0x0000a910
    a798:	0000a9c4 	.word	0x0000a9c4
    a79c:	0000a9a0 	.word	0x0000a9a0
    a7a0:	0000a8f4 	.word	0x0000a8f4
    a7a4:	0000a8d8 	.word	0x0000a8d8
    a7a8:	0000a808 	.word	0x0000a808
    a7ac:	0000a808 	.word	0x0000a808
    a7b0:	0000a7f8 	.word	0x0000a7f8
    a7b4:	0000a808 	.word	0x0000a808
    a7b8:	0000a97c 	.word	0x0000a97c
    a7bc:	0000a958 	.word	0x0000a958
    a7c0:	0000aadc 	.word	0x0000aadc
    a7c4:	0000aac0 	.word	0x0000aac0
    a7c8:	0000aaa0 	.word	0x0000aaa0
    a7cc:	0000a9a0 	.word	0x0000a9a0
    a7d0:	0000aa7c 	.word	0x0000aa7c
    a7d4:	0000aa58 	.word	0x0000aa58
    a7d8:	0000aa34 	.word	0x0000aa34
    a7dc:	0000a808 	.word	0x0000a808
    a7e0:	0000a808 	.word	0x0000a808
    a7e4:	0000ab14 	.word	0x0000ab14
    a7e8:	0000aa7c 	.word	0x0000aa7c
    a7ec:	0000aa58 	.word	0x0000aa58
    a7f0:	0000aa34 	.word	0x0000aa34
    a7f4:	0000ab14 	.word	0x0000ab14
    case ALT_CLK_MPU_L2_RAM:
        *div = 2;                           /* set by hardware */
        break;

    case ALT_CLK_NAND:
        *div = 4;                           /* set by hardware */
    a7f8:	e3a03004 	mov	r3, #4
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a7fc:	e3a00000 	mov	r0, #0
    case ALT_CLK_MPU_L2_RAM:
        *div = 2;                           /* set by hardware */
        break;

    case ALT_CLK_NAND:
        *div = 4;                           /* set by hardware */
    a800:	e5813000 	str	r3, [r1]
        break;
    a804:	e12fff1e 	bx	lr

    default:
        status = ALT_E_BAD_ARG;
    a808:	e3e00008 	mvn	r0, #8
    a80c:	e12fff1e 	bx	lr
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_DBG:
        temp = ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR));
    a810:	e3043fff 	movw	r3, #20479	; 0x4fff
    a814:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a818:	e5133f97 	ldr	r3, [r3, #-3991]	; 0xfffff069
    a81c:	e7e13153 	ubfx	r3, r3, #2, #2
        if (temp <= ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_E_DIV4)
    a820:	e3530003 	cmp	r3, #3
    a824:	0a00000a 	beq	a854 <alt_clk_divider_get+0x144>

    case ALT_CLK_CAN1:
        temp = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
        if (temp <= ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV16)
        {
            *div = 1 << temp;
    a828:	e3a02001 	mov	r2, #1
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a82c:	e3a00000 	mov	r0, #0

    case ALT_CLK_CAN1:
        temp = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
        if (temp <= ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV16)
        {
            *div = 1 << temp;
    a830:	e1a03312 	lsl	r3, r2, r3
    a834:	e5813000 	str	r3, [r1]
    a838:	e12fff1e 	bx	lr
        }
        /* note that this value does not include the value of the upstream dbg_at_clk divder */
        break;

    case ALT_CLK_DBG_TRACE:
        temp = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR));
    a83c:	e3043fff 	movw	r3, #20479	; 0x4fff
    a840:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a844:	e5133f93 	ldr	r3, [r3, #-3987]	; 0xfffff06d
    a848:	e2033007 	and	r3, r3, #7
        if (temp <= ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV16)
    a84c:	e3530004 	cmp	r3, #4
    a850:	9afffff4 	bls	a828 <alt_clk_divider_get+0x118>
        {
            *div = temp + 1;
        }
        else
        {
            status = ALT_E_ERROR;
    a854:	e3e00000 	mvn	r0, #0
        status = ALT_E_BAD_ARG;
        break;
    }

    return status;
}
    a858:	e12fff1e 	bx	lr
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_L4_SP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
    a85c:	e3043fff 	movw	r3, #20479	; 0x4fff
    a860:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a864:	e5133f9b 	ldr	r3, [r3, #-3995]	; 0xfffff065
    a868:	e7e233d3 	ubfx	r3, r3, #7, #3
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV16)
    a86c:	e3530004 	cmp	r3, #4
    a870:	8afffff7 	bhi	a854 <alt_clk_divider_get+0x144>
    a874:	eaffffeb 	b	a828 <alt_clk_divider_get+0x118>
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_DBG_AT:
        temp = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR));
    a878:	e3043fff 	movw	r3, #20479	; 0x4fff
    a87c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a880:	e5133f97 	ldr	r3, [r3, #-3991]	; 0xfffff069
    a884:	e2033003 	and	r3, r3, #3
        if (temp <= ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV4)
    a888:	e3530003 	cmp	r3, #3
    a88c:	0afffff0 	beq	a854 <alt_clk_divider_get+0x144>
    a890:	eaffffe4 	b	a828 <alt_clk_divider_get+0x118>
        /* note that this value does not include the additional effect 
           of the L3_MP divider that is upchain from this one */
        break;

    case ALT_CLK_L4_MP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
    a894:	e3043fff 	movw	r3, #20479	; 0x4fff
    a898:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a89c:	e5133f9b 	ldr	r3, [r3, #-3995]	; 0xfffff065
    a8a0:	e7e23253 	ubfx	r3, r3, #4, #3
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV16)
    a8a4:	e3530004 	cmp	r3, #4
    a8a8:	8affffe9 	bhi	a854 <alt_clk_divider_get+0x144>
    a8ac:	eaffffdd 	b	a828 <alt_clk_divider_get+0x118>
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_L3_SP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
    a8b0:	e3043fff 	movw	r3, #20479	; 0x4fff
    a8b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a8b8:	e5133f9b 	ldr	r3, [r3, #-3995]	; 0xfffff065
    a8bc:	e7e13153 	ubfx	r3, r3, #2, #2
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV2)
    a8c0:	e3530001 	cmp	r3, #1
    a8c4:	8affffe2 	bhi	a854 <alt_clk_divider_get+0x144>
        {
            *div = temp + 1;
    a8c8:	e2833001 	add	r3, r3, #1
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a8cc:	e3a00000 	mov	r0, #0

    case ALT_CLK_L3_SP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV2)
        {
            *div = temp + 1;
    a8d0:	e5813000 	str	r3, [r1]
    a8d4:	e12fff1e 	bx	lr
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_SPI_M:
        temp = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
    a8d8:	e3043fff 	movw	r3, #20479	; 0x4fff
    a8dc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a8e0:	e5133f5b 	ldr	r3, [r3, #-3931]	; 0xfffff0a5
    a8e4:	e7e231d3 	ubfx	r3, r3, #3, #3
        if (temp <= ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV16)
    a8e8:	e3530004 	cmp	r3, #4
    a8ec:	8affffd8 	bhi	a854 <alt_clk_divider_get+0x144>
    a8f0:	eaffffcc 	b	a828 <alt_clk_divider_get+0x118>
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_USB_MP:
        temp = ALT_CLKMGR_PERPLL_DIV_USBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
    a8f4:	e3043fff 	movw	r3, #20479	; 0x4fff
    a8f8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a8fc:	e5133f5b 	ldr	r3, [r3, #-3931]	; 0xfffff0a5
    a900:	e2033007 	and	r3, r3, #7
        if (temp <= ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV16)
    a904:	e3530004 	cmp	r3, #4
    a908:	8affffd1 	bhi	a854 <alt_clk_divider_get+0x144>
    a90c:	eaffffc5 	b	a828 <alt_clk_divider_get+0x118>
    case ALT_CLK_PERIPHERAL_PLL_C2:
        *div = (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C3:
        *div = (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR))) + 1;
    a910:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a914:	e3a00000 	mov	r0, #0
    case ALT_CLK_PERIPHERAL_PLL_C2:
        *div = (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C3:
        *div = (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR))) + 1;
    a918:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a91c:	e5133f6b 	ldr	r3, [r3, #-3947]	; 0xfffff095
    a920:	e1a03b83 	lsl	r3, r3, #23
    a924:	e1a03ba3 	lsr	r3, r3, #23
    a928:	e2833001 	add	r3, r3, #1
    a92c:	e5813000 	str	r3, [r1]
        break;
    a930:	e12fff1e 	bx	lr
    case ALT_CLK_EMAC1:
        *div = (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C2:
        *div = (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR))) + 1;
    a934:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a938:	e3a00000 	mov	r0, #0
    case ALT_CLK_EMAC1:
        *div = (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C2:
        *div = (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR))) + 1;
    a93c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a940:	e5133f6f 	ldr	r3, [r3, #-3951]	; 0xfffff091
    a944:	e1a03b83 	lsl	r3, r3, #23
    a948:	e1a03ba3 	lsr	r3, r3, #23
    a94c:	e2833001 	add	r3, r3, #1
    a950:	e5813000 	str	r3, [r1]
        break;
    a954:	e12fff1e 	bx	lr
        *div = (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_EMAC1:
        *div = (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR))) + 1;
    a958:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a95c:	e3a00000 	mov	r0, #0
        *div = (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_EMAC1:
        *div = (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR))) + 1;
    a960:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a964:	e5133f73 	ldr	r3, [r3, #-3955]	; 0xfffff08d
    a968:	e1a03b83 	lsl	r3, r3, #23
    a96c:	e1a03ba3 	lsr	r3, r3, #23
    a970:	e2833001 	add	r3, r3, #1
    a974:	e5813000 	str	r3, [r1]
        break;
    a978:	e12fff1e 	bx	lr
        break;

        /* Peripheral PLL outputs */
    case ALT_CLK_PERIPHERAL_PLL_C0:
    case ALT_CLK_EMAC0:
        *div = (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR))) + 1;
    a97c:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a980:	e3a00000 	mov	r0, #0
        break;

        /* Peripheral PLL outputs */
    case ALT_CLK_PERIPHERAL_PLL_C0:
    case ALT_CLK_EMAC0:
        *div = (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR))) + 1;
    a984:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a988:	e5133f77 	ldr	r3, [r3, #-3959]	; 0xfffff089
    a98c:	e1a03b83 	lsl	r3, r3, #23
    a990:	e1a03ba3 	lsr	r3, r3, #23
    a994:	e2833001 	add	r3, r3, #1
    a998:	e5813000 	str	r3, [r1]
        break;
    a99c:	e12fff1e 	bx	lr
        *div = (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_H2F_USER1:
        *div = (ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR))) + 1;
    a9a0:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a9a4:	e3a00000 	mov	r0, #0
        *div = (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_H2F_USER1:
        *div = (ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR))) + 1;
    a9a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a9ac:	e5133f63 	ldr	r3, [r3, #-3939]	; 0xfffff09d
    a9b0:	e1a03b83 	lsl	r3, r3, #23
    a9b4:	e1a03ba3 	lsr	r3, r3, #23
    a9b8:	e2833001 	add	r3, r3, #1
    a9bc:	e5813000 	str	r3, [r1]
        break;
    a9c0:	e12fff1e 	bx	lr
    case ALT_CLK_PERIPHERAL_PLL_C3:
        *div = (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C4:
        *div = (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR))) + 1;
    a9c4:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a9c8:	e3a00000 	mov	r0, #0
    case ALT_CLK_PERIPHERAL_PLL_C3:
        *div = (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR))) + 1;
        break;

    case ALT_CLK_PERIPHERAL_PLL_C4:
        *div = (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_GET(alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR))) + 1;
    a9cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a9d0:	e5133f67 	ldr	r3, [r3, #-3943]	; 0xfffff099
    a9d4:	e1a03b83 	lsl	r3, r3, #23
    a9d8:	e1a03ba3 	lsr	r3, r3, #23
    a9dc:	e2833001 	add	r3, r3, #1
    a9e0:	e5813000 	str	r3, [r1]
        break;
    a9e4:	e12fff1e 	bx	lr
        break;

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        *div = (ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR)) + 1) *
    a9e8:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    a9ec:	e3a00000 	mov	r0, #0
        break;

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        *div = (ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR)) + 1) *
    a9f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    a9f4:	e5132faf 	ldr	r2, [r3, #-4015]	; 0xfffff051
               (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
    a9f8:	e5133f17 	ldr	r3, [r3, #-3863]	; 0xfffff0e9
        break;

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        *div = (ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR)) + 1) *
    a9fc:	e1a02b82 	lsl	r2, r2, #23
               (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
    aa00:	e1a03b83 	lsl	r3, r3, #23
        break;

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        *div = (ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR)) + 1) *
    aa04:	e1a02ba2 	lsr	r2, r2, #23
               (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
    aa08:	e1a03ba3 	lsr	r3, r3, #23
        break;

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        *div = (ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR)) + 1) *
    aa0c:	e2822001 	add	r2, r2, #1
    aa10:	e0222293 	mla	r2, r3, r2, r2
    aa14:	e5812000 	str	r2, [r1]
               (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
        break;
    aa18:	e12fff1e 	bx	lr
        break;

    case ALT_CLK_MAIN_PLL_C1:
    case ALT_CLK_L4_MAIN:
    case ALT_CLK_L3_MAIN:
        *div = (ALT_CLKMGR_MAINPLL_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR)) + 1) *
    aa1c:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    aa20:	e3a00000 	mov	r0, #0
        break;

    case ALT_CLK_MAIN_PLL_C1:
    case ALT_CLK_L4_MAIN:
    case ALT_CLK_L3_MAIN:
        *div = (ALT_CLKMGR_MAINPLL_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR)) + 1) *
    aa24:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aa28:	e5132fb3 	ldr	r2, [r3, #-4019]	; 0xfffff04d
               (ALT_CLKMGR_MISC_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR)) + 1);
    aa2c:	e5133f1b 	ldr	r3, [r3, #-3867]	; 0xfffff0e5
    aa30:	eafffff1 	b	a9fc <alt_clk_divider_get+0x2ec>
        *div = (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR))) + 1;
        break;

    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_DDR_DQ:
        *div = (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR))) + 1;
    aa34:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    aa38:	e3a00000 	mov	r0, #0
        *div = (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR))) + 1;
        break;

    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_DDR_DQ:
        *div = (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR))) + 1;
    aa3c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aa40:	e5133f2f 	ldr	r3, [r3, #-3887]	; 0xfffff0d1
    aa44:	e1a03b83 	lsl	r3, r3, #23
    aa48:	e1a03ba3 	lsr	r3, r3, #23
    aa4c:	e2833001 	add	r3, r3, #1
    aa50:	e5813000 	str	r3, [r1]
        break;
    aa54:	e12fff1e 	bx	lr
        *div = (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR))) + 1;
        break;

    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_DDR_2X_DQS:
        *div = (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR))) + 1;
    aa58:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    aa5c:	e3a00000 	mov	r0, #0
        *div = (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR))) + 1;
        break;

    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_DDR_2X_DQS:
        *div = (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR))) + 1;
    aa60:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aa64:	e5133f33 	ldr	r3, [r3, #-3891]	; 0xfffff0cd
    aa68:	e1a03b83 	lsl	r3, r3, #23
    aa6c:	e1a03ba3 	lsr	r3, r3, #23
    aa70:	e2833001 	add	r3, r3, #1
    aa74:	e5813000 	str	r3, [r1]
        break;
    aa78:	e12fff1e 	bx	lr
        break;

        /* SDRAM PLL outputs */
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_DDR_DQS:
        *div = (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR))) + 1;
    aa7c:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    aa80:	e3a00000 	mov	r0, #0
        break;

        /* SDRAM PLL outputs */
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_DDR_DQS:
        *div = (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR))) + 1;
    aa84:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aa88:	e5133f37 	ldr	r3, [r3, #-3895]	; 0xfffff0c9
    aa8c:	e1a03b83 	lsl	r3, r3, #23
    aa90:	e1a03ba3 	lsr	r3, r3, #23
    aa94:	e2833001 	add	r3, r3, #1
    aa98:	e5813000 	str	r3, [r1]
        break;
    aa9c:	e12fff1e 	bx	lr
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_GPIO_DB:
        temp = ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR));
    aaa0:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    aaa4:	e3a00000 	mov	r0, #0
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_GPIO_DB:
        temp = ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR));
    aaa8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aaac:	e5133f57 	ldr	r3, [r3, #-3927]	; 0xfffff0a9
    aab0:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
        *div = temp + 1;
    aab4:	e2833001 	add	r3, r3, #1
    aab8:	e5813000 	str	r3, [r1]
        break;
    aabc:	e12fff1e 	bx	lr
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_CAN1:
        temp = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
    aac0:	e3043fff 	movw	r3, #20479	; 0x4fff
    aac4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aac8:	e5133f5b 	ldr	r3, [r3, #-3931]	; 0xfffff0a5
    aacc:	e7e234d3 	ubfx	r3, r3, #9, #3
        if (temp <= ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV16)
    aad0:	e3530004 	cmp	r3, #4
    aad4:	8affff5e 	bhi	a854 <alt_clk_divider_get+0x144>
    aad8:	eaffff52 	b	a828 <alt_clk_divider_get+0x118>
            status = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_CAN0:
        temp = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_GET(alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR));
    aadc:	e3043fff 	movw	r3, #20479	; 0x4fff
    aae0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aae4:	e5133f5b 	ldr	r3, [r3, #-3931]	; 0xfffff0a5
    aae8:	e7e23353 	ubfx	r3, r3, #6, #3
        if (temp <= ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV16)
    aaec:	e3530004 	cmp	r3, #4
    aaf0:	8affff57 	bhi	a854 <alt_clk_divider_get+0x144>
    aaf4:	eaffff4b 	b	a828 <alt_clk_divider_get+0x118>
        *div = (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR))) + 1;
        break;

        /* Other clock dividers */
    case ALT_CLK_L3_MP:
        temp = ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR));
    aaf8:	e3043fff 	movw	r3, #20479	; 0x4fff
    aafc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ab00:	e5133f9b 	ldr	r3, [r3, #-3995]	; 0xfffff065
    ab04:	e2033003 	and	r3, r3, #3
        if (temp <= ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_E_DIV2)
    ab08:	e3530001 	cmp	r3, #1
    ab0c:	8affff50 	bhi	a854 <alt_clk_divider_get+0x144>
    ab10:	eaffff6c 	b	a8c8 <alt_clk_divider_get+0x1b8>
        *div = (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR))) + 1;
        break;

    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        *div = (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR))) + 1;
    ab14:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ab18:	e3a00000 	mov	r0, #0
        *div = (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR))) + 1;
        break;

    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        *div = (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_GET(alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR))) + 1;
    ab1c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ab20:	e5133f2b 	ldr	r3, [r3, #-3883]	; 0xfffff0d5
    ab24:	e1a03b83 	lsl	r3, r3, #23
    ab28:	e1a03ba3 	lsr	r3, r3, #23
    ab2c:	e2833001 	add	r3, r3, #1
    ab30:	e5813000 	str	r3, [r1]
        break;
    ab34:	e12fff1e 	bx	lr
    case ALT_CLK_MPU_PERIPH:
        *div = 4;                           /* set by hardware */
        break;

    case ALT_CLK_MPU_L2_RAM:
        *div = 2;                           /* set by hardware */
    ab38:	e3a03002 	mov	r3, #2
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ab3c:	e3a00000 	mov	r0, #0
    case ALT_CLK_MPU_PERIPH:
        *div = 4;                           /* set by hardware */
        break;

    case ALT_CLK_MPU_L2_RAM:
        *div = 2;                           /* set by hardware */
    ab40:	e5813000 	str	r3, [r1]
        break;
    ab44:	e12fff1e 	bx	lr
        break;

    case ALT_CLK_MAIN_PLL_C5:
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        *div = (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR))) + 1;
    ab48:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ab4c:	e3a00000 	mov	r0, #0
        break;

    case ALT_CLK_MAIN_PLL_C5:
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        *div = (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR))) + 1;
    ab50:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ab54:	e5133fa3 	ldr	r3, [r3, #-4003]	; 0xfffff05d
    ab58:	e1a03b83 	lsl	r3, r3, #23
    ab5c:	e1a03ba3 	lsr	r3, r3, #23
    ab60:	e2833001 	add	r3, r3, #1
    ab64:	e5813000 	str	r3, [r1]
        break;
    ab68:	e12fff1e 	bx	lr
        *div = (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR))) + 1;
        break;

    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_NAND_SDMMC:
        *div = (ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR))) + 1;
    ab6c:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ab70:	e3a00000 	mov	r0, #0
        *div = (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR))) + 1;
        break;

    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_NAND_SDMMC:
        *div = (ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR))) + 1;
    ab74:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ab78:	e5133fa7 	ldr	r3, [r3, #-4007]	; 0xfffff059
    ab7c:	e1a03b83 	lsl	r3, r3, #23
    ab80:	e1a03ba3 	lsr	r3, r3, #23
    ab84:	e2833001 	add	r3, r3, #1
    ab88:	e5813000 	str	r3, [r1]
        break;
    ab8c:	e12fff1e 	bx	lr
               (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
        break;

    case ALT_CLK_MAIN_PLL_C3:
    case ALT_CLK_MAIN_QSPI:
        *div = (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR))) + 1;
    ab90:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    ab94:	e3a00000 	mov	r0, #0
               (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
        break;

    case ALT_CLK_MAIN_PLL_C3:
    case ALT_CLK_MAIN_QSPI:
        *div = (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR))) + 1;
    ab98:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ab9c:	e5133fab 	ldr	r3, [r3, #-4011]	; 0xfffff055
    aba0:	e1a03b83 	lsl	r3, r3, #23
    aba4:	e1a03ba3 	lsr	r3, r3, #23
    aba8:	e2833001 	add	r3, r3, #1
    abac:	e5813000 	str	r3, [r1]
        break;
    abb0:	e12fff1e 	bx	lr
    switch (clk)
    {
        /* Main PLL outputs */
    case ALT_CLK_MAIN_PLL_C0:
    case ALT_CLK_MPU:
        *div = (ALT_CLKMGR_MAINPLL_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR)) + 1) *
    abb4:	e3043fff 	movw	r3, #20479	; 0x4fff
/*
// alt_clk_divider_get() gets configured divider value for the specified clock.
*/
ALT_STATUS_CODE alt_clk_divider_get(ALT_CLK_t clk, uint32_t * div)
{
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    abb8:	e3a00000 	mov	r0, #0
    switch (clk)
    {
        /* Main PLL outputs */
    case ALT_CLK_MAIN_PLL_C0:
    case ALT_CLK_MPU:
        *div = (ALT_CLKMGR_MAINPLL_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR)) + 1) *
    abbc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    abc0:	e5132fb7 	ldr	r2, [r3, #-4023]	; 0xfffff049
               (ALT_CLKMGR_MISC_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR)) + 1);
    abc4:	e5133f1f 	ldr	r3, [r3, #-3871]	; 0xfffff0e1
    abc8:	eaffff8b 	b	a9fc <alt_clk_divider_get+0x2ec>

0000abcc <alt_clk_divider_set>:
    uint32_t            wrval = UINT32_MAX;              /* value to be written */
    bool                restore_0 = false;
    bool                restore_1 = false;
    bool                restore_2 = false;

    switch (clk)
    abcc:	e240000d 	sub	r0, r0, #13
//
// See pages 38, 44, 45, and 46 of the HPS-Clocking NPP for a map of the
// HPS clocking architecture and hierarchy of connections.
*/
ALT_STATUS_CODE alt_clk_divider_set(ALT_CLK_t clk, uint32_t div)
{
    abd0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    abd4:	e1a04001 	mov	r4, r1
    abd8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    uint32_t            wrval = UINT32_MAX;              /* value to be written */
    bool                restore_0 = false;
    bool                restore_1 = false;
    bool                restore_2 = false;

    switch (clk)
    abdc:	e3500033 	cmp	r0, #51	; 0x33
    abe0:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    abe4:	ea000033 	b	acb8 <alt_clk_divider_set+0xec>
    abe8:	0000c118 	.word	0x0000c118
    abec:	0000bed8 	.word	0x0000bed8
    abf0:	0000b6fc 	.word	0x0000b6fc
    abf4:	0000b614 	.word	0x0000b614
    abf8:	0000b444 	.word	0x0000b444
    abfc:	0000b334 	.word	0x0000b334
    ac00:	0000c118 	.word	0x0000c118
    ac04:	0000acb8 	.word	0x0000acb8
    ac08:	0000acb8 	.word	0x0000acb8
    ac0c:	0000bed8 	.word	0x0000bed8
    ac10:	0000b5a0 	.word	0x0000b5a0
    ac14:	0000b2f0 	.word	0x0000b2f0
    ac18:	0000acb8 	.word	0x0000acb8
    ac1c:	0000c2e4 	.word	0x0000c2e4
    ac20:	0000c1e8 	.word	0x0000c1e8
    ac24:	0000b6fc 	.word	0x0000b6fc
    ac28:	0000be5c 	.word	0x0000be5c
    ac2c:	0000bdd0 	.word	0x0000bdd0
    ac30:	0000acb8 	.word	0x0000acb8
    ac34:	0000c274 	.word	0x0000c274
    ac38:	0000c050 	.word	0x0000c050
    ac3c:	0000b444 	.word	0x0000b444
    ac40:	0000b334 	.word	0x0000b334
    ac44:	0000b334 	.word	0x0000b334
    ac48:	0000b15c 	.word	0x0000b15c
    ac4c:	0000b080 	.word	0x0000b080
    ac50:	0000bb80 	.word	0x0000bb80
    ac54:	0000b9cc 	.word	0x0000b9cc
    ac58:	0000bc58 	.word	0x0000bc58
    ac5c:	0000b7cc 	.word	0x0000b7cc
    ac60:	0000b940 	.word	0x0000b940
    ac64:	0000b8b4 	.word	0x0000b8b4
    ac68:	0000acb8 	.word	0x0000acb8
    ac6c:	0000acb8 	.word	0x0000acb8
    ac70:	0000acb8 	.word	0x0000acb8
    ac74:	0000acb8 	.word	0x0000acb8
    ac78:	0000b15c 	.word	0x0000b15c
    ac7c:	0000b080 	.word	0x0000b080
    ac80:	0000b264 	.word	0x0000b264
    ac84:	0000b234 	.word	0x0000b234
    ac88:	0000af2c 	.word	0x0000af2c
    ac8c:	0000b7cc 	.word	0x0000b7cc
    ac90:	0000ae64 	.word	0x0000ae64
    ac94:	0000afac 	.word	0x0000afac
    ac98:	0000ad9c 	.word	0x0000ad9c
    ac9c:	0000acb8 	.word	0x0000acb8
    aca0:	0000acb8 	.word	0x0000acb8
    aca4:	0000acc4 	.word	0x0000acc4
    aca8:	0000ae64 	.word	0x0000ae64
    acac:	0000afac 	.word	0x0000afac
    acb0:	0000ad9c 	.word	0x0000ad9c
    acb4:	0000acc4 	.word	0x0000acc4
// See pages 38, 44, 45, and 46 of the HPS-Clocking NPP for a map of the
// HPS clocking architecture and hierarchy of connections.
*/
ALT_STATUS_CODE alt_clk_divider_set(ALT_CLK_t clk, uint32_t div)
{
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;
    acb8:	e3e00008 	mvn	r0, #8
        ret = ALT_E_BAD_ARG;
        break;
    }

    return ret;
}
    acbc:	e28dd04c 	add	sp, sp, #76	; 0x4c
    acc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        }
        break;

    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        if (   (div <= (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_SET_MSK + 1))
    acc4:	e3510c02 	cmp	r1, #512	; 0x200
    acc8:	8a000163 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    accc:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    acd0:	e3a03000 	mov	r3, #0
    acd4:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    acd8:	0a00015f 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C2;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C5;
    acdc:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    ace0:	e3a0000b 	mov	r0, #11
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C2;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C5;
    ace4:	e3403002 	movt	r3, #2
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    ace8:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C2;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C5;
    acec:	e59350dc 	ldr	r5, [r3, #220]	; 0xdc
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
    acf0:	e5936000 	ldr	r6, [r3]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    acf4:	ebfffda4 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    acf8:	e3500000 	cmp	r0, #0
    acfc:	1a0005c2 	bne	c40c <alt_clk_divider_set+0x1840>
    {
        numer = numer / div;
    ad00:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    ad04:	e1a01004 	mov	r1, r4
    ad08:	eb00370b 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    ad0c:	e1550000 	cmp	r5, r0
    ad10:	3a000151 	bcc	b25c <alt_clk_divider_set+0x690>
    ad14:	e1560000 	cmp	r6, r0
    ad18:	8a00014f 	bhi	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_H2F_USER2:
        if (   (div <= (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C5, div) == ALT_E_TRUE) )
        {
            wrval = div - 1;
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    ad1c:	e3043fff 	movw	r3, #20479	; 0x4fff
    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        if (   (div <= (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C5, div) == ALT_E_TRUE) )
        {
            wrval = div - 1;
    ad20:	e2444001 	sub	r4, r4, #1
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    ad24:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ad28:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    ad2c:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK)
    ad30:	e59d2004 	ldr	r2, [sp, #4]
    ad34:	e2120008 	ands	r0, r2, #8
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_CLR_MSK);
    ad38:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    ad3c:	13a00001 	movne	r0, #1
            wrval = div - 1;
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_S2FUSER2CLK_CLR_MSK);
    ad40:	13c22008 	bicne	r2, r2, #8
    ad44:	15032f27 	strne	r2, [r3, #-3879]	; 0xfffff0d9
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    ad48:	e3043fff 	movw	r3, #20479	; 0x4fff
    ad4c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ad50:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    ad54:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    ad58:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    ad5c:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    ad60:	e5112f23 	ldr	r2, [r1, #-3875]	; 0xfffff0dd
    ad64:	e3043fff 	movw	r3, #20479	; 0x4fff
    ad68:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ad6c:	e58d203c 	str	r2, [sp, #60]	; 0x3c
    } while (!(temp & msk));
    ad70:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    ad74:	e3120020 	tst	r2, #32
    ad78:	0afffff8 	beq	ad60 <alt_clk_divider_set+0x194>

    alt_write_word(cntraddr, val);
    ad7c:	e5034f2b 	str	r4, [r3, #-3883]	; 0xfffff0d5
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C5,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
    ad80:	e3500000 	cmp	r0, #0
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    ad84:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    ad88:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
    ad8c:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C5,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
    ad90:	1a0000b6 	bne	b070 <alt_clk_divider_set+0x4a4>
                /* wait a bit before reenabling the L4MP and L4SP clocks */
                if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1); }
#else
                alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR, wrval);
#endif
                ret = ALT_E_SUCCESS;
    ad94:	e3a00000 	mov	r0, #0
    ad98:	eaffffc7 	b	acbc <alt_clk_divider_set+0xf0>
        }
        break;

    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_DDR_DQ:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_SET_MSK + 1))
    ad9c:	e3510c02 	cmp	r1, #512	; 0x200
    ada0:	8a00012d 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    ada4:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    ada8:	e3a03000 	mov	r3, #0
    adac:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    adb0:	0a000129 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C1;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C2;
    adb4:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    adb8:	e3a0000b 	mov	r0, #11
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C1;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C2;
    adbc:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    adc0:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C1;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C2;
    adc4:	e59350d8 	ldr	r5, [r3, #216]	; 0xd8
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    adc8:	ebfffd6f 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    adcc:	e3500000 	cmp	r0, #0
    add0:	1a00057b 	bne	c3c4 <alt_clk_divider_set+0x17f8>
    {
        numer = numer / div;
    add4:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    add8:	e1a01004 	mov	r1, r4
    addc:	eb0036d6 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    ade0:	e1550000 	cmp	r5, r0
    ade4:	3a00011c 	bcc	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_DDR_DQ:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C2, div) == ALT_E_TRUE) )
        {
            wrval = div - 1;
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    ade8:	e3043fff 	movw	r3, #20479	; 0x4fff
    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_DDR_DQ:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C2, div) == ALT_E_TRUE) )
        {
            wrval = div - 1;
    adec:	e2444001 	sub	r4, r4, #1
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    adf0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    adf4:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    adf8:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK)
    adfc:	e59d2004 	ldr	r2, [sp, #4]
    ae00:	e2120004 	ands	r0, r2, #4
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_CLR_MSK);
    ae04:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    ae08:	13a00001 	movne	r0, #1
            wrval = div - 1;
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDRDQCLK_CLR_MSK);
    ae0c:	13c22004 	bicne	r2, r2, #4
    ae10:	15032f27 	strne	r2, [r3, #-3879]	; 0xfffff0d9
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    ae14:	e3043fff 	movw	r3, #20479	; 0x4fff
    ae18:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ae1c:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    ae20:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    ae24:	e3822302 	orr	r2, r2, #134217728	; 0x8000000
    ae28:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    ae2c:	e5112f23 	ldr	r2, [r1, #-3875]	; 0xfffff0dd
    ae30:	e3043fff 	movw	r3, #20479	; 0x4fff
    ae34:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ae38:	e58d2038 	str	r2, [sp, #56]	; 0x38
    } while (!(temp & msk));
    ae3c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ae40:	e3120004 	tst	r2, #4
    ae44:	0afffff8 	beq	ae2c <alt_clk_divider_set+0x260>

    alt_write_word(cntraddr, val);
    ae48:	e5034f2f 	str	r4, [r3, #-3887]	; 0xfffff0d1
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C2,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
    ae4c:	e3500000 	cmp	r0, #0
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    ae50:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    ae54:	e3c22302 	bic	r2, r2, #134217728	; 0x8000000
    ae58:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C2,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
    ae5c:	0affffcc 	beq	ad94 <alt_clk_divider_set+0x1c8>
    ae60:	ea000082 	b	b070 <alt_clk_divider_set+0x4a4>
        break;

        /* SDRAM PLL outputs */
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_DDR_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET_MSK + 1))
    ae64:	e3510c02 	cmp	r1, #512	; 0x200
    ae68:	8a0000fb 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    ae6c:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    ae70:	e3a03000 	mov	r3, #0
    ae74:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    ae78:	0a0000f7 	beq	b25c <alt_clk_divider_set+0x690>
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;

    /* Counters of the SDRAM PLL */
    case ALT_CLK_SDRAM_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C0;
    ae7c:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    ae80:	e3a0000b 	mov	r0, #11
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;

    /* Counters of the SDRAM PLL */
    case ALT_CLK_SDRAM_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C0;
    ae84:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    ae88:	e28d1044 	add	r1, sp, #68	; 0x44
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;

    /* Counters of the SDRAM PLL */
    case ALT_CLK_SDRAM_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C0;
    ae8c:	e59350d0 	ldr	r5, [r3, #208]	; 0xd0
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    ae90:	ebfffd3d 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    ae94:	e3500000 	cmp	r0, #0
    ae98:	1a000546 	bne	c3b8 <alt_clk_divider_set+0x17ec>
    {
        numer = numer / div;
    ae9c:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    aea0:	e1a01004 	mov	r1, r4
    aea4:	eb0036a4 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    aea8:	e1550000 	cmp	r5, r0
    aeac:	3a0000ea 	bcc	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_DDR_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C0, div) == ALT_E_TRUE) )
        {
            wrval = div - 1;
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    aeb0:	e3043fff 	movw	r3, #20479	; 0x4fff
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_DDR_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C0, div) == ALT_E_TRUE) )
        {
            wrval = div - 1;
    aeb4:	e2444001 	sub	r4, r4, #1
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    aeb8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aebc:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    aec0:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK)
    aec4:	e59d2004 	ldr	r2, [sp, #4]
    aec8:	e2120001 	ands	r0, r2, #1
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_CLR_MSK);
    aecc:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    aed0:	13a00001 	movne	r0, #1
            wrval = div - 1;
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDRDQSCLK_CLR_MSK);
    aed4:	13c22001 	bicne	r2, r2, #1
    aed8:	15032f27 	strne	r2, [r3, #-3879]	; 0xfffff0d9
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    aedc:	e3043fff 	movw	r3, #20479	; 0x4fff
    aee0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    aee4:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    aee8:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    aeec:	e3822001 	orr	r2, r2, #1
    aef0:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    aef4:	e5112f23 	ldr	r2, [r1, #-3875]	; 0xfffff0dd
    aef8:	e3043fff 	movw	r3, #20479	; 0x4fff
    aefc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    af00:	e58d2030 	str	r2, [sp, #48]	; 0x30
    } while (!(temp & msk));
    af04:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    af08:	e3120001 	tst	r2, #1
    af0c:	0afffff8 	beq	aef4 <alt_clk_divider_set+0x328>

    alt_write_word(cntraddr, val);
    af10:	e5034f37 	str	r4, [r3, #-3895]	; 0xfffff0c9
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C0,
                                     ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_LSB);
            if (restore_0)
    af14:	e3500000 	cmp	r0, #0
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    af18:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    af1c:	e3c22001 	bic	r2, r2, #1
    af20:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C0,
                                     ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_LSB);
            if (restore_0)
    af24:	0affff9a 	beq	ad94 <alt_clk_divider_set+0x1c8>
    af28:	ea000050 	b	b070 <alt_clk_divider_set+0x4a4>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_GPIO_DB:           /* GPIO debounce clock */
        if (div <= ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK)
    af2c:	e3510401 	cmp	r1, #16777216	; 0x1000000
    af30:	2a0000c9 	bcs	b25c <alt_clk_divider_set+0x690>
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    af34:	e3043fff 	movw	r3, #20479	; 0x4fff
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_CLR_MSK);
                restore_0 = true;
            }
            wrval = div - 1;
    af38:	e2414001 	sub	r4, r1, #1
        break;

    case ALT_CLK_GPIO_DB:           /* GPIO debounce clock */
        if (div <= ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK)
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    af3c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_CLR_MSK);
                restore_0 = true;
            }
            wrval = div - 1;
            alt_replbits_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK,
    af40:	e3c444ff 	bic	r4, r4, #-16777216	; 0xff000000
        break;

    case ALT_CLK_GPIO_DB:           /* GPIO debounce clock */
        if (div <= ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK)
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    af44:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_CLR_MSK);
                restore_0 = true;
            }
            wrval = div - 1;
            alt_replbits_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK,
    af48:	e3a0001e 	mov	r0, #30
        break;

    case ALT_CLK_GPIO_DB:           /* GPIO debounce clock */
        if (div <= ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK)
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    af4c:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK)
    af50:	e59d2004 	ldr	r2, [sp, #4]
    af54:	e212c040 	ands	r12, r2, #64	; 0x40
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_CLR_MSK);
    af58:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    af5c:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_CLR_MSK);
    af60:	13c22040 	bicne	r2, r2, #64	; 0x40
    af64:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
                restore_0 = true;
            }
            wrval = div - 1;
            alt_replbits_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK,
    af68:	e3043fff 	movw	r3, #20479	; 0x4fff
    af6c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    af70:	e5131f57 	ldr	r1, [r3, #-3927]	; 0xfffff0a9

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    af74:	e1a02003 	mov	r2, r3
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_GPIOCLK_CLR_MSK);
                restore_0 = true;
            }
            wrval = div - 1;
            alt_replbits_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK,
    af78:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
    af7c:	e1841001 	orr	r1, r4, r1
    af80:	e5031f57 	str	r1, [r3, #-3927]	; 0xfffff0a9
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    af84:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    af88:	e3043fff 	movw	r3, #20479	; 0x4fff
    af8c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    af90:	e5121f57 	ldr	r1, [r2, #-3927]	; 0xfffff0a9
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    af94:	1afffffa 	bne	af84 <alt_clk_divider_set+0x3b8>
            }
            wrval = div - 1;
            alt_replbits_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_SET_MSK,
                              wrval << ALT_CLKMGR_PERPLL_GPIODIV_GPIODBCLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
            if (restore_0)
    af98:	e35c0000 	cmp	r12, #0
    af9c:	0affff7c 	beq	ad94 <alt_clk_divider_set+0x1c8>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
    afa0:	e59d2004 	ldr	r2, [sp, #4]
    afa4:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
    afa8:	eaffff43 	b	acbc <alt_clk_divider_set+0xf0>
        }
        break;

    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_DDR_2X_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_SET_MSK + 1))
    afac:	e3510c02 	cmp	r1, #512	; 0x200
    afb0:	8a0000a9 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    afb4:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    afb8:	e3a03000 	mov	r3, #0
    afbc:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    afc0:	0a0000a5 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C0;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C1;
    afc4:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    afc8:	e3a0000b 	mov	r0, #11
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C0;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C1;
    afcc:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    afd0:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C0;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
        break;
    case ALT_CLK_SDRAM_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.SDRAMPLL_C1;
    afd4:	e59350d4 	ldr	r5, [r3, #212]	; 0xd4
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &numer);
    afd8:	ebfffceb 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    afdc:	e3500000 	cmp	r0, #0
    afe0:	1a000503 	bne	c3f4 <alt_clk_divider_set+0x1828>
    {
        numer = numer / div;
    afe4:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    afe8:	e1a01004 	mov	r1, r4
    afec:	eb003652 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    aff0:	e1550000 	cmp	r5, r0
    aff4:	3a000098 	bcc	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_DDR_2X_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C1, div) == ALT_E_TRUE) )
        {
            wrval = div - 1;
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    aff8:	e3043fff 	movw	r3, #20479	; 0x4fff
    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_DDR_2X_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C1, div) == ALT_E_TRUE) )
        {
            wrval = div - 1;
    affc:	e2444001 	sub	r4, r4, #1
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    b000:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b004:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    b008:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK)
    b00c:	e59d2004 	ldr	r2, [sp, #4]
    b010:	e2120002 	ands	r0, r2, #2
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_CLR_MSK);
    b014:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    b018:	13a00001 	movne	r0, #1
            wrval = div - 1;
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp & ALT_CLKMGR_SDRPLL_EN_DDR2XDQSCLK_CLR_MSK);
    b01c:	13c22002 	bicne	r2, r2, #2
    b020:	15032f27 	strne	r2, [r3, #-3879]	; 0xfffff0d9
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b024:	e3043fff 	movw	r3, #20479	; 0x4fff
    b028:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b02c:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    b030:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b034:	e3822301 	orr	r2, r2, #67108864	; 0x4000000
    b038:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
    do
    {
        temp = alt_read_word(stataddr);
    b03c:	e5112f23 	ldr	r2, [r1, #-3875]	; 0xfffff0dd
    b040:	e3043fff 	movw	r3, #20479	; 0x4fff
    b044:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b048:	e58d2034 	str	r2, [sp, #52]	; 0x34
    } while (!(temp & msk));
    b04c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    b050:	e3120002 	tst	r2, #2
    b054:	0afffff8 	beq	b03c <alt_clk_divider_set+0x470>

    alt_write_word(cntraddr, val);
    b058:	e5034f33 	str	r4, [r3, #-3891]	; 0xfffff0cd
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C1,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
    b05c:	e3500000 	cmp	r0, #0
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b060:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    b064:	e3c22301 	bic	r2, r2, #67108864	; 0x4000000
    b068:	e5032f3f 	str	r2, [r3, #-3903]	; 0xfffff0c1
                                     ALT_CLKMGR_SDRPLL_STAT_ADDR,
                                     ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR,
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C1,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
    b06c:	0affff48 	beq	ad94 <alt_clk_divider_set+0x1c8>
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C5,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
            {
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp);         /* which has the enable bit set */
    b070:	e59d2004 	ldr	r2, [sp, #4]
            }
            ret = ALT_E_SUCCESS;
    b074:	e3a00000 	mov	r0, #0
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C5,
                                     ALT_CLKMGR_SDRPLL_VCO_OUTRST_LSB);
            if (restore_0)
            {
                alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, temp);         /* which has the enable bit set */
    b078:	e5032f27 	str	r2, [r3, #-3879]	; 0xfffff0d9
    b07c:	eaffff0e 	b	acbc <alt_clk_divider_set+0xf0>
        }
        break;

    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_EMAC1:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_SET_MSK + 1))
    b080:	e3510c02 	cmp	r1, #512	; 0x200
    b084:	8a000074 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b088:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    b08c:	e3a03000 	mov	r3, #0
    b090:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b094:	0a000070 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C0;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C1;
    b098:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b09c:	e3a0000a 	mov	r0, #10
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C0;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C1;
    b0a0:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b0a4:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C0;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C1;
    b0a8:	e59350bc 	ldr	r5, [r3, #188]	; 0xbc
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b0ac:	ebfffcb6 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    b0b0:	e3500000 	cmp	r0, #0
    b0b4:	1a0004b0 	bne	c37c <alt_clk_divider_set+0x17b0>
    {
        numer = numer / div;
    b0b8:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    b0bc:	e1a01004 	mov	r1, r4
    b0c0:	eb00361d 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    b0c4:	e1550000 	cmp	r5, r0
    b0c8:	3a000063 	bcc	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_EMAC1:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C1, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b0cc:	e3043fff 	movw	r3, #20479	; 0x4fff
            if (restore_0)
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_EMAC1CLK_CLR_MSK);
            }
            /* now write the new divisor ratio */
            wrval = div - 1;
    b0d0:	e2444001 	sub	r4, r4, #1
    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_EMAC1:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C1, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b0d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b0d8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b0dc:	e58d2004 	str	r2, [sp, #4]
            restore_0 = temp & ALT_CLKMGR_PERPLL_EN_EMAC1CLK_SET_MSK;
    b0e0:	e59dc004 	ldr	r12, [sp, #4]
    b0e4:	e7e0c0dc 	ubfx	r12, r12, #1, #1

            if (restore_0)
    b0e8:	e35c0000 	cmp	r12, #0
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_EMAC1CLK_CLR_MSK);
    b0ec:	159d2004 	ldrne	r2, [sp, #4]
    b0f0:	13c22002 	bicne	r2, r2, #2
    b0f4:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b0f8:	e3043fff 	movw	r3, #20479	; 0x4fff
    b0fc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b100:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    b104:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b108:	e3822301 	orr	r2, r2, #67108864	; 0x4000000
    b10c:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    b110:	e5112f4f 	ldr	r2, [r1, #-3919]	; 0xfffff0b1
    b114:	e3043fff 	movw	r3, #20479	; 0x4fff
    b118:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b11c:	e58d201c 	str	r2, [sp, #28]
    } while (!(temp & msk));
    b120:	e59d201c 	ldr	r2, [sp, #28]
    b124:	e3120002 	tst	r2, #2
    b128:	0afffff8 	beq	b110 <alt_clk_divider_set+0x544>

    alt_write_word(cntraddr, val);
    b12c:	e5034f73 	str	r4, [r3, #-3955]	; 0xfffff08d
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b130:	e3a0001e 	mov	r0, #30
    b134:	e5131f7f 	ldr	r1, [r3, #-3967]	; 0xfffff081

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b138:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b13c:	e3c11301 	bic	r1, r1, #67108864	; 0x4000000
    b140:	e5031f7f 	str	r1, [r3, #-3967]	; 0xfffff081
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b144:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b148:	e3043fff 	movw	r3, #20479	; 0x4fff
    b14c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b150:	e5121f73 	ldr	r1, [r2, #-3955]	; 0xfffff08d
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b154:	1afffffa 	bne	b144 <alt_clk_divider_set+0x578>
    b158:	eaffff8e 	b	af98 <alt_clk_divider_set+0x3cc>
        break;

        /* Peripheral PLL outputs */
    case ALT_CLK_PERIPHERAL_PLL_C0:
    case ALT_CLK_EMAC0:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_SET_MSK + 1))
    b15c:	e3510c02 	cmp	r1, #512	; 0x200
    b160:	8a00003d 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b164:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    b168:	e3a03000 	mov	r3, #0
    b16c:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b170:	0a000039 	beq	b25c <alt_clk_divider_set+0x690>
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;

    /* Counters of the Peripheral PLL */
    case ALT_CLK_PERIPHERAL_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C0;
    b174:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b178:	e3a0000a 	mov	r0, #10
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;

    /* Counters of the Peripheral PLL */
    case ALT_CLK_PERIPHERAL_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C0;
    b17c:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b180:	e28d1044 	add	r1, sp, #68	; 0x44
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;

    /* Counters of the Peripheral PLL */
    case ALT_CLK_PERIPHERAL_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C0;
    b184:	e59350b8 	ldr	r5, [r3, #184]	; 0xb8
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b188:	ebfffc7f 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    b18c:	e3500000 	cmp	r0, #0
    b190:	1a000482 	bne	c3a0 <alt_clk_divider_set+0x17d4>
    {
        numer = numer / div;
    b194:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    b198:	e1a01004 	mov	r1, r4
    b19c:	eb0035e6 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    b1a0:	e1550000 	cmp	r5, r0
    b1a4:	3a00002c 	bcc	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_PERIPHERAL_PLL_C0:
    case ALT_CLK_EMAC0:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C0, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b1a8:	e3043fff 	movw	r3, #20479	; 0x4fff
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_EMAC0CLK_CLR_MSK);
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
    b1ac:	e2444001 	sub	r4, r4, #1
    case ALT_CLK_PERIPHERAL_PLL_C0:
    case ALT_CLK_EMAC0:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C0, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b1b0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b1b4:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b1b8:	e58d2004 	str	r2, [sp, #4]
            restore_0 = temp & ALT_CLKMGR_PERPLL_EN_EMAC0CLK_SET_MSK;
    b1bc:	e59d2004 	ldr	r2, [sp, #4]

            if (restore_0)
    b1c0:	e212c001 	ands	r12, r2, #1
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_EMAC0CLK_CLR_MSK);
    b1c4:	159d2004 	ldrne	r2, [sp, #4]
    b1c8:	13c22001 	bicne	r2, r2, #1
    b1cc:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b1d0:	e3043fff 	movw	r3, #20479	; 0x4fff
    b1d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b1d8:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    b1dc:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b1e0:	e3822402 	orr	r2, r2, #33554432	; 0x2000000
    b1e4:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    b1e8:	e5112f4f 	ldr	r2, [r1, #-3919]	; 0xfffff0b1
    b1ec:	e3043fff 	movw	r3, #20479	; 0x4fff
    b1f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b1f4:	e58d2018 	str	r2, [sp, #24]
    } while (!(temp & msk));
    b1f8:	e59d2018 	ldr	r2, [sp, #24]
    b1fc:	e3120001 	tst	r2, #1
    b200:	0afffff8 	beq	b1e8 <alt_clk_divider_set+0x61c>

    alt_write_word(cntraddr, val);
    b204:	e5034f77 	str	r4, [r3, #-3959]	; 0xfffff089
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b208:	e3a0001e 	mov	r0, #30
    b20c:	e5131f7f 	ldr	r1, [r3, #-3967]	; 0xfffff081

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b210:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b214:	e3c11402 	bic	r1, r1, #33554432	; 0x2000000
    b218:	e5031f7f 	str	r1, [r3, #-3967]	; 0xfffff081
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b21c:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b220:	e3043fff 	movw	r3, #20479	; 0x4fff
    b224:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b228:	e5121f77 	ldr	r1, [r2, #-3959]	; 0xfffff089
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b22c:	1afffffa 	bne	b21c <alt_clk_divider_set+0x650>
    b230:	eaffff58 	b	af98 <alt_clk_divider_set+0x3cc>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_CAN1:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV1; }
    b234:	e3510001 	cmp	r1, #1
    b238:	0a000483 	beq	c44c <alt_clk_divider_set+0x1880>
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV2; }
    b23c:	e3510002 	cmp	r1, #2
    b240:	0a000507 	beq	c664 <alt_clk_divider_set+0x1a98>
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV4; }
    b244:	e3510004 	cmp	r1, #4
    b248:	0a00050f 	beq	c68c <alt_clk_divider_set+0x1ac0>
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV8; }
    b24c:	e3510008 	cmp	r1, #8
    b250:	0a000527 	beq	c6f4 <alt_clk_divider_set+0x1b28>
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV16; }
    b254:	e3510010 	cmp	r1, #16
    b258:	0a00052f 	beq	c71c <alt_clk_divider_set+0x1b50>
            }
            ret = ALT_E_SUCCESS;
        }
        else
        {
            ret = ALT_E_ARG_RANGE;
    b25c:	e3e00007 	mvn	r0, #7
    b260:	eafffe95 	b	acbc <alt_clk_divider_set+0xf0>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_CAN0:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV1; }
    b264:	e3510001 	cmp	r1, #1
    b268:	0a0004bf 	beq	c56c <alt_clk_divider_set+0x19a0>
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV2; }
    b26c:	e3510002 	cmp	r1, #2
    b270:	0a0004f7 	beq	c654 <alt_clk_divider_set+0x1a88>
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV4; }
    b274:	e3510004 	cmp	r1, #4
    b278:	0a000501 	beq	c684 <alt_clk_divider_set+0x1ab8>
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV8; }
    b27c:	e3510008 	cmp	r1, #8
    b280:	0a000519 	beq	c6ec <alt_clk_divider_set+0x1b20>
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV16; }
    b284:	e3510010 	cmp	r1, #16
    b288:	1afffff3 	bne	b25c <alt_clk_divider_set+0x690>
    b28c:	e3a04c01 	mov	r4, #256	; 0x100

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b290:	e3043fff 	movw	r3, #20479	; 0x4fff
    b294:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b298:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b29c:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK)
    b2a0:	e59d2004 	ldr	r2, [sp, #4]
    b2a4:	e212c010 	ands	r12, r2, #16
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_CAN0CLK_CLR_MSK);
    b2a8:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    b2ac:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_CAN0CLK_CLR_MSK);
    b2b0:	13c22010 	bicne	r2, r2, #16
    b2b4:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_CAN0CLK_SET_MSK,
    b2b8:	e3043fff 	movw	r3, #20479	; 0x4fff
    b2bc:	e3a0001e 	mov	r0, #30
    b2c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b2c4:	e5131f5b 	ldr	r1, [r3, #-3931]	; 0xfffff0a5

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b2c8:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_CAN0CLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_CAN0CLK_SET_MSK,
    b2cc:	e3c11d07 	bic	r1, r1, #448	; 0x1c0
    b2d0:	e1841001 	orr	r1, r4, r1
    b2d4:	e5031f5b 	str	r1, [r3, #-3931]	; 0xfffff0a5
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b2d8:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b2dc:	e3043fff 	movw	r3, #20479	; 0x4fff
    b2e0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b2e4:	e5121f5b 	ldr	r1, [r2, #-3931]	; 0xfffff0a5
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b2e8:	1afffffa 	bne	b2d8 <alt_clk_divider_set+0x70c>
    b2ec:	eaffff29 	b	af98 <alt_clk_divider_set+0x3cc>
        break;

    case ALT_CLK_L3_SP:
        /* note that the L3MP divider is upstream from the L3SP divider
        // and any changes to the former will affect the output of both */
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV1; }
    b2f0:	e3510001 	cmp	r1, #1
    b2f4:	0a000490 	beq	c53c <alt_clk_divider_set+0x1970>
        else if (div == 2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV2; }
    b2f8:	e3510002 	cmp	r1, #2
    b2fc:	1affffd6 	bne	b25c <alt_clk_divider_set+0x690>
    b300:	e3a0c004 	mov	r12, #4

        if (wrval != UINT32_MAX)
        {
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_SET_MSK,
    b304:	e3041fff 	movw	r1, #20479	; 0x4fff
    b308:	e3a0301e 	mov	r3, #30
    b30c:	e34f1fd0 	movt	r1, #65488	; 0xffd0
    b310:	e5110f9b 	ldr	r0, [r1, #-3995]	; 0xfffff065

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b314:	e1a02001 	mov	r2, r1
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV1; }
        else if (div == 2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV2; }

        if (wrval != UINT32_MAX)
        {
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_SET_MSK,
    b318:	e3c0000c 	bic	r0, r0, #12
    b31c:	e18c0000 	orr	r0, r12, r0
    b320:	e5010f9b 	str	r0, [r1, #-3995]	; 0xfffff065
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b324:	e2533001 	subs	r3, r3, #1
    {
        (void) alt_read_word(reg);
    b328:	e5121f9b 	ldr	r1, [r2, #-3995]	; 0xfffff065
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b32c:	1afffffc 	bne	b324 <alt_clk_divider_set+0x758>
    b330:	eafffe97 	b	ad94 <alt_clk_divider_set+0x1c8>
        break;

    case ALT_CLK_MAIN_PLL_C5:
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        if (   (div <= (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_SET_MSK + 1))
    b334:	e3510c02 	cmp	r1, #512	; 0x200
    b338:	8affffc7 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b33c:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    b340:	e3a03000 	mov	r3, #0
    b344:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b348:	0affffc3 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C4;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C5;
    b34c:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b350:	e3a00009 	mov	r0, #9
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C4;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C5;
    b354:	e3403002 	movt	r3, #2
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b358:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C4;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C5;
    b35c:	e59350b4 	ldr	r5, [r3, #180]	; 0xb4
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
    b360:	e5936000 	ldr	r6, [r3]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b364:	ebfffc08 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    b368:	e3500000 	cmp	r0, #0
    b36c:	1a000423 	bne	c400 <alt_clk_divider_set+0x1834>
    {
        numer = numer / div;
    b370:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    b374:	e1a01004 	mov	r1, r4
    b378:	eb00356f 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    b37c:	e1550000 	cmp	r5, r0
    b380:	3affffb5 	bcc	b25c <alt_clk_divider_set+0x690>
    b384:	e1560000 	cmp	r6, r0
    b388:	8affffb3 	bhi	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        if (   (div <= (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C5, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    b38c:	e3043fff 	movw	r3, #20479	; 0x4fff
    b390:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b394:	e5133f9f 	ldr	r3, [r3, #-3999]	; 0xfffff061
    b398:	e58d3004 	str	r3, [sp, #4]
            restore_0 = ((temp & ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK) ||
    b39c:	e59d3004 	ldr	r3, [sp, #4]
    b3a0:	e3130c01 	tst	r3, #256	; 0x100
    b3a4:	1a000002 	bne	b3b4 <alt_clk_divider_set+0x7e8>
                         (temp & ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK));
    b3a8:	e59d3004 	ldr	r3, [sp, #4]
    case ALT_CLK_H2F_USER0:
        if (   (div <= (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C5, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            restore_0 = ((temp & ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK) ||
    b3ac:	e213cc02 	ands	r12, r3, #512	; 0x200
    b3b0:	0a000005 	beq	b3cc <alt_clk_divider_set+0x800>
                         (temp & ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK));
            if (restore_0)
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & (ALT_CLKMGR_MAINPLL_EN_CFGCLK_CLR_MSK &
    b3b4:	e59d2004 	ldr	r2, [sp, #4]
    b3b8:	e3043fff 	movw	r3, #20479	; 0x4fff
    case ALT_CLK_H2F_USER0:
        if (   (div <= (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C5, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            restore_0 = ((temp & ALT_CLKMGR_MAINPLL_EN_CFGCLK_SET_MSK) ||
    b3bc:	e3a0c001 	mov	r12, #1
                         (temp & ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_SET_MSK));
            if (restore_0)
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & (ALT_CLKMGR_MAINPLL_EN_CFGCLK_CLR_MSK &
    b3c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b3c4:	e3c22c03 	bic	r2, r2, #768	; 0x300
    b3c8:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b3cc:	e3043fff 	movw	r3, #20479	; 0x4fff
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & (ALT_CLKMGR_MAINPLL_EN_CFGCLK_CLR_MSK &
                                                                   ALT_CLKMGR_MAINPLL_EN_S2FUSER0CLK_CLR_MSK)); /* clear both */
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
    b3d0:	e2444001 	sub	r4, r4, #1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b3d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b3d8:	e5132fbf 	ldr	r2, [r3, #-4031]	; 0xfffff041
    do
    {
        temp = alt_read_word(stataddr);
    b3dc:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b3e0:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    b3e4:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
    do
    {
        temp = alt_read_word(stataddr);
    b3e8:	e5112f8b 	ldr	r2, [r1, #-3979]	; 0xfffff075
    b3ec:	e3043fff 	movw	r3, #20479	; 0x4fff
    b3f0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b3f4:	e58d2014 	str	r2, [sp, #20]
    } while (!(temp & msk));
    b3f8:	e59d2014 	ldr	r2, [sp, #20]
    b3fc:	e3120020 	tst	r2, #32
    b400:	0afffff8 	beq	b3e8 <alt_clk_divider_set+0x81c>

    alt_write_word(cntraddr, val);
    b404:	e5034fa3 	str	r4, [r3, #-4003]	; 0xfffff05d
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b408:	e3a0001e 	mov	r0, #30
    b40c:	e5131fbf 	ldr	r1, [r3, #-4031]	; 0xfffff041

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b410:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b414:	e3c11101 	bic	r1, r1, #1073741824	; 0x40000000
    b418:	e5031fbf 	str	r1, [r3, #-4031]	; 0xfffff041
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b41c:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b420:	e3043fff 	movw	r3, #20479	; 0x4fff
    b424:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b428:	e5121fa3 	ldr	r1, [r2, #-4003]	; 0xfffff05d
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b42c:	1afffffa 	bne	b41c <alt_clk_divider_set+0x850>
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_SET_MSK,
                              wrval << ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
            if (restore_0)
    b430:	e35c0000 	cmp	r12, #0
    b434:	0afffe56 	beq	ad94 <alt_clk_divider_set+0x1c8>
            {
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
    b438:	e59d2004 	ldr	r2, [sp, #4]
    b43c:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
    b440:	eafffe1d 	b	acbc <alt_clk_divider_set+0xf0>
        }
        break;

    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_NAND_SDMMC:
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_SET_MSK + 1))
    b444:	e3510c02 	cmp	r1, #512	; 0x200
    b448:	8affff83 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b44c:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    b450:	e3a03000 	mov	r3, #0
    b454:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b458:	0affff7f 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C3;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C4:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C4;
    b45c:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b460:	e3a00009 	mov	r0, #9
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C3;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C4:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C4;
    b464:	e3403002 	movt	r3, #2
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b468:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C3;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C4:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C4;
    b46c:	e59350b0 	ldr	r5, [r3, #176]	; 0xb0
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
    b470:	e5936000 	ldr	r6, [r3]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b474:	ebfffbc4 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    b478:	e3500000 	cmp	r0, #0
    b47c:	1a0003c4 	bne	c394 <alt_clk_divider_set+0x17c8>
    {
        numer = numer / div;
    b480:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    b484:	e1a01004 	mov	r1, r4
    b488:	eb00352b 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    b48c:	e1550000 	cmp	r5, r0
    b490:	3affff71 	bcc	b25c <alt_clk_divider_set+0x690>
    b494:	e1560000 	cmp	r6, r0
    b498:	8affff6f 	bhi	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_NAND_SDMMC:
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C4, div) == ALT_E_TRUE) )
        {
            temp  = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    b49c:	e3043fff 	movw	r3, #20479	; 0x4fff
    b4a0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b4a4:	e5132f53 	ldr	r2, [r3, #-3923]	; 0xfffff0ad
    b4a8:	e58d2004 	str	r2, [sp, #4]
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b4ac:	e5133f5f 	ldr	r3, [r3, #-3935]	; 0xfffff0a1
    b4b0:	e58d3008 	str	r3, [sp, #8]

            /* do we need to gate off the SDMMC clock ? */
            if (ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(temp) == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
    b4b4:	e59d3004 	ldr	r3, [sp, #4]
    b4b8:	e2033003 	and	r3, r3, #3
    b4bc:	e3530001 	cmp	r3, #1
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK) { restore_0 = true; }
    b4c0:	059d1008 	ldreq	r1, [sp, #8]
ALT_STATUS_CODE alt_clk_divider_set(ALT_CLK_t clk, uint32_t div)
{
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;
    volatile uint32_t   temp, temp1;
    uint32_t            wrval = UINT32_MAX;              /* value to be written */
    bool                restore_0 = false;
    b4c4:	13a01000 	movne	r1, #0
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK) { restore_0 = true; }
            }

            /* do we need to gate off the NAND clock and/or the NANDX clock? */
            if (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
    b4c8:	e59dc004 	ldr	r12, [sp, #4]
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);

            /* do we need to gate off the SDMMC clock ? */
            if (ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(temp) == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK) { restore_0 = true; }
    b4cc:	07e01451 	ubfxeq	r1, r1, #8, #1
            }

            /* do we need to gate off the NAND clock and/or the NANDX clock? */
            if (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
    b4d0:	e7e1c15c 	ubfx	r12, r12, #2, #2
    b4d4:	e35c0001 	cmp	r12, #1
{
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;
    volatile uint32_t   temp, temp1;
    uint32_t            wrval = UINT32_MAX;              /* value to be written */
    bool                restore_0 = false;
    bool                restore_1 = false;
    b4d8:	13a02000 	movne	r2, #0
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK) { restore_0 = true; }
            }

            /* do we need to gate off the NAND clock and/or the NANDX clock? */
            if (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
    b4dc:	0a000426 	beq	c57c <alt_clk_divider_set+0x19b0>
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK) { restore_1 = true; }
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK)  { restore_2 = true; }
            }

            temp = temp1;
    b4e0:	e59d3008 	ldr	r3, [sp, #8]
    b4e4:	e58d3004 	str	r3, [sp, #4]
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
                /* gate nand_clk off at least 8 MPU clock cycles before before nand_x_clk */
            }

            if (restore_0 || restore_1)
    b4e8:	e1925001 	orrs	r5, r2, r1
    b4ec:	01a0c005 	moveq	r12, r5
    b4f0:	1a00048b 	bne	c724 <alt_clk_divider_set+0x1b58>
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b4f4:	e3043fff 	movw	r3, #20479	; 0x4fff
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
                /* gate off sdmmc_clk and/or nand_x_clk */
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
    b4f8:	e2444001 	sub	r4, r4, #1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b4fc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b500:	e5132fbf 	ldr	r2, [r3, #-4031]	; 0xfffff041
    do
    {
        temp = alt_read_word(stataddr);
    b504:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b508:	e3822202 	orr	r2, r2, #536870912	; 0x20000000
    b50c:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
    do
    {
        temp = alt_read_word(stataddr);
    b510:	e5112f8b 	ldr	r2, [r1, #-3979]	; 0xfffff075
    b514:	e3043fff 	movw	r3, #20479	; 0x4fff
    b518:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b51c:	e58d2010 	str	r2, [sp, #16]
    } while (!(temp & msk));
    b520:	e59d2010 	ldr	r2, [sp, #16]
    b524:	e3120010 	tst	r2, #16
    b528:	0afffff8 	beq	b510 <alt_clk_divider_set+0x944>

    alt_write_word(cntraddr, val);
    b52c:	e5034fa7 	str	r4, [r3, #-4007]	; 0xfffff059
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b530:	e3a0001e 	mov	r0, #30
    b534:	e5131fbf 	ldr	r1, [r3, #-4031]	; 0xfffff041

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b538:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b53c:	e3c11202 	bic	r1, r1, #536870912	; 0x20000000
    b540:	e5031fbf 	str	r1, [r3, #-4031]	; 0xfffff041
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b544:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b548:	e3043fff 	movw	r3, #20479	; 0x4fff
    b54c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b550:	e5121fa7 	ldr	r1, [r2, #-4007]	; 0xfffff059
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b554:	1afffffa 	bne	b544 <alt_clk_divider_set+0x978>
                                     wrval,
                                     ALT_CLK_PLL_RST_BIT_C4,
                                     ALT_CLKMGR_MAINPLL_VCO_OUTRST_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);

            if (restore_0 || restore_1)
    b558:	e3550000 	cmp	r5, #0
    b55c:	0afffe0c 	beq	ad94 <alt_clk_divider_set+0x1c8>
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK);
    b560:	e59d2008 	ldr	r2, [sp, #8]
                /* if the NANDX and/or SDMMC clock was gated on (enabled) before, return it to that state */
                if (restore_1 && restore_2)
    b564:	e35c0000 	cmp	r12, #0
                                     ALT_CLKMGR_MAINPLL_VCO_OUTRST_LSB);
            alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);

            if (restore_0 || restore_1)
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK);
    b568:	e3c22b01 	bic	r2, r2, #1024	; 0x400
    b56c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
                /* if the NANDX and/or SDMMC clock was gated on (enabled) before, return it to that state */
                if (restore_1 && restore_2)
    b570:	0afffe07 	beq	ad94 <alt_clk_divider_set+0x1c8>

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b574:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b578:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b57c:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b580:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b584:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b588:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b58c:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b590:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
                /* if the NANDX and/or SDMMC clock was gated on (enabled) before, return it to that state */
                if (restore_1 && restore_2)
                {
                    /* wait at least 8 clock cycles to turn the nand_clk on */
                    alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
                    alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1);
    b594:	e59d2008 	ldr	r2, [sp, #8]
    b598:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
    b59c:	eafffdc6 	b	acbc <alt_clk_divider_set+0xf0>
        }
        break;

        /* Other clock dividers */
    case ALT_CLK_L3_MP:
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_E_DIV1; }
    b5a0:	e3510001 	cmp	r1, #1
    b5a4:	0a0003e8 	beq	c54c <alt_clk_divider_set+0x1980>
        else if (div == 2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_E_DIV2; }
    b5a8:	e3510002 	cmp	r1, #2
    b5ac:	1affff2a 	bne	b25c <alt_clk_divider_set+0x690>
    b5b0:	e3a04001 	mov	r4, #1

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    b5b4:	e3043fff 	movw	r3, #20479	; 0x4fff
    b5b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b5bc:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    b5c0:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK)
    b5c4:	e59d2004 	ldr	r2, [sp, #4]
    b5c8:	e212c002 	ands	r12, r2, #2
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L3MPCLK_CLR_MSK);
    b5cc:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    b5d0:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_MAINPLL_EN_L3MPCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L3MPCLK_CLR_MSK);
    b5d4:	13c22002 	bicne	r2, r2, #2
    b5d8:	15032f9f 	strne	r2, [r3, #-3999]	; 0xfffff061
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_SET_MSK,
    b5dc:	e3043fff 	movw	r3, #20479	; 0x4fff
    b5e0:	e3a0001e 	mov	r0, #30
    b5e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b5e8:	e5131f9b 	ldr	r1, [r3, #-3995]	; 0xfffff065

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b5ec:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L3MPCLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_SET_MSK,
    b5f0:	e3c11003 	bic	r1, r1, #3
    b5f4:	e1841001 	orr	r1, r4, r1
    b5f8:	e5031f9b 	str	r1, [r3, #-3995]	; 0xfffff065
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b5fc:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b600:	e3043fff 	movw	r3, #20479	; 0x4fff
    b604:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b608:	e5121f9f 	ldr	r1, [r2, #-3999]	; 0xfffff061
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b60c:	1afffffa 	bne	b5fc <alt_clk_divider_set+0xa30>
    b610:	eaffff86 	b	b430 <alt_clk_divider_set+0x864>
        break;

    case ALT_CLK_MAIN_PLL_C3:
        /* The rest of the PLL outputs do not have external counters, but
        // their internal counters are programmable rather than fixed */
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_SET_MSK + 1))
    b614:	e3510c02 	cmp	r1, #512	; 0x200
    b618:	8affff0f 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b61c:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    b620:	e3a03000 	mov	r3, #0
    b624:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b628:	0affff0b 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C2;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C3:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C3;
    b62c:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b630:	e3a00009 	mov	r0, #9
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C2;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C3:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C3;
    b634:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b638:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C2;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C3:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C3;
    b63c:	e59350ac 	ldr	r5, [r3, #172]	; 0xac
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b640:	ebfffb51 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    b644:	e3500000 	cmp	r0, #0
    b648:	1a000360 	bne	c3d0 <alt_clk_divider_set+0x1804>
    {
        numer = numer / div;
    b64c:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    b650:	e1a01004 	mov	r1, r4
    b654:	eb0034b8 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    b658:	e1550000 	cmp	r5, r0
    b65c:	3afffefe 	bcc	b25c <alt_clk_divider_set+0x690>
        // their internal counters are programmable rather than fixed */
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C3, div) == ALT_E_TRUE) )
        {
            /* if the main_qspi_clk input is selected for the qspi_clk */
            if (ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR)) ==
    b660:	e3043fff 	movw	r3, #20479	; 0x4fff
    b664:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b668:	e5132f53 	ldr	r2, [r3, #-3923]	; 0xfffff0ad
    b66c:	e7e12252 	ubfx	r2, r2, #4, #2
    b670:	e3520001 	cmp	r2, #1
    b674:	1afffd8f 	bne	acb8 <alt_clk_divider_set+0xec>
                ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
            {
                restore_0 = (temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)) & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
    b678:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
                {
                    alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_QSPICLK_CLR_MSK);
                    /* gate off the QSPI clock */
                }

                wrval = div - 1;
    b67c:	e2444001 	sub	r4, r4, #1
        {
            /* if the main_qspi_clk input is selected for the qspi_clk */
            if (ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR)) ==
                ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
            {
                restore_0 = (temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR)) & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
    b680:	e7e0c5d2 	ubfx	r12, r2, #11, #1
    b684:	e58d2004 	str	r2, [sp, #4]
                if (restore_0)             /* AND if the QSPI clock is currently enabled */
    b688:	e35c0000 	cmp	r12, #0
                {
                    alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_QSPICLK_CLR_MSK);
    b68c:	159d2004 	ldrne	r2, [sp, #4]
    b690:	13c22b02 	bicne	r2, r2, #2048	; 0x800
    b694:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b698:	e3043fff 	movw	r3, #20479	; 0x4fff
    b69c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b6a0:	e5132fbf 	ldr	r2, [r3, #-4031]	; 0xfffff041
    do
    {
        temp = alt_read_word(stataddr);
    b6a4:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b6a8:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
    b6ac:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
    do
    {
        temp = alt_read_word(stataddr);
    b6b0:	e5112f8b 	ldr	r2, [r1, #-3979]	; 0xfffff075
    b6b4:	e3043fff 	movw	r3, #20479	; 0x4fff
    b6b8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b6bc:	e58d200c 	str	r2, [sp, #12]
    } while (!(temp & msk));
    b6c0:	e59d200c 	ldr	r2, [sp, #12]
    b6c4:	e3120008 	tst	r2, #8
    b6c8:	0afffff8 	beq	b6b0 <alt_clk_divider_set+0xae4>

    alt_write_word(cntraddr, val);
    b6cc:	e5034fab 	str	r4, [r3, #-4011]	; 0xfffff055
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b6d0:	e3a0001e 	mov	r0, #30
    b6d4:	e5131fbf 	ldr	r1, [r3, #-4031]	; 0xfffff041

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b6d8:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b6dc:	e3c11201 	bic	r1, r1, #268435456	; 0x10000000
    b6e0:	e5031fbf 	str	r1, [r3, #-4031]	; 0xfffff041
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b6e4:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b6e8:	e3043fff 	movw	r3, #20479	; 0x4fff
    b6ec:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b6f0:	e5121fab 	ldr	r1, [r2, #-4011]	; 0xfffff055
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b6f4:	1afffffa 	bne	b6e4 <alt_clk_divider_set+0xb18>
    b6f8:	eafffe26 	b	af98 <alt_clk_divider_set+0x3cc>
        break;

    case ALT_CLK_MAIN_PLL_C2:
    case ALT_CLK_DBG_BASE:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);
    b6fc:	e3043fff 	movw	r3, #20479	; 0x4fff
    b700:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b704:	e5135f17 	ldr	r5, [r3, #-3863]	; 0xfffff0e9
    b708:	e1a05b85 	lsl	r5, r5, #23
    b70c:	e1a05ba5 	lsr	r5, r5, #23
    b710:	e2855001 	add	r5, r5, #1

            if (   (div <= ((ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_SET_MSK + 1) * prediv))
    b714:	e1510485 	cmp	r1, r5, lsl #9
    b718:	8afffecf 	bhi	b25c <alt_clk_divider_set+0x690>
#endif
}

static bool alt_clkmgr_is_val_modulo_n(uint32_t div, uint32_t mod)
{
    if (mod == 1)
    b71c:	e3550001 	cmp	r5, #1
    b720:	0a00000c 	beq	b758 <alt_clk_divider_set+0xb8c>
    {
        return true;
    }
    else if (mod == 2)
    b724:	e3550002 	cmp	r5, #2
    {
        return (div & 0x1) == 0;
    b728:	02011001 	andeq	r1, r1, #1
    b72c:	02211001 	eoreq	r1, r1, #1
{
    if (mod == 1)
    {
        return true;
    }
    else if (mod == 2)
    b730:	0a000006 	beq	b750 <alt_clk_divider_set+0xb84>
    {
        return (div & 0x1) == 0;
    }
    else if (mod == 4)
    b734:	e3550004 	cmp	r5, #4
    b738:	0a0003dd 	beq	c6b4 <alt_clk_divider_set+0x1ae8>
    {
        return (div & 0x3) == 0;
    }
    else
    {
        return (div % mod) == 0;
    b73c:	e1a00004 	mov	r0, r4
    b740:	e1a01005 	mov	r1, r5
    b744:	eb0034b9 	bl	18a30 <__aeabi_uidivmod>
    b748:	e2711001 	rsbs	r1, r1, #1
    b74c:	33a01000 	movcc	r1, #0
    case ALT_CLK_DBG_BASE:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);

            if (   (div <= ((ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_SET_MSK + 1) * prediv))
                   && alt_clkmgr_is_val_modulo_n(div, prediv)
    b750:	e3510000 	cmp	r1, #0
    b754:	0afffec0 	beq	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b758:	e3540000 	cmp	r4, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    b75c:	e3a03000 	mov	r3, #0
    b760:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b764:	0afffebc 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C1;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C2;
    b768:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b76c:	e3a00009 	mov	r0, #9
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C1;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C2;
    b770:	e3403002 	movt	r3, #2
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b774:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C1;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case ALT_CLK_MAIN_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C2;
    b778:	e59360a8 	ldr	r6, [r3, #168]	; 0xa8
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
    b77c:	e5937000 	ldr	r7, [r3]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    b780:	ebfffb01 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    b784:	e3500000 	cmp	r0, #0
    b788:	1a000325 	bne	c424 <alt_clk_divider_set+0x1858>
    {
        numer = numer / div;
    b78c:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    b790:	e1a01004 	mov	r1, r4
    b794:	eb003468 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    b798:	e1560000 	cmp	r6, r0
    b79c:	3afffeae 	bcc	b25c <alt_clk_divider_set+0x690>
    b7a0:	e1570000 	cmp	r7, r0
    b7a4:	8afffeac 	bhi	b25c <alt_clk_divider_set+0x690>

            if (   (div <= ((ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_SET_MSK + 1) * prediv))
                   && alt_clkmgr_is_val_modulo_n(div, prediv)
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C2, div) == ALT_E_TRUE) )
            {
                wrval = (div / prediv) - 1;
    b7a8:	e1a00004 	mov	r0, r4
    b7ac:	e1a01005 	mov	r1, r5
    b7b0:	eb003461 	bl	1893c <__aeabi_uidiv>
                /* HW managed clock, change by writing to the external counter,  no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */
                alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR, wrval);
    b7b4:	e3043fff 	movw	r3, #20479	; 0x4fff

            if (   (div <= ((ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_SET_MSK + 1) * prediv))
                   && alt_clkmgr_is_val_modulo_n(div, prediv)
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C2, div) == ALT_E_TRUE) )
            {
                wrval = (div / prediv) - 1;
    b7b8:	e2402001 	sub	r2, r0, #1
                /* HW managed clock, change by writing to the external counter,  no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */
                alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR, wrval);
    b7bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0

                ret = ALT_E_SUCCESS;
    b7c0:	e3a00000 	mov	r0, #0
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C2, div) == ALT_E_TRUE) )
            {
                wrval = (div / prediv) - 1;
                /* HW managed clock, change by writing to the external counter,  no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */
                alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR, wrval);
    b7c4:	e5032faf 	str	r2, [r3, #-4015]	; 0xfffff051

                ret = ALT_E_SUCCESS;
    b7c8:	eafffd3b 	b	acbc <alt_clk_divider_set+0xf0>
        }
        break;

    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_H2F_USER1:
        if (   (div <= (ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_SET_MSK + 1))
    b7cc:	e3510c02 	cmp	r1, #512	; 0x200
    b7d0:	8afffea1 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b7d4:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    b7d8:	e3a03000 	mov	r3, #0
    b7dc:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b7e0:	0afffe9d 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C4;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C5;
    b7e4:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b7e8:	e3a0000a 	mov	r0, #10
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C4;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C5;
    b7ec:	e3403002 	movt	r3, #2
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b7f0:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C4;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C5:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C5;
    b7f4:	e59350cc 	ldr	r5, [r3, #204]	; 0xcc
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
    b7f8:	e5936000 	ldr	r6, [r3]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b7fc:	ebfffae2 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    b800:	e3500000 	cmp	r0, #0
    b804:	1a0002e8 	bne	c3ac <alt_clk_divider_set+0x17e0>
    {
        numer = numer / div;
    b808:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    b80c:	e1a01004 	mov	r1, r4
    b810:	eb003449 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    b814:	e1550000 	cmp	r5, r0
    b818:	3afffe8f 	bcc	b25c <alt_clk_divider_set+0x690>
    b81c:	e1560000 	cmp	r6, r0
    b820:	8afffe8d 	bhi	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_H2F_USER1:
        if (   (div <= (ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C5, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b824:	e3043fff 	movw	r3, #20479	; 0x4fff
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_CLR_MSK);
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
    b828:	e2444001 	sub	r4, r4, #1
    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_H2F_USER1:
        if (   (div <= (ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C5, div) == ALT_E_TRUE) )
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b82c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b830:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b834:	e58d2004 	str	r2, [sp, #4]
            restore_0 = temp & ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_SET_MSK;
    b838:	e59dc004 	ldr	r12, [sp, #4]
    b83c:	e7e0c3dc 	ubfx	r12, r12, #7, #1
            if (restore_0)
    b840:	e35c0000 	cmp	r12, #0
            {
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_S2FUSER1CLK_CLR_MSK);
    b844:	159d2004 	ldrne	r2, [sp, #4]
    b848:	13c22080 	bicne	r2, r2, #128	; 0x80
    b84c:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b850:	e3043fff 	movw	r3, #20479	; 0x4fff
    b854:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b858:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    b85c:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    b860:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    b864:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    b868:	e5112f4f 	ldr	r2, [r1, #-3919]	; 0xfffff0b1
    b86c:	e3043fff 	movw	r3, #20479	; 0x4fff
    b870:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b874:	e58d202c 	str	r2, [sp, #44]	; 0x2c
    } while (!(temp & msk));
    b878:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    b87c:	e3120020 	tst	r2, #32
    b880:	0afffff8 	beq	b868 <alt_clk_divider_set+0xc9c>

    alt_write_word(cntraddr, val);
    b884:	e5034f63 	str	r4, [r3, #-3939]	; 0xfffff09d
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b888:	e3a0001e 	mov	r0, #30
    b88c:	e5131f7f 	ldr	r1, [r3, #-3967]	; 0xfffff081

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b890:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    b894:	e3c11101 	bic	r1, r1, #1073741824	; 0x40000000
    b898:	e5031f7f 	str	r1, [r3, #-3967]	; 0xfffff081
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b89c:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b8a0:	e3043fff 	movw	r3, #20479	; 0x4fff
    b8a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b8a8:	e5121f5f 	ldr	r1, [r2, #-3935]	; 0xfffff0a1
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b8ac:	1afffffa 	bne	b89c <alt_clk_divider_set+0xcd0>
    b8b0:	eafffdb8 	b	af98 <alt_clk_divider_set+0x3cc>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_SPI_M:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV1; }
    b8b4:	e3510001 	cmp	r1, #1
    b8b8:	0a000321 	beq	c544 <alt_clk_divider_set+0x1978>
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV2; }
    b8bc:	e3510002 	cmp	r1, #2
    b8c0:	0a00035d 	beq	c63c <alt_clk_divider_set+0x1a70>
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV4; }
    b8c4:	e3510004 	cmp	r1, #4
    b8c8:	0a000375 	beq	c6a4 <alt_clk_divider_set+0x1ad8>
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV8; }
    b8cc:	e3510008 	cmp	r1, #8
    b8d0:	0a000383 	beq	c6e4 <alt_clk_divider_set+0x1b18>
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV16; }
    b8d4:	e3510010 	cmp	r1, #16
    b8d8:	1afffe5f 	bne	b25c <alt_clk_divider_set+0x690>
    b8dc:	e3a04020 	mov	r4, #32

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b8e0:	e3043fff 	movw	r3, #20479	; 0x4fff
    b8e4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b8e8:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b8ec:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK)
    b8f0:	e59d2004 	ldr	r2, [sp, #4]
    b8f4:	e212c008 	ands	r12, r2, #8
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_SPIMCLK_CLR_MSK);
    b8f8:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    b8fc:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_PERPLL_EN_SPIMCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_SPIMCLK_CLR_MSK);
    b900:	13c22008 	bicne	r2, r2, #8
    b904:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_SPIMCLK_SET_MSK,
    b908:	e3043fff 	movw	r3, #20479	; 0x4fff
    b90c:	e3a0001e 	mov	r0, #30
    b910:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b914:	e5131f5b 	ldr	r1, [r3, #-3931]	; 0xfffff0a5

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b918:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_SPIMCLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_SPIMCLK_SET_MSK,
    b91c:	e3c11038 	bic	r1, r1, #56	; 0x38
    b920:	e1841001 	orr	r1, r4, r1
    b924:	e5031f5b 	str	r1, [r3, #-3931]	; 0xfffff0a5
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b928:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b92c:	e3043fff 	movw	r3, #20479	; 0x4fff
    b930:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b934:	e5121f5b 	ldr	r1, [r2, #-3931]	; 0xfffff0a5
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b938:	1afffffa 	bne	b928 <alt_clk_divider_set+0xd5c>
    b93c:	eafffd95 	b	af98 <alt_clk_divider_set+0x3cc>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_USB_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV1; }
    b940:	e3510001 	cmp	r1, #1
    b944:	0a000306 	beq	c564 <alt_clk_divider_set+0x1998>
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV2; }
    b948:	e3510002 	cmp	r1, #2
    b94c:	0a00033e 	beq	c64c <alt_clk_divider_set+0x1a80>
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV4; }
    b950:	e3510004 	cmp	r1, #4
    b954:	0a000350 	beq	c69c <alt_clk_divider_set+0x1ad0>
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV8; }
    b958:	e3510008 	cmp	r1, #8
    b95c:	0a00036c 	beq	c714 <alt_clk_divider_set+0x1b48>
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV16; }
    b960:	e3510010 	cmp	r1, #16
    b964:	1afffe3c 	bne	b25c <alt_clk_divider_set+0x690>
    b968:	e3a04004 	mov	r4, #4

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    b96c:	e3043fff 	movw	r3, #20479	; 0x4fff
    b970:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b974:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    b978:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK)
    b97c:	e59d2004 	ldr	r2, [sp, #4]
    b980:	e212c004 	ands	r12, r2, #4
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_USBCLK_CLR_MSK);
    b984:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    b988:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_USBCLK_CLR_MSK);
    b98c:	13c22004 	bicne	r2, r2, #4
    b990:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_USBCLK_SET_MSK,
    b994:	e3043fff 	movw	r3, #20479	; 0x4fff
    b998:	e3a0001e 	mov	r0, #30
    b99c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b9a0:	e5131f5b 	ldr	r1, [r3, #-3931]	; 0xfffff0a5

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    b9a4:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_USBCLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_USBCLK_SET_MSK,
    b9a8:	e3c11007 	bic	r1, r1, #7
    b9ac:	e1841001 	orr	r1, r4, r1
    b9b0:	e5031f5b 	str	r1, [r3, #-3931]	; 0xfffff0a5
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b9b4:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    b9b8:	e3043fff 	movw	r3, #20479	; 0x4fff
    b9bc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    b9c0:	e5121f5b 	ldr	r1, [r2, #-3931]	; 0xfffff0a5
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    b9c4:	1afffffa 	bne	b9b4 <alt_clk_divider_set+0xde8>
    b9c8:	eafffd72 	b	af98 <alt_clk_divider_set+0x3cc>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_PERIPHERAL_PLL_C3:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_SET_MSK + 1))
    b9cc:	e3510c02 	cmp	r1, #512	; 0x200
    b9d0:	8afffe21 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b9d4:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    b9d8:	e3a03000 	mov	r3, #0
    b9dc:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    b9e0:	0afffe1d 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C2;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C3:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C3;
    b9e4:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b9e8:	e3a0000a 	mov	r0, #10
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C2;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C3:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C3;
    b9ec:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b9f0:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C2;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C3:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C3;
    b9f4:	e59350c4 	ldr	r5, [r3, #196]	; 0xc4
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    b9f8:	ebfffa63 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    b9fc:	e3500000 	cmp	r0, #0
    ba00:	1a000260 	bne	c388 <alt_clk_divider_set+0x17bc>
    {
        numer = numer / div;
    ba04:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    ba08:	e1a01004 	mov	r1, r4
    ba0c:	eb0033ca 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    ba10:	e1550000 	cmp	r5, r0
    ba14:	3afffe10 	bcc	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_PERIPHERAL_PLL_C3:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C3, div) == ALT_E_TRUE) )
        {
            /* first, are the clock MUX input selections currently set to use the clock we want to change? */
            temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    ba18:	e3043fff 	movw	r3, #20479	; 0x4fff
    ba1c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ba20:	e5132f53 	ldr	r2, [r3, #-3923]	; 0xfffff0ad
    ba24:	e58d2004 	str	r2, [sp, #4]
            restore_0 = (ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(temp) == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK);
    ba28:	e59d1004 	ldr	r1, [sp, #4]
            restore_1 = restore_2 = (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);
    ba2c:	e59d2004 	ldr	r2, [sp, #4]

            /* now AND those with the current state of the three gate enables */
            /* to get the clocks which must be gated off and then back on */
            temp1 = temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    ba30:	e5133f5f 	ldr	r3, [r3, #-3935]	; 0xfffff0a1
        if (   (div <= (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C3, div) == ALT_E_TRUE) )
        {
            /* first, are the clock MUX input selections currently set to use the clock we want to change? */
            temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
            restore_0 = (ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(temp) == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK);
    ba34:	e2011003 	and	r1, r1, #3
            restore_1 = restore_2 = (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);

            /* now AND those with the current state of the three gate enables */
            /* to get the clocks which must be gated off and then back on */
            temp1 = temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            restore_0 = restore_0 && (temp & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
    ba38:	e3510002 	cmp	r1, #2
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C3, div) == ALT_E_TRUE) )
        {
            /* first, are the clock MUX input selections currently set to use the clock we want to change? */
            temp = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
            restore_0 = (ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(temp) == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK);
            restore_1 = restore_2 = (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK);
    ba3c:	e7e12152 	ubfx	r2, r2, #2, #2

            /* now AND those with the current state of the three gate enables */
            /* to get the clocks which must be gated off and then back on */
            temp1 = temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    ba40:	e58d3004 	str	r3, [sp, #4]
    ba44:	e58d3008 	str	r3, [sp, #8]
            restore_0 = restore_0 && (temp & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
    ba48:	13a03000 	movne	r3, #0
    ba4c:	059d3004 	ldreq	r3, [sp, #4]
    ba50:	07e03453 	ubfxeq	r3, r3, #8, #1
            restore_1 = restore_1 && (temp & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
    ba54:	e3520002 	cmp	r2, #2
    ba58:	1a000244 	bne	c370 <alt_clk_divider_set+0x17a4>
    ba5c:	e59d2004 	ldr	r2, [sp, #4]
            restore_2 = restore_2 && (temp & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
    ba60:	e59d1004 	ldr	r1, [sp, #4]

            /* now AND those with the current state of the three gate enables */
            /* to get the clocks which must be gated off and then back on */
            temp1 = temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            restore_0 = restore_0 && (temp & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
            restore_1 = restore_1 && (temp & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
    ba64:	e7e024d2 	ubfx	r2, r2, #9, #1
            restore_2 = restore_2 && (temp & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
    ba68:	e3110b01 	tst	r1, #1024	; 0x400
    ba6c:	0a000240 	beq	c374 <alt_clk_divider_set+0x17a8>

            /* gate off the clocks that depend on the clock divider that we want to change */
            if (restore_2) { temp &= ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK; }
    ba70:	e59d1004 	ldr	r1, [sp, #4]
            /* now AND those with the current state of the three gate enables */
            /* to get the clocks which must be gated off and then back on */
            temp1 = temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            restore_0 = restore_0 && (temp & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
            restore_1 = restore_1 && (temp & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
            restore_2 = restore_2 && (temp & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
    ba74:	e3a0c001 	mov	r12, #1

            /* gate off the clocks that depend on the clock divider that we want to change */
            if (restore_2) { temp &= ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK; }
    ba78:	e3c11b01 	bic	r1, r1, #1024	; 0x400
    ba7c:	e58d1004 	str	r1, [sp, #4]
            if (restore_0) { temp &= ALT_CLKMGR_PERPLL_EN_SDMMCCLK_CLR_MSK; }
    ba80:	e3530000 	cmp	r3, #0
    ba84:	159d3004 	ldrne	r3, [sp, #4]
    ba88:	13c33c01 	bicne	r3, r3, #256	; 0x100
    ba8c:	158d3004 	strne	r3, [sp, #4]
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
    ba90:	e3043fff 	movw	r3, #20479	; 0x4fff
    ba94:	e59d1004 	ldr	r1, [sp, #4]

            /* the NAND clock must be gated off before the NANDX clock, */
            if (restore_1)
    ba98:	e3520000 	cmp	r2, #0
            restore_2 = restore_2 && (temp & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);

            /* gate off the clocks that depend on the clock divider that we want to change */
            if (restore_2) { temp &= ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK; }
            if (restore_0) { temp &= ALT_CLKMGR_PERPLL_EN_SDMMCCLK_CLR_MSK; }
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
    ba9c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    baa0:	e5031f5f 	str	r1, [r3, #-3935]	; 0xfffff0a1

            /* the NAND clock must be gated off before the NANDX clock, */
            if (restore_1)
    baa4:	0a00000c 	beq	badc <alt_clk_divider_set+0xf10>

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    baa8:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    baac:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bab0:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bab4:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bab8:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    babc:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bac0:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bac4:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095

            /* the NAND clock must be gated off before the NANDX clock, */
            if (restore_1)
            {
                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
                temp &= ALT_CLKMGR_PERPLL_EN_NANDXCLK_CLR_MSK;
    bac8:	e59d2004 	ldr	r2, [sp, #4]
    bacc:	e3c22c02 	bic	r2, r2, #512	; 0x200
    bad0:	e58d2004 	str	r2, [sp, #4]
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
    bad4:	e59d2004 	ldr	r2, [sp, #4]
    bad8:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    badc:	e3043fff 	movw	r3, #20479	; 0x4fff
                temp &= ALT_CLKMGR_PERPLL_EN_NANDXCLK_CLR_MSK;
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
    bae0:	e2444001 	sub	r4, r4, #1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    bae4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bae8:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    baec:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    baf0:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
    baf4:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    baf8:	e5112f4f 	ldr	r2, [r1, #-3919]	; 0xfffff0b1
    bafc:	e3043fff 	movw	r3, #20479	; 0x4fff
    bb00:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bb04:	e58d2024 	str	r2, [sp, #36]	; 0x24
    } while (!(temp & msk));
    bb08:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    bb0c:	e3120008 	tst	r2, #8
    bb10:	0afffff8 	beq	baf8 <alt_clk_divider_set+0xf2c>

    alt_write_word(cntraddr, val);
    bb14:	e5034f6b 	str	r4, [r3, #-3947]	; 0xfffff095
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    bb18:	e3a0001e 	mov	r0, #30
    bb1c:	e5131f7f 	ldr	r1, [r3, #-3967]	; 0xfffff081

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    bb20:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    bb24:	e3c11201 	bic	r1, r1, #268435456	; 0x10000000
    bb28:	e5031f7f 	str	r1, [r3, #-3967]	; 0xfffff081
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    bb2c:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    bb30:	e3043fff 	movw	r3, #20479	; 0x4fff
    bb34:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bb38:	e5121f6b 	ldr	r1, [r2, #-3947]	; 0xfffff095
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    bb3c:	1afffffa 	bne	bb2c <alt_clk_divider_set+0xf60>
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );

            /* NAND clock and NAND_X clock cannot be written together, must be a set sequence with a delay */
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK);
    bb40:	e59d2008 	ldr	r2, [sp, #8]
            if (restore_2)
    bb44:	e35c0000 	cmp	r12, #0
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );

            /* NAND clock and NAND_X clock cannot be written together, must be a set sequence with a delay */
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK);
    bb48:	e3c22b01 	bic	r2, r2, #1024	; 0x400
    bb4c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
            if (restore_2)
    bb50:	0afffc8f 	beq	ad94 <alt_clk_divider_set+0x1c8>

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    bb54:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bb58:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bb5c:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bb60:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bb64:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bb68:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bb6c:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
    bb70:	e5132f6b 	ldr	r2, [r3, #-3947]	; 0xfffff095
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK);
            if (restore_2)
            {
                /* the NANDX clock must be gated on before the NAND clock. */
                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK );
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1);
    bb74:	e59d2008 	ldr	r2, [sp, #8]
    bb78:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
    bb7c:	eafffc4e 	b	acbc <alt_clk_divider_set+0xf0>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_PERIPHERAL_PLL_C2:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_SET_MSK + 1))
    bb80:	e3510c02 	cmp	r1, #512	; 0x200
    bb84:	8afffdb4 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    bb88:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    bb8c:	e3a03000 	mov	r3, #0
    bb90:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    bb94:	0afffdb0 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C1;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C2;
    bb98:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    bb9c:	e3a0000a 	mov	r0, #10
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C1;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C2;
    bba0:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    bba4:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C1;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C2:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C2;
    bba8:	e59350c0 	ldr	r5, [r3, #192]	; 0xc0
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    bbac:	ebfff9f6 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    bbb0:	e3500000 	cmp	r0, #0
    bbb4:	1a000208 	bne	c3dc <alt_clk_divider_set+0x1810>
    {
        numer = numer / div;
    bbb8:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    bbbc:	e1a01004 	mov	r1, r4
    bbc0:	eb00335d 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    bbc4:	e1550000 	cmp	r5, r0
    bbc8:	3afffda3 	bcc	b25c <alt_clk_divider_set+0x690>

    case ALT_CLK_PERIPHERAL_PLL_C2:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C2, div) == ALT_E_TRUE) )
        {
            temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    bbcc:	e3043fff 	movw	r3, #20479	; 0x4fff
    bbd0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bbd4:	e5132f53 	ldr	r2, [r3, #-3923]	; 0xfffff0ad
    bbd8:	e7e12252 	ubfx	r2, r2, #4, #2
    bbdc:	e58d2004 	str	r2, [sp, #4]
            if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
    bbe0:	e59d2004 	ldr	r2, [sp, #4]
    bbe4:	e3520002 	cmp	r2, #2
    bbe8:	0a000289 	beq	c614 <alt_clk_divider_set+0x1a48>
ALT_STATUS_CODE alt_clk_divider_set(ALT_CLK_t clk, uint32_t div)
{
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;
    volatile uint32_t   temp, temp1;
    uint32_t            wrval = UINT32_MAX;              /* value to be written */
    bool                restore_0 = false;
    bbec:	e3a0c000 	mov	r12, #0
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    bbf0:	e3043fff 	movw	r3, #20479	; 0x4fff
                    /* gate it off */
                }
            }

            /* now write the new divisor ratio */
            wrval = div - 1;
    bbf4:	e2444001 	sub	r4, r4, #1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    bbf8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bbfc:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    bc00:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    bc04:	e3822302 	orr	r2, r2, #134217728	; 0x8000000
    bc08:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    bc0c:	e5112f4f 	ldr	r2, [r1, #-3919]	; 0xfffff0b1
    bc10:	e3043fff 	movw	r3, #20479	; 0x4fff
    bc14:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bc18:	e58d2020 	str	r2, [sp, #32]
    } while (!(temp & msk));
    bc1c:	e59d2020 	ldr	r2, [sp, #32]
    bc20:	e3120004 	tst	r2, #4
    bc24:	0afffff8 	beq	bc0c <alt_clk_divider_set+0x1040>

    alt_write_word(cntraddr, val);
    bc28:	e5034f6f 	str	r4, [r3, #-3951]	; 0xfffff091
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    bc2c:	e3a0001e 	mov	r0, #30
    bc30:	e5131f7f 	ldr	r1, [r3, #-3967]	; 0xfffff081

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    bc34:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    bc38:	e3c11302 	bic	r1, r1, #134217728	; 0x8000000
    bc3c:	e5031f7f 	str	r1, [r3, #-3967]	; 0xfffff081
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    bc40:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    bc44:	e3043fff 	movw	r3, #20479	; 0x4fff
    bc48:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bc4c:	e5121f6f 	ldr	r1, [r2, #-3951]	; 0xfffff091
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    bc50:	1afffffa 	bne	bc40 <alt_clk_divider_set+0x1074>
    bc54:	eafffccf 	b	af98 <alt_clk_divider_set+0x3cc>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_PERIPHERAL_PLL_C4:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_SET_MSK + 1))
    bc58:	e3510c02 	cmp	r1, #512	; 0x200
    bc5c:	8afffd7e 	bhi	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    bc60:	e3510000 	cmp	r1, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    bc64:	e3a03000 	mov	r3, #0
    bc68:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    bc6c:	0afffd7a 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C3;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C4:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C4;
    bc70:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    bc74:	e3a0000a 	mov	r0, #10
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C3;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C4:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C4;
    bc78:	e3403002 	movt	r3, #2
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    bc7c:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C3;
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
        break;
    case ALT_CLK_PERIPHERAL_PLL_C4:
        hilimit = alt_pll_cntr_maxfreq.PeriphPLL_C4;
    bc80:	e59350c8 	ldr	r5, [r3, #200]	; 0xc8
        lolimit = 0;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &numer);
    bc84:	ebfff9c0 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    bc88:	e3500000 	cmp	r0, #0
    bc8c:	1a0001d5 	bne	c3e8 <alt_clk_divider_set+0x181c>
    {
        numer = numer / div;
    bc90:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    bc94:	e1a01004 	mov	r1, r4
    bc98:	eb003327 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    bc9c:	e1550000 	cmp	r5, r0
    bca0:	3afffd6d 	bcc	b25c <alt_clk_divider_set+0x690>
    case ALT_CLK_PERIPHERAL_PLL_C4:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C4, div) == ALT_E_TRUE) )
        {
            /* look at the L4 set of clock gates first */
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    bca4:	e3043fff 	movw	r3, #20479	; 0x4fff

            /* gate off all the C4 Direct set of clocks */
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ~temp);

            /* change the clock divider ratio - the reason we're here */
            wrval = div - 1;
    bca8:	e2444001 	sub	r4, r4, #1
    case ALT_CLK_PERIPHERAL_PLL_C4:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C4, div) == ALT_E_TRUE) )
        {
            /* look at the L4 set of clock gates first */
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    bcac:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bcb0:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
    bcb4:	e58d2008 	str	r2, [sp, #8]
            restore_0 = (ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_PERIPHPLL);
    bcb8:	e59dc008 	ldr	r12, [sp, #8]
            restore_1 = (ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL);
    bcbc:	e59d1008 	ldr	r1, [sp, #8]
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    bcc0:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
            restore_0 = restore_0 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
    bcc4:	e21cc001 	ands	r12, r12, #1
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C4, div) == ALT_E_TRUE) )
        {
            /* look at the L4 set of clock gates first */
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
            restore_0 = (ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_PERIPHPLL);
            restore_1 = (ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL);
    bcc8:	e7e030d1 	ubfx	r3, r1, #1, #1
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    bccc:	e58d2008 	str	r2, [sp, #8]
            restore_0 = restore_0 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
    bcd0:	159dc008 	ldrne	r12, [sp, #8]
    bcd4:	17e0c15c 	ubfxne	r12, r12, #2, #1
            restore_1 = restore_1 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
    bcd8:	e3530001 	cmp	r3, #1

            /* if the l4_sp and l4_mp clocks are not set to use the periph_base_clk
            // from the Peripheral PLL C4 clock divider output, or if they are
            // not currently gated on, don't change their gates */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    bcdc:	e3043fff 	movw	r3, #20479	; 0x4fff
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
            restore_0 = (ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_PERIPHPLL);
            restore_1 = (ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL);
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            restore_0 = restore_0 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
            restore_1 = restore_1 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
    bce0:	059d0008 	ldreq	r0, [sp, #8]

            /* if the l4_sp and l4_mp clocks are not set to use the periph_base_clk
            // from the Peripheral PLL C4 clock divider output, or if they are
            // not currently gated on, don't change their gates */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    bce4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
            restore_0 = (ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_PERIPHPLL);
            restore_1 = (ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL);
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            restore_0 = restore_0 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
            restore_1 = restore_1 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
    bce8:	13a00000 	movne	r0, #0

            /* if the l4_sp and l4_mp clocks are not set to use the periph_base_clk
            // from the Peripheral PLL C4 clock divider output, or if they are
            // not currently gated on, don't change their gates */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    bcec:	e5133f9f 	ldr	r3, [r3, #-3999]	; 0xfffff061
            temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
            restore_0 = (ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_PERIPHPLL);
            restore_1 = (ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(temp1) == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL);
            temp1 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            restore_0 = restore_0 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK);
            restore_1 = restore_1 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);
    bcf0:	07e001d0 	ubfxeq	r0, r0, #3, #1

            /* if the l4_sp and l4_mp clocks are not set to use the periph_base_clk
            // from the Peripheral PLL C4 clock divider output, or if they are
            // not currently gated on, don't change their gates */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
    bcf4:	e35c0000 	cmp	r12, #0
            restore_1 = restore_1 && (temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK);

            /* if the l4_sp and l4_mp clocks are not set to use the periph_base_clk
            // from the Peripheral PLL C4 clock divider output, or if they are
            // not currently gated on, don't change their gates */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    bcf8:	e58d3004 	str	r3, [sp, #4]
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
    bcfc:	159d3004 	ldrne	r3, [sp, #4]
    bd00:	13c33004 	bicne	r3, r3, #4
    bd04:	158d3004 	strne	r3, [sp, #4]
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
    bd08:	e3500000 	cmp	r0, #0
    bd0c:	159d3004 	ldrne	r3, [sp, #4]
    bd10:	13c33008 	bicne	r3, r3, #8
    bd14:	158d3004 	strne	r3, [sp, #4]
            alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
    bd18:	e3043fff 	movw	r3, #20479	; 0x4fff
    bd1c:	e59d1004 	ldr	r1, [sp, #4]
    bd20:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    do
    {
        temp = alt_read_word(stataddr);
    bd24:	e1a02003 	mov	r2, r3
            // from the Peripheral PLL C4 clock divider output, or if they are
            // not currently gated on, don't change their gates */
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
            if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
            alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
    bd28:	e5031f9f 	str	r1, [r3, #-3999]	; 0xfffff061

            /* now look at the C4 direct set of clock gates
            // first, create a mask of the C4 direct set of clock gate enables */
            temp = (  ALT_CLKMGR_PERPLL_EN_USBCLK_SET_MSK
    bd2c:	e3a0107c 	mov	r1, #124	; 0x7c
    bd30:	e58d1004 	str	r1, [sp, #4]
                    | ALT_CLKMGR_PERPLL_EN_CAN0CLK_SET_MSK
                    | ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK
                    | ALT_CLKMGR_PERPLL_EN_GPIOCLK_SET_MSK );

            /* gate off all the C4 Direct set of clocks */
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1 & ~temp);
    bd34:	e59d5004 	ldr	r5, [sp, #4]
    bd38:	e59d1008 	ldr	r1, [sp, #8]
    bd3c:	e1c11005 	bic	r1, r1, r5
    bd40:	e5031f5f 	str	r1, [r3, #-3935]	; 0xfffff0a1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    bd44:	e5131f7f 	ldr	r1, [r3, #-3967]	; 0xfffff081
    bd48:	e3811202 	orr	r1, r1, #536870912	; 0x20000000
    bd4c:	e5031f7f 	str	r1, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    bd50:	e5123f4f 	ldr	r3, [r2, #-3919]	; 0xfffff0b1
    bd54:	e3041fff 	movw	r1, #20479	; 0x4fff
    bd58:	e34f1fd0 	movt	r1, #65488	; 0xffd0
    bd5c:	e58d3028 	str	r3, [sp, #40]	; 0x28
    } while (!(temp & msk));
    bd60:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    bd64:	e3130010 	tst	r3, #16
    bd68:	0afffff8 	beq	bd50 <alt_clk_divider_set+0x1184>

    alt_write_word(cntraddr, val);
    bd6c:	e5014f67 	str	r4, [r1, #-3943]	; 0xfffff099
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    bd70:	e3a0301e 	mov	r3, #30
    bd74:	e5114f7f 	ldr	r4, [r1, #-3967]	; 0xfffff081

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    bd78:	e1a02001 	mov	r2, r1
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    bd7c:	e3c44202 	bic	r4, r4, #536870912	; 0x20000000
    bd80:	e5014f7f 	str	r4, [r1, #-3967]	; 0xfffff081
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    bd84:	e2533001 	subs	r3, r3, #1
    {
        (void) alt_read_word(reg);
    bd88:	e5121f67 	ldr	r1, [r2, #-3943]	; 0xfffff099
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    bd8c:	1afffffc 	bne	bd84 <alt_clk_divider_set+0x11b8>
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );

            /* gate the affected clocks that were on before back on - both sets of gates */
            temp = (restore_0) ? ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK : 0;
    bd90:	e1a0c10c 	lsl	r12, r12, #2
            if (restore_1) { temp |= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK; }
    bd94:	e3500000 	cmp	r0, #0
            alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1);
            ret = ALT_E_SUCCESS;
    bd98:	e3a00000 	mov	r0, #0
                                     ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

            alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV );

            /* gate the affected clocks that were on before back on - both sets of gates */
            temp = (restore_0) ? ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK : 0;
    bd9c:	e58dc004 	str	r12, [sp, #4]
            if (restore_1) { temp |= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK; }
    bda0:	159d3004 	ldrne	r3, [sp, #4]
    bda4:	13833008 	orrne	r3, r3, #8
    bda8:	158d3004 	strne	r3, [sp, #4]
            alt_setbits_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp);
    bdac:	e3043fff 	movw	r3, #20479	; 0x4fff
    bdb0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bdb4:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    bdb8:	e59d1004 	ldr	r1, [sp, #4]
    bdbc:	e1812002 	orr	r2, r1, r2
    bdc0:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
            alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp1);
    bdc4:	e59d2008 	ldr	r2, [sp, #8]
    bdc8:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
            ret = ALT_E_SUCCESS;
    bdcc:	eafffbba 	b	acbc <alt_clk_divider_set+0xf0>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_DBG_TRACE:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV1; }
    bdd0:	e3510001 	cmp	r1, #1
    bdd4:	0a0001e0 	beq	c55c <alt_clk_divider_set+0x1990>
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV2; }
    bdd8:	e3510002 	cmp	r1, #2
    bddc:	0a000224 	beq	c674 <alt_clk_divider_set+0x1aa8>
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV4; }
    bde0:	e3510004 	cmp	r1, #4
    bde4:	0a000224 	beq	c67c <alt_clk_divider_set+0x1ab0>
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV8; }
    bde8:	e3510008 	cmp	r1, #8
    bdec:	0a000246 	beq	c70c <alt_clk_divider_set+0x1b40>
        else if (div == 16) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV16; }
    bdf0:	e3510010 	cmp	r1, #16
    bdf4:	1afffd18 	bne	b25c <alt_clk_divider_set+0x690>
    bdf8:	e3a04004 	mov	r4, #4

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    bdfc:	e3043fff 	movw	r3, #20479	; 0x4fff
    be00:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    be04:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    be08:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK)
    be0c:	e59d2004 	ldr	r2, [sp, #4]
    be10:	e212c040 	ands	r12, r2, #64	; 0x40
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_CLR_MSK);
    be14:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    be18:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_CLR_MSK);
    be1c:	13c22040 	bicne	r2, r2, #64	; 0x40
    be20:	15032f9f 	strne	r2, [r3, #-3999]	; 0xfffff061
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_SET_MSK,
    be24:	e3043fff 	movw	r3, #20479	; 0x4fff
    be28:	e3a0001e 	mov	r0, #30
    be2c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    be30:	e5131f93 	ldr	r1, [r3, #-3987]	; 0xfffff06d

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    be34:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGTRACECLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_SET_MSK,
    be38:	e3c11007 	bic	r1, r1, #7
    be3c:	e1841001 	orr	r1, r4, r1
    be40:	e5031f93 	str	r1, [r3, #-3987]	; 0xfffff06d
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    be44:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    be48:	e3043fff 	movw	r3, #20479	; 0x4fff
    be4c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    be50:	e5121f93 	ldr	r1, [r2, #-3987]	; 0xfffff06d
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    be54:	1afffffa 	bne	be44 <alt_clk_divider_set+0x1278>
    be58:	eafffd74 	b	b430 <alt_clk_divider_set+0x864>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_DBG_AT:
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV1; }
    be5c:	e3510001 	cmp	r1, #1
    be60:	0a0001bb 	beq	c554 <alt_clk_divider_set+0x1988>
        else if (div == 2) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV2; }
    be64:	e3510002 	cmp	r1, #2
    be68:	0a0001ff 	beq	c66c <alt_clk_divider_set+0x1aa0>
        else if (div == 4) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV4; }
    be6c:	e3510004 	cmp	r1, #4
    be70:	1afffcf9 	bne	b25c <alt_clk_divider_set+0x690>
    be74:	e3a04002 	mov	r4, #2

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    be78:	e3043fff 	movw	r3, #20479	; 0x4fff
    be7c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    be80:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    be84:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK)
    be88:	e59d2004 	ldr	r2, [sp, #4]
    be8c:	e212c010 	ands	r12, r2, #16
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGATCLK_CLR_MSK);
    be90:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    be94:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGATCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGATCLK_CLR_MSK);
    be98:	13c22010 	bicne	r2, r2, #16
    be9c:	15032f9f 	strne	r2, [r3, #-3999]	; 0xfffff061
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_SET_MSK,
    bea0:	e3043fff 	movw	r3, #20479	; 0x4fff
    bea4:	e3a0001e 	mov	r0, #30
    bea8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    beac:	e5131f97 	ldr	r1, [r3, #-3991]	; 0xfffff069

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    beb0:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGATCLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_SET_MSK,
    beb4:	e3c11003 	bic	r1, r1, #3
    beb8:	e1841001 	orr	r1, r4, r1
    bebc:	e5031f97 	str	r1, [r3, #-3991]	; 0xfffff069
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    bec0:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    bec4:	e3043fff 	movw	r3, #20479	; 0x4fff
    bec8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    becc:	e5121f97 	ldr	r1, [r2, #-3991]	; 0xfffff069
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    bed0:	1afffffa 	bne	bec0 <alt_clk_divider_set+0x12f4>
    bed4:	eafffd55 	b	b430 <alt_clk_divider_set+0x864>
        break;

    case ALT_CLK_MAIN_PLL_C1:
    case ALT_CLK_L3_MAIN:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR)) + 1);
    bed8:	e3043fff 	movw	r3, #20479	; 0x4fff
    bedc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bee0:	e5135f1b 	ldr	r5, [r3, #-3867]	; 0xfffff0e5
    bee4:	e1a05b85 	lsl	r5, r5, #23
    bee8:	e1a05ba5 	lsr	r5, r5, #23
    beec:	e2855001 	add	r5, r5, #1

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MAINCLK_CNT_SET_MSK + 1) * prediv))
    bef0:	e1510485 	cmp	r1, r5, lsl #9
    bef4:	8afffcd8 	bhi	b25c <alt_clk_divider_set+0x690>
#endif
}

static bool alt_clkmgr_is_val_modulo_n(uint32_t div, uint32_t mod)
{
    if (mod == 1)
    bef8:	e3550001 	cmp	r5, #1
    befc:	0a00000c 	beq	bf34 <alt_clk_divider_set+0x1368>
    {
        return true;
    }
    else if (mod == 2)
    bf00:	e3550002 	cmp	r5, #2
    {
        return (div & 0x1) == 0;
    bf04:	02011001 	andeq	r1, r1, #1
    bf08:	02211001 	eoreq	r1, r1, #1
{
    if (mod == 1)
    {
        return true;
    }
    else if (mod == 2)
    bf0c:	0a000006 	beq	bf2c <alt_clk_divider_set+0x1360>
    {
        return (div & 0x1) == 0;
    }
    else if (mod == 4)
    bf10:	e3550004 	cmp	r5, #4
    bf14:	0a0001ea 	beq	c6c4 <alt_clk_divider_set+0x1af8>
    {
        return (div & 0x3) == 0;
    }
    else
    {
        return (div % mod) == 0;
    bf18:	e1a00004 	mov	r0, r4
    bf1c:	e1a01005 	mov	r1, r5
    bf20:	eb0032c2 	bl	18a30 <__aeabi_uidivmod>
    bf24:	e2711001 	rsbs	r1, r1, #1
    bf28:	33a01000 	movcc	r1, #0
    case ALT_CLK_L3_MAIN:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR)) + 1);

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MAINCLK_CNT_SET_MSK + 1) * prediv))
                && alt_clkmgr_is_val_modulo_n(div, prediv)
    bf2c:	e3510000 	cmp	r1, #0
    bf30:	0afffcc9 	beq	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    bf34:	e3540000 	cmp	r4, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    bf38:	e3a03000 	mov	r3, #0
    bf3c:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    bf40:	0afffcc5 	beq	b25c <alt_clk_divider_set+0x690>
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C0;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case  ALT_CLK_MAIN_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C1;
    bf44:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    bf48:	e3a00009 	mov	r0, #9
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C0;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case  ALT_CLK_MAIN_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C1;
    bf4c:	e3403002 	movt	r3, #2
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    bf50:	e28d1044 	add	r1, sp, #68	; 0x44
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C0;
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
        break;
    case  ALT_CLK_MAIN_PLL_C1:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C1;
    bf54:	e59360a4 	ldr	r6, [r3, #164]	; 0xa4
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
    bf58:	e5937000 	ldr	r7, [r3]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    bf5c:	ebfff90a 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    bf60:	e3500000 	cmp	r0, #0
    bf64:	1a000131 	bne	c430 <alt_clk_divider_set+0x1864>
    {
        numer = numer / div;
    bf68:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    bf6c:	e1a01004 	mov	r1, r4
    bf70:	eb003271 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    bf74:	e1560000 	cmp	r6, r0
    bf78:	3afffcb7 	bcc	b25c <alt_clk_divider_set+0x690>
    bf7c:	e1570000 	cmp	r7, r0
    bf80:	8afffcb5 	bhi	b25c <alt_clk_divider_set+0x690>
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C1, div) == ALT_E_TRUE) )
            {
                /* HW managed clock, change by writing to the external counter, no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */

                wrval = (div / prediv) - 1;
    bf84:	e1a01005 	mov	r1, r5
    bf88:	e1a00004 	mov	r0, r4
    bf8c:	eb00326a 	bl	1893c <__aeabi_uidiv>

#if ALT_PREVENT_GLITCH_CHGC1
                /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing
                // bypass state, then gate clock back on. FogBugz #63778 */
                temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    bf90:	e3043fff 	movw	r3, #20479	; 0x4fff
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C1, div) == ALT_E_TRUE) )
            {
                /* HW managed clock, change by writing to the external counter, no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */

                wrval = (div / prediv) - 1;
    bf94:	e2401001 	sub	r1, r0, #1

#if ALT_PREVENT_GLITCH_CHGC1
                /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing
                // bypass state, then gate clock back on. FogBugz #63778 */
                temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    bf98:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    bf9c:	e5132f8f 	ldr	r2, [r3, #-3983]	; 0xfffff071
    bfa0:	e58d2004 	str	r2, [sp, #4]
                temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    bfa4:	e5133f9f 	ldr	r3, [r3, #-3999]	; 0xfffff061
    bfa8:	e58d3008 	str	r3, [sp, #8]

                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK)))
    bfac:	e59d3008 	ldr	r3, [sp, #8]
    bfb0:	e2132004 	ands	r2, r3, #4
    bfb4:	159d2004 	ldrne	r2, [sp, #4]
                {
                    restore_0 = true;
                }
                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
    bfb8:	e59d3008 	ldr	r3, [sp, #8]
                /* if L4MP or L4SP source is set to Main PLL C1, gate it off before changing
                // bypass state, then gate clock back on. FogBugz #63778 */
                temp  = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
                temp1 = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);

                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK)))
    bfbc:	12022001 	andne	r2, r2, #1
    bfc0:	12222001 	eorne	r2, r2, #1
                {
                    restore_0 = true;
                }
                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
    bfc4:	e2133008 	ands	r3, r3, #8
    bfc8:	159d3004 	ldrne	r3, [sp, #4]
                {
                    restore_1 = true;
                }
                temp = temp1;
    bfcc:	e59d0008 	ldr	r0, [sp, #8]

                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4MP_SET_MSK)))
                {
                    restore_0 = true;
                }
                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
    bfd0:	12233002 	eorne	r3, r3, #2
    bfd4:	17e030d3 	ubfxne	r3, r3, #1, #1
                {
                    restore_1 = true;
                }
                temp = temp1;
                if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
    bfd8:	e3520000 	cmp	r2, #0
                }
                if ((temp1 & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK) && (!(temp & ALT_CLKMGR_MAINPLL_L4SRC_L4SP_SET_MSK)))
                {
                    restore_1 = true;
                }
                temp = temp1;
    bfdc:	e58d0004 	str	r0, [sp, #4]
                if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
    bfe0:	159d0004 	ldrne	r0, [sp, #4]
    bfe4:	13c00004 	bicne	r0, r0, #4
    bfe8:	158d0004 	strne	r0, [sp, #4]
                if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
    bfec:	e3530000 	cmp	r3, #0
    bff0:	0a000111 	beq	c43c <alt_clk_divider_set+0x1870>
    bff4:	e59d3004 	ldr	r3, [sp, #4]
    bff8:	e3c33008 	bic	r3, r3, #8
    bffc:	e58d3004 	str	r3, [sp, #4]
                if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    c000:	e59d2004 	ldr	r2, [sp, #4]
    c004:	e3043fff 	movw	r3, #20479	; 0x4fff
    c008:	e3a0c001 	mov	r12, #1
    c00c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c010:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061

                alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR, wrval);
    c014:	e3043fff 	movw	r3, #20479	; 0x4fff
    c018:	e3a0001e 	mov	r0, #30
    c01c:	e34f3fd0 	movt	r3, #65488	; 0xffd0

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    c020:	e1a02003 	mov	r2, r3
                temp = temp1;
                if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
                if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
                if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }

                alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR, wrval);
    c024:	e5031fb3 	str	r1, [r3, #-4019]	; 0xfffff04d
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c028:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    c02c:	e3043fff 	movw	r3, #20479	; 0x4fff
    c030:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c034:	e5121f9f 	ldr	r1, [r2, #-3999]	; 0xfffff061
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c038:	1afffffa 	bne	c028 <alt_clk_divider_set+0x145c>

                alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR, wrval);

                alt_clk_mgr_wait(ALT_CLKMGR_MAINPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
                /* wait a bit before reenabling the L4MP and L4SP clocks */
                if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp1); }
    c03c:	e35c0000 	cmp	r12, #0
    c040:	0afffb53 	beq	ad94 <alt_clk_divider_set+0x1c8>
    c044:	e59d2008 	ldr	r2, [sp, #8]
    c048:	e5032f9f 	str	r2, [r3, #-3999]	; 0xfffff061
    c04c:	eafffb1a 	b	acbc <alt_clk_divider_set+0xf0>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_MAIN_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    c050:	e3043fff 	movw	r3, #20479	; 0x4fff
        /* get the QSPI clock source */
        restore_0 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR) & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
        /* and the current enable state */
        wrval = div - 1;
    c054:	e2410001 	sub	r0, r1, #1
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_MAIN_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    c058:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c05c:	e5132f53 	ldr	r2, [r3, #-3923]	; 0xfffff0ad
    c060:	e7e12252 	ubfx	r2, r2, #4, #2
    c064:	e58d2004 	str	r2, [sp, #4]
        /* get the QSPI clock source */
        restore_0 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR) & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
    c068:	e513cf5f 	ldr	r12, [r3, #-3935]	; 0xfffff0a1
        /* and the current enable state */
        wrval = div - 1;

        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
    c06c:	e59d2004 	ldr	r2, [sp, #4]
        break;

    case ALT_CLK_MAIN_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
        /* get the QSPI clock source */
        restore_0 = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR) & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
    c070:	e7e0c5dc 	ubfx	r12, r12, #11, #1
        /* and the current enable state */
        wrval = div - 1;

        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
    c074:	e3520001 	cmp	r2, #1
    c078:	0a00010c 	beq	c4b0 <alt_clk_divider_set+0x18e4>
            else
            {
                ret = ALT_E_ARG_RANGE;
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
    c07c:	e59d2004 	ldr	r2, [sp, #4]
    c080:	e3520002 	cmp	r2, #2
    c084:	1afffb0b 	bne	acb8 <alt_clk_divider_set+0xec>
        {
            if (div <= ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_SET_MSK)
    c088:	e3510c02 	cmp	r1, #512	; 0x200
    c08c:	2afffc72 	bcs	b25c <alt_clk_divider_set+0x690>
            {
                if (restore_0)
    c090:	e35c0000 	cmp	r12, #0
                {
                    alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
    c094:	15132f5f 	ldrne	r2, [r3, #-3935]	; 0xfffff0a1
    c098:	13c22b02 	bicne	r2, r2, #2048	; 0x800
    c09c:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    c0a0:	e3043fff 	movw	r3, #20479	; 0x4fff
    c0a4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c0a8:	e5132f7f 	ldr	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    c0ac:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    c0b0:	e3822302 	orr	r2, r2, #134217728	; 0x8000000
    c0b4:	e5032f7f 	str	r2, [r3, #-3967]	; 0xfffff081
    do
    {
        temp = alt_read_word(stataddr);
    c0b8:	e5112f4f 	ldr	r2, [r1, #-3919]	; 0xfffff0b1
    c0bc:	e3043fff 	movw	r3, #20479	; 0x4fff
    c0c0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c0c4:	e58d2044 	str	r2, [sp, #68]	; 0x44
    } while (!(temp & msk));
    c0c8:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
    c0cc:	e3120004 	tst	r2, #4
    c0d0:	0afffff8 	beq	c0b8 <alt_clk_divider_set+0x14ec>

    alt_write_word(cntraddr, val);
    c0d4:	e5030f6f 	str	r0, [r3, #-3951]	; 0xfffff091

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    c0d8:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    c0dc:	e5131f7f 	ldr	r1, [r3, #-3967]	; 0xfffff081
    c0e0:	e3a0001e 	mov	r0, #30
    c0e4:	e3c11302 	bic	r1, r1, #134217728	; 0x8000000
    c0e8:	e5031f7f 	str	r1, [r3, #-3967]	; 0xfffff081
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c0ec:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    c0f0:	e3043fff 	movw	r3, #20479	; 0x4fff
    c0f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c0f8:	e5121f6f 	ldr	r1, [r2, #-3951]	; 0xfffff091
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c0fc:	1afffffa 	bne	c0ec <alt_clk_divider_set+0x1520>
                                         wrval,
                                         ALT_CLK_PLL_RST_BIT_C2,
                                         ALT_CLKMGR_PERPLL_VCO_OUTRST_LSB);

                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR, ALT_SW_MANAGED_CLK_WAIT_CTRDIV);
                if (restore_0)
    c100:	e35c0000 	cmp	r12, #0
    c104:	0afffb22 	beq	ad94 <alt_clk_divider_set+0x1c8>
                {
                    alt_setbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
    c108:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    c10c:	e3822b02 	orr	r2, r2, #2048	; 0x800
    c110:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
    c114:	eafffae8 	b	acbc <alt_clk_divider_set+0xf0>
    {
        /* Main PLL outputs */
    case ALT_CLK_MAIN_PLL_C0:
    case ALT_CLK_MPU:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR)) + 1);
    c118:	e3043fff 	movw	r3, #20479	; 0x4fff
    c11c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c120:	e5135f1f 	ldr	r5, [r3, #-3871]	; 0xfffff0e1
    c124:	e1a05b85 	lsl	r5, r5, #23
    c128:	e1a05ba5 	lsr	r5, r5, #23
    c12c:	e2855001 	add	r5, r5, #1

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET_MSK + 1) * prediv))
    c130:	e1510485 	cmp	r1, r5, lsl #9
    c134:	8afffc48 	bhi	b25c <alt_clk_divider_set+0x690>
#endif
}

static bool alt_clkmgr_is_val_modulo_n(uint32_t div, uint32_t mod)
{
    if (mod == 1)
    c138:	e3550001 	cmp	r5, #1
    c13c:	0a00000c 	beq	c174 <alt_clk_divider_set+0x15a8>
    {
        return true;
    }
    else if (mod == 2)
    c140:	e3550002 	cmp	r5, #2
    {
        return (div & 0x1) == 0;
    c144:	02011001 	andeq	r1, r1, #1
    c148:	02211001 	eoreq	r1, r1, #1
{
    if (mod == 1)
    {
        return true;
    }
    else if (mod == 2)
    c14c:	0a000006 	beq	c16c <alt_clk_divider_set+0x15a0>
    {
        return (div & 0x1) == 0;
    }
    else if (mod == 4)
    c150:	e3550004 	cmp	r5, #4
    c154:	0a00015e 	beq	c6d4 <alt_clk_divider_set+0x1b08>
    {
        return (div & 0x3) == 0;
    }
    else
    {
        return (div % mod) == 0;
    c158:	e1a00004 	mov	r0, r4
    c15c:	e1a01005 	mov	r1, r5
    c160:	eb003232 	bl	18a30 <__aeabi_uidivmod>
    c164:	e2711001 	rsbs	r1, r1, #1
    c168:	33a01000 	movcc	r1, #0
    case ALT_CLK_MPU:
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR)) + 1);

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET_MSK + 1) * prediv))
                && alt_clkmgr_is_val_modulo_n(div, prediv)
    c16c:	e3510000 	cmp	r1, #0
    c170:	0afffc39 	beq	b25c <alt_clk_divider_set+0x690>
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    c174:	e3540000 	cmp	r4, #0
{
#if ALT_CLK_WITHIN_FREQ_LIMITS_TEST_MODE
    return ALT_E_TRUE;
#else
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    uint32_t        numer = 0;
    c178:	e3a03000 	mov	r3, #0
    c17c:	e58d3044 	str	r3, [sp, #68]	; 0x44
    uint32_t        hilimit;
    uint32_t        lolimit;

    if (div == 0)
    c180:	0afffc35 	beq	b25c <alt_clk_divider_set+0x690>

    switch (clk)
    {
        /* Counters of the Main PLL */
    case ALT_CLK_MAIN_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C0;
    c184:	e3023a94 	movw	r3, #10900	; 0x2a94
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    c188:	e3a00009 	mov	r0, #9

    switch (clk)
    {
        /* Counters of the Main PLL */
    case ALT_CLK_MAIN_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C0;
    c18c:	e3403002 	movt	r3, #2
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    c190:	e28d1044 	add	r1, sp, #68	; 0x44

    switch (clk)
    {
        /* Counters of the Main PLL */
    case ALT_CLK_MAIN_PLL_C0:
        hilimit = alt_pll_cntr_maxfreq.MainPLL_C0;
    c194:	e59360a0 	ldr	r6, [r3, #160]	; 0xa0
        lolimit = alt_ext_clk_paramblok.clkosc1.freqcur;
    c198:	e5937000 	ldr	r7, [r3]
        status = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &numer);
    c19c:	ebfff87a 	bl	a38c <alt_clk_pll_vco_freq_get>
    default:
        status = ALT_E_BAD_ARG;
        break;
    }

    if (status == ALT_E_SUCCESS)
    c1a0:	e3500000 	cmp	r0, #0
    c1a4:	1a00009b 	bne	c418 <alt_clk_divider_set+0x184c>
    {
        numer = numer / div;
    c1a8:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
    c1ac:	e1a01004 	mov	r1, r4
    c1b0:	eb0031e1 	bl	1893c <__aeabi_uidiv>
        if ((numer <= hilimit) && (numer >= lolimit))
    c1b4:	e1560000 	cmp	r6, r0
    c1b8:	3afffc27 	bcc	b25c <alt_clk_divider_set+0x690>
    c1bc:	e1570000 	cmp	r7, r0
    c1c0:	8afffc25 	bhi	b25c <alt_clk_divider_set+0x690>

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET_MSK + 1) * prediv))
                && alt_clkmgr_is_val_modulo_n(div, prediv)
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C0, div) == ALT_E_TRUE) )
            {
                wrval = (div / prediv) - 1;
    c1c4:	e1a00004 	mov	r0, r4
    c1c8:	e1a01005 	mov	r1, r5
    c1cc:	eb0031da 	bl	1893c <__aeabi_uidiv>

                /* HW managed clock, change by writing to the external counter,  no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */
                alt_write_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR, wrval);
    c1d0:	e3043fff 	movw	r3, #20479	; 0x4fff

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET_MSK + 1) * prediv))
                && alt_clkmgr_is_val_modulo_n(div, prediv)
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C0, div) == ALT_E_TRUE) )
            {
                wrval = (div / prediv) - 1;
    c1d4:	e2402001 	sub	r2, r0, #1

                /* HW managed clock, change by writing to the external counter,  no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */
                alt_write_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR, wrval);
    c1d8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
                ret = ALT_E_SUCCESS;
    c1dc:	e3a00000 	mov	r0, #0
            {
                wrval = (div / prediv) - 1;

                /* HW managed clock, change by writing to the external counter,  no need to gate clock
                // or match phase or wait for transistion time. No other field in the register to mask off either. */
                alt_write_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR, wrval);
    c1e0:	e5032fb7 	str	r2, [r3, #-4023]	; 0xfffff049
                ret = ALT_E_SUCCESS;
    c1e4:	eafffab4 	b	acbc <alt_clk_divider_set+0xf0>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_L4_SP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV1; }
    c1e8:	e3510001 	cmp	r1, #1
    c1ec:	0a0000e0 	beq	c574 <alt_clk_divider_set+0x19a8>
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV2; }
    c1f0:	e3510002 	cmp	r1, #2
    c1f4:	0a000118 	beq	c65c <alt_clk_divider_set+0x1a90>
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV4; }
    c1f8:	e3510004 	cmp	r1, #4
    c1fc:	0a00012a 	beq	c6ac <alt_clk_divider_set+0x1ae0>
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV8; }
    c200:	e3510008 	cmp	r1, #8
    c204:	0a00013e 	beq	c704 <alt_clk_divider_set+0x1b38>
        else if (div == 16) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV16; }
    c208:	e3510010 	cmp	r1, #16
    c20c:	1afffc12 	bne	b25c <alt_clk_divider_set+0x690>
    c210:	e3a04c02 	mov	r4, #512	; 0x200

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    c214:	e3043fff 	movw	r3, #20479	; 0x4fff
    c218:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c21c:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    c220:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK)
    c224:	e59d2004 	ldr	r2, [sp, #4]
    c228:	e212c008 	ands	r12, r2, #8
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK);
    c22c:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    c230:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK);
    c234:	13c22008 	bicne	r2, r2, #8
    c238:	15032f9f 	strne	r2, [r3, #-3999]	; 0xfffff061
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_SET_MSK,
    c23c:	e3043fff 	movw	r3, #20479	; 0x4fff
    c240:	e3a0001e 	mov	r0, #30
    c244:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c248:	e5131f9b 	ldr	r1, [r3, #-3995]	; 0xfffff065

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    c24c:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_SET_MSK,
    c250:	e3c11d0e 	bic	r1, r1, #896	; 0x380
    c254:	e1841001 	orr	r1, r4, r1
    c258:	e5031f9b 	str	r1, [r3, #-3995]	; 0xfffff065
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c25c:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    c260:	e3043fff 	movw	r3, #20479	; 0x4fff
    c264:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c268:	e5121f9b 	ldr	r1, [r2, #-3995]	; 0xfffff065
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c26c:	1afffffa 	bne	c25c <alt_clk_divider_set+0x1690>
    c270:	eafffc6e 	b	b430 <alt_clk_divider_set+0x864>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_DBG:
        if      (div == 2) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_E_DIV2; }
    c274:	e3510002 	cmp	r1, #2
    c278:	0a0000ad 	beq	c534 <alt_clk_divider_set+0x1968>
        else if (div == 4) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_E_DIV4; }
    c27c:	e3510004 	cmp	r1, #4
    c280:	1afffbf5 	bne	b25c <alt_clk_divider_set+0x690>

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    c284:	e3043fff 	movw	r3, #20479	; 0x4fff
    c288:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c28c:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    c290:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK)
    c294:	e59d2004 	ldr	r2, [sp, #4]
    c298:	e212c020 	ands	r12, r2, #32
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGCLK_CLR_MSK);
    c29c:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    c2a0:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_MAINPLL_EN_DBGCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGCLK_CLR_MSK);
    c2a4:	13c22020 	bicne	r2, r2, #32
    c2a8:	15032f9f 	strne	r2, [r3, #-3999]	; 0xfffff061
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_SET_MSK,
    c2ac:	e3043fff 	movw	r3, #20479	; 0x4fff
    c2b0:	e3a0001e 	mov	r0, #30
    c2b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c2b8:	e5131f97 	ldr	r1, [r3, #-3991]	; 0xfffff069

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    c2bc:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_DBGCLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_SET_MSK,
    c2c0:	e3c1100c 	bic	r1, r1, #12
    c2c4:	e1844001 	orr	r4, r4, r1
    c2c8:	e5034f97 	str	r4, [r3, #-3991]	; 0xfffff069
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c2cc:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    c2d0:	e3043fff 	movw	r3, #20479	; 0x4fff
    c2d4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c2d8:	e5121f97 	ldr	r1, [r2, #-3991]	; 0xfffff069
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c2dc:	1afffffa 	bne	c2cc <alt_clk_divider_set+0x1700>
    c2e0:	eafffc52 	b	b430 <alt_clk_divider_set+0x864>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_L4_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV1; }
    c2e4:	e3510001 	cmp	r1, #1
    c2e8:	0a00008f 	beq	c52c <alt_clk_divider_set+0x1960>
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV2; }
    c2ec:	e3510002 	cmp	r1, #2
    c2f0:	0a0000d3 	beq	c644 <alt_clk_divider_set+0x1a78>
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV4; }
    c2f4:	e3510004 	cmp	r1, #4
    c2f8:	0a0000e5 	beq	c694 <alt_clk_divider_set+0x1ac8>
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV8; }
    c2fc:	e3510008 	cmp	r1, #8
    c300:	0a0000fd 	beq	c6fc <alt_clk_divider_set+0x1b30>
        else if (div == 16) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV16; }
    c304:	e3510010 	cmp	r1, #16
    c308:	1afffbd3 	bne	b25c <alt_clk_divider_set+0x690>
    c30c:	e3a04040 	mov	r4, #64	; 0x40

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    c310:	e3043fff 	movw	r3, #20479	; 0x4fff
    c314:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c318:	e5132f9f 	ldr	r2, [r3, #-3999]	; 0xfffff061
    c31c:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK)
    c320:	e59d2004 	ldr	r2, [sp, #4]
    c324:	e212c004 	ands	r12, r2, #4
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK);
    c328:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    c32c:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK);
    c330:	13c22004 	bicne	r2, r2, #4
    c334:	15032f9f 	strne	r2, [r3, #-3999]	; 0xfffff061
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_SET_MSK,
    c338:	e3043fff 	movw	r3, #20479	; 0x4fff
    c33c:	e3a0001e 	mov	r0, #30
    c340:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c344:	e5131f9b 	ldr	r1, [r3, #-3995]	; 0xfffff065

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    c348:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp & ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_SET_MSK,
    c34c:	e3c11070 	bic	r1, r1, #112	; 0x70
    c350:	e1841001 	orr	r1, r4, r1
    c354:	e5031f9b 	str	r1, [r3, #-3995]	; 0xfffff065
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c358:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    c35c:	e3043fff 	movw	r3, #20479	; 0x4fff
    c360:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c364:	e5121f9b 	ldr	r1, [r2, #-3995]	; 0xfffff065
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c368:	1afffffa 	bne	c358 <alt_clk_divider_set+0x178c>
    c36c:	eafffc2f 	b	b430 <alt_clk_divider_set+0x864>

            /* now AND those with the current state of the three gate enables */
            /* to get the clocks which must be gated off and then back on */
            temp1 = temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            restore_0 = restore_0 && (temp & ALT_CLKMGR_PERPLL_EN_SDMMCCLK_SET_MSK);
            restore_1 = restore_1 && (temp & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK);
    c370:	e3a02000 	mov	r2, #0
            restore_2 = restore_2 && (temp & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK);
    c374:	e3a0c000 	mov	r12, #0
    c378:	eafffdc0 	b	ba80 <alt_clk_divider_set+0xeb4>
        break;

    case ALT_CLK_PERIPHERAL_PLL_C1:
    case ALT_CLK_EMAC1:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC1CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C1, div) == ALT_E_TRUE) )
    c37c:	e3500001 	cmp	r0, #1
    c380:	0afffb51 	beq	b0cc <alt_clk_divider_set+0x500>
    c384:	eafffbb4 	b	b25c <alt_clk_divider_set+0x690>
        }
        break;

    case ALT_CLK_PERIPHERAL_PLL_C3:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C3, div) == ALT_E_TRUE) )
    c388:	e3500001 	cmp	r0, #1
    c38c:	0afffda1 	beq	ba18 <alt_clk_divider_set+0xe4c>
    c390:	eafffbb1 	b	b25c <alt_clk_divider_set+0x690>
        break;

    case ALT_CLK_MAIN_PLL_C4:
    case ALT_CLK_MAIN_NAND_SDMMC:
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C4, div) == ALT_E_TRUE) )
    c394:	e3500001 	cmp	r0, #1
    c398:	0afffc3f 	beq	b49c <alt_clk_divider_set+0x8d0>
    c39c:	eafffbae 	b	b25c <alt_clk_divider_set+0x690>

        /* Peripheral PLL outputs */
    case ALT_CLK_PERIPHERAL_PLL_C0:
    case ALT_CLK_EMAC0:
        if (   (div <= (ALT_CLKMGR_PERPLL_EMAC0CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C0, div) == ALT_E_TRUE) )
    c3a0:	e3500001 	cmp	r0, #1
    c3a4:	0afffb7f 	beq	b1a8 <alt_clk_divider_set+0x5dc>
    c3a8:	eafffbab 	b	b25c <alt_clk_divider_set+0x690>
        break;

    case ALT_CLK_PERIPHERAL_PLL_C5:
    case ALT_CLK_H2F_USER1:
        if (   (div <= (ALT_CLKMGR_PERPLL_S2FUSER1CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C5, div) == ALT_E_TRUE) )
    c3ac:	e3500001 	cmp	r0, #1
    c3b0:	0afffd1b 	beq	b824 <alt_clk_divider_set+0xc58>
    c3b4:	eafffba8 	b	b25c <alt_clk_divider_set+0x690>

        /* SDRAM PLL outputs */
    case ALT_CLK_SDRAM_PLL_C0:
    case ALT_CLK_DDR_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQSCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C0, div) == ALT_E_TRUE) )
    c3b8:	e3500001 	cmp	r0, #1
    c3bc:	0afffabb 	beq	aeb0 <alt_clk_divider_set+0x2e4>
    c3c0:	eafffba5 	b	b25c <alt_clk_divider_set+0x690>
        break;

    case ALT_CLK_SDRAM_PLL_C2:
    case ALT_CLK_DDR_DQ:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDRDQCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C2, div) == ALT_E_TRUE) )
    c3c4:	e3500001 	cmp	r0, #1
    c3c8:	0afffa86 	beq	ade8 <alt_clk_divider_set+0x21c>
    c3cc:	eafffba2 	b	b25c <alt_clk_divider_set+0x690>

    case ALT_CLK_MAIN_PLL_C3:
        /* The rest of the PLL outputs do not have external counters, but
        // their internal counters are programmable rather than fixed */
        if (   (div <= (ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C3, div) == ALT_E_TRUE) )
    c3d0:	e3500001 	cmp	r0, #1
    c3d4:	0afffca1 	beq	b660 <alt_clk_divider_set+0xa94>
    c3d8:	eafffb9f 	b	b25c <alt_clk_divider_set+0x690>
        }
        break;

    case ALT_CLK_PERIPHERAL_PLL_C2:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERQSPICLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C2, div) == ALT_E_TRUE) )
    c3dc:	e3500001 	cmp	r0, #1
    c3e0:	0afffdf9 	beq	bbcc <alt_clk_divider_set+0x1000>
    c3e4:	eafffb9c 	b	b25c <alt_clk_divider_set+0x690>
        }
        break;

    case ALT_CLK_PERIPHERAL_PLL_C4:
        if (   (div <= (ALT_CLKMGR_PERPLL_PERBASECLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_PERIPHERAL_PLL_C4, div) == ALT_E_TRUE) )
    c3e8:	e3500001 	cmp	r0, #1
    c3ec:	0afffe2c 	beq	bca4 <alt_clk_divider_set+0x10d8>
    c3f0:	eafffb99 	b	b25c <alt_clk_divider_set+0x690>
        break;

    case ALT_CLK_SDRAM_PLL_C1:
    case ALT_CLK_DDR_2X_DQS:
        if (   (div <= (ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C1, div) == ALT_E_TRUE) )
    c3f4:	e3500001 	cmp	r0, #1
    c3f8:	0afffafe 	beq	aff8 <alt_clk_divider_set+0x42c>
    c3fc:	eafffb96 	b	b25c <alt_clk_divider_set+0x690>

    case ALT_CLK_MAIN_PLL_C5:
    case ALT_CLK_CFG:
    case ALT_CLK_H2F_USER0:
        if (   (div <= (ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C5, div) == ALT_E_TRUE) )
    c400:	e3500001 	cmp	r0, #1
    c404:	0afffbe0 	beq	b38c <alt_clk_divider_set+0x7c0>
    c408:	eafffb93 	b	b25c <alt_clk_divider_set+0x690>
        break;

    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        if (   (div <= (ALT_CLKMGR_SDRPLL_S2FUSER2CLK_CNT_SET_MSK + 1))
            && (alt_clk_within_freq_limits(ALT_CLK_SDRAM_PLL_C5, div) == ALT_E_TRUE) )
    c40c:	e3500001 	cmp	r0, #1
    c410:	0afffa41 	beq	ad1c <alt_clk_divider_set+0x150>
    c414:	eafffb90 	b	b25c <alt_clk_divider_set+0x690>
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_MPUCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MPUCLK_ADDR)) + 1);

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MPUCLK_CNT_SET_MSK + 1) * prediv))
                && alt_clkmgr_is_val_modulo_n(div, prediv)
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C0, div) == ALT_E_TRUE) )
    c418:	e3500001 	cmp	r0, #1
    c41c:	0affff68 	beq	c1c4 <alt_clk_divider_set+0x15f8>
    c420:	eafffb8d 	b	b25c <alt_clk_divider_set+0x690>
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_DBGATCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_DBGATCLK_ADDR)) + 1);

            if (   (div <= ((ALT_CLKMGR_MAINPLL_DBGATCLK_CNT_SET_MSK + 1) * prediv))
                   && alt_clkmgr_is_val_modulo_n(div, prediv)
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C2, div) == ALT_E_TRUE) )
    c424:	e3500001 	cmp	r0, #1
    c428:	0afffcde 	beq	b7a8 <alt_clk_divider_set+0xbdc>
    c42c:	eafffb8a 	b	b25c <alt_clk_divider_set+0x690>
        {
            uint32_t prediv = (ALT_CLKMGR_MISC_MAINCLK_CNT_GET(alt_read_word(ALT_CLKMGR_MISC_MAINCLK_ADDR)) + 1);

            if (   (div <= ((ALT_CLKMGR_MAINPLL_MAINCLK_CNT_SET_MSK + 1) * prediv))
                && alt_clkmgr_is_val_modulo_n(div, prediv)
                && (alt_clk_within_freq_limits(ALT_CLK_MAIN_PLL_C1, div) == ALT_E_TRUE) )
    c430:	e3500001 	cmp	r0, #1
    c434:	0afffed2 	beq	bf84 <alt_clk_divider_set+0x13b8>
    c438:	eafffb87 	b	b25c <alt_clk_divider_set+0x690>
                    restore_1 = true;
                }
                temp = temp1;
                if (restore_0) { temp &= ALT_CLKMGR_MAINPLL_EN_L4MPCLK_CLR_MSK; }
                if (restore_1) { temp &= ALT_CLKMGR_MAINPLL_EN_L4SPCLK_CLR_MSK; }
                if (restore_0 || restore_1) { alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, temp); }
    c43c:	e3520000 	cmp	r2, #0
    c440:	01a0c002 	moveq	r12, r2
    c444:	0afffef2 	beq	c014 <alt_clk_divider_set+0x1448>
    c448:	eafffeec 	b	c000 <alt_clk_divider_set+0x1434>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_CAN1:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV1; }
    c44c:	e3a04000 	mov	r4, #0
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV8; }
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV16; }

        if (wrval != UINT32_MAX)
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    c450:	e3043fff 	movw	r3, #20479	; 0x4fff
    c454:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c458:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    c45c:	e58d2004 	str	r2, [sp, #4]
            if (temp & ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK)
    c460:	e59d2004 	ldr	r2, [sp, #4]
    c464:	e212c020 	ands	r12, r2, #32
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_CAN1CLK_CLR_MSK);
    c468:	159d2004 	ldrne	r2, [sp, #4]
                restore_0 = true;
    c46c:	13a0c001 	movne	r12, #1
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
            if (temp & ALT_CLKMGR_PERPLL_EN_CAN1CLK_SET_MSK)
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_CAN1CLK_CLR_MSK);
    c470:	13c22020 	bicne	r2, r2, #32
    c474:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_CAN1CLK_SET_MSK,
    c478:	e3043fff 	movw	r3, #20479	; 0x4fff
    c47c:	e3a0001e 	mov	r0, #30
    c480:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c484:	e5131f5b 	ldr	r1, [r3, #-3931]	; 0xfffff0a5

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    c488:	e1a02003 	mov	r2, r3
            {
                /* if clock is currently on, gate it off */
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_CAN1CLK_CLR_MSK);
                restore_0 = true;
            }
            alt_replbits_word(ALT_CLKMGR_PERPLL_DIV_ADDR, ALT_CLKMGR_PERPLL_DIV_CAN1CLK_SET_MSK,
    c48c:	e3c11c0e 	bic	r1, r1, #3584	; 0xe00
    c490:	e1841001 	orr	r1, r4, r1
    c494:	e5031f5b 	str	r1, [r3, #-3931]	; 0xfffff0a5
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c498:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    c49c:	e3043fff 	movw	r3, #20479	; 0x4fff
    c4a0:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c4a4:	e5121f5b 	ldr	r1, [r2, #-3931]	; 0xfffff0a5
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c4a8:	1afffffa 	bne	c498 <alt_clk_divider_set+0x18cc>
    c4ac:	eafffab9 	b	af98 <alt_clk_divider_set+0x3cc>
        /* and the current enable state */
        wrval = div - 1;

        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
        {           /* if the main_qspi_clk (Main PLL C3 Ouput) input is selected */
            if (div <= ALT_CLKMGR_MAINPLL_MAINQSPICLK_CNT_SET_MSK)
    c4b0:	e3510c02 	cmp	r1, #512	; 0x200
    c4b4:	2afffb68 	bcs	b25c <alt_clk_divider_set+0x690>
            {
                if (restore_0)
    c4b8:	e35c0000 	cmp	r12, #0
                {
                    alt_clrbits_word(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK);
    c4bc:	15132f5f 	ldrne	r2, [r3, #-3935]	; 0xfffff0a1
    c4c0:	13c22b02 	bicne	r2, r2, #2048	; 0x800
    c4c4:	15032f5f 	strne	r2, [r3, #-3935]	; 0xfffff0a1
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    c4c8:	e3043fff 	movw	r3, #20479	; 0x4fff
    c4cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c4d0:	e5132fbf 	ldr	r2, [r3, #-4031]	; 0xfffff041
    do
    {
        temp = alt_read_word(stataddr);
    c4d4:	e1a01003 	mov	r1, r3
#if ALT_PREVENT_GLITCH_CNTRRST
    /* this is here from an abundance of caution and it may not be necessary */
    /* to put the counter in reset for this write */
    volatile uint32_t   temp;

    alt_setbits_word(vcoaddr, msk << shift);                /* put the counter in reset */
    c4d8:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
    c4dc:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
    do
    {
        temp = alt_read_word(stataddr);
    c4e0:	e5112f8b 	ldr	r2, [r1, #-3979]	; 0xfffff075
    c4e4:	e3043fff 	movw	r3, #20479	; 0x4fff
    c4e8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c4ec:	e58d2040 	str	r2, [sp, #64]	; 0x40
    } while (!(temp & msk));
    c4f0:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
    c4f4:	e3120008 	tst	r2, #8
    c4f8:	0afffff8 	beq	c4e0 <alt_clk_divider_set+0x1914>

    alt_write_word(cntraddr, val);
    c4fc:	e5030fab 	str	r0, [r3, #-4011]	; 0xfffff055

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    c500:	e1a02003 	mov	r2, r3
    {
        temp = alt_read_word(stataddr);
    } while (!(temp & msk));

    alt_write_word(cntraddr, val);
    alt_clrbits_word(vcoaddr, msk << shift);                /* release counter reset */
    c504:	e5131fbf 	ldr	r1, [r3, #-4031]	; 0xfffff041
    c508:	e3a0001e 	mov	r0, #30
    c50c:	e3c11201 	bic	r1, r1, #268435456	; 0x10000000
    c510:	e5031fbf 	str	r1, [r3, #-4031]	; 0xfffff041
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c514:	e2500001 	subs	r0, r0, #1
    {
        (void) alt_read_word(reg);
    c518:	e3043fff 	movw	r3, #20479	; 0x4fff
    c51c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c520:	e5121fab 	ldr	r1, [r2, #-4011]	; 0xfffff055
/* minimum osc1 clock cycle delay.                                                      */
/****************************************************************************************/

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    c524:	1afffffa 	bne	c514 <alt_clk_divider_set+0x1948>
    c528:	eafffef4 	b	c100 <alt_clk_divider_set+0x1534>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_L4_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV1; }
    c52c:	e3a04000 	mov	r4, #0
    c530:	eaffff76 	b	c310 <alt_clk_divider_set+0x1744>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_DBG:
        if      (div == 2) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGCLK_E_DIV2; }
    c534:	e3a04000 	mov	r4, #0
    c538:	eaffff51 	b	c284 <alt_clk_divider_set+0x16b8>
        break;

    case ALT_CLK_L3_SP:
        /* note that the L3MP divider is upstream from the L3SP divider
        // and any changes to the former will affect the output of both */
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3SPCLK_E_DIV1; }
    c53c:	e3a0c000 	mov	r12, #0
    c540:	eafffb6f 	b	b304 <alt_clk_divider_set+0x738>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_SPI_M:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV1; }
    c544:	e3a04000 	mov	r4, #0
    c548:	eafffce4 	b	b8e0 <alt_clk_divider_set+0xd14>
        }
        break;

        /* Other clock dividers */
    case ALT_CLK_L3_MP:
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L3MPCLK_E_DIV1; }
    c54c:	e3a04000 	mov	r4, #0
    c550:	eafffc17 	b	b5b4 <alt_clk_divider_set+0x9e8>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_DBG_AT:
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV1; }
    c554:	e3a04000 	mov	r4, #0
    c558:	eafffe46 	b	be78 <alt_clk_divider_set+0x12ac>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_DBG_TRACE:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV1; }
    c55c:	e3a04000 	mov	r4, #0
    c560:	eafffe25 	b	bdfc <alt_clk_divider_set+0x1230>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_USB_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV1; }
    c564:	e3a04000 	mov	r4, #0
    c568:	eafffcff 	b	b96c <alt_clk_divider_set+0xda0>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_CAN0:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV1; }
    c56c:	e3a04000 	mov	r4, #0
    c570:	eafffb46 	b	b290 <alt_clk_divider_set+0x6c4>
            ret = ALT_E_ARG_RANGE;
        }
        break;

    case ALT_CLK_L4_SP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV1; }
    c574:	e3a04000 	mov	r4, #0
    c578:	eaffff25 	b	c214 <alt_clk_divider_set+0x1648>
            }

            /* do we need to gate off the NAND clock and/or the NANDX clock? */
            if (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK) { restore_1 = true; }
    c57c:	e59d2008 	ldr	r2, [sp, #8]
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK)  { restore_2 = true; }
    c580:	e59d3008 	ldr	r3, [sp, #8]
            }

            /* do we need to gate off the NAND clock and/or the NANDX clock? */
            if (ALT_CLKMGR_PERPLL_SRC_NAND_GET(temp) == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK) { restore_1 = true; }
    c584:	e7e024d2 	ubfx	r2, r2, #9, #1
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK)  { restore_2 = true; }
    c588:	e3130b01 	tst	r3, #1024	; 0x400
    c58c:	0afffbd3 	beq	b4e0 <alt_clk_divider_set+0x914>
            }

            temp = temp1;
    c590:	e59d3008 	ldr	r3, [sp, #8]
            if (restore_1 && restore_2)
    c594:	e3520000 	cmp	r2, #0
            {
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDXCLK_SET_MSK) { restore_1 = true; }
                if (temp1 & ALT_CLKMGR_PERPLL_EN_NANDCLK_SET_MSK)  { restore_2 = true; }
            }

            temp = temp1;
    c598:	e58d3004 	str	r3, [sp, #4]
            if (restore_1 && restore_2)
    c59c:	0afffbd1 	beq	b4e8 <alt_clk_divider_set+0x91c>
            {
                temp &= ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK;
    c5a0:	e59d0004 	ldr	r0, [sp, #4]
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
    c5a4:	e3043fff 	movw	r3, #20479	; 0x4fff
    c5a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
            }

            temp = temp1;
            if (restore_1 && restore_2)
            {
                temp &= ALT_CLKMGR_PERPLL_EN_NANDCLK_CLR_MSK;
    c5ac:	e3c00b01 	bic	r0, r0, #1024	; 0x400
    c5b0:	e58d0004 	str	r0, [sp, #4]
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
    c5b4:	e59d0004 	ldr	r0, [sp, #4]
    c5b8:	e5030f5f 	str	r0, [r3, #-3935]	; 0xfffff0a1

static __inline void alt_clk_mgr_wait(void* reg, uint32_t cnt)
{
    for (; cnt ; cnt--)
    {
        (void) alt_read_word(reg);
    c5bc:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    c5c0:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    c5c4:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    c5c8:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    c5cc:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    c5d0:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    c5d4:	e5130f5f 	ldr	r0, [r3, #-3935]	; 0xfffff0a1
    c5d8:	e5133f5f 	ldr	r3, [r3, #-3935]	; 0xfffff0a1
                /* gate nand_clk off at least 8 MPU clock cycles before before nand_x_clk */
            }

            if (restore_0 || restore_1)
            {
                if (restore_0) { temp &= ALT_CLKMGR_PERPLL_EN_SDMMCCLK_CLR_MSK; }
    c5dc:	e3510000 	cmp	r1, #0
                if (restore_1) { temp &= ALT_CLKMGR_PERPLL_EN_NANDXCLK_CLR_MSK; }
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
    c5e0:	e3a05001 	mov	r5, #1
                /* gate nand_clk off at least 8 MPU clock cycles before before nand_x_clk */
            }

            if (restore_0 || restore_1)
            {
                if (restore_0) { temp &= ALT_CLKMGR_PERPLL_EN_SDMMCCLK_CLR_MSK; }
    c5e4:	159d3004 	ldrne	r3, [sp, #4]
    c5e8:	13c33c01 	bicne	r3, r3, #256	; 0x100
    c5ec:	158d3004 	strne	r3, [sp, #4]
                if (restore_1) { temp &= ALT_CLKMGR_PERPLL_EN_NANDXCLK_CLR_MSK; }
    c5f0:	e3520000 	cmp	r2, #0
    c5f4:	159d3004 	ldrne	r3, [sp, #4]
    c5f8:	13c33c02 	bicne	r3, r3, #512	; 0x200
    c5fc:	158d3004 	strne	r3, [sp, #4]
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
    c600:	e3043fff 	movw	r3, #20479	; 0x4fff
    c604:	e59d2004 	ldr	r2, [sp, #4]
    c608:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    c60c:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
    c610:	eafffbb7 	b	b4f4 <alt_clk_divider_set+0x928>
        {
            temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
            if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
            {
                /* if qspi source is set to Peripheral PLL C2 */
                temp = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    c614:	e5132f5f 	ldr	r2, [r3, #-3935]	; 0xfffff0a1
    c618:	e58d2004 	str	r2, [sp, #4]
                /* and if qspi_clk is enabled */
                restore_0 = temp & ALT_CLKMGR_PERPLL_EN_QSPICLK_SET_MSK;
    c61c:	e59d2004 	ldr	r2, [sp, #4]
                if (restore_0)
    c620:	e3120b02 	tst	r2, #2048	; 0x800
    c624:	0afffd70 	beq	bbec <alt_clk_divider_set+0x1020>
                {
                    alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp & ALT_CLKMGR_PERPLL_EN_QSPICLK_CLR_MSK);
    c628:	e59d2004 	ldr	r2, [sp, #4]
    c62c:	e3a0c001 	mov	r12, #1
    c630:	e3c22b02 	bic	r2, r2, #2048	; 0x800
    c634:	e5032f5f 	str	r2, [r3, #-3935]	; 0xfffff0a1
    c638:	eafffd6c 	b	bbf0 <alt_clk_divider_set+0x1024>
        }
        break;

    case ALT_CLK_SPI_M:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV2; }
    c63c:	e3a04008 	mov	r4, #8
    c640:	eafffca6 	b	b8e0 <alt_clk_divider_set+0xd14>
        }
        break;

    case ALT_CLK_L4_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV2; }
    c644:	e3a04010 	mov	r4, #16
    c648:	eaffff30 	b	c310 <alt_clk_divider_set+0x1744>
        }
        break;

    case ALT_CLK_USB_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV2; }
    c64c:	e3a04001 	mov	r4, #1
    c650:	eafffcc5 	b	b96c <alt_clk_divider_set+0xda0>
        }
        break;

    case ALT_CLK_CAN0:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV2; }
    c654:	e3a04040 	mov	r4, #64	; 0x40
    c658:	eafffb0c 	b	b290 <alt_clk_divider_set+0x6c4>
        }
        break;

    case ALT_CLK_L4_SP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV2; }
    c65c:	e3a04080 	mov	r4, #128	; 0x80
    c660:	eafffeeb 	b	c214 <alt_clk_divider_set+0x1648>
        }
        break;

    case ALT_CLK_CAN1:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV2; }
    c664:	e3a04c02 	mov	r4, #512	; 0x200
    c668:	eaffff78 	b	c450 <alt_clk_divider_set+0x1884>
        }
        break;

    case ALT_CLK_DBG_AT:
        if      (div == 1) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV1; }
        else if (div == 2) { wrval = ALT_CLKMGR_MAINPLL_DBGDIV_DBGATCLK_E_DIV2; }
    c66c:	e3a04001 	mov	r4, #1
    c670:	eafffe00 	b	be78 <alt_clk_divider_set+0x12ac>
        }
        break;

    case ALT_CLK_DBG_TRACE:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV2; }
    c674:	e3a04001 	mov	r4, #1
    c678:	eafffddf 	b	bdfc <alt_clk_divider_set+0x1230>
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV4; }
    c67c:	e3a04002 	mov	r4, #2
    c680:	eafffddd 	b	bdfc <alt_clk_divider_set+0x1230>
        break;

    case ALT_CLK_CAN0:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV4; }
    c684:	e3a04080 	mov	r4, #128	; 0x80
    c688:	eafffb00 	b	b290 <alt_clk_divider_set+0x6c4>
        break;

    case ALT_CLK_CAN1:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV4; }
    c68c:	e3a04b01 	mov	r4, #1024	; 0x400
    c690:	eaffff6e 	b	c450 <alt_clk_divider_set+0x1884>
        break;

    case ALT_CLK_L4_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV4; }
    c694:	e3a04020 	mov	r4, #32
    c698:	eaffff1c 	b	c310 <alt_clk_divider_set+0x1744>
        break;

    case ALT_CLK_USB_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV4; }
    c69c:	e3a04002 	mov	r4, #2
    c6a0:	eafffcb1 	b	b96c <alt_clk_divider_set+0xda0>
        break;

    case ALT_CLK_SPI_M:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV4; }
    c6a4:	e3a04010 	mov	r4, #16
    c6a8:	eafffc8c 	b	b8e0 <alt_clk_divider_set+0xd14>
        break;

    case ALT_CLK_L4_SP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV4; }
    c6ac:	e3a04c01 	mov	r4, #256	; 0x100
    c6b0:	eafffed7 	b	c214 <alt_clk_divider_set+0x1648>
    {
        return (div & 0x1) == 0;
    }
    else if (mod == 4)
    {
        return (div & 0x3) == 0;
    c6b4:	e3140003 	tst	r4, #3
    c6b8:	13a01000 	movne	r1, #0
    c6bc:	03a01001 	moveq	r1, #1
    c6c0:	eafffc22 	b	b750 <alt_clk_divider_set+0xb84>
    c6c4:	e3140003 	tst	r4, #3
    c6c8:	13a01000 	movne	r1, #0
    c6cc:	03a01001 	moveq	r1, #1
    c6d0:	eafffe15 	b	bf2c <alt_clk_divider_set+0x1360>
    c6d4:	e3140003 	tst	r4, #3
    c6d8:	13a01000 	movne	r1, #0
    c6dc:	03a01001 	moveq	r1, #1
    c6e0:	eafffea1 	b	c16c <alt_clk_divider_set+0x15a0>

    case ALT_CLK_SPI_M:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV4; }
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_SPIMCLK_E_DIV8; }
    c6e4:	e3a04018 	mov	r4, #24
    c6e8:	eafffc7c 	b	b8e0 <alt_clk_divider_set+0xd14>

    case ALT_CLK_CAN0:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV4; }
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN0CLK_E_DIV8; }
    c6ec:	e3a040c0 	mov	r4, #192	; 0xc0
    c6f0:	eafffae6 	b	b290 <alt_clk_divider_set+0x6c4>

    case ALT_CLK_CAN1:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV4; }
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV8; }
    c6f4:	e3a04c06 	mov	r4, #1536	; 0x600
    c6f8:	eaffff54 	b	c450 <alt_clk_divider_set+0x1884>

    case ALT_CLK_L4_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV4; }
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4MPCLK_E_DIV8; }
    c6fc:	e3a04030 	mov	r4, #48	; 0x30
    c700:	eaffff02 	b	c310 <alt_clk_divider_set+0x1744>

    case ALT_CLK_L4_SP:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV4; }
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_MAINDIV_L4SPCLK_E_DIV8; }
    c704:	e3a04d06 	mov	r4, #384	; 0x180
    c708:	eafffec1 	b	c214 <alt_clk_divider_set+0x1648>

    case ALT_CLK_DBG_TRACE:
        if      (div ==  1) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV4; }
        else if (div ==  8) { wrval = ALT_CLKMGR_MAINPLL_TRACEDIV_TRACECLK_E_DIV8; }
    c70c:	e3a04003 	mov	r4, #3
    c710:	eafffdb9 	b	bdfc <alt_clk_divider_set+0x1230>

    case ALT_CLK_USB_MP:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV4; }
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_USBCLK_E_DIV8; }
    c714:	e3a04003 	mov	r4, #3
    c718:	eafffc93 	b	b96c <alt_clk_divider_set+0xda0>
    case ALT_CLK_CAN1:
        if      (div ==  1) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV1; }
        else if (div ==  2) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV2; }
        else if (div ==  4) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV4; }
        else if (div ==  8) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV8; }
        else if (div == 16) { wrval = ALT_CLKMGR_PERPLL_DIV_CAN1CLK_E_DIV16; }
    c71c:	e3a04b02 	mov	r4, #2048	; 0x800
    c720:	eaffff4a 	b	c450 <alt_clk_divider_set+0x1884>
                alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, temp);
                alt_clk_mgr_wait(ALT_CLKMGR_PERPLL_EN_ADDR, ALT_SW_MANAGED_CLK_WAIT_NANDCLK);
                /* gate nand_clk off at least 8 MPU clock cycles before before nand_x_clk */
            }

            if (restore_0 || restore_1)
    c724:	e3a0c000 	mov	r12, #0
    c728:	eaffffab 	b	c5dc <alt_clk_divider_set+0x1a10>

0000c72c <alt_clk_freq_get>:

/*
// alt_clk_freq_get() returns the output frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    c72c:	e92d4df0 	push	{r4, r5, r6, r7, r8, r10, r11, lr}
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;

    if (freq == NULL)
    c730:	e2518000 	subs	r8, r1, #0

/*
// alt_clk_freq_get() returns the output frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    c734:	e24dd008 	sub	sp, sp, #8
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    c738:	e3a03000 	mov	r3, #0

/*
// alt_clk_freq_get() returns the output frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    c73c:	e1a06000 	mov	r6, r0
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    c740:	e58d3004 	str	r3, [sp, #4]
    uint64_t        numer = 0;
    uint64_t        denom = 1;

    if (freq == NULL)
    c744:	0a000043 	beq	c858 <alt_clk_freq_get+0x12c>
    {
        return ret;
    }

    switch (clk)
    c748:	e3500040 	cmp	r0, #64	; 0x40
    c74c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    c750:	ea000040 	b	c858 <alt_clk_freq_get+0x12c>
    c754:	0000c8a4 	.word	0x0000c8a4
    c758:	0000cfd4 	.word	0x0000cfd4
    c75c:	0000c868 	.word	0x0000c868
    c760:	0000d1f8 	.word	0x0000d1f8
    c764:	0000c858 	.word	0x0000c858
    c768:	0000c858 	.word	0x0000c858
    c76c:	0000c858 	.word	0x0000c858
    c770:	0000c858 	.word	0x0000c858
    c774:	0000c858 	.word	0x0000c858
    c778:	0000cd04 	.word	0x0000cd04
    c77c:	0000d298 	.word	0x0000d298
    c780:	0000ce34 	.word	0x0000ce34
    c784:	0000c8a4 	.word	0x0000c8a4
    c788:	0000d0e4 	.word	0x0000d0e4
    c78c:	0000d0e4 	.word	0x0000d0e4
    c790:	0000d0e4 	.word	0x0000d0e4
    c794:	0000d0e4 	.word	0x0000d0e4
    c798:	0000d0e4 	.word	0x0000d0e4
    c79c:	0000d0e4 	.word	0x0000d0e4
    c7a0:	0000cb58 	.word	0x0000cb58
    c7a4:	0000caa8 	.word	0x0000caa8
    c7a8:	0000ca14 	.word	0x0000ca14
    c7ac:	0000ca60 	.word	0x0000ca60
    c7b0:	0000c9c8 	.word	0x0000c9c8
    c7b4:	0000c948 	.word	0x0000c948
    c7b8:	0000ca60 	.word	0x0000ca60
    c7bc:	0000c8c4 	.word	0x0000c8c4
    c7c0:	0000caf4 	.word	0x0000caf4
    c7c4:	0000cc2c 	.word	0x0000cc2c
    c7c8:	0000cf34 	.word	0x0000cf34
    c7cc:	0000cee8 	.word	0x0000cee8
    c7d0:	0000cc2c 	.word	0x0000cc2c
    c7d4:	0000d140 	.word	0x0000d140
    c7d8:	0000cca4 	.word	0x0000cca4
    c7dc:	0000d26c 	.word	0x0000d26c
    c7e0:	0000cdd4 	.word	0x0000cdd4
    c7e4:	0000cdd4 	.word	0x0000cdd4
    c7e8:	0000d07c 	.word	0x0000d07c
    c7ec:	0000d07c 	.word	0x0000d07c
    c7f0:	0000d07c 	.word	0x0000d07c
    c7f4:	0000d07c 	.word	0x0000d07c
    c7f8:	0000d07c 	.word	0x0000d07c
    c7fc:	0000d07c 	.word	0x0000d07c
    c800:	0000cbd8 	.word	0x0000cbd8
    c804:	0000d028 	.word	0x0000d028
    c808:	0000ce8c 	.word	0x0000ce8c
    c80c:	0000cedc 	.word	0x0000cedc
    c810:	0000cc68 	.word	0x0000cc68
    c814:	0000cd84 	.word	0x0000cd84
    c818:	0000cd50 	.word	0x0000cd50
    c81c:	0000cff4 	.word	0x0000cff4
    c820:	0000cb84 	.word	0x0000cb84
    c824:	0000d218 	.word	0x0000d218
    c828:	0000cf80 	.word	0x0000cf80
    c82c:	0000d10c 	.word	0x0000d10c
    c830:	0000ccd0 	.word	0x0000ccd0
    c834:	0000d1c4 	.word	0x0000d1c4
    c838:	0000ce00 	.word	0x0000ce00
    c83c:	0000c858 	.word	0x0000c858
    c840:	0000c858 	.word	0x0000c858
    c844:	0000d0b0 	.word	0x0000d0b0
    c848:	0000ccd0 	.word	0x0000ccd0
    c84c:	0000d1c4 	.word	0x0000d1c4
    c850:	0000ce00 	.word	0x0000ce00
    c854:	0000d0b0 	.word	0x0000d0b0
            denom = (uint64_t) temp;
        }
        break;

    default:
        ret = ALT_E_BAD_ARG;
    c858:	e3e0c008 	mvn	r12, #8
            ret = ALT_E_ERROR;
        }
    }

    return ret;
}
    c85c:	e1a0000c 	mov	r0, r12
    c860:	e28dd008 	add	sp, sp, #8
    c864:	e8bd8df0 	pop	{r4, r5, r6, r7, r8, r10, r11, pc}

    case ALT_CLK_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    c868:	e3023a94 	movw	r3, #10900	; 0x2a94
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;
    c86c:	e3a06001 	mov	r6, #1

    case ALT_CLK_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    c870:	e3403002 	movt	r3, #2
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;
    c874:	e3a07000 	mov	r7, #0

    case ALT_CLK_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    c878:	e5933020 	ldr	r3, [r3, #32]
    c87c:	e3a05000 	mov	r5, #0
    c880:	e1a04003 	mov	r4, r3
    if (ret == ALT_E_SUCCESS)
    {
        /* will not get here if none of above cases match */
        if (denom > 0)
        {
            numer /= denom;
    c884:	e1a00004 	mov	r0, r4
    c888:	e1a01005 	mov	r1, r5
    c88c:	e1a02006 	mov	r2, r6
    c890:	e1a03007 	mov	r3, r7
    c894:	eb00306e 	bl	18a54 <__aeabi_uldivmod>
            if (numer <= UINT32_MAX)
            {
                *freq = (uint32_t) numer;
    c898:	e3a0c000 	mov	r12, #0
    c89c:	e5880000 	str	r0, [r8]
    c8a0:	eaffffed 	b	c85c <alt_clk_freq_get+0x130>
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    c8a4:	e3023a94 	movw	r3, #10900	; 0x2a94
            denom = 1;
    c8a8:	e3a06001 	mov	r6, #1
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    c8ac:	e3403002 	movt	r3, #2
            denom = 1;
    c8b0:	e3a07000 	mov	r7, #0
    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    c8b4:	e5933000 	ldr	r3, [r3]
    c8b8:	e3a05000 	mov	r5, #0
    c8bc:	e1a04003 	mov	r4, r3
    c8c0:	eaffffef 	b	c884 <alt_clk_freq_get+0x158>
            denom = denom * (uint64_t) temp;
        }
        break;

    case ALT_CLK_L4_MP:
        ret = alt_clk_divider_get(ALT_CLK_L4_MP, &temp);
    c8c4:	e28d7004 	add	r7, sp, #4
    c8c8:	e3a0001a 	mov	r0, #26
    c8cc:	e1a01007 	mov	r1, r7
    c8d0:	ebfff78e 	bl	a710 <alt_clk_divider_get>
        if (ret == ALT_E_SUCCESS)
    c8d4:	e250c000 	subs	r12, r0, #0
    c8d8:	1affffdf 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            temp = ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR));
    c8dc:	e3042fff 	movw	r2, #20479	; 0x4fff

    case ALT_CLK_L4_MP:
        ret = alt_clk_divider_get(ALT_CLK_L4_MP, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    c8e0:	e59d6004 	ldr	r6, [sp, #4]
            temp = ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR));
    c8e4:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    c8e8:	e5123f8f 	ldr	r3, [r2, #-3983]	; 0xfffff071
    c8ec:	e2033001 	and	r3, r3, #1
            if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_MAINPLL)
    c8f0:	e3530000 	cmp	r3, #0
    case ALT_CLK_L4_MP:
        ret = alt_clk_divider_get(ALT_CLK_L4_MP, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
            temp = ALT_CLKMGR_MAINPLL_L4SRC_L4MP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR));
    c8f4:	e58d3004 	str	r3, [sp, #4]
            if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4MP_E_MAINPLL)
    c8f8:	0a00008b 	beq	cb2c <alt_clk_freq_get+0x400>
                    denom = denom * (uint64_t) temp;
                }
            }
            else if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL)         /* periph_base_clk */
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
    c8fc:	e1a01007 	mov	r1, r7
    c900:	e3a0000a 	mov	r0, #10
    c904:	ebfff6a0 	bl	a38c <alt_clk_pll_vco_freq_get>
                if (ret == ALT_E_SUCCESS)
    c908:	e250c000 	subs	r12, r0, #0
                {
                    numer = (uint64_t) temp;
                    ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
    c90c:	03a00029 	moveq	r0, #41	; 0x29
    c910:	01a01007 	moveq	r1, r7
            else if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL)         /* periph_base_clk */
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
                if (ret == ALT_E_SUCCESS)
                {
                    numer = (uint64_t) temp;
    c914:	059d4004 	ldreq	r4, [sp, #4]
                }
            }
            else if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_PERIPHPLL)         /* periph_base_clk */
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
                if (ret == ALT_E_SUCCESS)
    c918:	1affffcf 	bne	c85c <alt_clk_freq_get+0x130>
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
                if (ret == ALT_E_SUCCESS)
                {
                    numer = (uint64_t) temp;
                    ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
    c91c:	ebfff77b 	bl	a710 <alt_clk_divider_get>
                    denom = denom * (uint64_t) temp;
    c920:	e59d3004 	ldr	r3, [sp, #4]
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
                if (ret == ALT_E_SUCCESS)
                {
                    numer = (uint64_t) temp;
                    ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
    c924:	e1a0c000 	mov	r12, r0
            if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_MAINPLL)
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
                if (ret == ALT_E_SUCCESS)
                {
                    numer = (uint64_t) temp;
    c928:	e3a05000 	mov	r5, #0
                    ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
                    denom = denom * (uint64_t) temp;
    c92c:	e0876693 	umull	r6, r7, r3, r6
        ret = ALT_E_BAD_ARG;
        break;

    }   /* end of switch-case construct */

    if (ret == ALT_E_SUCCESS)
    c930:	e35c0000 	cmp	r12, #0
    c934:	1affffc8 	bne	c85c <alt_clk_freq_get+0x130>
    {
        /* will not get here if none of above cases match */
        if (denom > 0)
    c938:	e1963007 	orrs	r3, r6, r7
    c93c:	1affffd0 	bne	c884 <alt_clk_freq_get+0x158>
                    *freq = temp;
                    ret = ALT_E_SUCCESS;
                }
                else
                {
                    ret = ALT_E_ERROR;
    c940:	e3e0c000 	mvn	r12, #0
    c944:	eaffffc4 	b	c85c <alt_clk_freq_get+0x130>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    c948:	e3042fff 	movw	r2, #20479	; 0x4fff
    c94c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    c950:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    c954:	e2133001 	ands	r3, r3, #1
    c958:	0a000336 	beq	d638 <alt_clk_freq_get+0xf0c>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    c95c:	e3023a94 	movw	r3, #10900	; 0x2a94
    c960:	e3403002 	movt	r3, #2
    c964:	e5936000 	ldr	r6, [r3]
    c968:	e58d6004 	str	r6, [sp, #4]
    case ALT_CLK_L3_SP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
    c96c:	e3a0000e 	mov	r0, #14
    c970:	e28d1004 	add	r1, sp, #4
    c974:	ebfff765 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    c978:	e250c000 	subs	r12, r0, #0
    c97c:	1affffb6 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_L3_MP, &temp);
    c980:	e3a00017 	mov	r0, #23
    c984:	e28d1004 	add	r1, sp, #4
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    c988:	e59d7004 	ldr	r7, [sp, #4]
            ret = alt_clk_divider_get(ALT_CLK_L3_MP, &temp);
    c98c:	ebfff75f 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    c990:	e250c000 	subs	r12, r0, #0
    c994:	1affffb0 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = denom * (uint64_t) temp;
    c998:	e59da004 	ldr	r10, [sp, #4]
            ret = alt_clk_divider_get(ALT_CLK_L3_SP, &temp);
    c99c:	e3a00018 	mov	r0, #24
    c9a0:	e28d1004 	add	r1, sp, #4

    case ALT_CLK_L3_SP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    c9a4:	e1a04006 	mov	r4, r6
    c9a8:	e3a05000 	mov	r5, #0
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_L3_MP, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = denom * (uint64_t) temp;
    c9ac:	e08ba79a 	umull	r10, r11, r10, r7
            }
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_TRACE, &temp);
    c9b0:	ebfff756 	bl	a710 <alt_clk_divider_get>
            denom = denom * (uint64_t) temp;
    c9b4:	e59d3004 	ldr	r3, [sp, #4]
            }
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_TRACE, &temp);
    c9b8:	e1a0c000 	mov	r12, r0
            denom = denom * (uint64_t) temp;
    c9bc:	e087639a 	umull	r6, r7, r10, r3
    c9c0:	e0277b93 	mla	r7, r3, r11, r7
    c9c4:	eaffffd9 	b	c930 <alt_clk_freq_get+0x204>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    c9c8:	e3042fff 	movw	r2, #20479	; 0x4fff
    c9cc:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    c9d0:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    c9d4:	e2133001 	ands	r3, r3, #1
    c9d8:	0a0004a2 	beq	dc68 <alt_clk_freq_get+0x153c>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    c9dc:	e3023a94 	movw	r3, #10900	; 0x2a94
    c9e0:	e3403002 	movt	r3, #2
    c9e4:	e5937000 	ldr	r7, [r3]
    c9e8:	e58d7004 	str	r7, [sp, #4]
    case ALT_CLK_L3_MP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
    c9ec:	e3a0000e 	mov	r0, #14
    c9f0:	e28d1004 	add	r1, sp, #4
    c9f4:	ebfff745 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    c9f8:	e250c000 	subs	r12, r0, #0
    c9fc:	1affff96 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_L3_MP, &temp);
    ca00:	e3a00017 	mov	r0, #23
    ca04:	e28d1004 	add	r1, sp, #4
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    ca08:	e59d6004 	ldr	r6, [sp, #4]

    case ALT_CLK_L3_MP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    ca0c:	e1a04007 	mov	r4, r7
    ca10:	eaffffc1 	b	c91c <alt_clk_freq_get+0x1f0>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    ca14:	e3042fff 	movw	r2, #20479	; 0x4fff
    ca18:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    ca1c:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    ca20:	e2133001 	ands	r3, r3, #1
    ca24:	0a0004a4 	beq	dcbc <alt_clk_freq_get+0x1590>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ca28:	e3023a94 	movw	r3, #10900	; 0x2a94
    ca2c:	e3403002 	movt	r3, #2
    ca30:	e5937000 	ldr	r7, [r3]
    ca34:	e58d7004 	str	r7, [sp, #4]
    case ALT_CLK_MPU_PERIPH:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
    ca38:	e3a0000d 	mov	r0, #13
    ca3c:	e28d1004 	add	r1, sp, #4
    ca40:	ebfff732 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    ca44:	e250c000 	subs	r12, r0, #0
    ca48:	1affff83 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MPU_PERIPH, &temp);
    ca4c:	e3a00015 	mov	r0, #21
    ca50:	e28d1004 	add	r1, sp, #4
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    ca54:	e59d6004 	ldr	r6, [sp, #4]

    case ALT_CLK_MPU_PERIPH:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    ca58:	e1a04007 	mov	r4, r7
    ca5c:	eaffffae 	b	c91c <alt_clk_freq_get+0x1f0>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    ca60:	e3042fff 	movw	r2, #20479	; 0x4fff
    ca64:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    ca68:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    ca6c:	e2133001 	ands	r3, r3, #1
    ca70:	0a0004a6 	beq	dd10 <alt_clk_freq_get+0x15e4>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ca74:	e3023a94 	movw	r3, #10900	; 0x2a94
    ca78:	e3403002 	movt	r3, #2
    ca7c:	e5933000 	ldr	r3, [r3]
    ca80:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_L3_MAIN:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
    ca84:	e3a0000e 	mov	r0, #14
    case ALT_CLK_H2F_USER2:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C5, &temp);
    ca88:	e28d1004 	add	r1, sp, #4
    case ALT_CLK_SDRAM_PLL_C5:
    case ALT_CLK_H2F_USER2:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    ca8c:	e1a04003 	mov	r4, r3
    ca90:	e3a05000 	mov	r5, #0
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C5, &temp);
    ca94:	ebfff71d 	bl	a710 <alt_clk_divider_get>
            denom = (uint64_t) temp;
    ca98:	e1a07005 	mov	r7, r5
    case ALT_CLK_H2F_USER2:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C5, &temp);
    ca9c:	e1a0c000 	mov	r12, r0
            denom = (uint64_t) temp;
    caa0:	e59d6004 	ldr	r6, [sp, #4]
    caa4:	eaffffa1 	b	c930 <alt_clk_freq_get+0x204>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    caa8:	e3042fff 	movw	r2, #20479	; 0x4fff
    caac:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cab0:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    cab4:	e2133001 	ands	r3, r3, #1
    cab8:	0a00036e 	beq	d878 <alt_clk_freq_get+0x114c>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cabc:	e3023a94 	movw	r3, #10900	; 0x2a94
    cac0:	e3403002 	movt	r3, #2
    cac4:	e5937000 	ldr	r7, [r3]
    cac8:	e58d7004 	str	r7, [sp, #4]
    case ALT_CLK_MPU_L2_RAM:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
    cacc:	e3a0000d 	mov	r0, #13
    cad0:	e28d1004 	add	r1, sp, #4
    cad4:	ebfff70d 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    cad8:	e250c000 	subs	r12, r0, #0
    cadc:	1affff5e 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MPU_L2_RAM, &temp);
    cae0:	e3a00014 	mov	r0, #20
    cae4:	e28d1004 	add	r1, sp, #4
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    cae8:	e59d6004 	ldr	r6, [sp, #4]

    case ALT_CLK_MPU_L2_RAM:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    caec:	e1a04007 	mov	r4, r7
    caf0:	eaffff89 	b	c91c <alt_clk_freq_get+0x1f0>
            }
        }
        break;

    case ALT_CLK_L4_SP:
        ret = alt_clk_divider_get(ALT_CLK_L4_SP, &temp);
    caf4:	e28d7004 	add	r7, sp, #4
    caf8:	e3a0001b 	mov	r0, #27
    cafc:	e1a01007 	mov	r1, r7
    cb00:	ebfff702 	bl	a710 <alt_clk_divider_get>
        if (ret == ALT_E_SUCCESS)
    cb04:	e250c000 	subs	r12, r0, #0
    cb08:	1affff53 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            temp = ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR));
    cb0c:	e3042fff 	movw	r2, #20479	; 0x4fff

    case ALT_CLK_L4_SP:
        ret = alt_clk_divider_get(ALT_CLK_L4_SP, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    cb10:	e59d6004 	ldr	r6, [sp, #4]
            temp = ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR));
    cb14:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cb18:	e5123f8f 	ldr	r3, [r2, #-3983]	; 0xfffff071
    cb1c:	e7e030d3 	ubfx	r3, r3, #1, #1
            if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_MAINPLL)
    cb20:	e3530000 	cmp	r3, #0
    case ALT_CLK_L4_SP:
        ret = alt_clk_divider_get(ALT_CLK_L4_SP, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
            temp = ALT_CLKMGR_MAINPLL_L4SRC_L4SP_GET(alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR));
    cb24:	e58d3004 	str	r3, [sp, #4]
            if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_MAINPLL)
    cb28:	1affff73 	bne	c8fc <alt_clk_freq_get+0x1d0>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cb2c:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    cb30:	e2133001 	ands	r3, r3, #1
    cb34:	0a00059b 	beq	e1a8 <alt_clk_freq_get+0x1a7c>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cb38:	e3023a94 	movw	r3, #10900	; 0x2a94
    cb3c:	e3403002 	movt	r3, #2
    cb40:	e5933000 	ldr	r3, [r3]
    cb44:	e58d3004 	str	r3, [sp, #4]
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
                if (ret == ALT_E_SUCCESS)
                {
                    numer = (uint64_t) temp;
                    ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C1, &temp);
    cb48:	e3a0000e 	mov	r0, #14
    cb4c:	e1a01007 	mov	r1, r7
            if (temp == ALT_CLKMGR_MAINPLL_L4SRC_L4SP_E_MAINPLL)
            {
                ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
                if (ret == ALT_E_SUCCESS)
                {
                    numer = (uint64_t) temp;
    cb50:	e1a04003 	mov	r4, r3
    cb54:	eaffff70 	b	c91c <alt_clk_freq_get+0x1f0>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cb58:	e3042fff 	movw	r2, #20479	; 0x4fff
    cb5c:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cb60:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    cb64:	e2133001 	ands	r3, r3, #1
    cb68:	0a000243 	beq	d47c <alt_clk_freq_get+0xd50>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cb6c:	e3023a94 	movw	r3, #10900	; 0x2a94
    cb70:	e3403002 	movt	r3, #2
    cb74:	e5933000 	ldr	r3, [r3]
    cb78:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_MPU:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C0, &temp);
    cb7c:	e3a0000d 	mov	r0, #13
    cb80:	eaffffc0 	b	ca88 <alt_clk_freq_get+0x35c>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cb84:	e3043fff 	movw	r3, #20479	; 0x4fff
    cb88:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    cb8c:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    cb90:	e3120008 	tst	r2, #8
    cb94:	0a0002e6 	beq	d734 <alt_clk_freq_get+0x1008>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cb98:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    cb9c:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cba0:	e3403002 	movt	r3, #2
    cba4:	05937000 	ldreq	r7, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    cba8:	15937020 	ldrne	r7, [r3, #32]
    cbac:	e58d7004 	str	r7, [sp, #4]
    case ALT_CLK_CAN0:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
    cbb0:	e3a00029 	mov	r0, #41	; 0x29
    cbb4:	e28d1004 	add	r1, sp, #4
    cbb8:	ebfff6d4 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    cbbc:	e250c000 	subs	r12, r0, #0
    cbc0:	1affff25 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_CAN0, &temp);
    cbc4:	e3a00033 	mov	r0, #51	; 0x33
    cbc8:	e28d1004 	add	r1, sp, #4
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    cbcc:	e59d6004 	ldr	r6, [sp, #4]

    case ALT_CLK_CAN0:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    cbd0:	e1a04007 	mov	r4, r7
    cbd4:	eaffff50 	b	c91c <alt_clk_freq_get+0x1f0>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cbd8:	e3043fff 	movw	r3, #20479	; 0x4fff
    cbdc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    cbe0:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    cbe4:	e3120008 	tst	r2, #8
    cbe8:	0a000391 	beq	da34 <alt_clk_freq_get+0x1308>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cbec:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    cbf0:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cbf4:	e3403002 	movt	r3, #2
    cbf8:	05937000 	ldreq	r7, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    cbfc:	15937020 	ldrne	r7, [r3, #32]
    cc00:	e58d7004 	str	r7, [sp, #4]
    case ALT_CLK_USB_MP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
    cc04:	e3a00029 	mov	r0, #41	; 0x29
    cc08:	e28d1004 	add	r1, sp, #4
    cc0c:	ebfff6bf 	bl	a710 <alt_clk_divider_get>
            if (ret == ALT_E_SUCCESS)
    cc10:	e250c000 	subs	r12, r0, #0
    cc14:	1affff10 	bne	c85c <alt_clk_freq_get+0x130>
            {
                denom = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_USB_MP, &temp);
    cc18:	e3a0002b 	mov	r0, #43	; 0x2b
    cc1c:	e28d1004 	add	r1, sp, #4
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                denom = (uint64_t) temp;
    cc20:	e59d6004 	ldr	r6, [sp, #4]

    case ALT_CLK_USB_MP:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    cc24:	e1a04007 	mov	r4, r7
    cc28:	eaffff3b 	b	c91c <alt_clk_freq_get+0x1f0>
        }
        break;

    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    cc2c:	e3042fff 	movw	r2, #20479	; 0x4fff
    cc30:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cc34:	e5123fef 	ldr	r3, [r2, #-4079]	; 0xfffff011
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
    cc38:	e3130001 	tst	r3, #1
        }
        break;

    case ALT_CLK_DBG_BASE:
    case ALT_CLK_DBG_TIMER:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    cc3c:	e58d3004 	str	r3, [sp, #4]
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
    cc40:	1affff17 	bne	c8a4 <alt_clk_freq_get+0x178>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cc44:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    cc48:	e2133001 	ands	r3, r3, #1
    cc4c:	0a00057f 	beq	e250 <alt_clk_freq_get+0x1b24>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cc50:	e3023a94 	movw	r3, #10900	; 0x2a94
    cc54:	e3403002 	movt	r3, #2
    cc58:	e5933000 	ldr	r3, [r3]
    cc5c:	e58d3004 	str	r3, [sp, #4]
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
    cc60:	e3a0000f 	mov	r0, #15
    cc64:	eaffff87 	b	ca88 <alt_clk_freq_get+0x35c>
            ret = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_NAND:
        denom = 4;
    cc68:	e3a06004 	mov	r6, #4
    cc6c:	e3a07000 	mov	r7, #0
        /* the absence of a break statement here is not a mistake */
    case ALT_CLK_NAND_X:
        temp = ALT_CLKMGR_PERPLL_SRC_NAND_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    cc70:	e3042fff 	movw	r2, #20479	; 0x4fff
    cc74:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cc78:	e5123f53 	ldr	r3, [r2, #-3923]	; 0xfffff0ad
    cc7c:	e7e13153 	ubfx	r3, r3, #2, #2
        if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK)
    cc80:	e3530000 	cmp	r3, #0

    case ALT_CLK_NAND:
        denom = 4;
        /* the absence of a break statement here is not a mistake */
    case ALT_CLK_NAND_X:
        temp = ALT_CLKMGR_PERPLL_SRC_NAND_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    cc84:	e58d3004 	str	r3, [sp, #4]
        if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_F2S_PERIPH_REF_CLK)
    cc88:	1a000198 	bne	d2f0 <alt_clk_freq_get+0xbc4>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    cc8c:	e3023a94 	movw	r3, #10900	; 0x2a94
    cc90:	e3a05000 	mov	r5, #0
    cc94:	e3403002 	movt	r3, #2
    cc98:	e5933020 	ldr	r3, [r3, #32]
    cc9c:	e1a04003 	mov	r4, r3
    cca0:	eafffef7 	b	c884 <alt_clk_freq_get+0x158>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cca4:	e3042fff 	movw	r2, #20479	; 0x4fff
    cca8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    ccac:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    ccb0:	e2133001 	ands	r3, r3, #1
    ccb4:	0a000274 	beq	d68c <alt_clk_freq_get+0xf60>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ccb8:	e3023a94 	movw	r3, #10900	; 0x2a94
    ccbc:	e3403002 	movt	r3, #2
    ccc0:	e5933000 	ldr	r3, [r3]
    ccc4:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_MAIN_QSPI:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C3, &temp);
    ccc8:	e3a00010 	mov	r0, #16
    cccc:	eaffff6d 	b	ca88 <alt_clk_freq_get+0x35c>
            }
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    ccd0:	e3043fff 	movw	r3, #20479	; 0x4fff
    ccd4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ccd8:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
    ccdc:	e3120001 	tst	r2, #1
    cce0:	0a000317 	beq	d944 <alt_clk_freq_get+0x1218>
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cce4:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
    cce8:	e3120004 	tst	r2, #4
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ccec:	e3403002 	movt	r3, #2
    ccf0:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
    ccf4:	15933030 	ldrne	r3, [r3, #48]	; 0x30
    ccf8:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_DDR_DQS:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C0, &temp);
    ccfc:	e3a00037 	mov	r0, #55	; 0x37
    cd00:	eaffff60 	b	ca88 <alt_clk_freq_get+0x35c>
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    cd04:	e3042fff 	movw	r2, #20479	; 0x4fff
    cd08:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cd0c:	e5123fff 	ldr	r3, [r2, #-4095]	; 0xfffff001
    cd10:	e3130001 	tst	r3, #1
    cd14:	1a0001b3 	bne	d3e8 <alt_clk_freq_get+0xcbc>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    cd18:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
                ? ALT_E_TRUE : ALT_E_FALSE;
    cd1c:	e213c001 	ands	r12, r3, #1
    cd20:	1a0001b0 	bne	d3e8 <alt_clk_freq_get+0xcbc>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cd24:	e5121ffb 	ldr	r1, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    cd28:	e2117001 	ands	r7, r1, #1
    cd2c:	0a00047e 	beq	df2c <alt_clk_freq_get+0x1800>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cd30:	e3022a94 	movw	r2, #10900	; 0x2a94
    cd34:	e3a05000 	mov	r5, #0
    cd38:	e3402002 	movt	r2, #2
    cd3c:	e5923000 	ldr	r3, [r2]
    cd40:	e1a04003 	mov	r4, r3
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;
    cd44:	e3a06001 	mov	r6, #1
    cd48:	e3a07000 	mov	r7, #0
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
        }
        numer = (uint64_t) temp;
        /* denom = 1 by default */
        break;
    cd4c:	eafffef7 	b	c930 <alt_clk_freq_get+0x204>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cd50:	e3043fff 	movw	r3, #20479	; 0x4fff
    cd54:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    cd58:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    cd5c:	e3120008 	tst	r2, #8
    cd60:	0a0001a7 	beq	d404 <alt_clk_freq_get+0xcd8>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cd64:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    cd68:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cd6c:	e3403002 	movt	r3, #2
    cd70:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    cd74:	15933020 	ldrne	r3, [r3, #32]
    cd78:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_EMAC0:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C0, &temp);
    cd7c:	e3a00025 	mov	r0, #37	; 0x25
    cd80:	eaffff40 	b	ca88 <alt_clk_freq_get+0x35c>
        }
        break;

        /* Clocks That Can Switch Between Different Clock Groups */
    case ALT_CLK_SDMMC:
        temp = ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    cd84:	e3043fff 	movw	r3, #20479	; 0x4fff
    cd88:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    cd8c:	e5133f53 	ldr	r3, [r3, #-3923]	; 0xfffff0ad
    cd90:	e2033003 	and	r3, r3, #3
        if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK)
    cd94:	e3530000 	cmp	r3, #0
        }
        break;

        /* Clocks That Can Switch Between Different Clock Groups */
    case ALT_CLK_SDMMC:
        temp = ALT_CLKMGR_PERPLL_SRC_SDMMC_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    cd98:	e58d3004 	str	r3, [sp, #4]
        if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_F2S_PERIPH_REF_CLK)
    cd9c:	0afffeb1 	beq	c868 <alt_clk_freq_get+0x13c>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            /* denom = 1 by default */
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
    cda0:	e3530001 	cmp	r3, #1
    cda4:	0a0005d4 	beq	e4fc <alt_clk_freq_get+0x1dd0>
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
                denom = (uint64_t) temp;
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
    cda8:	e3530002 	cmp	r3, #2
    cdac:	1afffee3 	bne	c940 <alt_clk_freq_get+0x214>
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
    cdb0:	e28d1004 	add	r1, sp, #4
    cdb4:	e3a0000a 	mov	r0, #10
    cdb8:	ebfff573 	bl	a38c <alt_clk_pll_vco_freq_get>
            if (ret == ALT_E_SUCCESS)
    cdbc:	e250c000 	subs	r12, r0, #0
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C3, &temp);
    cdc0:	03a00028 	moveq	r0, #40	; 0x28
    cdc4:	028d1004 	addeq	r1, sp, #4
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    cdc8:	059d4004 	ldreq	r4, [sp, #4]
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_PERIPH_NAND_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
    cdcc:	1afffea2 	bne	c85c <alt_clk_freq_get+0x130>
    cdd0:	eaffff2e 	b	ca90 <alt_clk_freq_get+0x364>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cdd4:	e3042fff 	movw	r2, #20479	; 0x4fff
    cdd8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cddc:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    cde0:	e2133001 	ands	r3, r3, #1
    cde4:	0a00028e 	beq	d824 <alt_clk_freq_get+0x10f8>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cde8:	e3023a94 	movw	r3, #10900	; 0x2a94
    cdec:	e3403002 	movt	r3, #2
    cdf0:	e5933000 	ldr	r3, [r3]
    cdf4:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_H2F_USER0:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C5, &temp);
    cdf8:	e3a00012 	mov	r0, #18
    cdfc:	eaffff21 	b	ca88 <alt_clk_freq_get+0x35c>
            }
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    ce00:	e3043fff 	movw	r3, #20479	; 0x4fff
    ce04:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ce08:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
    ce0c:	e3120001 	tst	r2, #1
    ce10:	0a000325 	beq	daac <alt_clk_freq_get+0x1380>
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ce14:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
    ce18:	e3120004 	tst	r2, #4
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ce1c:	e3403002 	movt	r3, #2
    ce20:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
    ce24:	15933030 	ldrne	r3, [r3, #48]	; 0x30
    ce28:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_DDR_DQ:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C2, &temp);
    ce2c:	e3a00039 	mov	r0, #57	; 0x39
    ce30:	eaffff14 	b	ca88 <alt_clk_freq_get+0x35c>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    ce34:	e3043fff 	movw	r3, #20479	; 0x4fff
    ce38:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ce3c:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    ce40:	e3120001 	tst	r2, #1
    ce44:	1a000142 	bne	d354 <alt_clk_freq_get+0xc28>
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    ce48:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
    ce4c:	e7e020d2 	ubfx	r2, r2, #1, #1
                ? ALT_E_TRUE : ALT_E_FALSE;
    ce50:	e3520000 	cmp	r2, #0
    ce54:	1a00013e 	bne	d354 <alt_clk_freq_get+0xc28>
            }
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    ce58:	e5131ffb 	ldr	r1, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
    ce5c:	e3110001 	tst	r1, #1
    ce60:	0a0003f4 	beq	de38 <alt_clk_freq_get+0x170c>
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
    ce64:	e7e0c151 	ubfx	r12, r1, #2, #1
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ce68:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
    ce6c:	e35c0000 	cmp	r12, #0
    ce70:	0a000146 	beq	d390 <alt_clk_freq_get+0xc64>
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            else
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
    ce74:	e3403002 	movt	r3, #2
            ret = ALT_E_SUCCESS;
    ce78:	e1a0c002 	mov	r12, r2
    ce7c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    ce80:	e3a05000 	mov	r5, #0
    ce84:	e1a04003 	mov	r4, r3
    ce88:	eaffffad 	b	cd44 <alt_clk_freq_get+0x618>
            ret = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    ce8c:	e3043fff 	movw	r3, #20479	; 0x4fff
    ce90:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ce94:	e5133f53 	ldr	r3, [r3, #-3923]	; 0xfffff0ad
    ce98:	e7e13253 	ubfx	r3, r3, #4, #2
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
    ce9c:	e3530000 	cmp	r3, #0
            ret = ALT_E_ERROR;
        }
        break;

    case ALT_CLK_QSPI:
        temp = ALT_CLKMGR_PERPLL_SRC_QSPI_GET(alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR));
    cea0:	e58d3004 	str	r3, [sp, #4]
        if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_F2S_PERIPH_REF_CLK)
    cea4:	0afffe6f 	beq	c868 <alt_clk_freq_get+0x13c>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            /* denom = 1 by default; */
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
    cea8:	e3530001 	cmp	r3, #1
    ceac:	0a0005a7 	beq	e550 <alt_clk_freq_get+0x1e24>
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C3, &temp);
                denom = (uint64_t) temp;
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
    ceb0:	e3530002 	cmp	r3, #2
    ceb4:	1afffea1 	bne	c940 <alt_clk_freq_get+0x214>
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
    ceb8:	e28d1004 	add	r1, sp, #4
    cebc:	e3a0000a 	mov	r0, #10
    cec0:	ebfff531 	bl	a38c <alt_clk_pll_vco_freq_get>
            if (ret == ALT_E_SUCCESS)
    cec4:	e250c000 	subs	r12, r0, #0
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C2, &temp);
    cec8:	03a00027 	moveq	r0, #39	; 0x27
    cecc:	028d1004 	addeq	r1, sp, #4
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    ced0:	059d4004 	ldreq	r4, [sp, #4]
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_PERIPH_QSPI_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
    ced4:	1afffe60 	bne	c85c <alt_clk_freq_get+0x130>
    ced8:	eafffeec 	b	ca90 <alt_clk_freq_get+0x364>
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;
    cedc:	e3a06001 	mov	r6, #1
    cee0:	e3a07000 	mov	r7, #0
    cee4:	eaffff61 	b	cc70 <alt_clk_freq_get+0x544>
            denom = denom * (uint64_t) temp;
        }
        break;

    case ALT_CLK_DBG_TRACE:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    cee8:	e3042fff 	movw	r2, #20479	; 0x4fff
    ceec:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cef0:	e5123fef 	ldr	r3, [r2, #-4079]	; 0xfffff011
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
    cef4:	e3130001 	tst	r3, #1
            denom = denom * (uint64_t) temp;
        }
        break;

    case ALT_CLK_DBG_TRACE:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    cef8:	e58d3004 	str	r3, [sp, #4]
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
    cefc:	0a000398 	beq	dd64 <alt_clk_freq_get+0x1638>
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    cf00:	e3023a94 	movw	r3, #10900	; 0x2a94
            temp = 1;
    cf04:	e3a0a001 	mov	r10, #1

    case ALT_CLK_DBG_TRACE:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    cf08:	e3403002 	movt	r3, #2
            temp = 1;
    cf0c:	e3a0b000 	mov	r11, #0

    case ALT_CLK_DBG_TRACE:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    cf10:	e5933000 	ldr	r3, [r3]
    cf14:	e3a05000 	mov	r5, #0
            temp = 1;
    cf18:	e28d7008 	add	r7, sp, #8
    cf1c:	e3a02001 	mov	r2, #1
    cf20:	e5272004 	str	r2, [r7, #-4]!

    case ALT_CLK_DBG_TRACE:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    cf24:	e1a04003 	mov	r4, r3
            }
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_TRACE, &temp);
    cf28:	e3a0001e 	mov	r0, #30
    cf2c:	e1a01007 	mov	r1, r7
    cf30:	eafffe9e 	b	c9b0 <alt_clk_freq_get+0x284>
            }
        }
        break;

    case ALT_CLK_DBG_AT:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    cf34:	e3042fff 	movw	r2, #20479	; 0x4fff
    cf38:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    cf3c:	e5126fef 	ldr	r6, [r2, #-4079]	; 0xfffff011
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
    cf40:	e3160001 	tst	r6, #1
            }
        }
        break;

    case ALT_CLK_DBG_AT:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    cf44:	e58d6004 	str	r6, [sp, #4]
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
    cf48:	0a000397 	beq	ddac <alt_clk_freq_get+0x1680>
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    cf4c:	e3023a94 	movw	r3, #10900	; 0x2a94
    cf50:	e28d7004 	add	r7, sp, #4
    cf54:	e3403002 	movt	r3, #2
    cf58:	e3a05000 	mov	r5, #0
    cf5c:	e5933000 	ldr	r3, [r3]
    cf60:	e1a04003 	mov	r4, r3
            }
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
    cf64:	e1a01007 	mov	r1, r7
    cf68:	e3a0001d 	mov	r0, #29
    cf6c:	ebfff5e7 	bl	a710 <alt_clk_divider_get>
            denom = denom * (uint64_t) temp;
    cf70:	e59d3004 	ldr	r3, [sp, #4]
            }
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
    cf74:	e1a0c000 	mov	r12, r0
            denom = denom * (uint64_t) temp;
    cf78:	e0876396 	umull	r6, r7, r6, r3
    cf7c:	eafffe6b 	b	c930 <alt_clk_freq_get+0x204>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cf80:	e3043fff 	movw	r3, #20479	; 0x4fff
    cf84:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    cf88:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    cf8c:	e3120008 	tst	r2, #8
    cf90:	0a00024d 	beq	d8cc <alt_clk_freq_get+0x11a0>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cf94:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    cf98:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    cf9c:	e3403002 	movt	r3, #2
    cfa0:	05937000 	ldreq	r7, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    cfa4:	15937020 	ldrne	r7, [r3, #32]
    cfa8:	e58d7004 	str	r7, [sp, #4]
    case ALT_CLK_GPIO_DB:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
    cfac:	e3a00029 	mov	r0, #41	; 0x29
    cfb0:	e28d1004 	add	r1, sp, #4
    cfb4:	ebfff5d5 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    cfb8:	e250c000 	subs	r12, r0, #0
    cfbc:	1afffe26 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_GPIO_DB, &temp);
    cfc0:	e3a00035 	mov	r0, #53	; 0x35
    cfc4:	e28d1004 	add	r1, sp, #4
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    cfc8:	e59d6004 	ldr	r6, [sp, #4]

    case ALT_CLK_GPIO_DB:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    cfcc:	e1a04007 	mov	r4, r7
    cfd0:	eafffe51 	b	c91c <alt_clk_freq_get+0x1f0>
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
        break;

    case ALT_CLK_IN_PIN_OSC2:
        numer = alt_ext_clk_paramblok.clkosc2.freqcur;
    cfd4:	e3023a94 	movw	r3, #10900	; 0x2a94
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;
    cfd8:	e3a06001 	mov	r6, #1
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
        break;

    case ALT_CLK_IN_PIN_OSC2:
        numer = alt_ext_clk_paramblok.clkosc2.freqcur;
    cfdc:	e3403002 	movt	r3, #2
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;
    cfe0:	e3a07000 	mov	r7, #0
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
        break;

    case ALT_CLK_IN_PIN_OSC2:
        numer = alt_ext_clk_paramblok.clkosc2.freqcur;
    cfe4:	e5933010 	ldr	r3, [r3, #16]
    cfe8:	e3a05000 	mov	r5, #0
    cfec:	e1a04003 	mov	r4, r3
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
        break;
    cff0:	eafffe23 	b	c884 <alt_clk_freq_get+0x158>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    cff4:	e3043fff 	movw	r3, #20479	; 0x4fff
    cff8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    cffc:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    d000:	e3120008 	tst	r2, #8
    d004:	0a00016d 	beq	d5c0 <alt_clk_freq_get+0xe94>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d008:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    d00c:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d010:	e3403002 	movt	r3, #2
    d014:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    d018:	15933020 	ldrne	r3, [r3, #32]
    d01c:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_EMAC1:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C1, &temp);
    d020:	e3a00026 	mov	r0, #38	; 0x26
    d024:	eafffe97 	b	ca88 <alt_clk_freq_get+0x35c>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d028:	e3043fff 	movw	r3, #20479	; 0x4fff
    d02c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d030:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    d034:	e3120008 	tst	r2, #8
    d038:	0a000142 	beq	d548 <alt_clk_freq_get+0xe1c>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d03c:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    d040:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d044:	e3403002 	movt	r3, #2
    d048:	05937000 	ldreq	r7, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    d04c:	15937020 	ldrne	r7, [r3, #32]
    d050:	e58d7004 	str	r7, [sp, #4]
    case ALT_CLK_SPI_M:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
    d054:	e3a00029 	mov	r0, #41	; 0x29
    d058:	e28d1004 	add	r1, sp, #4
    d05c:	ebfff5ab 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    d060:	e250c000 	subs	r12, r0, #0
    d064:	1afffdfc 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SPI_M, &temp);
    d068:	e3a0002c 	mov	r0, #44	; 0x2c
    d06c:	e28d1004 	add	r1, sp, #4
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    d070:	e59d6004 	ldr	r6, [sp, #4]

    case ALT_CLK_SPI_M:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    d074:	e1a04007 	mov	r4, r7
    d078:	eafffe27 	b	c91c <alt_clk_freq_get+0x1f0>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d07c:	e3043fff 	movw	r3, #20479	; 0x4fff
    d080:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d084:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    d088:	e3120008 	tst	r2, #8
    d08c:	0a0001c6 	beq	d7ac <alt_clk_freq_get+0x1080>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d090:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    d094:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d098:	e3403002 	movt	r3, #2
    d09c:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    d0a0:	15933020 	ldrne	r3, [r3, #32]
    d0a4:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_PERIPHERAL_PLL_C5:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(clk, &temp);
    d0a8:	e1a00006 	mov	r0, r6
    d0ac:	eafffe75 	b	ca88 <alt_clk_freq_get+0x35c>
            }
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d0b0:	e3043fff 	movw	r3, #20479	; 0x4fff
    d0b4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d0b8:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
    d0bc:	e3120001 	tst	r2, #1
    d0c0:	0a000297 	beq	db24 <alt_clk_freq_get+0x13f8>
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d0c4:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
    d0c8:	e3120004 	tst	r2, #4
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d0cc:	e3403002 	movt	r3, #2
    d0d0:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
    d0d4:	15933030 	ldrne	r3, [r3, #48]	; 0x30
    d0d8:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_H2F_USER2:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C5, &temp);
    d0dc:	e3a0003c 	mov	r0, #60	; 0x3c
    d0e0:	eafffe68 	b	ca88 <alt_clk_freq_get+0x35c>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d0e4:	e3042fff 	movw	r2, #20479	; 0x4fff
    d0e8:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    d0ec:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    d0f0:	e2133001 	ands	r3, r3, #1
    d0f4:	0a000179 	beq	d6e0 <alt_clk_freq_get+0xfb4>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d0f8:	e3023a94 	movw	r3, #10900	; 0x2a94
    d0fc:	e3403002 	movt	r3, #2
    d100:	e5933000 	ldr	r3, [r3]
    d104:	e58d3004 	str	r3, [sp, #4]
    d108:	eaffffe6 	b	d0a8 <alt_clk_freq_get+0x97c>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d10c:	e3043fff 	movw	r3, #20479	; 0x4fff
    d110:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d114:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    d118:	e3120008 	tst	r2, #8
    d11c:	0a0002b3 	beq	dbf0 <alt_clk_freq_get+0x14c4>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d120:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    d124:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d128:	e3403002 	movt	r3, #2
    d12c:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    d130:	15933020 	ldrne	r3, [r3, #32]
    d134:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_H2F_USER1:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C5, &temp);
    d138:	e3a0002a 	mov	r0, #42	; 0x2a
    d13c:	eafffe51 	b	ca88 <alt_clk_freq_get+0x35c>
            denom = denom * (uint64_t) temp;
        }
        break;

    case ALT_CLK_DBG:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    d140:	e3042fff 	movw	r2, #20479	; 0x4fff
    d144:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    d148:	e5123fef 	ldr	r3, [r2, #-4079]	; 0xfffff011
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
    d14c:	e3130001 	tst	r3, #1
            denom = denom * (uint64_t) temp;
        }
        break;

    case ALT_CLK_DBG:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
    d150:	e58d3004 	str	r3, [sp, #4]
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
    d154:	0a000325 	beq	ddf0 <alt_clk_freq_get+0x16c4>
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    d158:	e3023a94 	movw	r3, #10900	; 0x2a94
            temp = 1;
    d15c:	e3a0a001 	mov	r10, #1

    case ALT_CLK_DBG:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    d160:	e3403002 	movt	r3, #2
            temp = 1;
    d164:	e3a0b000 	mov	r11, #0

    case ALT_CLK_DBG:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    d168:	e5933000 	ldr	r3, [r3]
    d16c:	e3a05000 	mov	r5, #0
            temp = 1;
    d170:	e28d7008 	add	r7, sp, #8
    d174:	e3a02001 	mov	r2, #1
    d178:	e5272004 	str	r2, [r7, #-4]!

    case ALT_CLK_DBG:
        temp = alt_read_word(ALT_CLKMGR_DBCTL_ADDR);
        if(ALT_CLKMGR_DBCTL_STAYOSC1_GET(temp) == 1) /* Bypassed */
        {
            numer = alt_ext_clk_paramblok.clkosc1.freqcur;
    d17c:	e1a04003 	mov	r4, r3
            }
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
    d180:	e3a0001d 	mov	r0, #29
    d184:	e1a01007 	mov	r1, r7
    d188:	ebfff560 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    d18c:	e250c000 	subs	r12, r0, #0
    d190:	1afffdb1 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = denom * (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG, &temp);
    d194:	e1a01007 	mov	r1, r7
    d198:	e3a00020 	mov	r0, #32
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = denom * (uint64_t) temp;
    d19c:	e59d6004 	ldr	r6, [sp, #4]
            ret = alt_clk_divider_get(ALT_CLK_DBG, &temp);
    d1a0:	ebfff55a 	bl	a710 <alt_clk_divider_get>
            denom = denom * (uint64_t) temp;
    d1a4:	e59d2004 	ldr	r2, [sp, #4]
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = denom * (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG, &temp);
    d1a8:	e1a0c000 	mov	r12, r0
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_DBG_AT, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = denom * (uint64_t) temp;
    d1ac:	e0832692 	umull	r2, r3, r2, r6
            ret = alt_clk_divider_get(ALT_CLK_DBG, &temp);
            denom = denom * (uint64_t) temp;
    d1b0:	e0010b92 	mul	r1, r2, r11
    d1b4:	e0876a92 	umull	r6, r7, r2, r10
    d1b8:	e02a139a 	mla	r10, r10, r3, r1
    d1bc:	e08a7007 	add	r7, r10, r7
    d1c0:	eafffdda 	b	c930 <alt_clk_freq_get+0x204>
            }
        }
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d1c4:	e3043fff 	movw	r3, #20479	; 0x4fff
    d1c8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d1cc:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
    d1d0:	e3120001 	tst	r2, #1
    d1d4:	0a0001f8 	beq	d9bc <alt_clk_freq_get+0x1290>
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d1d8:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_SDRPLL_SET(temp))
        {
            if(ALT_CLKMGR_BYPASS_SDRPLLSRC_GET(temp) == 
    d1dc:	e3120004 	tst	r2, #4
               ALT_CLKMGR_BYPASS_SDRPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d1e0:	e3403002 	movt	r3, #2
    d1e4:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
    d1e8:	15933030 	ldrne	r3, [r3, #48]	; 0x30
    d1ec:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_DDR_2X_DQS:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_SDRAM_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_SDRAM_PLL_C1, &temp);
    d1f0:	e3a00038 	mov	r0, #56	; 0x38
    d1f4:	eafffe23 	b	ca88 <alt_clk_freq_get+0x35c>
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
        break;

    case ALT_CLK_F2H_SDRAM_REF:
        numer = alt_ext_clk_paramblok.sdram.freqcur;
    d1f8:	e3023a94 	movw	r3, #10900	; 0x2a94
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;
    d1fc:	e3a06001 	mov	r6, #1
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
        break;

    case ALT_CLK_F2H_SDRAM_REF:
        numer = alt_ext_clk_paramblok.sdram.freqcur;
    d200:	e3403002 	movt	r3, #2
ALT_STATUS_CODE alt_clk_freq_get(ALT_CLK_t clk, alt_freq_t* freq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    uint32_t        temp = 0;
    uint64_t        numer = 0;
    uint64_t        denom = 1;
    d204:	e3a07000 	mov	r7, #0
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
        break;

    case ALT_CLK_F2H_SDRAM_REF:
        numer = alt_ext_clk_paramblok.sdram.freqcur;
    d208:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    d20c:	e3a05000 	mov	r5, #0
    d210:	e1a04003 	mov	r4, r3
        /* denom = 1 by default */
        ret = ALT_E_SUCCESS;
        break;
    d214:	eafffd9a 	b	c884 <alt_clk_freq_get+0x158>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d218:	e3043fff 	movw	r3, #20479	; 0x4fff
    d21c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d220:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    d224:	e3120008 	tst	r2, #8
    d228:	0a0000a8 	beq	d4d0 <alt_clk_freq_get+0xda4>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d22c:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    d230:	e3120010 	tst	r2, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d234:	e3403002 	movt	r3, #2
    d238:	05937000 	ldreq	r7, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    d23c:	15937020 	ldrne	r7, [r3, #32]
    d240:	e58d7004 	str	r7, [sp, #4]
    case ALT_CLK_CAN1:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
    d244:	e3a00029 	mov	r0, #41	; 0x29
    d248:	e28d1004 	add	r1, sp, #4
    d24c:	ebfff52f 	bl	a710 <alt_clk_divider_get>
        }
        if (ret == ALT_E_SUCCESS)
    d250:	e250c000 	subs	r12, r0, #0
    d254:	1afffd80 	bne	c85c <alt_clk_freq_get+0x130>
        {
            denom = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_CAN1, &temp);
    d258:	e3a00034 	mov	r0, #52	; 0x34
    d25c:	e28d1004 	add	r1, sp, #4
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C4, &temp);
        }
        if (ret == ALT_E_SUCCESS)
        {
            denom = (uint64_t) temp;
    d260:	e59d6004 	ldr	r6, [sp, #4]

    case ALT_CLK_CAN1:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
    d264:	e1a04007 	mov	r4, r7
    d268:	eafffdab 	b	c91c <alt_clk_freq_get+0x1f0>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d26c:	e3042fff 	movw	r2, #20479	; 0x4fff
    d270:	e34f2fd0 	movt	r2, #65488	; 0xffd0
    d274:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    d278:	e2133001 	ands	r3, r3, #1
    d27c:	0a000246 	beq	db9c <alt_clk_freq_get+0x1470>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d280:	e3023a94 	movw	r3, #10900	; 0x2a94
    d284:	e3403002 	movt	r3, #2
    d288:	e5933000 	ldr	r3, [r3]
    d28c:	e58d3004 	str	r3, [sp, #4]
    case ALT_CLK_MAIN_NAND_SDMMC:
        ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
        if (ret == ALT_E_SUCCESS)
        {
            numer = (uint64_t) temp;
            ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
    d290:	e3a00011 	mov	r0, #17
    d294:	eafffdfb 	b	ca88 <alt_clk_freq_get+0x35c>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    d298:	e3043fff 	movw	r3, #20479	; 0x4fff
    d29c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d2a0:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    d2a4:	e3120001 	tst	r2, #1
    d2a8:	1a00003d 	bne	d3a4 <alt_clk_freq_get+0xc78>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    d2ac:	e5132ffb 	ldr	r2, [r3, #-4091]	; 0xfffff005
    d2b0:	e7e021d2 	ubfx	r2, r2, #3, #1
                ? ALT_E_TRUE : ALT_E_FALSE;
    d2b4:	e3520000 	cmp	r2, #0
    d2b8:	1a000039 	bne	d3a4 <alt_clk_freq_get+0xc78>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d2bc:	e5131ffb 	ldr	r1, [r3, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    d2c0:	e3110008 	tst	r1, #8
    d2c4:	0a0002fb 	beq	deb8 <alt_clk_freq_get+0x178c>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    d2c8:	e7e0c251 	ubfx	r12, r1, #4, #1
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d2cc:	e3023a94 	movw	r3, #10900	; 0x2a94
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    d2d0:	e35c0000 	cmp	r12, #0
    d2d4:	0a00002d 	beq	d390 <alt_clk_freq_get+0xc64>
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    d2d8:	e3403002 	movt	r3, #2
            ret = ALT_E_SUCCESS;
    d2dc:	e1a0c002 	mov	r12, r2
    d2e0:	e5933020 	ldr	r3, [r3, #32]
    d2e4:	e3a05000 	mov	r5, #0
    d2e8:	e1a04003 	mov	r4, r3
    d2ec:	eafffe94 	b	cd44 <alt_clk_freq_get+0x618>
        {
            numer = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            /* denom = 1 or 4 by default; */
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_MAIN_NAND_CLK)
    d2f0:	e3530001 	cmp	r3, #1
    d2f4:	0a00041b 	beq	e368 <alt_clk_freq_get+0x1c3c>
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
                denom = denom * (uint64_t) temp;
            }
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK)
    d2f8:	e3530002 	cmp	r3, #2
    d2fc:	1afffd8f 	bne	c940 <alt_clk_freq_get+0x214>
            }
        }
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    d300:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_PERPLL_GET(temp))
    d304:	e3130008 	tst	r3, #8
    d308:	0a00049f 	beq	e58c <alt_clk_freq_get+0x1e60>
        {
            if(ALT_CLKMGR_BYPASS_PERPLLSRC_GET(temp) == 
    d30c:	e3130010 	tst	r3, #16
               ALT_CLKMGR_BYPASS_PERPLLSRC_E_SELECT_EOSC1)
                *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    d310:	e3023a94 	movw	r3, #10900	; 0x2a94
    d314:	e3403002 	movt	r3, #2
    d318:	05933000 	ldreq	r3, [r3]
            else
                *freq = alt_ext_clk_paramblok.periph.freqcur;
    d31c:	15933020 	ldrne	r3, [r3, #32]
    d320:	e58d3004 	str	r3, [sp, #4]
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    d324:	e28d1008 	add	r1, sp, #8
                ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C3, &temp);
    d328:	e3a00028 	mov	r0, #40	; 0x28
        else if (temp == ALT_CLKMGR_PERPLL_SRC_NAND_E_PERIPH_NAND_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    d32c:	e5313004 	ldr	r3, [r1, #-4]!
    d330:	e1a04003 	mov	r4, r3
    d334:	e3a05000 	mov	r5, #0
                ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C3, &temp);
    d338:	ebfff4f4 	bl	a710 <alt_clk_divider_get>
                denom = denom * (uint64_t) temp;
    d33c:	e59d3004 	ldr	r3, [sp, #4]
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_PERIPHERAL_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_PERIPHERAL_PLL_C3, &temp);
    d340:	e1a0c000 	mov	r12, r0
                denom = denom * (uint64_t) temp;
    d344:	e0020793 	mul	r2, r3, r7
    d348:	e0876396 	umull	r6, r7, r6, r3
    d34c:	e0827007 	add	r7, r2, r7
    d350:	eafffd76 	b	c930 <alt_clk_freq_get+0x204>
        break;

    case ALT_CLK_SDRAM_PLL:
        if (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE)
        {
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
    d354:	e3043fff 	movw	r3, #20479	; 0x4fff
    d358:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d35c:	e513cf3f 	ldr	r12, [r3, #-3903]	; 0xfffff0c1
    d360:	e7e1cb5c 	ubfx	r12, r12, #22, #2
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    d364:	e35c0000 	cmp	r12, #0
    d368:	0a000007 	beq	d38c <alt_clk_freq_get+0xc60>
            {
                temp = alt_ext_clk_paramblok.clkosc1.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    d36c:	e35c0001 	cmp	r12, #1
    d370:	0a0003f5 	beq	e34c <alt_clk_freq_get+0x1c20>
            {
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    d374:	e35c0002 	cmp	r12, #2
    d378:	0a0004a0 	beq	e600 <alt_clk_freq_get+0x1ed4>
    d37c:	e3a04003 	mov	r4, #3
    d380:	e3a05000 	mov	r5, #0
                temp = alt_ext_clk_paramblok.sdram.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else
            {
                ret = ALT_E_ERROR;
    d384:	e3e0c000 	mvn	r12, #0
    d388:	eafffe6d 	b	cd44 <alt_clk_freq_get+0x618>
        if (alt_clk_pll_is_bypassed(ALT_CLK_SDRAM_PLL) == ALT_E_TRUE)
        {
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR));
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
            {
                temp = alt_ext_clk_paramblok.clkosc1.freqcur;
    d38c:	e3023a94 	movw	r3, #10900	; 0x2a94
    d390:	e3403002 	movt	r3, #2
    d394:	e3a05000 	mov	r5, #0
    d398:	e5933000 	ldr	r3, [r3]
    d39c:	e1a04003 	mov	r4, r3
    d3a0:	eafffe67 	b	cd44 <alt_clk_freq_get+0x618>
        break;

    case ALT_CLK_PERIPHERAL_PLL:
        if (alt_clk_pll_is_bypassed(ALT_CLK_PERIPHERAL_PLL) == ALT_E_TRUE)
        {
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR));
    d3a4:	e3043fff 	movw	r3, #20479	; 0x4fff
    d3a8:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    d3ac:	e513cf7f 	ldr	r12, [r3, #-3967]	; 0xfffff081
    d3b0:	e7e1cb5c 	ubfx	r12, r12, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    d3b4:	e35c0000 	cmp	r12, #0
    d3b8:	0afffff3 	beq	d38c <alt_clk_freq_get+0xc60>
            {
                temp = alt_ext_clk_paramblok.clkosc1.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    d3bc:	e35c0001 	cmp	r12, #1
    d3c0:	0a0003e1 	beq	e34c <alt_clk_freq_get+0x1c20>
            {
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    d3c4:	e35c0002 	cmp	r12, #2
    d3c8:	1affffeb 	bne	d37c <alt_clk_freq_get+0xc50>
            {
                temp = alt_ext_clk_paramblok.periph.freqcur;
    d3cc:	e3023a94 	movw	r3, #10900	; 0x2a94
                ret = ALT_E_SUCCESS;
    d3d0:	e3a0c000 	mov	r12, #0
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp = alt_ext_clk_paramblok.periph.freqcur;
    d3d4:	e3403002 	movt	r3, #2
    d3d8:	e1a0500c 	mov	r5, r12
    d3dc:	e5933020 	ldr	r3, [r3, #32]
    d3e0:	e1a04003 	mov	r4, r3
    d3e4:	eafffe56 	b	cd44 <alt_clk_freq_get+0x618>

        /* PLLs */
    case ALT_CLK_MAIN_PLL:
        if (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE)
        {
            temp = alt_ext_clk_paramblok.clkosc1.freqcur;
    d3e8:	e3023a94 	movw	r3, #10900	; 0x2a94
            ret = ALT_E_SUCCESS;
    d3ec:	e3a0c000 	mov	r12, #0

        /* PLLs */
    case ALT_CLK_MAIN_PLL:
        if (alt_clk_pll_is_bypassed(ALT_CLK_MAIN_PLL) == ALT_E_TRUE)
        {
            temp = alt_ext_clk_paramblok.clkosc1.freqcur;
    d3f0:	e3403002 	movt	r3, #2
    d3f4:	e1a0500c 	mov	r5, r12
    d3f8:	e5933000 	ldr	r3, [r3]
    d3fc:	e1a04003 	mov	r4, r3
    d400:	eafffe4f 	b	cd44 <alt_clk_freq_get+0x618>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    d404:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    d408:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    d40c:	e3520000 	cmp	r2, #0
    d410:	1a000328 	bne	e0b8 <alt_clk_freq_get+0x198c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d414:	e302aa94 	movw	r10, #10900	; 0x2a94
    d418:	e3a05000 	mov	r5, #0
    d41c:	e340a002 	movt	r10, #2
    d420:	e59a2000 	ldr	r2, [r10]
    d424:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    d428:	e1942005 	orrs	r2, r4, r5
    d42c:	0afffd09 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    d430:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    d434:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d438:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d43c:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d440:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d444:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d448:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    d44c:	eb002d80 	bl	18a54 <__aeabi_uldivmod>
    d450:	e1a02000 	mov	r2, r0
    d454:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    d458:	e3e00000 	mvn	r0, #0
    d45c:	e3a01000 	mov	r1, #0
    d460:	e1510003 	cmp	r1, r3
    d464:	01500002 	cmpeq	r0, r2
    d468:	3afffd34 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    d46c:	e1a03002 	mov	r3, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    d470:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    d474:	e58d2004 	str	r2, [sp, #4]
    d478:	eafffe3f 	b	cd7c <alt_clk_freq_get+0x650>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d47c:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    d480:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d484:	e3404002 	movt	r4, #2
    d488:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    d48c:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    d490:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    d494:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    d498:	e2822001 	add	r2, r2, #1
    d49c:	e0810190 	umull	r0, r1, r0, r1
    d4a0:	eb002d6b 	bl	18a54 <__aeabi_uldivmod>
    d4a4:	e1a02000 	mov	r2, r0
    d4a8:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    d4ac:	e3e00000 	mvn	r0, #0
    d4b0:	e3a01000 	mov	r1, #0
    d4b4:	e1510003 	cmp	r1, r3
    d4b8:	01500002 	cmpeq	r0, r2
    d4bc:	3afffd1f 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    d4c0:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    d4c4:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    d4c8:	e58d2004 	str	r2, [sp, #4]
    d4cc:	eafffdaa 	b	cb7c <alt_clk_freq_get+0x450>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    d4d0:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    d4d4:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    d4d8:	e3520000 	cmp	r2, #0
    d4dc:	1a00031d 	bne	e158 <alt_clk_freq_get+0x1a2c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d4e0:	e302aa94 	movw	r10, #10900	; 0x2a94
    d4e4:	e3a05000 	mov	r5, #0
    d4e8:	e340a002 	movt	r10, #2
    d4ec:	e59a2000 	ldr	r2, [r10]
    d4f0:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    d4f4:	e1942005 	orrs	r2, r4, r5
    d4f8:	0afffcd6 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    d4fc:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    d500:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d504:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d508:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d50c:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d510:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d514:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    d518:	eb002d4d 	bl	18a54 <__aeabi_uldivmod>
    d51c:	e1a02000 	mov	r2, r0
    d520:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    d524:	e3e00000 	mvn	r0, #0
    d528:	e3a01000 	mov	r1, #0
    d52c:	e1510003 	cmp	r1, r3
    d530:	01500002 	cmpeq	r0, r2
    d534:	3afffd01 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    d538:	e1a07002 	mov	r7, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    d53c:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    d540:	e58d2004 	str	r2, [sp, #4]
    d544:	eaffff3e 	b	d244 <alt_clk_freq_get+0xb18>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    d548:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    d54c:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    d550:	e3520000 	cmp	r2, #0
    d554:	1a000291 	bne	dfa0 <alt_clk_freq_get+0x1874>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d558:	e302aa94 	movw	r10, #10900	; 0x2a94
    d55c:	e3a05000 	mov	r5, #0
    d560:	e340a002 	movt	r10, #2
    d564:	e59a2000 	ldr	r2, [r10]
    d568:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    d56c:	e1942005 	orrs	r2, r4, r5
    d570:	0afffcb8 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    d574:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    d578:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d57c:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d580:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d584:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d588:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d58c:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    d590:	eb002d2f 	bl	18a54 <__aeabi_uldivmod>
    d594:	e1a02000 	mov	r2, r0
    d598:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    d59c:	e3e00000 	mvn	r0, #0
    d5a0:	e3a01000 	mov	r1, #0
    d5a4:	e1510003 	cmp	r1, r3
    d5a8:	01500002 	cmpeq	r0, r2
    d5ac:	3afffce3 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    d5b0:	e1a07002 	mov	r7, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    d5b4:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    d5b8:	e58d2004 	str	r2, [sp, #4]
    d5bc:	eafffea4 	b	d054 <alt_clk_freq_get+0x928>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    d5c0:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    d5c4:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    d5c8:	e3520000 	cmp	r2, #0
    d5cc:	1a00027d 	bne	dfc8 <alt_clk_freq_get+0x189c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d5d0:	e302aa94 	movw	r10, #10900	; 0x2a94
    d5d4:	e3a05000 	mov	r5, #0
    d5d8:	e340a002 	movt	r10, #2
    d5dc:	e59a2000 	ldr	r2, [r10]
    d5e0:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    d5e4:	e1942005 	orrs	r2, r4, r5
    d5e8:	0afffc9a 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    d5ec:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    d5f0:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d5f4:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d5f8:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d5fc:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d600:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d604:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    d608:	eb002d11 	bl	18a54 <__aeabi_uldivmod>
    d60c:	e1a02000 	mov	r2, r0
    d610:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    d614:	e3e00000 	mvn	r0, #0
    d618:	e3a01000 	mov	r1, #0
    d61c:	e1510003 	cmp	r1, r3
    d620:	01500002 	cmpeq	r0, r2
    d624:	3afffcc5 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    d628:	e1a03002 	mov	r3, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    d62c:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    d630:	e58d2004 	str	r2, [sp, #4]
    d634:	eafffe79 	b	d020 <alt_clk_freq_get+0x8f4>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d638:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    d63c:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d640:	e3404002 	movt	r4, #2
    d644:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    d648:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    d64c:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    d650:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    d654:	e2822001 	add	r2, r2, #1
    d658:	e0810190 	umull	r0, r1, r0, r1
    d65c:	eb002cfc 	bl	18a54 <__aeabi_uldivmod>
    d660:	e1a02000 	mov	r2, r0
    d664:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    d668:	e3e00000 	mvn	r0, #0
    d66c:	e3a01000 	mov	r1, #0
    d670:	e1510003 	cmp	r1, r3
    d674:	01500002 	cmpeq	r0, r2
    d678:	3afffcb0 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    d67c:	e1a06002 	mov	r6, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    d680:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    d684:	e58d2004 	str	r2, [sp, #4]
    d688:	eafffcb7 	b	c96c <alt_clk_freq_get+0x240>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d68c:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    d690:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d694:	e3404002 	movt	r4, #2
    d698:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    d69c:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    d6a0:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    d6a4:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    d6a8:	e2822001 	add	r2, r2, #1
    d6ac:	e0810190 	umull	r0, r1, r0, r1
    d6b0:	eb002ce7 	bl	18a54 <__aeabi_uldivmod>
    d6b4:	e1a02000 	mov	r2, r0
    d6b8:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    d6bc:	e3e00000 	mvn	r0, #0
    d6c0:	e3a01000 	mov	r1, #0
    d6c4:	e1510003 	cmp	r1, r3
    d6c8:	01500002 	cmpeq	r0, r2
    d6cc:	3afffc9b 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    d6d0:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    d6d4:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    d6d8:	e58d2004 	str	r2, [sp, #4]
    d6dc:	eafffd79 	b	ccc8 <alt_clk_freq_get+0x59c>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d6e0:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    d6e4:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d6e8:	e3404002 	movt	r4, #2
    d6ec:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    d6f0:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    d6f4:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    d6f8:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    d6fc:	e2822001 	add	r2, r2, #1
    d700:	e0810190 	umull	r0, r1, r0, r1
    d704:	eb002cd2 	bl	18a54 <__aeabi_uldivmod>
    d708:	e1a02000 	mov	r2, r0
    d70c:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    d710:	e3e00000 	mvn	r0, #0
    d714:	e3a01000 	mov	r1, #0
    d718:	e1510003 	cmp	r1, r3
    d71c:	01500002 	cmpeq	r0, r2
    d720:	3afffc86 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    d724:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    d728:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    d72c:	e58d2004 	str	r2, [sp, #4]
    d730:	eafffe5c 	b	d0a8 <alt_clk_freq_get+0x97c>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    d734:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    d738:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    d73c:	e3520000 	cmp	r2, #0
    d740:	1a00022a 	bne	dff0 <alt_clk_freq_get+0x18c4>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d744:	e302aa94 	movw	r10, #10900	; 0x2a94
    d748:	e3a05000 	mov	r5, #0
    d74c:	e340a002 	movt	r10, #2
    d750:	e59a2000 	ldr	r2, [r10]
    d754:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    d758:	e1942005 	orrs	r2, r4, r5
    d75c:	0afffc3d 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    d760:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    d764:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d768:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d76c:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d770:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d774:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d778:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    d77c:	eb002cb4 	bl	18a54 <__aeabi_uldivmod>
    d780:	e1a02000 	mov	r2, r0
    d784:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    d788:	e3e00000 	mvn	r0, #0
    d78c:	e3a01000 	mov	r1, #0
    d790:	e1510003 	cmp	r1, r3
    d794:	01500002 	cmpeq	r0, r2
    d798:	3afffc68 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    d79c:	e1a07002 	mov	r7, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    d7a0:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    d7a4:	e58d2004 	str	r2, [sp, #4]
    d7a8:	eafffd00 	b	cbb0 <alt_clk_freq_get+0x484>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    d7ac:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    d7b0:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    d7b4:	e3520000 	cmp	r2, #0
    d7b8:	1a000252 	bne	e108 <alt_clk_freq_get+0x19dc>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d7bc:	e302aa94 	movw	r10, #10900	; 0x2a94
    d7c0:	e3a05000 	mov	r5, #0
    d7c4:	e340a002 	movt	r10, #2
    d7c8:	e59a2000 	ldr	r2, [r10]
    d7cc:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    d7d0:	e1942005 	orrs	r2, r4, r5
    d7d4:	0afffc1f 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    d7d8:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    d7dc:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d7e0:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d7e4:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d7e8:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d7ec:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d7f0:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    d7f4:	eb002c96 	bl	18a54 <__aeabi_uldivmod>
    d7f8:	e1a02000 	mov	r2, r0
    d7fc:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    d800:	e3e00000 	mvn	r0, #0
    d804:	e3a01000 	mov	r1, #0
    d808:	e1510003 	cmp	r1, r3
    d80c:	01500002 	cmpeq	r0, r2
    d810:	3afffc4a 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    d814:	e1a03002 	mov	r3, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    d818:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    d81c:	e58d2004 	str	r2, [sp, #4]
    d820:	eafffe20 	b	d0a8 <alt_clk_freq_get+0x97c>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d824:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    d828:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d82c:	e3404002 	movt	r4, #2
    d830:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    d834:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    d838:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    d83c:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    d840:	e2822001 	add	r2, r2, #1
    d844:	e0810190 	umull	r0, r1, r0, r1
    d848:	eb002c81 	bl	18a54 <__aeabi_uldivmod>
    d84c:	e1a02000 	mov	r2, r0
    d850:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    d854:	e3e00000 	mvn	r0, #0
    d858:	e3a01000 	mov	r1, #0
    d85c:	e1510003 	cmp	r1, r3
    d860:	01500002 	cmpeq	r0, r2
    d864:	3afffc35 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    d868:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    d86c:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    d870:	e58d2004 	str	r2, [sp, #4]
    d874:	eafffd5f 	b	cdf8 <alt_clk_freq_get+0x6cc>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d878:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    d87c:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d880:	e3404002 	movt	r4, #2
    d884:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    d888:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    d88c:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    d890:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    d894:	e2822001 	add	r2, r2, #1
    d898:	e0810190 	umull	r0, r1, r0, r1
    d89c:	eb002c6c 	bl	18a54 <__aeabi_uldivmod>
    d8a0:	e1a02000 	mov	r2, r0
    d8a4:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    d8a8:	e3e00000 	mvn	r0, #0
    d8ac:	e3a01000 	mov	r1, #0
    d8b0:	e1510003 	cmp	r1, r3
    d8b4:	01500002 	cmpeq	r0, r2
    d8b8:	3afffc20 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    d8bc:	e1a07002 	mov	r7, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    d8c0:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    d8c4:	e58d2004 	str	r2, [sp, #4]
    d8c8:	eafffc7f 	b	cacc <alt_clk_freq_get+0x3a0>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    d8cc:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    d8d0:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    d8d4:	e3520000 	cmp	r2, #0
    d8d8:	1a0001ce 	bne	e018 <alt_clk_freq_get+0x18ec>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d8dc:	e302aa94 	movw	r10, #10900	; 0x2a94
    d8e0:	e3a05000 	mov	r5, #0
    d8e4:	e340a002 	movt	r10, #2
    d8e8:	e59a2000 	ldr	r2, [r10]
    d8ec:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    d8f0:	e1942005 	orrs	r2, r4, r5
    d8f4:	0afffbd7 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    d8f8:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    d8fc:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d900:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d904:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d908:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d90c:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d910:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    d914:	eb002c4e 	bl	18a54 <__aeabi_uldivmod>
    d918:	e1a02000 	mov	r2, r0
    d91c:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    d920:	e3e00000 	mvn	r0, #0
    d924:	e3a01000 	mov	r1, #0
    d928:	e1510003 	cmp	r1, r3
    d92c:	01500002 	cmpeq	r0, r2
    d930:	3afffc02 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    d934:	e1a07002 	mov	r7, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    d938:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    d93c:	e58d2004 	str	r2, [sp, #4]
    d940:	eafffd99 	b	cfac <alt_clk_freq_get+0x880>
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    d944:	e5133f3f 	ldr	r3, [r3, #-3903]	; 0xfffff0c1
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
    d948:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    d94c:	e3520000 	cmp	r2, #0
    d950:	1a0001c4 	bne	e068 <alt_clk_freq_get+0x193c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d954:	e302aa94 	movw	r10, #10900	; 0x2a94
    d958:	e3a05000 	mov	r5, #0
    d95c:	e340a002 	movt	r10, #2
    d960:	e59a2000 	ldr	r2, [r10]
    d964:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
    d968:	e1942005 	orrs	r2, r4, r5
    d96c:	0afffbb9 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
    d970:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
    d974:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d978:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d97c:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d980:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d984:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d988:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    d98c:	eb002c30 	bl	18a54 <__aeabi_uldivmod>
    d990:	e1a02000 	mov	r2, r0
    d994:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    d998:	e3e00000 	mvn	r0, #0
    d99c:	e3a01000 	mov	r1, #0
    d9a0:	e1510003 	cmp	r1, r3
    d9a4:	01500002 	cmpeq	r0, r2
    d9a8:	3afffbe4 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    d9ac:	e1a03002 	mov	r3, r2
                    alt_pll_clk_paramblok.SDRAMPLL_800.freqcur = temp;
    d9b0:	e58a2090 	str	r2, [r10, #144]	; 0x90
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    d9b4:	e58d2004 	str	r2, [sp, #4]
    d9b8:	eafffccf 	b	ccfc <alt_clk_freq_get+0x5d0>
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    d9bc:	e5133f3f 	ldr	r3, [r3, #-3903]	; 0xfffff0c1
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
    d9c0:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    d9c4:	e3520000 	cmp	r2, #0
    d9c8:	1a0001b0 	bne	e090 <alt_clk_freq_get+0x1964>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    d9cc:	e302aa94 	movw	r10, #10900	; 0x2a94
    d9d0:	e3a05000 	mov	r5, #0
    d9d4:	e340a002 	movt	r10, #2
    d9d8:	e59a2000 	ldr	r2, [r10]
    d9dc:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
    d9e0:	e1942005 	orrs	r2, r4, r5
    d9e4:	0afffb9b 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
    d9e8:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
    d9ec:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d9f0:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    d9f4:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    d9f8:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    d9fc:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    da00:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    da04:	eb002c12 	bl	18a54 <__aeabi_uldivmod>
    da08:	e1a02000 	mov	r2, r0
    da0c:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    da10:	e3e00000 	mvn	r0, #0
    da14:	e3a01000 	mov	r1, #0
    da18:	e1510003 	cmp	r1, r3
    da1c:	01500002 	cmpeq	r0, r2
    da20:	3afffbc6 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    da24:	e1a03002 	mov	r3, r2
                    alt_pll_clk_paramblok.SDRAMPLL_800.freqcur = temp;
    da28:	e58a2090 	str	r2, [r10, #144]	; 0x90
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    da2c:	e58d2004 	str	r2, [sp, #4]
    da30:	eafffdee 	b	d1f0 <alt_clk_freq_get+0xac4>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    da34:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    da38:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    da3c:	e3520000 	cmp	r2, #0
    da40:	1a0001a6 	bne	e0e0 <alt_clk_freq_get+0x19b4>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    da44:	e302aa94 	movw	r10, #10900	; 0x2a94
    da48:	e3a05000 	mov	r5, #0
    da4c:	e340a002 	movt	r10, #2
    da50:	e59a2000 	ldr	r2, [r10]
    da54:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    da58:	e1942005 	orrs	r2, r4, r5
    da5c:	0afffb7d 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    da60:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    da64:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    da68:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    da6c:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    da70:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    da74:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    da78:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    da7c:	eb002bf4 	bl	18a54 <__aeabi_uldivmod>
    da80:	e1a02000 	mov	r2, r0
    da84:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    da88:	e3e00000 	mvn	r0, #0
    da8c:	e3a01000 	mov	r1, #0
    da90:	e1510003 	cmp	r1, r3
    da94:	01500002 	cmpeq	r0, r2
    da98:	3afffba8 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    da9c:	e1a07002 	mov	r7, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    daa0:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    daa4:	e58d2004 	str	r2, [sp, #4]
    daa8:	eafffc55 	b	cc04 <alt_clk_freq_get+0x4d8>
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    daac:	e5133f3f 	ldr	r3, [r3, #-3903]	; 0xfffff0c1
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
    dab0:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    dab4:	e3520000 	cmp	r2, #0
    dab8:	1a00019c 	bne	e130 <alt_clk_freq_get+0x1a04>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dabc:	e302aa94 	movw	r10, #10900	; 0x2a94
    dac0:	e3a05000 	mov	r5, #0
    dac4:	e340a002 	movt	r10, #2
    dac8:	e59a2000 	ldr	r2, [r10]
    dacc:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
    dad0:	e1942005 	orrs	r2, r4, r5
    dad4:	0afffb5f 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
    dad8:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
    dadc:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    dae0:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    dae4:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    dae8:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    daec:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    daf0:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    daf4:	eb002bd6 	bl	18a54 <__aeabi_uldivmod>
    daf8:	e1a02000 	mov	r2, r0
    dafc:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    db00:	e3e00000 	mvn	r0, #0
    db04:	e3a01000 	mov	r1, #0
    db08:	e1510003 	cmp	r1, r3
    db0c:	01500002 	cmpeq	r0, r2
    db10:	3afffb8a 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    db14:	e1a03002 	mov	r3, r2
                    alt_pll_clk_paramblok.SDRAMPLL_800.freqcur = temp;
    db18:	e58a2090 	str	r2, [r10, #144]	; 0x90
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    db1c:	e58d2004 	str	r2, [sp, #4]
    db20:	eafffcc1 	b	ce2c <alt_clk_freq_get+0x700>
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    db24:	e5133f3f 	ldr	r3, [r3, #-3903]	; 0xfffff0c1
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
    db28:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    db2c:	e3520000 	cmp	r2, #0
    db30:	1a000192 	bne	e180 <alt_clk_freq_get+0x1a54>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    db34:	e302aa94 	movw	r10, #10900	; 0x2a94
    db38:	e3a05000 	mov	r5, #0
    db3c:	e340a002 	movt	r10, #2
    db40:	e59a2000 	ldr	r2, [r10]
    db44:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
    db48:	e1942005 	orrs	r2, r4, r5
    db4c:	0afffb41 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
    db50:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
    db54:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    db58:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    db5c:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    db60:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    db64:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    db68:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    db6c:	eb002bb8 	bl	18a54 <__aeabi_uldivmod>
    db70:	e1a02000 	mov	r2, r0
    db74:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    db78:	e3e00000 	mvn	r0, #0
    db7c:	e3a01000 	mov	r1, #0
    db80:	e1510003 	cmp	r1, r3
    db84:	01500002 	cmpeq	r0, r2
    db88:	3afffb6c 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    db8c:	e1a03002 	mov	r3, r2
                    alt_pll_clk_paramblok.SDRAMPLL_800.freqcur = temp;
    db90:	e58a2090 	str	r2, [r10, #144]	; 0x90
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    db94:	e58d2004 	str	r2, [sp, #4]
    db98:	eafffd4f 	b	d0dc <alt_clk_freq_get+0x9b0>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    db9c:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    dba0:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dba4:	e3404002 	movt	r4, #2
    dba8:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    dbac:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    dbb0:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    dbb4:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    dbb8:	e2822001 	add	r2, r2, #1
    dbbc:	e0810190 	umull	r0, r1, r0, r1
    dbc0:	eb002ba3 	bl	18a54 <__aeabi_uldivmod>
    dbc4:	e1a02000 	mov	r2, r0
    dbc8:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    dbcc:	e3e00000 	mvn	r0, #0
    dbd0:	e3a01000 	mov	r1, #0
    dbd4:	e1510003 	cmp	r1, r3
    dbd8:	01500002 	cmpeq	r0, r2
    dbdc:	3afffb57 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    dbe0:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    dbe4:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    dbe8:	e58d2004 	str	r2, [sp, #4]
    dbec:	eafffda7 	b	d290 <alt_clk_freq_get+0xb64>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    dbf0:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    dbf4:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    dbf8:	e3520000 	cmp	r2, #0
    dbfc:	1a00010f 	bne	e040 <alt_clk_freq_get+0x1914>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dc00:	e302aa94 	movw	r10, #10900	; 0x2a94
    dc04:	e3a05000 	mov	r5, #0
    dc08:	e340a002 	movt	r10, #2
    dc0c:	e59a2000 	ldr	r2, [r10]
    dc10:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    dc14:	e1942005 	orrs	r2, r4, r5
    dc18:	0afffb0e 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    dc1c:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    dc20:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    dc24:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    dc28:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    dc2c:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    dc30:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    dc34:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    dc38:	eb002b85 	bl	18a54 <__aeabi_uldivmod>
    dc3c:	e1a02000 	mov	r2, r0
    dc40:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    dc44:	e3e00000 	mvn	r0, #0
    dc48:	e3a01000 	mov	r1, #0
    dc4c:	e1510003 	cmp	r1, r3
    dc50:	01500002 	cmpeq	r0, r2
    dc54:	3afffb39 	bcc	c940 <alt_clk_freq_get+0x214>
                {
                    temp = (alt_freq_t) temp1;
    dc58:	e1a03002 	mov	r3, r2
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    dc5c:	e58a2080 	str	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    dc60:	e58d2004 	str	r2, [sp, #4]
    dc64:	eafffd33 	b	d138 <alt_clk_freq_get+0xa0c>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dc68:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    dc6c:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dc70:	e3404002 	movt	r4, #2
    dc74:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    dc78:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    dc7c:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    dc80:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    dc84:	e2822001 	add	r2, r2, #1
    dc88:	e0810190 	umull	r0, r1, r0, r1
    dc8c:	eb002b70 	bl	18a54 <__aeabi_uldivmod>
    dc90:	e1a02000 	mov	r2, r0
    dc94:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    dc98:	e3e00000 	mvn	r0, #0
    dc9c:	e3a01000 	mov	r1, #0
    dca0:	e1510003 	cmp	r1, r3
    dca4:	01500002 	cmpeq	r0, r2
    dca8:	3afffb24 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    dcac:	e1a07002 	mov	r7, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    dcb0:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    dcb4:	e58d2004 	str	r2, [sp, #4]
    dcb8:	eafffb4b 	b	c9ec <alt_clk_freq_get+0x2c0>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dcbc:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    dcc0:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dcc4:	e3404002 	movt	r4, #2
    dcc8:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    dccc:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    dcd0:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    dcd4:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    dcd8:	e2822001 	add	r2, r2, #1
    dcdc:	e0810190 	umull	r0, r1, r0, r1
    dce0:	eb002b5b 	bl	18a54 <__aeabi_uldivmod>
    dce4:	e1a02000 	mov	r2, r0
    dce8:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    dcec:	e3e00000 	mvn	r0, #0
    dcf0:	e3a01000 	mov	r1, #0
    dcf4:	e1510003 	cmp	r1, r3
    dcf8:	01500002 	cmpeq	r0, r2
    dcfc:	3afffb0f 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    dd00:	e1a07002 	mov	r7, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    dd04:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    dd08:	e58d2004 	str	r2, [sp, #4]
    dd0c:	eafffb49 	b	ca38 <alt_clk_freq_get+0x30c>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dd10:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    dd14:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dd18:	e3404002 	movt	r4, #2
    dd1c:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    dd20:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    dd24:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    dd28:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    dd2c:	e2822001 	add	r2, r2, #1
    dd30:	e0810190 	umull	r0, r1, r0, r1
    dd34:	eb002b46 	bl	18a54 <__aeabi_uldivmod>
    dd38:	e1a02000 	mov	r2, r0
    dd3c:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    dd40:	e3e00000 	mvn	r0, #0
    dd44:	e3a01000 	mov	r1, #0
    dd48:	e1510003 	cmp	r1, r3
    dd4c:	01500002 	cmpeq	r0, r2
    dd50:	3afffafa 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    dd54:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    dd58:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    dd5c:	e58d2004 	str	r2, [sp, #4]
    dd60:	eafffb47 	b	ca84 <alt_clk_freq_get+0x358>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    dd64:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    dd68:	e2133001 	ands	r3, r3, #1
    dd6c:	0a000161 	beq	e2f8 <alt_clk_freq_get+0x1bcc>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    dd70:	e3023a94 	movw	r3, #10900	; 0x2a94
    dd74:	e3403002 	movt	r3, #2
    dd78:	e5936000 	ldr	r6, [r3]
    dd7c:	e58d6004 	str	r6, [sp, #4]
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
    dd80:	e28d7004 	add	r7, sp, #4
    dd84:	e3a0000f 	mov	r0, #15
    dd88:	e1a01007 	mov	r1, r7
    dd8c:	ebfff25f 	bl	a710 <alt_clk_divider_get>
            }
        }
        if (ret == ALT_E_SUCCESS)
    dd90:	e250c000 	subs	r12, r0, #0
    dd94:	1afffab0 	bne	c85c <alt_clk_freq_get+0x130>
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    dd98:	e3a05000 	mov	r5, #0
    dd9c:	e1a04006 	mov	r4, r6
    dda0:	e59da004 	ldr	r10, [sp, #4]
    dda4:	e1a0b005 	mov	r11, r5
    dda8:	eafffc5e 	b	cf28 <alt_clk_freq_get+0x7fc>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    ddac:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    ddb0:	e2133001 	ands	r3, r3, #1
    ddb4:	0a00013a 	beq	e2a4 <alt_clk_freq_get+0x1b78>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ddb8:	e3023a94 	movw	r3, #10900	; 0x2a94
    ddbc:	e3403002 	movt	r3, #2
    ddc0:	e593a000 	ldr	r10, [r3]
    ddc4:	e58da004 	str	r10, [sp, #4]
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
    ddc8:	e28d7004 	add	r7, sp, #4
    ddcc:	e3a0000f 	mov	r0, #15
    ddd0:	e1a01007 	mov	r1, r7
    ddd4:	ebfff24d 	bl	a710 <alt_clk_divider_get>
            }
        }
        if (ret == ALT_E_SUCCESS)
    ddd8:	e250c000 	subs	r12, r0, #0
    dddc:	1afffa9e 	bne	c85c <alt_clk_freq_get+0x130>
    dde0:	e59d6004 	ldr	r6, [sp, #4]
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    dde4:	e1a0400a 	mov	r4, r10
    dde8:	e3a05000 	mov	r5, #0
    ddec:	eafffc5c 	b	cf64 <alt_clk_freq_get+0x838>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    ddf0:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    ddf4:	e2133001 	ands	r3, r3, #1
    ddf8:	0a0000ff 	beq	e1fc <alt_clk_freq_get+0x1ad0>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    ddfc:	e3023a94 	movw	r3, #10900	; 0x2a94
    de00:	e3403002 	movt	r3, #2
    de04:	e5936000 	ldr	r6, [r3]
    de08:	e58d6004 	str	r6, [sp, #4]
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C2, &temp);
    de0c:	e28d7004 	add	r7, sp, #4
    de10:	e3a0000f 	mov	r0, #15
    de14:	e1a01007 	mov	r1, r7
    de18:	ebfff23c 	bl	a710 <alt_clk_divider_get>
            }
        }
        if (ret == ALT_E_SUCCESS)
    de1c:	e250c000 	subs	r12, r0, #0
    de20:	1afffa8d 	bne	c85c <alt_clk_freq_get+0x130>
        else
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    de24:	e3a05000 	mov	r5, #0
    de28:	e1a04006 	mov	r4, r6
    de2c:	e59da004 	ldr	r10, [sp, #4]
    de30:	e1a0b005 	mov	r11, r5
    de34:	eafffcd1 	b	d180 <alt_clk_freq_get+0xa54>
                *freq = alt_ext_clk_paramblok.sdram.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    de38:	e5133f3f 	ldr	r3, [r3, #-3903]	; 0xfffff0c1
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
    de3c:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
    de40:	e3520000 	cmp	r2, #0
    de44:	1a000151 	bne	e390 <alt_clk_freq_get+0x1c64>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    de48:	e302aa94 	movw	r10, #10900	; 0x2a94
    de4c:	e3a05000 	mov	r5, #0
    de50:	e340a002 	movt	r10, #2
    de54:	e59a2000 	ldr	r2, [r10]
    de58:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
    de5c:	e1942005 	orrs	r2, r4, r5
    de60:	0a00004c 	beq	df98 <alt_clk_freq_get+0x186c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
            numer = ALT_CLKMGR_SDRPLL_VCO_NUMER_GET(temp);
    de64:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_SDRPLL_VCO_DENOM_GET(temp);
    de68:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    de6c:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    de70:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    de74:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    de78:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    de7c:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    de80:	eb002af3 	bl	18a54 <__aeabi_uldivmod>
                if (temp1 <= UINT32_MAX)
    de84:	e3e02000 	mvn	r2, #0
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
                temp1 /= (denom + 1);
    de88:	e1a04000 	mov	r4, r0
    de8c:	e1a05001 	mov	r5, r1
                if (temp1 <= UINT32_MAX)
    de90:	e3a03000 	mov	r3, #0
    de94:	e1530005 	cmp	r3, r5
    de98:	01520004 	cmpeq	r2, r4
                {
                    temp = (alt_freq_t) temp1;
    de9c:	258a0090 	strcs	r0, [r10, #144]	; 0x90
                    alt_pll_clk_paramblok.SDRAMPLL_800.freqcur = temp;
                    /* store this value in the parameter block table */
    
                    *freq = temp;
                    ret = ALT_E_SUCCESS;
    dea0:	23a0c000 	movcs	r12, #0
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
                temp1 /= (denom + 1);
                if (temp1 <= UINT32_MAX)
    dea4:	2afffba6 	bcs	cd44 <alt_clk_freq_get+0x618>
    dea8:	e3a04000 	mov	r4, #0
    deac:	e3a05000 	mov	r5, #0
                    *freq = temp;
                    ret = ALT_E_SUCCESS;
                }
                else
                {
                    ret = ALT_E_ERROR;
    deb0:	e3e0c000 	mvn	r12, #0
    deb4:	eafffba2 	b	cd44 <alt_clk_freq_get+0x618>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    deb8:	e5133f7f 	ldr	r3, [r3, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    debc:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    dec0:	e3520000 	cmp	r2, #0
    dec4:	1a00002d 	bne	df80 <alt_clk_freq_get+0x1854>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    dec8:	e302aa94 	movw	r10, #10900	; 0x2a94
    decc:	e3a05000 	mov	r5, #0
    ded0:	e340a002 	movt	r10, #2
    ded4:	e59a2000 	ldr	r2, [r10]
    ded8:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    dedc:	e1942005 	orrs	r2, r4, r5
    dee0:	0a00002c 	beq	df98 <alt_clk_freq_get+0x186c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    dee4:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    dee8:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    deec:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    def0:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    def4:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    def8:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    defc:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    df00:	eb002ad3 	bl	18a54 <__aeabi_uldivmod>
                if (temp1 <= UINT32_MAX)
    df04:	e3e02000 	mvn	r2, #0
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
                temp1 /= (denom + 1);
    df08:	e1a04000 	mov	r4, r0
    df0c:	e1a05001 	mov	r5, r1
                if (temp1 <= UINT32_MAX)
    df10:	e3a03000 	mov	r3, #0
    df14:	e1530005 	cmp	r3, r5
    df18:	01520004 	cmpeq	r2, r4
                {
                    temp = (alt_freq_t) temp1;
    df1c:	258a0080 	strcs	r0, [r10, #128]	; 0x80
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
                    /* store this value in the parameter block table */
    
                    *freq = temp;
                    ret = ALT_E_SUCCESS;
    df20:	23a0c000 	movcs	r12, #0
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
                temp1 /= (denom + 1);
                if (temp1 <= UINT32_MAX)
    df24:	2afffb86 	bcs	cd44 <alt_clk_freq_get+0x618>
    df28:	eaffffde 	b	dea8 <alt_clk_freq_get+0x177c>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    df2c:	e3026a94 	movw	r6, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    df30:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    df34:	e3406002 	movt	r6, #2
            temp1 *= (numer + 1);
            temp1 /= (denom + 1);
    df38:	e1a03007 	mov	r3, r7
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    df3c:	e5961000 	ldr	r1, [r6]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    df40:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    df44:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    df48:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    df4c:	e2822001 	add	r2, r2, #1
    df50:	e0810190 	umull	r0, r1, r0, r1
    df54:	eb002abe 	bl	18a54 <__aeabi_uldivmod>

            if (temp1 <= UINT32_MAX)
    df58:	e3e02000 	mvn	r2, #0
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
            temp1 /= (denom + 1);
    df5c:	e1a04000 	mov	r4, r0
    df60:	e1a05001 	mov	r5, r1

            if (temp1 <= UINT32_MAX)
    df64:	e3a03000 	mov	r3, #0
    df68:	e1530005 	cmp	r3, r5
    df6c:	01520004 	cmpeq	r2, r4
            {
                temp = (alt_freq_t) temp1;
    df70:	25860070 	strcs	r0, [r6, #112]	; 0x70
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
                /* store this value in the parameter block table */
                *freq = temp;
                /* should NOT check value against PLL frequency limits */
                ret = ALT_E_SUCCESS;
    df74:	21a0c007 	movcs	r12, r7
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
            temp1 /= (denom + 1);

            if (temp1 <= UINT32_MAX)
    df78:	2afffb71 	bcs	cd44 <alt_clk_freq_get+0x618>
    df7c:	eaffffc9 	b	dea8 <alt_clk_freq_get+0x177c>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    df80:	e3520001 	cmp	r2, #1
    df84:	0a0001a4 	beq	e61c <alt_clk_freq_get+0x1ef0>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    df88:	e3520002 	cmp	r2, #2
    df8c:	0a0001b8 	beq	e674 <alt_clk_freq_get+0x1f48>
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    df90:	e3a04000 	mov	r4, #0
    df94:	e3a05000 	mov	r5, #0
{
    uint64_t            temp1 = 0;
    uint32_t            temp;
    uint32_t            numer;
    uint32_t            denom;
    ALT_STATUS_CODE     ret = ALT_E_BAD_ARG;
    df98:	e3e0c008 	mvn	r12, #8
    df9c:	eafffb68 	b	cd44 <alt_clk_freq_get+0x618>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    dfa0:	e3520001 	cmp	r2, #1
    dfa4:	0a000136 	beq	e484 <alt_clk_freq_get+0x1d58>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    dfa8:	e3520002 	cmp	r2, #2
    dfac:	1afffa29 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    dfb0:	e302aa94 	movw	r10, #10900	; 0x2a94
    dfb4:	e3a05000 	mov	r5, #0
    dfb8:	e340a002 	movt	r10, #2
    dfbc:	e59a2020 	ldr	r2, [r10, #32]
    dfc0:	e1a04002 	mov	r4, r2
    dfc4:	eafffd68 	b	d56c <alt_clk_freq_get+0xe40>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    dfc8:	e3520001 	cmp	r2, #1
    dfcc:	0a0000f9 	beq	e3b8 <alt_clk_freq_get+0x1c8c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    dfd0:	e3520002 	cmp	r2, #2
    dfd4:	1afffa1f 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    dfd8:	e302aa94 	movw	r10, #10900	; 0x2a94
    dfdc:	e3a05000 	mov	r5, #0
    dfe0:	e340a002 	movt	r10, #2
    dfe4:	e59a2020 	ldr	r2, [r10, #32]
    dfe8:	e1a04002 	mov	r4, r2
    dfec:	eafffd7c 	b	d5e4 <alt_clk_freq_get+0xeb8>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    dff0:	e3520001 	cmp	r2, #1
    dff4:	0a00012e 	beq	e4b4 <alt_clk_freq_get+0x1d88>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    dff8:	e3520002 	cmp	r2, #2
    dffc:	1afffa15 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    e000:	e302aa94 	movw	r10, #10900	; 0x2a94
    e004:	e3a05000 	mov	r5, #0
    e008:	e340a002 	movt	r10, #2
    e00c:	e59a2020 	ldr	r2, [r10, #32]
    e010:	e1a04002 	mov	r4, r2
    e014:	eafffdcf 	b	d758 <alt_clk_freq_get+0x102c>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    e018:	e3520001 	cmp	r2, #1
    e01c:	0a00011e 	beq	e49c <alt_clk_freq_get+0x1d70>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    e020:	e3520002 	cmp	r2, #2
    e024:	1afffa0b 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    e028:	e302aa94 	movw	r10, #10900	; 0x2a94
    e02c:	e3a05000 	mov	r5, #0
    e030:	e340a002 	movt	r10, #2
    e034:	e59a2020 	ldr	r2, [r10, #32]
    e038:	e1a04002 	mov	r4, r2
    e03c:	eafffe2b 	b	d8f0 <alt_clk_freq_get+0x11c4>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    e040:	e3520001 	cmp	r2, #1
    e044:	0a000120 	beq	e4cc <alt_clk_freq_get+0x1da0>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    e048:	e3520002 	cmp	r2, #2
    e04c:	1afffa01 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    e050:	e302aa94 	movw	r10, #10900	; 0x2a94
    e054:	e3a05000 	mov	r5, #0
    e058:	e340a002 	movt	r10, #2
    e05c:	e59a2020 	ldr	r2, [r10, #32]
    e060:	e1a04002 	mov	r4, r2
    e064:	eafffeea 	b	dc14 <alt_clk_freq_get+0x14e8>
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    e068:	e3520001 	cmp	r2, #1
    e06c:	0a0000ec 	beq	e424 <alt_clk_freq_get+0x1cf8>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    e070:	e3520002 	cmp	r2, #2
    e074:	1afff9f7 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
    e078:	e302aa94 	movw	r10, #10900	; 0x2a94
    e07c:	e3a05000 	mov	r5, #0
    e080:	e340a002 	movt	r10, #2
    e084:	e59a2030 	ldr	r2, [r10, #48]	; 0x30
    e088:	e1a04002 	mov	r4, r2
    e08c:	eafffe35 	b	d968 <alt_clk_freq_get+0x123c>
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    e090:	e3520001 	cmp	r2, #1
    e094:	0a000121 	beq	e520 <alt_clk_freq_get+0x1df4>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    e098:	e3520002 	cmp	r2, #2
    e09c:	1afff9ed 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
    e0a0:	e302aa94 	movw	r10, #10900	; 0x2a94
    e0a4:	e3a05000 	mov	r5, #0
    e0a8:	e340a002 	movt	r10, #2
    e0ac:	e59a2030 	ldr	r2, [r10, #48]	; 0x30
    e0b0:	e1a04002 	mov	r4, r2
    e0b4:	eafffe49 	b	d9e0 <alt_clk_freq_get+0x12b4>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    e0b8:	e3520001 	cmp	r2, #1
    e0bc:	0a0000e4 	beq	e454 <alt_clk_freq_get+0x1d28>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    e0c0:	e3520002 	cmp	r2, #2
    e0c4:	1afff9e3 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    e0c8:	e302aa94 	movw	r10, #10900	; 0x2a94
    e0cc:	e3a05000 	mov	r5, #0
    e0d0:	e340a002 	movt	r10, #2
    e0d4:	e59a2020 	ldr	r2, [r10, #32]
    e0d8:	e1a04002 	mov	r4, r2
    e0dc:	eafffcd1 	b	d428 <alt_clk_freq_get+0xcfc>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    e0e0:	e3520001 	cmp	r2, #1
    e0e4:	0a000122 	beq	e574 <alt_clk_freq_get+0x1e48>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    e0e8:	e3520002 	cmp	r2, #2
    e0ec:	1afff9d9 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    e0f0:	e302aa94 	movw	r10, #10900	; 0x2a94
    e0f4:	e3a05000 	mov	r5, #0
    e0f8:	e340a002 	movt	r10, #2
    e0fc:	e59a2020 	ldr	r2, [r10, #32]
    e100:	e1a04002 	mov	r4, r2
    e104:	eafffe53 	b	da58 <alt_clk_freq_get+0x132c>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    e108:	e3520001 	cmp	r2, #1
    e10c:	0a0000ca 	beq	e43c <alt_clk_freq_get+0x1d10>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    e110:	e3520002 	cmp	r2, #2
    e114:	1afff9cf 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    e118:	e302aa94 	movw	r10, #10900	; 0x2a94
    e11c:	e3a05000 	mov	r5, #0
    e120:	e340a002 	movt	r10, #2
    e124:	e59a2020 	ldr	r2, [r10, #32]
    e128:	e1a04002 	mov	r4, r2
    e12c:	eafffda7 	b	d7d0 <alt_clk_freq_get+0x10a4>
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    e130:	e3520001 	cmp	r2, #1
    e134:	0a0000ff 	beq	e538 <alt_clk_freq_get+0x1e0c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    e138:	e3520002 	cmp	r2, #2
    e13c:	1afff9c5 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
    e140:	e302aa94 	movw	r10, #10900	; 0x2a94
    e144:	e3a05000 	mov	r5, #0
    e148:	e340a002 	movt	r10, #2
    e14c:	e59a2030 	ldr	r2, [r10, #48]	; 0x30
    e150:	e1a04002 	mov	r4, r2
    e154:	eafffe5d 	b	dad0 <alt_clk_freq_get+0x13a4>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    e158:	e3520001 	cmp	r2, #1
    e15c:	0a0000c2 	beq	e46c <alt_clk_freq_get+0x1d40>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    e160:	e3520002 	cmp	r2, #2
    e164:	1afff9bb 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    e168:	e302aa94 	movw	r10, #10900	; 0x2a94
    e16c:	e3a05000 	mov	r5, #0
    e170:	e340a002 	movt	r10, #2
    e174:	e59a2020 	ldr	r2, [r10, #32]
    e178:	e1a04002 	mov	r4, r2
    e17c:	eafffcdc 	b	d4f4 <alt_clk_freq_get+0xdc8>
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    e180:	e3520001 	cmp	r2, #1
    e184:	0a0000d6 	beq	e4e4 <alt_clk_freq_get+0x1db8>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    e188:	e3520002 	cmp	r2, #2
    e18c:	1afff9b1 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
    e190:	e302aa94 	movw	r10, #10900	; 0x2a94
    e194:	e3a05000 	mov	r5, #0
    e198:	e340a002 	movt	r10, #2
    e19c:	e59a2030 	ldr	r2, [r10, #48]	; 0x30
    e1a0:	e1a04002 	mov	r4, r2
    e1a4:	eafffe67 	b	db48 <alt_clk_freq_get+0x141c>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e1a8:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    e1ac:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e1b0:	e3404002 	movt	r4, #2
    e1b4:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    e1b8:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    e1bc:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    e1c0:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    e1c4:	e2822001 	add	r2, r2, #1
    e1c8:	e0810190 	umull	r0, r1, r0, r1
    e1cc:	eb002a20 	bl	18a54 <__aeabi_uldivmod>
    e1d0:	e1a02000 	mov	r2, r0
    e1d4:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    e1d8:	e3e00000 	mvn	r0, #0
    e1dc:	e3a01000 	mov	r1, #0
    e1e0:	e1510003 	cmp	r1, r3
    e1e4:	01500002 	cmpeq	r0, r2
    e1e8:	3afff9d4 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    e1ec:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    e1f0:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    e1f4:	e58d2004 	str	r2, [sp, #4]
    e1f8:	eafffa52 	b	cb48 <alt_clk_freq_get+0x41c>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e1fc:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    e200:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e204:	e3404002 	movt	r4, #2
    e208:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    e20c:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    e210:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    e214:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    e218:	e2822001 	add	r2, r2, #1
    e21c:	e0810190 	umull	r0, r1, r0, r1
    e220:	eb002a0b 	bl	18a54 <__aeabi_uldivmod>
    e224:	e1a02000 	mov	r2, r0
    e228:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    e22c:	e3e00000 	mvn	r0, #0
    e230:	e3a01000 	mov	r1, #0
    e234:	e1510003 	cmp	r1, r3
    e238:	01500002 	cmpeq	r0, r2
    e23c:	3afff9bf 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    e240:	e1a06002 	mov	r6, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    e244:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    e248:	e58d2004 	str	r2, [sp, #4]
    e24c:	eafffeee 	b	de0c <alt_clk_freq_get+0x16e0>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e250:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    e254:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e258:	e3404002 	movt	r4, #2
    e25c:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    e260:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    e264:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    e268:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    e26c:	e2822001 	add	r2, r2, #1
    e270:	e0810190 	umull	r0, r1, r0, r1
    e274:	eb0029f6 	bl	18a54 <__aeabi_uldivmod>
    e278:	e1a02000 	mov	r2, r0
    e27c:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    e280:	e3e00000 	mvn	r0, #0
    e284:	e3a01000 	mov	r1, #0
    e288:	e1510003 	cmp	r1, r3
    e28c:	01500002 	cmpeq	r0, r2
    e290:	3afff9aa 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    e294:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    e298:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    e29c:	e58d2004 	str	r2, [sp, #4]
    e2a0:	eafffa6e 	b	cc60 <alt_clk_freq_get+0x534>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e2a4:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    e2a8:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e2ac:	e3404002 	movt	r4, #2
    e2b0:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    e2b4:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    e2b8:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    e2bc:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    e2c0:	e2822001 	add	r2, r2, #1
    e2c4:	e0810190 	umull	r0, r1, r0, r1
    e2c8:	eb0029e1 	bl	18a54 <__aeabi_uldivmod>
    e2cc:	e1a02000 	mov	r2, r0
    e2d0:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    e2d4:	e3e00000 	mvn	r0, #0
    e2d8:	e3a01000 	mov	r1, #0
    e2dc:	e1510003 	cmp	r1, r3
    e2e0:	01500002 	cmpeq	r0, r2
    e2e4:	3afff995 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    e2e8:	e1a0a002 	mov	r10, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    e2ec:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    e2f0:	e58d2004 	str	r2, [sp, #4]
    e2f4:	eafffeb3 	b	ddc8 <alt_clk_freq_get+0x169c>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e2f8:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    e2fc:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e300:	e3404002 	movt	r4, #2
    e304:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    e308:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    e30c:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    e310:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    e314:	e2822001 	add	r2, r2, #1
    e318:	e0810190 	umull	r0, r1, r0, r1
    e31c:	eb0029cc 	bl	18a54 <__aeabi_uldivmod>
    e320:	e1a02000 	mov	r2, r0
    e324:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    e328:	e3e00000 	mvn	r0, #0
    e32c:	e3a01000 	mov	r1, #0
    e330:	e1510003 	cmp	r1, r3
    e334:	01500002 	cmpeq	r0, r2
    e338:	3afff980 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    e33c:	e1a06002 	mov	r6, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    e340:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    e344:	e58d2004 	str	r2, [sp, #4]
    e348:	eafffe8c 	b	dd80 <alt_clk_freq_get+0x1654>
                temp = alt_ext_clk_paramblok.clkosc1.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
            {
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
    e34c:	e3023a94 	movw	r3, #10900	; 0x2a94
                ret = ALT_E_SUCCESS;
    e350:	e3a0c000 	mov	r12, #0
                temp = alt_ext_clk_paramblok.clkosc1.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
            {
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
    e354:	e3403002 	movt	r3, #2
    e358:	e1a0500c 	mov	r5, r12
    e35c:	e5933010 	ldr	r3, [r3, #16]
    e360:	e1a04003 	mov	r4, r3
    e364:	eafffa76 	b	cd44 <alt_clk_freq_get+0x618>
        return ret;
    }

    if (pll == ALT_CLK_MAIN_PLL)
    {
        temp = alt_read_word(ALT_CLKMGR_BYPASS_ADDR);
    e368:	e5123ffb 	ldr	r3, [r2, #-4091]	; 0xfffff005
        if(ALT_CLKMGR_BYPASS_MAINPLL_GET(temp))
    e36c:	e2133001 	ands	r3, r3, #1
    e370:	0a000016 	beq	e3d0 <alt_clk_freq_get+0x1ca4>
        {
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
    e374:	e3023a94 	movw	r3, #10900	; 0x2a94
    e378:	e3403002 	movt	r3, #2
    e37c:	e5933000 	ldr	r3, [r3]
    e380:	e58d3004 	str	r3, [sp, #4]
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
    e384:	e3a00011 	mov	r0, #17
    e388:	e28d1004 	add	r1, sp, #4
    e38c:	eafffbe7 	b	d330 <alt_clk_freq_get+0xc04>
            temp = ALT_CLKMGR_SDRPLL_VCO_SSRC_GET(temp);
            if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
    e390:	e3520001 	cmp	r2, #1
    e394:	0a0000a6 	beq	e634 <alt_clk_freq_get+0x1f08>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
    e398:	e3520002 	cmp	r2, #2
    e39c:	1afffefb 	bne	df90 <alt_clk_freq_get+0x1864>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.sdram.freqcur;
    e3a0:	e302aa94 	movw	r10, #10900	; 0x2a94
    e3a4:	e3a05000 	mov	r5, #0
    e3a8:	e340a002 	movt	r10, #2
    e3ac:	e59a2030 	ldr	r2, [r10, #48]	; 0x30
    e3b0:	e1a04002 	mov	r4, r2
    e3b4:	eafffea8 	b	de5c <alt_clk_freq_get+0x1730>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e3b8:	e302aa94 	movw	r10, #10900	; 0x2a94
    e3bc:	e3a05000 	mov	r5, #0
    e3c0:	e340a002 	movt	r10, #2
    e3c4:	e59a2010 	ldr	r2, [r10, #16]
    e3c8:	e1a04002 	mov	r4, r2
    e3cc:	eafffc84 	b	d5e4 <alt_clk_freq_get+0xeb8>
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e3d0:	e3024a94 	movw	r4, #10900	; 0x2a94
            *freq = alt_ext_clk_paramblok.clkosc1.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    e3d4:	e5122fbf 	ldr	r2, [r2, #-4031]	; 0xfffff041
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e3d8:	e3404002 	movt	r4, #2
    e3dc:	e5941000 	ldr	r1, [r4]
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
            numer = ALT_CLKMGR_MAINPLL_VCO_NUMER_GET(temp);
    e3e0:	e7ec01d2 	ubfx	r0, r2, #3, #13
            denom = ALT_CLKMGR_MAINPLL_VCO_DENOM_GET(temp);
    e3e4:	e7e52852 	ubfx	r2, r2, #16, #6
            temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            temp1 *= (numer + 1);
    e3e8:	e2800001 	add	r0, r0, #1
            temp1 /= (denom + 1);
    e3ec:	e2822001 	add	r2, r2, #1
    e3f0:	e0810190 	umull	r0, r1, r0, r1
    e3f4:	eb002996 	bl	18a54 <__aeabi_uldivmod>
    e3f8:	e1a02000 	mov	r2, r0
    e3fc:	e1a03001 	mov	r3, r1

            if (temp1 <= UINT32_MAX)
    e400:	e3e00000 	mvn	r0, #0
    e404:	e3a01000 	mov	r1, #0
    e408:	e1510003 	cmp	r1, r3
    e40c:	01500002 	cmpeq	r0, r2
    e410:	3afff94a 	bcc	c940 <alt_clk_freq_get+0x214>
            {
                temp = (alt_freq_t) temp1;
    e414:	e1a03002 	mov	r3, r2
                alt_pll_clk_paramblok.MainPLL_800.freqcur = temp;
    e418:	e5842070 	str	r2, [r4, #112]	; 0x70
                /* store this value in the parameter block table */
                *freq = temp;
    e41c:	e58d2004 	str	r2, [sp, #4]
    e420:	eaffffd7 	b	e384 <alt_clk_freq_get+0x1c58>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e424:	e302aa94 	movw	r10, #10900	; 0x2a94
    e428:	e3a05000 	mov	r5, #0
    e42c:	e340a002 	movt	r10, #2
    e430:	e59a2010 	ldr	r2, [r10, #16]
    e434:	e1a04002 	mov	r4, r2
    e438:	eafffd4a 	b	d968 <alt_clk_freq_get+0x123c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e43c:	e302aa94 	movw	r10, #10900	; 0x2a94
    e440:	e3a05000 	mov	r5, #0
    e444:	e340a002 	movt	r10, #2
    e448:	e59a2010 	ldr	r2, [r10, #16]
    e44c:	e1a04002 	mov	r4, r2
    e450:	eafffcde 	b	d7d0 <alt_clk_freq_get+0x10a4>
    e454:	e302aa94 	movw	r10, #10900	; 0x2a94
    e458:	e3a05000 	mov	r5, #0
    e45c:	e340a002 	movt	r10, #2
    e460:	e59a2010 	ldr	r2, [r10, #16]
    e464:	e1a04002 	mov	r4, r2
    e468:	eafffbee 	b	d428 <alt_clk_freq_get+0xcfc>
    e46c:	e302aa94 	movw	r10, #10900	; 0x2a94
    e470:	e3a05000 	mov	r5, #0
    e474:	e340a002 	movt	r10, #2
    e478:	e59a2010 	ldr	r2, [r10, #16]
    e47c:	e1a04002 	mov	r4, r2
    e480:	eafffc1b 	b	d4f4 <alt_clk_freq_get+0xdc8>
    e484:	e302aa94 	movw	r10, #10900	; 0x2a94
    e488:	e3a05000 	mov	r5, #0
    e48c:	e340a002 	movt	r10, #2
    e490:	e59a2010 	ldr	r2, [r10, #16]
    e494:	e1a04002 	mov	r4, r2
    e498:	eafffc33 	b	d56c <alt_clk_freq_get+0xe40>
    e49c:	e302aa94 	movw	r10, #10900	; 0x2a94
    e4a0:	e3a05000 	mov	r5, #0
    e4a4:	e340a002 	movt	r10, #2
    e4a8:	e59a2010 	ldr	r2, [r10, #16]
    e4ac:	e1a04002 	mov	r4, r2
    e4b0:	eafffd0e 	b	d8f0 <alt_clk_freq_get+0x11c4>
    e4b4:	e302aa94 	movw	r10, #10900	; 0x2a94
    e4b8:	e3a05000 	mov	r5, #0
    e4bc:	e340a002 	movt	r10, #2
    e4c0:	e59a2010 	ldr	r2, [r10, #16]
    e4c4:	e1a04002 	mov	r4, r2
    e4c8:	eafffca2 	b	d758 <alt_clk_freq_get+0x102c>
    e4cc:	e302aa94 	movw	r10, #10900	; 0x2a94
    e4d0:	e3a05000 	mov	r5, #0
    e4d4:	e340a002 	movt	r10, #2
    e4d8:	e59a2010 	ldr	r2, [r10, #16]
    e4dc:	e1a04002 	mov	r4, r2
    e4e0:	eafffdcb 	b	dc14 <alt_clk_freq_get+0x14e8>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e4e4:	e302aa94 	movw	r10, #10900	; 0x2a94
    e4e8:	e3a05000 	mov	r5, #0
    e4ec:	e340a002 	movt	r10, #2
    e4f0:	e59a2010 	ldr	r2, [r10, #16]
    e4f4:	e1a04002 	mov	r4, r2
    e4f8:	eafffd92 	b	db48 <alt_clk_freq_get+0x141c>
            /* denom = 1 by default */
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
    e4fc:	e28d1004 	add	r1, sp, #4
    e500:	e3a00009 	mov	r0, #9
    e504:	ebffefa0 	bl	a38c <alt_clk_pll_vco_freq_get>
            if (ret == ALT_E_SUCCESS)
    e508:	e250c000 	subs	r12, r0, #0
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C4, &temp);
    e50c:	03a00011 	moveq	r0, #17
    e510:	028d1004 	addeq	r1, sp, #4
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    e514:	059d4004 	ldreq	r4, [sp, #4]
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_SDMMC_E_MAIN_NAND_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
    e518:	1afff8cf 	bne	c85c <alt_clk_freq_get+0x130>
    e51c:	eafff95b 	b	ca90 <alt_clk_freq_get+0x364>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e520:	e302aa94 	movw	r10, #10900	; 0x2a94
    e524:	e3a05000 	mov	r5, #0
    e528:	e340a002 	movt	r10, #2
    e52c:	e59a2010 	ldr	r2, [r10, #16]
    e530:	e1a04002 	mov	r4, r2
    e534:	eafffd29 	b	d9e0 <alt_clk_freq_get+0x12b4>
    e538:	e302aa94 	movw	r10, #10900	; 0x2a94
    e53c:	e3a05000 	mov	r5, #0
    e540:	e340a002 	movt	r10, #2
    e544:	e59a2010 	ldr	r2, [r10, #16]
    e548:	e1a04002 	mov	r4, r2
    e54c:	eafffd5f 	b	dad0 <alt_clk_freq_get+0x13a4>
            /* denom = 1 by default; */
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
    e550:	e28d1004 	add	r1, sp, #4
    e554:	e3a00009 	mov	r0, #9
    e558:	ebffef8b 	bl	a38c <alt_clk_pll_vco_freq_get>
            if (ret == ALT_E_SUCCESS)
    e55c:	e250c000 	subs	r12, r0, #0
            {
                numer = (uint64_t) temp;
                ret = alt_clk_divider_get(ALT_CLK_MAIN_PLL_C3, &temp);
    e560:	03a00010 	moveq	r0, #16
    e564:	028d1004 	addeq	r1, sp, #4
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
            {
                numer = (uint64_t) temp;
    e568:	059d4004 	ldreq	r4, [sp, #4]
            ret = ALT_E_SUCCESS;
        }
        else if (temp == ALT_CLKMGR_PERPLL_SRC_QSPI_E_MAIN_QSPI_CLK)
        {
            ret = alt_clk_pll_vco_freq_get(ALT_CLK_MAIN_PLL, &temp);
            if (ret == ALT_E_SUCCESS)
    e56c:	1afff8ba 	bne	c85c <alt_clk_freq_get+0x130>
    e570:	eafff946 	b	ca90 <alt_clk_freq_get+0x364>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e574:	e302aa94 	movw	r10, #10900	; 0x2a94
    e578:	e3a05000 	mov	r5, #0
    e57c:	e340a002 	movt	r10, #2
    e580:	e59a2010 	ldr	r2, [r10, #16]
    e584:	e1a04002 	mov	r4, r2
    e588:	eafffd32 	b	da58 <alt_clk_freq_get+0x132c>
                *freq = alt_ext_clk_paramblok.periph.freqcur;
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    e58c:	e5123f7f 	ldr	r3, [r2, #-3967]	; 0xfffff081
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
    e590:	e7e12b53 	ubfx	r2, r3, #22, #2
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
    e594:	e3520000 	cmp	r2, #0
    e598:	1a00002b 	bne	e64c <alt_clk_freq_get+0x1f20>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
    e59c:	e302aa94 	movw	r10, #10900	; 0x2a94
    e5a0:	e3a05000 	mov	r5, #0
    e5a4:	e340a002 	movt	r10, #2
    e5a8:	e59a2000 	ldr	r2, [r10]
    e5ac:	e1a04002 	mov	r4, r2
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
    e5b0:	e1942005 	orrs	r2, r4, r5
    e5b4:	0afff8a7 	beq	c858 <alt_clk_freq_get+0x12c>
            ret = ALT_E_SUCCESS;
        }
        else
        {
            temp = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
            numer = ALT_CLKMGR_PERPLL_VCO_NUMER_GET(temp);
    e5b8:	e7ecc1d3 	ubfx	r12, r3, #3, #13
            denom = ALT_CLKMGR_PERPLL_VCO_DENOM_GET(temp);
    e5bc:	e7e52853 	ubfx	r2, r3, #16, #6
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    e5c0:	e28cc001 	add	r12, r12, #1
                temp1 /= (denom + 1);
    e5c4:	e2822001 	add	r2, r2, #1
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    e5c8:	e0810c94 	umull	r0, r1, r4, r12
                temp1 /= (denom + 1);
    e5cc:	e3a03000 	mov	r3, #0
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
            }
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
    e5d0:	e021159c 	mla	r1, r12, r5, r1
                temp1 /= (denom + 1);
    e5d4:	eb00291e 	bl	18a54 <__aeabi_uldivmod>
    e5d8:	e1a02000 	mov	r2, r0
    e5dc:	e1a03001 	mov	r3, r1
                if (temp1 <= UINT32_MAX)
    e5e0:	e3e00000 	mvn	r0, #0
    e5e4:	e3a01000 	mov	r1, #0
    e5e8:	e1510003 	cmp	r1, r3
    e5ec:	01500002 	cmpeq	r0, r2
                {
                    temp = (alt_freq_t) temp1;
                    alt_pll_clk_paramblok.PeriphPLL_800.freqcur = temp;
    e5f0:	258a2080 	strcs	r2, [r10, #128]	; 0x80
                    /* store this value in the parameter block table */
    
                    *freq = temp;
    e5f4:	258d2004 	strcs	r2, [sp, #4]
    
            if (temp1 != 0)
            {
                temp1 *= (numer + 1);
                temp1 /= (denom + 1);
                if (temp1 <= UINT32_MAX)
    e5f8:	2afffb49 	bcs	d324 <alt_clk_freq_get+0xbf8>
    e5fc:	eafff8cf 	b	c940 <alt_clk_freq_get+0x214>
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                temp = alt_ext_clk_paramblok.sdram.freqcur;
    e600:	e3023a94 	movw	r3, #10900	; 0x2a94
                ret = ALT_E_SUCCESS;
    e604:	e3a0c000 	mov	r12, #0
                temp = alt_ext_clk_paramblok.clkosc2.freqcur;
                ret = ALT_E_SUCCESS;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_F2S_SDRAM_REF)
            {
                temp = alt_ext_clk_paramblok.sdram.freqcur;
    e608:	e3403002 	movt	r3, #2
    e60c:	e1a0500c 	mov	r5, r12
    e610:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    e614:	e1a04003 	mov	r4, r3
    e618:	eafff9c9 	b	cd44 <alt_clk_freq_get+0x618>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e61c:	e302aa94 	movw	r10, #10900	; 0x2a94
    e620:	e3a05000 	mov	r5, #0
    e624:	e340a002 	movt	r10, #2
    e628:	e59a2010 	ldr	r2, [r10, #16]
    e62c:	e1a04002 	mov	r4, r2
    e630:	eafffe29 	b	dedc <alt_clk_freq_get+0x17b0>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_SDRPLL_VCO_SSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e634:	e302aa94 	movw	r10, #10900	; 0x2a94
    e638:	e3a05000 	mov	r5, #0
    e63c:	e340a002 	movt	r10, #2
    e640:	e59a2010 	ldr	r2, [r10, #16]
    e644:	e1a04002 	mov	r4, r2
    e648:	eafffe03 	b	de5c <alt_clk_freq_get+0x1730>
            temp = ALT_CLKMGR_PERPLL_VCO_PSRC_GET(temp);
            if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC1)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
    e64c:	e3520001 	cmp	r2, #1
    e650:	0a00000d 	beq	e68c <alt_clk_freq_get+0x1f60>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_F2S_PERIPH_REF)
    e654:	e3520002 	cmp	r2, #2
    e658:	1afff87e 	bne	c858 <alt_clk_freq_get+0x12c>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.periph.freqcur;
    e65c:	e302aa94 	movw	r10, #10900	; 0x2a94
    e660:	e3a05000 	mov	r5, #0
    e664:	e340a002 	movt	r10, #2
    e668:	e59a2020 	ldr	r2, [r10, #32]
    e66c:	e1a04002 	mov	r4, r2
    e670:	eaffffce 	b	e5b0 <alt_clk_freq_get+0x1e84>
    e674:	e302aa94 	movw	r10, #10900	; 0x2a94
    e678:	e3a05000 	mov	r5, #0
    e67c:	e340a002 	movt	r10, #2
    e680:	e59a2020 	ldr	r2, [r10, #32]
    e684:	e1a04002 	mov	r4, r2
    e688:	eafffe13 	b	dedc <alt_clk_freq_get+0x17b0>
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc1.freqcur;
            }
            else if (temp == ALT_CLKMGR_PERPLL_VCO_PSRC_E_EOSC2)
            {
                temp1 = (uint64_t) alt_ext_clk_paramblok.clkosc2.freqcur;
    e68c:	e302aa94 	movw	r10, #10900	; 0x2a94
    e690:	e3a05000 	mov	r5, #0
    e694:	e340a002 	movt	r10, #2
    e698:	e59a2010 	ldr	r2, [r10, #16]
    e69c:	e1a04002 	mov	r4, r2
    e6a0:	eaffffc2 	b	e5b0 <alt_clk_freq_get+0x1e84>

0000e6a4 <alt_clk_irq_disable>:
/*
// alt_clk_irq_disable() disables one or more of the lock status conditions as
// contributors to the clkmgr_IRQ interrupt signal state.
*/
ALT_STATUS_CODE alt_clk_irq_disable(ALT_CLK_PLL_LOCK_STATUS_t lock_stat_mask)
{
    e6a4:	e1a03000 	mov	r3, r0
    if (!(lock_stat_mask & ALT_CLK_MGR_PLL_LOCK_BITS))
    e6a8:	e3d0003f 	bics	r0, r0, #63	; 0x3f
    {
        alt_clrbits_word(ALT_CLKMGR_INTREN_ADDR, lock_stat_mask);
    e6ac:	03042fff 	movweq	r2, #20479	; 0x4fff
        return ALT_E_SUCCESS;
    }
    else
    {
        return ALT_E_BAD_ARG;
    e6b0:	13e00008 	mvnne	r0, #8
*/
ALT_STATUS_CODE alt_clk_irq_disable(ALT_CLK_PLL_LOCK_STATUS_t lock_stat_mask)
{
    if (!(lock_stat_mask & ALT_CLK_MGR_PLL_LOCK_BITS))
    {
        alt_clrbits_word(ALT_CLKMGR_INTREN_ADDR, lock_stat_mask);
    e6b4:	034f2fd0 	movteq	r2, #65488	; 0xffd0
    e6b8:	05121ff3 	ldreq	r1, [r2, #-4083]	; 0xfffff00d
    e6bc:	01c13003 	biceq	r3, r1, r3
    e6c0:	05023ff3 	streq	r3, [r2, #-4083]	; 0xfffff00d
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    e6c4:	e12fff1e 	bx	lr

0000e6c8 <alt_clk_irq_enable>:
/*
// alt_clk_irq_enable() enables one or more of the lock status conditions as
// contributors to the clkmgr_IRQ interrupt signal state.
*/
ALT_STATUS_CODE alt_clk_irq_enable(ALT_CLK_PLL_LOCK_STATUS_t lock_stat_mask)
{
    e6c8:	e1a03000 	mov	r3, r0
    if (!(lock_stat_mask & ALT_CLK_MGR_PLL_LOCK_BITS))
    e6cc:	e3d0003f 	bics	r0, r0, #63	; 0x3f
    {
        alt_setbits_word(ALT_CLKMGR_INTREN_ADDR, lock_stat_mask);
    e6d0:	03042fff 	movweq	r2, #20479	; 0x4fff
        return ALT_E_SUCCESS;
    }
    else
    {
        return ALT_E_BAD_ARG;
    e6d4:	13e00008 	mvnne	r0, #8
*/
ALT_STATUS_CODE alt_clk_irq_enable(ALT_CLK_PLL_LOCK_STATUS_t lock_stat_mask)
{
    if (!(lock_stat_mask & ALT_CLK_MGR_PLL_LOCK_BITS))
    {
        alt_setbits_word(ALT_CLKMGR_INTREN_ADDR, lock_stat_mask);
    e6d8:	034f2fd0 	movteq	r2, #65488	; 0xffd0
    e6dc:	05121ff3 	ldreq	r1, [r2, #-4083]	; 0xfffff00d
    e6e0:	01833001 	orreq	r3, r3, r1
    e6e4:	05023ff3 	streq	r3, [r2, #-4083]	; 0xfffff00d
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    e6e8:	e12fff1e 	bx	lr

0000e6ec <alt_clk_group_cfg_raw_get>:
// clock group.
*/
ALT_STATUS_CODE alt_clk_group_cfg_raw_get(ALT_CLK_GRP_t clk_group,
                                          ALT_CLK_GROUP_RAW_CFG_t * clk_group_raw_cfg)
{
    clk_group_raw_cfg->verid     = alt_read_word(ALT_SYSMGR_SILICONID1_ADDR);
    e6ec:	e3083fff 	movw	r3, #36863	; 0x8fff
// alt_clk_group_cfg_raw_get() gets the raw configuration state of the designated
// clock group.
*/
ALT_STATUS_CODE alt_clk_group_cfg_raw_get(ALT_CLK_GRP_t clk_group,
                                          ALT_CLK_GROUP_RAW_CFG_t * clk_group_raw_cfg)
{
    e6f0:	e1a02000 	mov	r2, r0
    clk_group_raw_cfg->verid     = alt_read_word(ALT_SYSMGR_SILICONID1_ADDR);
    e6f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    clk_group_raw_cfg->siliid2   = alt_read_word(ALT_SYSMGR_SILICONID2_ADDR);
    clk_group_raw_cfg->clkgrpsel = clk_group;

    if (clk_group == ALT_MAIN_PLL_CLK_GRP)
    e6f8:	e3520000 	cmp	r2, #0
// clock group.
*/
ALT_STATUS_CODE alt_clk_group_cfg_raw_get(ALT_CLK_GRP_t clk_group,
                                          ALT_CLK_GROUP_RAW_CFG_t * clk_group_raw_cfg)
{
    clk_group_raw_cfg->verid     = alt_read_word(ALT_SYSMGR_SILICONID1_ADDR);
    e6fc:	e5130fff 	ldr	r0, [r3, #-4095]	; 0xfffff001
    e700:	e5810000 	str	r0, [r1]
    clk_group_raw_cfg->siliid2   = alt_read_word(ALT_SYSMGR_SILICONID2_ADDR);
    e704:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
    clk_group_raw_cfg->clkgrpsel = clk_group;
    e708:	e5c12008 	strb	r2, [r1, #8]
*/
ALT_STATUS_CODE alt_clk_group_cfg_raw_get(ALT_CLK_GRP_t clk_group,
                                          ALT_CLK_GROUP_RAW_CFG_t * clk_group_raw_cfg)
{
    clk_group_raw_cfg->verid     = alt_read_word(ALT_SYSMGR_SILICONID1_ADDR);
    clk_group_raw_cfg->siliid2   = alt_read_word(ALT_SYSMGR_SILICONID2_ADDR);
    e70c:	e5813004 	str	r3, [r1, #4]
    clk_group_raw_cfg->clkgrpsel = clk_group;

    if (clk_group == ALT_MAIN_PLL_CLK_GRP)
    e710:	0a000017 	beq	e774 <alt_clk_group_cfg_raw_get+0x88>
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw._pad_0x38_0x40[0] = 0;
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw._pad_0x38_0x40[1] = 0;

        return ALT_E_SUCCESS;
    }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP)
    e714:	e3520001 	cmp	r2, #1
    e718:	0a000037 	beq	e7fc <alt_clk_group_cfg_raw_get+0x110>
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[1] = 0;
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[2] = 0;

        return ALT_E_SUCCESS;
    }
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)
    e71c:	e3520002 	cmp	r2, #2
    e720:	1a000057 	bne	e884 <alt_clk_group_cfg_raw_get+0x198>
    {
        /* SDRAM PLL VCO register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    e724:	e3043fff 	movw	r3, #20479	; 0x4fff
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.en = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);

        /* SDRAM PLL Status register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.stat = alt_read_word(ALT_CLKMGR_SDRPLL_STAT_ADDR);

        return ALT_E_SUCCESS;
    e728:	e3a00000 	mov	r0, #0
        return ALT_E_SUCCESS;
    }
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)
    {
        /* SDRAM PLL VCO register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_SDRPLL_VCO_ADDR);
    e72c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    e730:	e5132f3f 	ldr	r2, [r3, #-3903]	; 0xfffff0c1
    e734:	e581200c 	str	r2, [r1, #12]

        /* SDRAM PLL Control register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ctrl = alt_read_word(ALT_CLKMGR_SDRPLL_CTL_ADDR);
    e738:	e5132f3b 	ldr	r2, [r3, #-3899]	; 0xfffff0c5
    e73c:	e5812010 	str	r2, [r1, #16]

        /* SDRAM PLL C0-C2 & C5 Counters */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddrdqsclk = alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR);
    e740:	e5132f37 	ldr	r2, [r3, #-3895]	; 0xfffff0c9
    e744:	e5812014 	str	r2, [r1, #20]
        /* doing these as 32-bit reads and writes avoids unnecessary masking operations */

        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddr2xdqsclk = alt_read_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR);
    e748:	e5132f33 	ldr	r2, [r3, #-3891]	; 0xfffff0cd
    e74c:	e5812018 	str	r2, [r1, #24]
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddrdqclk    = alt_read_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR);
    e750:	e5132f2f 	ldr	r2, [r3, #-3887]	; 0xfffff0d1
    e754:	e581201c 	str	r2, [r1, #28]
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.s2fuser2clk = alt_read_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR);
    e758:	e5132f2b 	ldr	r2, [r3, #-3883]	; 0xfffff0d5
    e75c:	e5812020 	str	r2, [r1, #32]

        /* SDRAM PLL Enable register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.en = alt_read_word(ALT_CLKMGR_SDRPLL_EN_ADDR);
    e760:	e5132f27 	ldr	r2, [r3, #-3879]	; 0xfffff0d9
    e764:	e5812024 	str	r2, [r1, #36]	; 0x24

        /* SDRAM PLL Status register */
        clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.stat = alt_read_word(ALT_CLKMGR_SDRPLL_STAT_ADDR);
    e768:	e5133f23 	ldr	r3, [r3, #-3875]	; 0xfffff0dd
    e76c:	e5813028 	str	r3, [r1, #40]	; 0x28

        return ALT_E_SUCCESS;
    e770:	e12fff1e 	bx	lr
    clk_group_raw_cfg->clkgrpsel = clk_group;

    if (clk_group == ALT_MAIN_PLL_CLK_GRP)
    {
        /* Main PLL VCO register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    e774:	e3043fff 	movw	r3, #20479	; 0x4fff

        /* padding ... */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw._pad_0x38_0x40[0] = 0;
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw._pad_0x38_0x40[1] = 0;

        return ALT_E_SUCCESS;
    e778:	e1a00002 	mov	r0, r2
    clk_group_raw_cfg->clkgrpsel = clk_group;

    if (clk_group == ALT_MAIN_PLL_CLK_GRP)
    {
        /* Main PLL VCO register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_MAINPLL_VCO_ADDR);
    e77c:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    e780:	e513cfbf 	ldr	r12, [r3, #-4031]	; 0xfffff041
    e784:	e581c00c 	str	r12, [r1, #12]

        /* Main PLL Misc register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.misc = alt_read_word(ALT_CLKMGR_MAINPLL_MISC_ADDR);
    e788:	e513cfbb 	ldr	r12, [r3, #-4027]	; 0xfffff045
    e78c:	e581c010 	str	r12, [r1, #16]

        /* Main PLL C0-C5 Counter registers */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mpuclk = alt_read_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR);
    e790:	e513cfb7 	ldr	r12, [r3, #-4023]	; 0xfffff049
    e794:	e581c014 	str	r12, [r1, #20]
        /* doing these as 32-bit reads and writes avoids unnecessary masking operations */

        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainclk          = alt_read_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR);
    e798:	e513cfb3 	ldr	r12, [r3, #-4019]	; 0xfffff04d
    e79c:	e581c018 	str	r12, [r1, #24]
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.dbgatclk         = alt_read_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR);
    e7a0:	e513cfaf 	ldr	r12, [r3, #-4015]	; 0xfffff051
    e7a4:	e581c01c 	str	r12, [r1, #28]
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainqspiclk      = alt_read_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR);
    e7a8:	e513cfab 	ldr	r12, [r3, #-4011]	; 0xfffff055
    e7ac:	e581c020 	str	r12, [r1, #32]
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainnandsdmmcclk = alt_read_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR);
    e7b0:	e513cfa7 	ldr	r12, [r3, #-4007]	; 0xfffff059
    e7b4:	e581c024 	str	r12, [r1, #36]	; 0x24
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.cfgs2fuser0clk   = alt_read_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR);
    e7b8:	e513cfa3 	ldr	r12, [r3, #-4003]	; 0xfffff05d
    e7bc:	e581c028 	str	r12, [r1, #40]	; 0x28

        /* Main PLL Enable register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.en = alt_read_word(ALT_CLKMGR_MAINPLL_EN_ADDR);
    e7c0:	e513cf9f 	ldr	r12, [r3, #-3999]	; 0xfffff061
    e7c4:	e581c02c 	str	r12, [r1, #44]	; 0x2c

        /* Main PLL Maindiv register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.maindiv = alt_read_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR);
    e7c8:	e513cf9b 	ldr	r12, [r3, #-3995]	; 0xfffff065
    e7cc:	e581c030 	str	r12, [r1, #48]	; 0x30

        /* Main PLL Debugdiv register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.dbgdiv = alt_read_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR);
    e7d0:	e513cf97 	ldr	r12, [r3, #-3991]	; 0xfffff069
    e7d4:	e581c034 	str	r12, [r1, #52]	; 0x34

        /* Main PLL Tracediv register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.tracediv = alt_read_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR);
    e7d8:	e513cf93 	ldr	r12, [r3, #-3987]	; 0xfffff06d
    e7dc:	e581c038 	str	r12, [r1, #56]	; 0x38

        /* Main PLL L4 Source register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.l4src = alt_read_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR);
    e7e0:	e513cf8f 	ldr	r12, [r3, #-3983]	; 0xfffff071
    e7e4:	e581c03c 	str	r12, [r1, #60]	; 0x3c

        /* Main PLL Status register */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw.stat = alt_read_word(ALT_CLKMGR_MAINPLL_STAT_ADDR);
    e7e8:	e5133f8b 	ldr	r3, [r3, #-3979]	; 0xfffff075
    e7ec:	e5813040 	str	r3, [r1, #64]	; 0x40
        /* clkgrp.mainpllgrp.stat.outresetack is defined in the ALT_CLKMGR_MAINPLL_STAT_s declaration
        // as a const but alt_indwrite_word() overrides that restriction. */

        /* padding ... */
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw._pad_0x38_0x40[0] = 0;
    e7f0:	e5812044 	str	r2, [r1, #68]	; 0x44
        clk_group_raw_cfg->clkgrp.mainpllgrp.raw._pad_0x38_0x40[1] = 0;
    e7f4:	e5812048 	str	r2, [r1, #72]	; 0x48

        return ALT_E_SUCCESS;
    e7f8:	e12fff1e 	bx	lr
    }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP)
    {
        /* Peripheral PLL VCO register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    e7fc:	e3043fff 	movw	r3, #20479	; 0x4fff

        /* Peripheral PLL Status register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.stat = alt_read_word(ALT_CLKMGR_PERPLL_STAT_ADDR);

        /* padding ... */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[0] = 0;
    e800:	e3a02000 	mov	r2, #0
        return ALT_E_SUCCESS;
    }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP)
    {
        /* Peripheral PLL VCO register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    e804:	e34f3fd0 	movt	r3, #65488	; 0xffd0
        /* padding ... */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[0] = 0;
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[1] = 0;
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[2] = 0;

        return ALT_E_SUCCESS;
    e808:	e1a00002 	mov	r0, r2
        return ALT_E_SUCCESS;
    }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP)
    {
        /* Peripheral PLL VCO register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.vco = alt_read_word(ALT_CLKMGR_PERPLL_VCO_ADDR);
    e80c:	e513cf7f 	ldr	r12, [r3, #-3967]	; 0xfffff081
    e810:	e581c00c 	str	r12, [r1, #12]

        /* Peripheral PLL Misc register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.misc = alt_read_word(ALT_CLKMGR_PERPLL_MISC_ADDR);
    e814:	e513cf7b 	ldr	r12, [r3, #-3963]	; 0xfffff085
    e818:	e581c010 	str	r12, [r1, #16]

        /* Peripheral PLL C0-C5 Counters */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.emac0clk = alt_read_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR);
    e81c:	e513cf77 	ldr	r12, [r3, #-3959]	; 0xfffff089
    e820:	e581c014 	str	r12, [r1, #20]
        /* doing these as 32-bit reads and writes avoids unnecessary masking operations */

        clk_group_raw_cfg->clkgrp.perpllgrp.raw.emac1clk        = alt_read_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR);
    e824:	e513cf73 	ldr	r12, [r3, #-3955]	; 0xfffff08d
    e828:	e581c018 	str	r12, [r1, #24]
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.perqspiclk      = alt_read_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR);
    e82c:	e513cf6f 	ldr	r12, [r3, #-3951]	; 0xfffff091
    e830:	e581c01c 	str	r12, [r1, #28]
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.pernandsdmmcclk = alt_read_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR);
    e834:	e513cf6b 	ldr	r12, [r3, #-3947]	; 0xfffff095
    e838:	e581c020 	str	r12, [r1, #32]
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.perbaseclk      = alt_read_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR);
    e83c:	e513cf67 	ldr	r12, [r3, #-3943]	; 0xfffff099
    e840:	e581c024 	str	r12, [r1, #36]	; 0x24
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.s2fuser1clk     = alt_read_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR);
    e844:	e513cf63 	ldr	r12, [r3, #-3939]	; 0xfffff09d
    e848:	e581c028 	str	r12, [r1, #40]	; 0x28

        /* Peripheral PLL Enable register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.en = alt_read_word(ALT_CLKMGR_PERPLL_EN_ADDR);
    e84c:	e513cf5f 	ldr	r12, [r3, #-3935]	; 0xfffff0a1
    e850:	e581c02c 	str	r12, [r1, #44]	; 0x2c

        /* Peripheral PLL Divider register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.div = alt_read_word(ALT_CLKMGR_PERPLL_DIV_ADDR);
    e854:	e513cf5b 	ldr	r12, [r3, #-3931]	; 0xfffff0a5
    e858:	e581c030 	str	r12, [r1, #48]	; 0x30

        /* Peripheral PLL GPIO Divider register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.gpiodiv = alt_read_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR);
    e85c:	e513cf57 	ldr	r12, [r3, #-3927]	; 0xfffff0a9
    e860:	e581c034 	str	r12, [r1, #52]	; 0x34

        /* Peripheral PLL Source register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.src = alt_read_word(ALT_CLKMGR_PERPLL_SRC_ADDR);
    e864:	e513cf53 	ldr	r12, [r3, #-3923]	; 0xfffff0ad
    e868:	e581c038 	str	r12, [r1, #56]	; 0x38

        /* Peripheral PLL Status register */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw.stat = alt_read_word(ALT_CLKMGR_PERPLL_STAT_ADDR);
    e86c:	e5133f4f 	ldr	r3, [r3, #-3919]	; 0xfffff0b1
    e870:	e581303c 	str	r3, [r1, #60]	; 0x3c

        /* padding ... */
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[0] = 0;
    e874:	e5812040 	str	r2, [r1, #64]	; 0x40
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[1] = 0;
    e878:	e5812044 	str	r2, [r1, #68]	; 0x44
        clk_group_raw_cfg->clkgrp.perpllgrp.raw._pad_0x34_0x40[2] = 0;
    e87c:	e5812048 	str	r2, [r1, #72]	; 0x48

        return ALT_E_SUCCESS;
    e880:	e12fff1e 	bx	lr

        return ALT_E_SUCCESS;
    }
    else
    {
        return ALT_E_BAD_ARG;
    e884:	e3e00008 	mvn	r0, #8
    }
}
    e888:	e12fff1e 	bx	lr

0000e88c <alt_clk_group_cfg_raw_set>:
    ALT_CLK_t     pll;
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    bool byp = false;

    /* test for matching silicon ID, but not for matching silicon revision number */
    if (ALT_SYSMGR_SILICONID1_ID_GET(alt_read_word(ALT_SYSMGR_SILICONID1_ADDR)) !=
    e88c:	e3083fff 	movw	r3, #36863	; 0x8fff
        ALT_SYSMGR_SILICONID1_ID_GET(clk_group_raw_cfg->verid))
    e890:	e1d020b2 	ldrh	r2, [r0, #2]
    ALT_CLK_t     pll;
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    bool byp = false;

    /* test for matching silicon ID, but not for matching silicon revision number */
    if (ALT_SYSMGR_SILICONID1_ID_GET(alt_read_word(ALT_SYSMGR_SILICONID1_ADDR)) !=
    e894:	e34f3fd0 	movt	r3, #65488	; 0xffd0

/*
// alt_clk_group_cfg_raw_set() sets the clock group configuration.
*/
ALT_STATUS_CODE alt_clk_group_cfg_raw_set(const ALT_CLK_GROUP_RAW_CFG_t * clk_group_raw_cfg)
{
    e898:	e92d4070 	push	{r4, r5, r6, lr}
    ALT_CLK_t     pll;
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    bool byp = false;

    /* test for matching silicon ID, but not for matching silicon revision number */
    if (ALT_SYSMGR_SILICONID1_ID_GET(alt_read_word(ALT_SYSMGR_SILICONID1_ADDR)) !=
    e89c:	e5133fff 	ldr	r3, [r3, #-4095]	; 0xfffff001

/*
// alt_clk_group_cfg_raw_set() sets the clock group configuration.
*/
ALT_STATUS_CODE alt_clk_group_cfg_raw_set(const ALT_CLK_GROUP_RAW_CFG_t * clk_group_raw_cfg)
{
    e8a0:	e1a04000 	mov	r4, r0
    /* get the PLL ID */
    ALT_CLK_GRP_t clk_group = clk_group_raw_cfg->clkgrpsel;
    e8a4:	e5d05008 	ldrb	r5, [r0, #8]
    ALT_CLK_t     pll;
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    bool byp = false;

    /* test for matching silicon ID, but not for matching silicon revision number */
    if (ALT_SYSMGR_SILICONID1_ID_GET(alt_read_word(ALT_SYSMGR_SILICONID1_ADDR)) !=
    e8a8:	e1520823 	cmp	r2, r3, lsr #16
    e8ac:	1a000083 	bne	eac0 <alt_clk_group_cfg_raw_set+0x234>
        ALT_SYSMGR_SILICONID1_ID_GET(clk_group_raw_cfg->verid))
    {
        return ALT_E_BAD_VERSION;
    }

    if      (clk_group == ALT_MAIN_PLL_CLK_GRP)   { pll = ALT_CLK_MAIN_PLL; }
    e8b0:	e3550000 	cmp	r5, #0
    e8b4:	0a000043 	beq	e9c8 <alt_clk_group_cfg_raw_set+0x13c>
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP) { pll = ALT_CLK_PERIPHERAL_PLL; }
    e8b8:	e3550001 	cmp	r5, #1
    e8bc:	0a00005a 	beq	ea2c <alt_clk_group_cfg_raw_set+0x1a0>
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)  { pll = ALT_CLK_SDRAM_PLL; }
    e8c0:	e3550002 	cmp	r5, #2
    e8c4:	1a000082 	bne	ead4 <alt_clk_group_cfg_raw_set+0x248>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    e8c8:	e3043fff 	movw	r3, #20479	; 0x4fff
    e8cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    e8d0:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    e8d4:	e3120001 	tst	r2, #1
    e8d8:	0a00004e 	beq	ea18 <alt_clk_group_cfg_raw_set+0x18c>
        return ALT_E_BAD_VERSION;
    }

    if      (clk_group == ALT_MAIN_PLL_CLK_GRP)   { pll = ALT_CLK_MAIN_PLL; }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP) { pll = ALT_CLK_PERIPHERAL_PLL; }
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)  { pll = ALT_CLK_SDRAM_PLL; }
    e8dc:	e3a0600b 	mov	r6, #11
{
    /* get the PLL ID */
    ALT_CLK_GRP_t clk_group = clk_group_raw_cfg->clkgrpsel;
    ALT_CLK_t     pll;
    ALT_STATUS_CODE status = ALT_E_SUCCESS;
    bool byp = false;
    e8e0:	e3a02000 	mov	r2, #0

        byp = true;
    }

    /* now write the values in the ALT_CLK_GROUP_RAW_CFG_t structure to the registers */
    if (clk_group == ALT_MAIN_PLL_CLK_GRP)
    e8e4:	e3550000 	cmp	r5, #0
    e8e8:	1a000020 	bne	e970 <alt_clk_group_cfg_raw_set+0xe4>
    {
        /* Main PLL VCO register */
        alt_write_word(ALT_CLKMGR_MAINPLL_VCO_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.vco &
    e8ec:	e594100c 	ldr	r1, [r4, #12]
    e8f0:	e3043fff 	movw	r3, #20479	; 0x4fff
    e8f4:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    e8f8:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    e8fc:	e5031fbf 	str	r1, [r3, #-4031]	; 0xfffff041
                       ALT_CLKMGR_MAINPLL_VCO_OUTRSTALL_CLR_MSK & ALT_CLKMGR_MAINPLL_VCO_OUTRST_CLR_MSK);
        /* the outreset and outresetall bits were probably clear when the
           state was saved, but make sure they're clear now */

        /* Main PLL Misc register */
        alt_write_word(ALT_CLKMGR_MAINPLL_MISC_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.misc);
    e900:	e5941010 	ldr	r1, [r4, #16]
    e904:	e5031fbb 	str	r1, [r3, #-4027]	; 0xfffff045

        /* Main PLL C0-C5 Counter registers */
        alt_write_word(ALT_CLKMGR_MAINPLL_MPUCLK_ADDR,           clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mpuclk);
    e908:	e5941014 	ldr	r1, [r4, #20]
    e90c:	e5031fb7 	str	r1, [r3, #-4023]	; 0xfffff049
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINCLK_ADDR,          clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainclk);
    e910:	e5941018 	ldr	r1, [r4, #24]
    e914:	e5031fb3 	str	r1, [r3, #-4019]	; 0xfffff04d
        alt_write_word(ALT_CLKMGR_MAINPLL_DBGATCLK_ADDR,         clk_group_raw_cfg->clkgrp.mainpllgrp.raw.dbgatclk);
    e918:	e594101c 	ldr	r1, [r4, #28]
    e91c:	e5031faf 	str	r1, [r3, #-4015]	; 0xfffff051
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINQSPICLK_ADDR,      clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainqspiclk);
    e920:	e5941020 	ldr	r1, [r4, #32]
    e924:	e5031fab 	str	r1, [r3, #-4011]	; 0xfffff055
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINNANDSDMMCCLK_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.mainnandsdmmcclk);
    e928:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    e92c:	e5031fa7 	str	r1, [r3, #-4007]	; 0xfffff059
        alt_write_word(ALT_CLKMGR_MAINPLL_CFGS2FUSER0CLK_ADDR,   clk_group_raw_cfg->clkgrp.mainpllgrp.raw.cfgs2fuser0clk);
    e930:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    e934:	e5031fa3 	str	r1, [r3, #-4003]	; 0xfffff05d

        /* Main PLL Counter Enable register */
        alt_write_word(ALT_CLKMGR_MAINPLL_EN_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.en);
    e938:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    e93c:	e5031f9f 	str	r1, [r3, #-3999]	; 0xfffff061

        /* Main PLL Maindiv register */
        alt_write_word(ALT_CLKMGR_MAINPLL_MAINDIV_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.maindiv);
    e940:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    e944:	e5031f9b 	str	r1, [r3, #-3995]	; 0xfffff065

        /* Main PLL Debugdiv register */
        alt_write_word(ALT_CLKMGR_MAINPLL_DBGDIV_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.dbgdiv);
    e948:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    e94c:	e5031f97 	str	r1, [r3, #-3991]	; 0xfffff069

        /* Main PLL Tracediv register */
        alt_write_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.tracediv);
    e950:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    e954:	e5031f93 	str	r1, [r3, #-3987]	; 0xfffff06d

        /* Main PLL L4 Source register */
        alt_write_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.l4src);
    e958:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
    e95c:	e5031f8f 	str	r1, [r3, #-3983]	; 0xfffff071
        /* SDRAM PLL Counter Enable register */
        alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.en);
    }

    /* if PLL was not bypassed before, restore that state */
    if (byp)
    e960:	e3520000 	cmp	r2, #0
    e964:	1a000028 	bne	ea0c <alt_clk_group_cfg_raw_set+0x180>
    e968:	e1a00002 	mov	r0, r2
    e96c:	e8bd8070 	pop	{r4, r5, r6, pc}
        alt_write_word(ALT_CLKMGR_MAINPLL_TRACEDIV_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.tracediv);

        /* Main PLL L4 Source register */
        alt_write_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.l4src);
    }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP)
    e970:	e3550001 	cmp	r5, #1
    e974:	0a000035 	beq	ea50 <alt_clk_group_cfg_raw_set+0x1c4>
        alt_write_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.gpiodiv);

        /* Peripheral PLL Source register */
        alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.src);
    }
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)
    e978:	e3550002 	cmp	r5, #2
    e97c:	1afffff7 	bne	e960 <alt_clk_group_cfg_raw_set+0xd4>
    {
        /* SDRAM PLL VCO register */
        alt_write_word(ALT_CLKMGR_SDRPLL_VCO_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.vco &
    e980:	e594100c 	ldr	r1, [r4, #12]
    e984:	e3043fff 	movw	r3, #20479	; 0x4fff
    e988:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    e98c:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    e990:	e5031f3f 	str	r1, [r3, #-3903]	; 0xfffff0c1
                       ALT_CLKMGR_SDRPLL_VCO_OUTRST_CLR_MSK & ALT_CLKMGR_SDRPLL_VCO_OUTRSTALL_CLR_MSK);
        /* the outreset and outresetall bits were probably clear when the
           state was saved, but make sure they're clear now */

        /* SDRAM PLL Control register */
        alt_write_word(ALT_CLKMGR_SDRPLL_CTL_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ctrl);
    e994:	e5941010 	ldr	r1, [r4, #16]
    e998:	e5031f3b 	str	r1, [r3, #-3899]	; 0xfffff0c5

        /* SDRAM PLL C0-C2 & C5 Counters */
        alt_write_word(ALT_CLKMGR_SDRPLL_DDRDQSCLK_ADDR,   clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddrdqsclk);
    e99c:	e5941014 	ldr	r1, [r4, #20]
    e9a0:	e5031f37 	str	r1, [r3, #-3895]	; 0xfffff0c9
        alt_write_word(ALT_CLKMGR_SDRPLL_DDR2XDQSCLK_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddr2xdqsclk);
    e9a4:	e5941018 	ldr	r1, [r4, #24]
    e9a8:	e5031f33 	str	r1, [r3, #-3891]	; 0xfffff0cd
        alt_write_word(ALT_CLKMGR_SDRPLL_DDRDQCLK_ADDR,    clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.ddrdqclk);
    e9ac:	e594101c 	ldr	r1, [r4, #28]
    e9b0:	e5031f2f 	str	r1, [r3, #-3887]	; 0xfffff0d1
        alt_write_word(ALT_CLKMGR_SDRPLL_S2FUSER2CLK_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.s2fuser2clk);
    e9b4:	e5941020 	ldr	r1, [r4, #32]
    e9b8:	e5031f2b 	str	r1, [r3, #-3883]	; 0xfffff0d5

        /* SDRAM PLL Counter Enable register */
        alt_write_word(ALT_CLKMGR_SDRPLL_EN_ADDR, clk_group_raw_cfg->clkgrp.sdrpllgrp.raw.en);
    e9bc:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    e9c0:	e5031f27 	str	r1, [r3, #-3879]	; 0xfffff0d9
    e9c4:	eaffffe5 	b	e960 <alt_clk_group_cfg_raw_set+0xd4>
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    e9c8:	e3043fff 	movw	r3, #20479	; 0x4fff
    e9cc:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    e9d0:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    e9d4:	e3120001 	tst	r2, #1
        ALT_SYSMGR_SILICONID1_ID_GET(clk_group_raw_cfg->verid))
    {
        return ALT_E_BAD_VERSION;
    }

    if      (clk_group == ALT_MAIN_PLL_CLK_GRP)   { pll = ALT_CLK_MAIN_PLL; }
    e9d8:	13a06009 	movne	r6, #9
{
    ALT_STATUS_CODE status = ALT_E_BAD_ARG;

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    e9dc:	1affffbf 	bne	e8e0 <alt_clk_group_cfg_raw_set+0x54>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    e9e0:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
        ALT_SYSMGR_SILICONID1_ID_GET(clk_group_raw_cfg->verid))
    {
        return ALT_E_BAD_VERSION;
    }

    if      (clk_group == ALT_MAIN_PLL_CLK_GRP)   { pll = ALT_CLK_MAIN_PLL; }
    e9e4:	e3a06009 	mov	r6, #9

    if (pll == ALT_CLK_MAIN_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    e9e8:	e3130001 	tst	r3, #1
    e9ec:	1affffbb 	bne	e8e0 <alt_clk_group_cfg_raw_set+0x54>
    }

    /* if the PLL isn't in bypass mode, put it in bypass mode */
    if (alt_clk_pll_is_bypassed(pll) == ALT_E_FALSE)
    {
        status = alt_clk_pll_bypass_enable(pll, false);
    e9f0:	e1a00006 	mov	r0, r6
    e9f4:	e3a01000 	mov	r1, #0
    e9f8:	ebffe532 	bl	7ec8 <alt_clk_pll_bypass_enable>
        if (status != ALT_E_SUCCESS)
    e9fc:	e3500000 	cmp	r0, #0
    ea00:	18bd8070 	popne	{r4, r5, r6, pc}
        {
            return status;
        }

        byp = true;
    ea04:	e3a02001 	mov	r2, #1
    ea08:	eaffffb5 	b	e8e4 <alt_clk_group_cfg_raw_set+0x58>
    }

    /* if PLL was not bypassed before, restore that state */
    if (byp)
    {
        status = alt_clk_pll_bypass_disable(pll);
    ea0c:	e1a00006 	mov	r0, r6
    }

    return status;
}
    ea10:	e8bd4070 	pop	{r4, r5, r6, lr}
    }

    /* if PLL was not bypassed before, restore that state */
    if (byp)
    {
        status = alt_clk_pll_bypass_disable(pll);
    ea14:	eaffe472 	b	7be4 <alt_clk_pll_bypass_disable>
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    ea18:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
        return ALT_E_BAD_VERSION;
    }

    if      (clk_group == ALT_MAIN_PLL_CLK_GRP)   { pll = ALT_CLK_MAIN_PLL; }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP) { pll = ALT_CLK_PERIPHERAL_PLL; }
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)  { pll = ALT_CLK_SDRAM_PLL; }
    ea1c:	e3a0600b 	mov	r6, #11
    }
    else if (pll == ALT_CLK_SDRAM_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
                || ALT_CLKMGR_BYPASS_SDRPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    ea20:	e3130002 	tst	r3, #2
    ea24:	1affffad 	bne	e8e0 <alt_clk_group_cfg_raw_set+0x54>
    ea28:	eafffff0 	b	e9f0 <alt_clk_group_cfg_raw_set+0x164>
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    ea2c:	e3043fff 	movw	r3, #20479	; 0x4fff
    ea30:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ea34:	e5132fff 	ldr	r2, [r3, #-4095]	; 0xfffff001
    ea38:	e2122001 	ands	r2, r2, #1
    ea3c:	1a000021 	bne	eac8 <alt_clk_group_cfg_raw_set+0x23c>
                || ALT_CLKMGR_BYPASS_PERPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
    ea40:	e5133ffb 	ldr	r3, [r3, #-4091]	; 0xfffff005
    {
        return ALT_E_ERROR;
    }

    /* if the PLL isn't in bypass mode, put it in bypass mode */
    if (alt_clk_pll_is_bypassed(pll) == ALT_E_FALSE)
    ea44:	e3a0600a 	mov	r6, #10
    ea48:	e3130008 	tst	r3, #8
    ea4c:	0affffe7 	beq	e9f0 <alt_clk_group_cfg_raw_set+0x164>
        alt_write_word(ALT_CLKMGR_MAINPLL_L4SRC_ADDR, clk_group_raw_cfg->clkgrp.mainpllgrp.raw.l4src);
    }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP)
    {
        /* Peripheral PLL VCO register */
        alt_write_word(ALT_CLKMGR_PERPLL_VCO_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.vco &
    ea50:	e594100c 	ldr	r1, [r4, #12]
    ea54:	e3043fff 	movw	r3, #20479	; 0x4fff
    ea58:	e34f3fd0 	movt	r3, #65488	; 0xffd0
    ea5c:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    ea60:	e5031f7f 	str	r1, [r3, #-3967]	; 0xfffff081
                       ALT_CLKMGR_PERPLL_VCO_OUTRST_CLR_MSK & ALT_CLKMGR_PERPLL_VCO_OUTRSTALL_CLR_MSK);
        /* the outreset and outresetall bits were probably clear when the
           state was saved, but make sure they're clear now */

        /* Peripheral PLL Misc register */
        alt_write_word(ALT_CLKMGR_PERPLL_MISC_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.misc);
    ea64:	e5941010 	ldr	r1, [r4, #16]
    ea68:	e5031f7b 	str	r1, [r3, #-3963]	; 0xfffff085

        /* Peripheral PLL C0-C5 Counters */
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC0CLK_ADDR,        clk_group_raw_cfg->clkgrp.perpllgrp.raw.emac0clk);
    ea6c:	e5941014 	ldr	r1, [r4, #20]
    ea70:	e5031f77 	str	r1, [r3, #-3959]	; 0xfffff089
        alt_write_word(ALT_CLKMGR_PERPLL_EMAC1CLK_ADDR,        clk_group_raw_cfg->clkgrp.perpllgrp.raw.emac1clk);
    ea74:	e5941018 	ldr	r1, [r4, #24]
    ea78:	e5031f73 	str	r1, [r3, #-3955]	; 0xfffff08d
        alt_write_word(ALT_CLKMGR_PERPLL_PERQSPICLK_ADDR,      clk_group_raw_cfg->clkgrp.perpllgrp.raw.perqspiclk);
    ea7c:	e594101c 	ldr	r1, [r4, #28]
    ea80:	e5031f6f 	str	r1, [r3, #-3951]	; 0xfffff091
        alt_write_word(ALT_CLKMGR_PERPLL_PERNANDSDMMCCLK_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.pernandsdmmcclk);
    ea84:	e5941020 	ldr	r1, [r4, #32]
    ea88:	e5031f6b 	str	r1, [r3, #-3947]	; 0xfffff095
        alt_write_word(ALT_CLKMGR_PERPLL_PERBASECLK_ADDR,      clk_group_raw_cfg->clkgrp.perpllgrp.raw.perbaseclk);
    ea8c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    ea90:	e5031f67 	str	r1, [r3, #-3943]	; 0xfffff099
        alt_write_word(ALT_CLKMGR_PERPLL_S2FUSER1CLK_ADDR,     clk_group_raw_cfg->clkgrp.perpllgrp.raw.s2fuser1clk);
    ea94:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    ea98:	e5031f63 	str	r1, [r3, #-3939]	; 0xfffff09d

        /* Peripheral PLL Counter Enable register */
        alt_write_word(ALT_CLKMGR_PERPLL_EN_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.en);
    ea9c:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    eaa0:	e5031f5f 	str	r1, [r3, #-3935]	; 0xfffff0a1

        /* Peripheral PLL Divider register */
        alt_write_word(ALT_CLKMGR_PERPLL_DIV_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.div);
    eaa4:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    eaa8:	e5031f5b 	str	r1, [r3, #-3931]	; 0xfffff0a5

        /* Peripheral PLL GPIO Divider register */
        alt_write_word(ALT_CLKMGR_PERPLL_GPIODIV_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.gpiodiv);
    eaac:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    eab0:	e5031f57 	str	r1, [r3, #-3927]	; 0xfffff0a9

        /* Peripheral PLL Source register */
        alt_write_word(ALT_CLKMGR_PERPLL_SRC_ADDR, clk_group_raw_cfg->clkgrp.perpllgrp.raw.src);
    eab4:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    eab8:	e5031f53 	str	r1, [r3, #-3923]	; 0xfffff0ad
    eabc:	eaffffa7 	b	e960 <alt_clk_group_cfg_raw_set+0xd4>

    /* test for matching silicon ID, but not for matching silicon revision number */
    if (ALT_SYSMGR_SILICONID1_ID_GET(alt_read_word(ALT_SYSMGR_SILICONID1_ADDR)) !=
        ALT_SYSMGR_SILICONID1_ID_GET(clk_group_raw_cfg->verid))
    {
        return ALT_E_BAD_VERSION;
    eac0:	e3e0000e 	mvn	r0, #14
    eac4:	e8bd8070 	pop	{r4, r5, r6, pc}
                || ALT_CLKMGR_BYPASS_MAINPLL_GET(alt_read_word(ALT_CLKMGR_BYPASS_ADDR)))
                ? ALT_E_TRUE : ALT_E_FALSE;
    }
    else if (pll == ALT_CLK_PERIPHERAL_PLL)
    {
        status = (ALT_CLKMGR_CTL_SAFEMOD_GET(alt_read_word(ALT_CLKMGR_CTL_ADDR))
    eac8:	e3a0600a 	mov	r6, #10
    eacc:	e3a02000 	mov	r2, #0
    ead0:	eaffffde 	b	ea50 <alt_clk_group_cfg_raw_set+0x1c4>
    if      (clk_group == ALT_MAIN_PLL_CLK_GRP)   { pll = ALT_CLK_MAIN_PLL; }
    else if (clk_group == ALT_PERIPH_PLL_CLK_GRP) { pll = ALT_CLK_PERIPHERAL_PLL; }
    else if (clk_group == ALT_SDRAM_PLL_CLK_GRP)  { pll = ALT_CLK_SDRAM_PLL; }
    else
    {
        return ALT_E_ERROR;
    ead4:	e3e00000 	mvn	r0, #0
    ead8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000eadc <alt_clk_pll_cntr_maxfreq_recalc>:

/*
// alt_clk_pll_cntr_maxfreq_recalc() recalculate the maxmum frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    eadc:	e92d4030 	push	{r4, r5, lr}
    eae0:	e24dd00c 	sub	sp, sp, #12
    eae4:	e1a05001 	mov	r5, r1
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    eae8:	e28d1004 	add	r1, sp, #4

/*
// alt_clk_pll_cntr_maxfreq_recalc() recalculate the maxmum frequency of the specified clock.
*/
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    eaec:	e1a04000 	mov	r4, r0
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    eaf0:	ebfff70d 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    eaf4:	e3500000 	cmp	r0, #0
    eaf8:	1a000035 	bne	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
    {

        switch (clk)
    eafc:	e244300d 	sub	r3, r4, #13
    eb00:	e353002f 	cmp	r3, #47	; 0x2f
    eb04:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    eb08:	ea000060 	b	ec90 <alt_clk_pll_cntr_maxfreq_recalc+0x1b4>
    eb0c:	0000ec84 	.word	0x0000ec84
    eb10:	0000ec78 	.word	0x0000ec78
    eb14:	0000ec6c 	.word	0x0000ec6c
    eb18:	0000ec60 	.word	0x0000ec60
    eb1c:	0000ec54 	.word	0x0000ec54
    eb20:	0000ec48 	.word	0x0000ec48
    eb24:	0000ec90 	.word	0x0000ec90
    eb28:	0000ec90 	.word	0x0000ec90
    eb2c:	0000ec90 	.word	0x0000ec90
    eb30:	0000ec90 	.word	0x0000ec90
    eb34:	0000ec90 	.word	0x0000ec90
    eb38:	0000ec90 	.word	0x0000ec90
    eb3c:	0000ec90 	.word	0x0000ec90
    eb40:	0000ec90 	.word	0x0000ec90
    eb44:	0000ec90 	.word	0x0000ec90
    eb48:	0000ec90 	.word	0x0000ec90
    eb4c:	0000ec90 	.word	0x0000ec90
    eb50:	0000ec90 	.word	0x0000ec90
    eb54:	0000ec90 	.word	0x0000ec90
    eb58:	0000ec90 	.word	0x0000ec90
    eb5c:	0000ec90 	.word	0x0000ec90
    eb60:	0000ec90 	.word	0x0000ec90
    eb64:	0000ec90 	.word	0x0000ec90
    eb68:	0000ec90 	.word	0x0000ec90
    eb6c:	0000ec3c 	.word	0x0000ec3c
    eb70:	0000ec30 	.word	0x0000ec30
    eb74:	0000ec24 	.word	0x0000ec24
    eb78:	0000ec18 	.word	0x0000ec18
    eb7c:	0000ec0c 	.word	0x0000ec0c
    eb80:	0000ec00 	.word	0x0000ec00
    eb84:	0000ec90 	.word	0x0000ec90
    eb88:	0000ec90 	.word	0x0000ec90
    eb8c:	0000ec90 	.word	0x0000ec90
    eb90:	0000ec90 	.word	0x0000ec90
    eb94:	0000ec90 	.word	0x0000ec90
    eb98:	0000ec90 	.word	0x0000ec90
    eb9c:	0000ec90 	.word	0x0000ec90
    eba0:	0000ec90 	.word	0x0000ec90
    eba4:	0000ec90 	.word	0x0000ec90
    eba8:	0000ec90 	.word	0x0000ec90
    ebac:	0000ec90 	.word	0x0000ec90
    ebb0:	0000ec90 	.word	0x0000ec90
    ebb4:	0000ebf4 	.word	0x0000ebf4
    ebb8:	0000ebe8 	.word	0x0000ebe8
    ebbc:	0000ebcc 	.word	0x0000ebcc
    ebc0:	0000ec90 	.word	0x0000ec90
    ebc4:	0000ec90 	.word	0x0000ec90
    ebc8:	0000ebdc 	.word	0x0000ebdc
        case ALT_CLK_SDRAM_PLL_C1:
            maxfreq->SDRAMPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C1  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C2:
            maxfreq->SDRAMPLL_C2 = freq;
    ebcc:	e59d3004 	ldr	r3, [sp, #4]
    ebd0:	e5853038 	str	r3, [r5, #56]	; 0x38
            break;
        }   /* end of switch-case construct */
    }

    return ret;
}
    ebd4:	e28dd00c 	add	sp, sp, #12
    ebd8:	e8bd8030 	pop	{r4, r5, pc}
        case ALT_CLK_SDRAM_PLL_C2:
            maxfreq->SDRAMPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C2  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C5:
            maxfreq->SDRAMPLL_C5 = freq;
    ebdc:	e59d3004 	ldr	r3, [sp, #4]
    ebe0:	e585303c 	str	r3, [r5, #60]	; 0x3c
    ebe4:	eafffffa 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_SDRAM_PLL_C0:
            maxfreq->SDRAMPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C0  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C1:
            maxfreq->SDRAMPLL_C1 = freq;
    ebe8:	e59d3004 	ldr	r3, [sp, #4]
    ebec:	e5853034 	str	r3, [r5, #52]	; 0x34
    ebf0:	eafffff7 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C5 = %10d\n", (unsigned int)freq);
            break;

            /* SDRAM Clock Group */
        case ALT_CLK_SDRAM_PLL_C0:
            maxfreq->SDRAMPLL_C0 = freq;
    ebf4:	e59d3004 	ldr	r3, [sp, #4]
    ebf8:	e5853030 	str	r3, [r5, #48]	; 0x30
    ebfc:	eafffff4 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_PERIPHERAL_PLL_C4:
            maxfreq->PeriphPLL_C4 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C4 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C5:
            maxfreq->PeriphPLL_C5 = freq;
    ec00:	e59d3004 	ldr	r3, [sp, #4]
    ec04:	e585302c 	str	r3, [r5, #44]	; 0x2c
    ec08:	eafffff1 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_PERIPHERAL_PLL_C3:
            maxfreq->PeriphPLL_C3 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C3 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C4:
            maxfreq->PeriphPLL_C4 = freq;
    ec0c:	e59d3004 	ldr	r3, [sp, #4]
    ec10:	e5853028 	str	r3, [r5, #40]	; 0x28
    ec14:	eaffffee 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_PERIPHERAL_PLL_C2:
            maxfreq->PeriphPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C2 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C3:
            maxfreq->PeriphPLL_C3 = freq;
    ec18:	e59d3004 	ldr	r3, [sp, #4]
    ec1c:	e5853024 	str	r3, [r5, #36]	; 0x24
    ec20:	eaffffeb 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_PERIPHERAL_PLL_C1:
            maxfreq->PeriphPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C1 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C2:
            maxfreq->PeriphPLL_C2 = freq;
    ec24:	e59d3004 	ldr	r3, [sp, #4]
    ec28:	e5853020 	str	r3, [r5, #32]
    ec2c:	eaffffe8 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_PERIPHERAL_PLL_C0:
            maxfreq->PeriphPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C0 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C1:
            maxfreq->PeriphPLL_C1 = freq;
    ec30:	e59d3004 	ldr	r3, [sp, #4]
    ec34:	e585301c 	str	r3, [r5, #28]
    ec38:	eaffffe5 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C5   = %10d\n", (unsigned int)freq);
            break;

            /* Peripheral Clock Group */
        case ALT_CLK_PERIPHERAL_PLL_C0:
            maxfreq->PeriphPLL_C0 = freq;
    ec3c:	e59d3004 	ldr	r3, [sp, #4]
    ec40:	e5853018 	str	r3, [r5, #24]
    ec44:	eaffffe2 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_MAIN_PLL_C4:
            maxfreq->MainPLL_C4 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C4   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C5:
            maxfreq->MainPLL_C5 = freq;
    ec48:	e59d3004 	ldr	r3, [sp, #4]
    ec4c:	e5853014 	str	r3, [r5, #20]
    ec50:	eaffffdf 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_MAIN_PLL_C3:
            maxfreq->MainPLL_C3 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C3   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C4:
            maxfreq->MainPLL_C4 = freq;
    ec54:	e59d3004 	ldr	r3, [sp, #4]
    ec58:	e5853010 	str	r3, [r5, #16]
    ec5c:	eaffffdc 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_MAIN_PLL_C2:
            maxfreq->MainPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C2   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C3:
            maxfreq->MainPLL_C3 = freq;
    ec60:	e59d3004 	ldr	r3, [sp, #4]
    ec64:	e585300c 	str	r3, [r5, #12]
    ec68:	eaffffd9 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_MAIN_PLL_C1:
            maxfreq->MainPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C1   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C2:
            maxfreq->MainPLL_C2 = freq;
    ec6c:	e59d3004 	ldr	r3, [sp, #4]
    ec70:	e5853008 	str	r3, [r5, #8]
    ec74:	eaffffd6 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_MAIN_PLL_C0:
            maxfreq->MainPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C0   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C1:
            maxfreq->MainPLL_C1 = freq;
    ec78:	e59d3004 	ldr	r3, [sp, #4]
    ec7c:	e5853004 	str	r3, [r5, #4]
    ec80:	eaffffd3 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>

        switch (clk)
        {
            /* Main Clock Group */
        case ALT_CLK_MAIN_PLL_C0:
            maxfreq->MainPLL_C0 = freq;
    ec84:	e59d3004 	ldr	r3, [sp, #4]
    ec88:	e5853000 	str	r3, [r5]
    ec8c:	eaffffd0 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>
        case ALT_CLK_SDRAM_PLL_C5:
            maxfreq->SDRAMPLL_C5 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C5  = %10d\n", (unsigned int)freq);
            break;
        default:
            ret = ALT_E_BAD_ARG;
    ec90:	e3e00008 	mvn	r0, #8
    ec94:	eaffffce 	b	ebd4 <alt_clk_pll_cntr_maxfreq_recalc+0xf8>

0000ec98 <alt_clk_clkmgr_reinit>:
//  alt_clk_clkmgr_init() attempt to fix the pll counter max frequencies, since
//  thses frequencies are not known in advance until preloader programmed clock manager.
*/

ALT_STATUS_CODE alt_clk_clkmgr_reinit(void)
{
    ec98:	e92d4010 	push	{r4, lr}
    ec9c:	e24dd008 	sub	sp, sp, #8
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    eca0:	e28d1004 	add	r1, sp, #4
    eca4:	e3a0000d 	mov	r0, #13
    eca8:	ebfff69f 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ecac:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ecb0:	e28d1004 	add	r1, sp, #4

        switch (clk)
        {
            /* Main Clock Group */
        case ALT_CLK_MAIN_PLL_C0:
            maxfreq->MainPLL_C0 = freq;
    ecb4:	059d2004 	ldreq	r2, [sp, #4]
    ecb8:	03023a94 	movweq	r3, #10900	; 0x2a94
    ecbc:	03403002 	movteq	r3, #2
//  thses frequencies are not known in advance until preloader programmed clock manager.
*/

ALT_STATUS_CODE alt_clk_clkmgr_reinit(void)
{
    ALT_STATUS_CODE ret = ALT_E_SUCCESS;
    ecc0:	01a04000 	moveq	r4, r0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ecc4:	e3a0000e 	mov	r0, #14
{
    ALT_STATUS_CODE ret = ALT_E_SUCCESS;
    ALT_STATUS_CODE status ;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C0,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ecc8:	13e04000 	mvnne	r4, #0

        switch (clk)
        {
            /* Main Clock Group */
        case ALT_CLK_MAIN_PLL_C0:
            maxfreq->MainPLL_C0 = freq;
    eccc:	058320a0 	streq	r2, [r3, #160]	; 0xa0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ecd0:	ebfff695 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ecd4:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ecd8:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_MAIN_PLL_C0:
            maxfreq->MainPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C0   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C1:
            maxfreq->MainPLL_C1 = freq;
    ecdc:	059d2004 	ldreq	r2, [sp, #4]
    ece0:	03023a94 	movweq	r3, #10900	; 0x2a94
    ece4:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ece8:	e3a0000f 	mov	r0, #15

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C0,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C1,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ecec:	13e04000 	mvnne	r4, #0
        case ALT_CLK_MAIN_PLL_C0:
            maxfreq->MainPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C0   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C1:
            maxfreq->MainPLL_C1 = freq;
    ecf0:	058320a4 	streq	r2, [r3, #164]	; 0xa4
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ecf4:	ebfff68c 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ecf8:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ecfc:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_MAIN_PLL_C1:
            maxfreq->MainPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C1   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C2:
            maxfreq->MainPLL_C2 = freq;
    ed00:	059d2004 	ldreq	r2, [sp, #4]
    ed04:	03023a94 	movweq	r3, #10900	; 0x2a94
    ed08:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed0c:	e3a00010 	mov	r0, #16

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C1,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C2,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ed10:	13e04000 	mvnne	r4, #0
        case ALT_CLK_MAIN_PLL_C1:
            maxfreq->MainPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C1   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C2:
            maxfreq->MainPLL_C2 = freq;
    ed14:	058320a8 	streq	r2, [r3, #168]	; 0xa8
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed18:	ebfff683 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ed1c:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed20:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_MAIN_PLL_C2:
            maxfreq->MainPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C2   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C3:
            maxfreq->MainPLL_C3 = freq;
    ed24:	059d2004 	ldreq	r2, [sp, #4]
    ed28:	03023a94 	movweq	r3, #10900	; 0x2a94
    ed2c:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed30:	e3a00011 	mov	r0, #17

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C2,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C3,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ed34:	13e04000 	mvnne	r4, #0
        case ALT_CLK_MAIN_PLL_C2:
            maxfreq->MainPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C2   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C3:
            maxfreq->MainPLL_C3 = freq;
    ed38:	058320ac 	streq	r2, [r3, #172]	; 0xac
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed3c:	ebfff67a 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ed40:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed44:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_MAIN_PLL_C3:
            maxfreq->MainPLL_C3 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C3   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C4:
            maxfreq->MainPLL_C4 = freq;
    ed48:	059d2004 	ldreq	r2, [sp, #4]
    ed4c:	03023a94 	movweq	r3, #10900	; 0x2a94
    ed50:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed54:	e3a00012 	mov	r0, #18

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C3,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C4,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ed58:	13e04000 	mvnne	r4, #0
        case ALT_CLK_MAIN_PLL_C3:
            maxfreq->MainPLL_C3 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C3   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C4:
            maxfreq->MainPLL_C4 = freq;
    ed5c:	058320b0 	streq	r2, [r3, #176]	; 0xb0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed60:	ebfff671 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ed64:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed68:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_MAIN_PLL_C4:
            maxfreq->MainPLL_C4 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C4   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C5:
            maxfreq->MainPLL_C5 = freq;
    ed6c:	059d2004 	ldreq	r2, [sp, #4]
    ed70:	03023a94 	movweq	r3, #10900	; 0x2a94
    ed74:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed78:	e3a00025 	mov	r0, #37	; 0x25

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C4,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C5,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ed7c:	13e04000 	mvnne	r4, #0
        case ALT_CLK_MAIN_PLL_C4:
            maxfreq->MainPLL_C4 = freq;
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C4   = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_MAIN_PLL_C5:
            maxfreq->MainPLL_C5 = freq;
    ed80:	058320b4 	streq	r2, [r3, #180]	; 0xb4
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed84:	ebfff668 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ed88:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed8c:	e28d1004 	add	r1, sp, #4
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C5   = %10d\n", (unsigned int)freq);
            break;

            /* Peripheral Clock Group */
        case ALT_CLK_PERIPHERAL_PLL_C0:
            maxfreq->PeriphPLL_C0 = freq;
    ed90:	059d2004 	ldreq	r2, [sp, #4]
    ed94:	03023a94 	movweq	r3, #10900	; 0x2a94
    ed98:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ed9c:	e3a00026 	mov	r0, #38	; 0x26

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_MAIN_PLL_C5,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C0,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    eda0:	13e04000 	mvnne	r4, #0
            dprintf("alt_pll_cntr_maxfreq.MainPLL_C5   = %10d\n", (unsigned int)freq);
            break;

            /* Peripheral Clock Group */
        case ALT_CLK_PERIPHERAL_PLL_C0:
            maxfreq->PeriphPLL_C0 = freq;
    eda4:	058320b8 	streq	r2, [r3, #184]	; 0xb8
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    eda8:	ebfff65f 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    edac:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    edb0:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_PERIPHERAL_PLL_C0:
            maxfreq->PeriphPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C0 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C1:
            maxfreq->PeriphPLL_C1 = freq;
    edb4:	059d2004 	ldreq	r2, [sp, #4]
    edb8:	03023a94 	movweq	r3, #10900	; 0x2a94
    edbc:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    edc0:	e3a00027 	mov	r0, #39	; 0x27

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C0,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C1,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    edc4:	13e04000 	mvnne	r4, #0
        case ALT_CLK_PERIPHERAL_PLL_C0:
            maxfreq->PeriphPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C0 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C1:
            maxfreq->PeriphPLL_C1 = freq;
    edc8:	058320bc 	streq	r2, [r3, #188]	; 0xbc
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    edcc:	ebfff656 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    edd0:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    edd4:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_PERIPHERAL_PLL_C1:
            maxfreq->PeriphPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C1 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C2:
            maxfreq->PeriphPLL_C2 = freq;
    edd8:	059d2004 	ldreq	r2, [sp, #4]
    eddc:	03023a94 	movweq	r3, #10900	; 0x2a94
    ede0:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ede4:	e3a00028 	mov	r0, #40	; 0x28

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C1,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C2,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ede8:	13e04000 	mvnne	r4, #0
        case ALT_CLK_PERIPHERAL_PLL_C1:
            maxfreq->PeriphPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C1 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C2:
            maxfreq->PeriphPLL_C2 = freq;
    edec:	058320c0 	streq	r2, [r3, #192]	; 0xc0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    edf0:	ebfff64d 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    edf4:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    edf8:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_PERIPHERAL_PLL_C2:
            maxfreq->PeriphPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C2 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C3:
            maxfreq->PeriphPLL_C3 = freq;
    edfc:	059d2004 	ldreq	r2, [sp, #4]
    ee00:	03023a94 	movweq	r3, #10900	; 0x2a94
    ee04:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee08:	e3a00029 	mov	r0, #41	; 0x29

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C2,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C3,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ee0c:	13e04000 	mvnne	r4, #0
        case ALT_CLK_PERIPHERAL_PLL_C2:
            maxfreq->PeriphPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C2 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C3:
            maxfreq->PeriphPLL_C3 = freq;
    ee10:	058320c4 	streq	r2, [r3, #196]	; 0xc4
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee14:	ebfff644 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ee18:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee1c:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_PERIPHERAL_PLL_C3:
            maxfreq->PeriphPLL_C3 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C3 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C4:
            maxfreq->PeriphPLL_C4 = freq;
    ee20:	059d2004 	ldreq	r2, [sp, #4]
    ee24:	03023a94 	movweq	r3, #10900	; 0x2a94
    ee28:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee2c:	e3a0002a 	mov	r0, #42	; 0x2a

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C3,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C4,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ee30:	13e04000 	mvnne	r4, #0
        case ALT_CLK_PERIPHERAL_PLL_C3:
            maxfreq->PeriphPLL_C3 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C3 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C4:
            maxfreq->PeriphPLL_C4 = freq;
    ee34:	058320c8 	streq	r2, [r3, #200]	; 0xc8
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee38:	ebfff63b 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ee3c:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee40:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_PERIPHERAL_PLL_C4:
            maxfreq->PeriphPLL_C4 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C4 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C5:
            maxfreq->PeriphPLL_C5 = freq;
    ee44:	059d2004 	ldreq	r2, [sp, #4]
    ee48:	03023a94 	movweq	r3, #10900	; 0x2a94
    ee4c:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee50:	e3a00037 	mov	r0, #55	; 0x37

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C4,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C5,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ee54:	13e04000 	mvnne	r4, #0
        case ALT_CLK_PERIPHERAL_PLL_C4:
            maxfreq->PeriphPLL_C4 = freq;
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C4 = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_PERIPHERAL_PLL_C5:
            maxfreq->PeriphPLL_C5 = freq;
    ee58:	058320cc 	streq	r2, [r3, #204]	; 0xcc
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee5c:	ebfff632 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ee60:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee64:	e28d1004 	add	r1, sp, #4
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C5 = %10d\n", (unsigned int)freq);
            break;

            /* SDRAM Clock Group */
        case ALT_CLK_SDRAM_PLL_C0:
            maxfreq->SDRAMPLL_C0 = freq;
    ee68:	059d2004 	ldreq	r2, [sp, #4]
    ee6c:	03023a94 	movweq	r3, #10900	; 0x2a94
    ee70:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee74:	e3a00038 	mov	r0, #56	; 0x38
    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_PERIPHERAL_PLL_C5,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;


    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C0,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ee78:	13e04000 	mvnne	r4, #0
            dprintf("alt_pll_cntr_maxfreq.PeriphPLL_C5 = %10d\n", (unsigned int)freq);
            break;

            /* SDRAM Clock Group */
        case ALT_CLK_SDRAM_PLL_C0:
            maxfreq->SDRAMPLL_C0 = freq;
    ee7c:	058320d0 	streq	r2, [r3, #208]	; 0xd0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee80:	ebfff629 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    ee84:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee88:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_SDRAM_PLL_C0:
            maxfreq->SDRAMPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C0  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C1:
            maxfreq->SDRAMPLL_C1 = freq;
    ee8c:	059d2004 	ldreq	r2, [sp, #4]
    ee90:	03023a94 	movweq	r3, #10900	; 0x2a94
    ee94:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    ee98:	e3a00039 	mov	r0, #57	; 0x39

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C0,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C1,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    ee9c:	13e04000 	mvnne	r4, #0
        case ALT_CLK_SDRAM_PLL_C0:
            maxfreq->SDRAMPLL_C0 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C0  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C1:
            maxfreq->SDRAMPLL_C1 = freq;
    eea0:	058320d4 	streq	r2, [r3, #212]	; 0xd4
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    eea4:	ebfff620 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    eea8:	e3500000 	cmp	r0, #0
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    eeac:	e28d1004 	add	r1, sp, #4
        case ALT_CLK_SDRAM_PLL_C1:
            maxfreq->SDRAMPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C1  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C2:
            maxfreq->SDRAMPLL_C2 = freq;
    eeb0:	059d2004 	ldreq	r2, [sp, #4]
    eeb4:	03023a94 	movweq	r3, #10900	; 0x2a94
    eeb8:	03403002 	movteq	r3, #2
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    eebc:	e3a0003c 	mov	r0, #60	; 0x3c

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C1,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C2,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    eec0:	13e04000 	mvnne	r4, #0
        case ALT_CLK_SDRAM_PLL_C1:
            maxfreq->SDRAMPLL_C1 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C1  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C2:
            maxfreq->SDRAMPLL_C2 = freq;
    eec4:	058320d8 	streq	r2, [r3, #216]	; 0xd8
ALT_STATUS_CODE alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_t clk, ALT_PLL_CNTR_FREQMAX_t * maxfreq)
{
    ALT_STATUS_CODE ret = ALT_E_BAD_ARG;
    alt_freq_t freq;

    ret = alt_clk_freq_get(clk, &freq);
    eec8:	ebfff617 	bl	c72c <alt_clk_freq_get>

    if (ret == ALT_E_SUCCESS)
    eecc:	e3500000 	cmp	r0, #0
        case ALT_CLK_SDRAM_PLL_C2:
            maxfreq->SDRAMPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C2  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C5:
            maxfreq->SDRAMPLL_C5 = freq;
    eed0:	059d2004 	ldreq	r2, [sp, #4]
    eed4:	03023a94 	movweq	r3, #10900	; 0x2a94
    eed8:	03403002 	movteq	r3, #2

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C2,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;

    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C5,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;
    eedc:	13e04000 	mvnne	r4, #0


    return ret;
}
    eee0:	e1a00004 	mov	r0, r4
        case ALT_CLK_SDRAM_PLL_C2:
            maxfreq->SDRAMPLL_C2 = freq;
            dprintf("alt_pll_cntr_maxfreq.SDRAMPLL_C2  = %10d\n", (unsigned int)freq);
            break;
        case ALT_CLK_SDRAM_PLL_C5:
            maxfreq->SDRAMPLL_C5 = freq;
    eee4:	058320dc 	streq	r2, [r3, #220]	; 0xdc
    status = alt_clk_pll_cntr_maxfreq_recalc(ALT_CLK_SDRAM_PLL_C5,&alt_pll_cntr_maxfreq );
    if (status != ALT_E_SUCCESS) ret = ALT_E_ERROR;


    return ret;
}
    eee8:	e28dd008 	add	sp, sp, #8
    eeec:	e8bd8010 	pop	{r4, pc}

0000eef0 <alt_clk_clkmgr_uninit>:
ALT_STATUS_CODE alt_clk_clkmgr_uninit(void)
{
    ALT_STATUS_CODE ret = ALT_E_SUCCESS;

    return ret;
} 
    eef0:	e3a00000 	mov	r0, #0
    eef4:	e12fff1e 	bx	lr

0000eef8 <alt_int_global_init>:

    return affinity & 0xFF;
}

ALT_STATUS_CODE alt_int_global_init()
{
    eef8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    int i;
    /* Cache the distributor and CPU base addresses
     / See: Cortex-A9 MPCore TRM, section 1.5. */
    {
        uint32_t periphbase = get_periphbase();
        alt_int_base_dist = periphbase + 0x1000;
    eefc:	e3043840 	movw	r3, #18496	; 0x4840
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 4, periphbase, c15, c0, 0");
#elif defined(_MSC_VER)
	periphbase = 0;
#else
    __asm("MRC p15, 4, %0, c15, c0, 0" : "=r" (periphbase));
    ef00:	ee9f4f10 	mrc	15, 4, r4, cr15, cr0, {0}
    int i;
    /* Cache the distributor and CPU base addresses
     / See: Cortex-A9 MPCore TRM, section 1.5. */
    {
        uint32_t periphbase = get_periphbase();
        alt_int_base_dist = periphbase + 0x1000;
    ef04:	e2847a01 	add	r7, r4, #4096	; 0x1000
    ef08:	e3423673 	movt	r3, #9843	; 0x2673
    }

    /* Discover CPU and interrupt count
     / See GIC 1.0, section 4.3.2. */
    {
        uint32_t icdictr = alt_read_word(alt_int_base_dist + 0x4);
    ef0c:	e5975004 	ldr	r5, [r7, #4]
        alt_int_count_cpu = ((icdictr >> 5) & 0x7) + 1;
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
    ef10:	e3a02000 	mov	r2, #0
    ef14:	e283000f 	add	r0, r3, #15
    ef18:	e283ce11 	add	r12, r3, #272	; 0x110

    /* Initialize the callback and context array
     / Initialize interrupt flags array */
    for (i = 0; i < ALT_INT_PROVISION_INT_COUNT; ++i)
    {
        alt_int_dispatch[i].callback = 0;
    ef1c:	e1a01002 	mov	r1, r2
    /* Cache the distributor and CPU base addresses
     / See: Cortex-A9 MPCore TRM, section 1.5. */
    {
        uint32_t periphbase = get_periphbase();
        alt_int_base_dist = periphbase + 0x1000;
        alt_int_base_cpu  = periphbase + 0x0100;
    ef20:	e2848c01 	add	r8, r4, #256	; 0x100
    /* Discover CPU and interrupt count
     / See GIC 1.0, section 4.3.2. */
    {
        uint32_t icdictr = alt_read_word(alt_int_base_dist + 0x4);
        alt_int_count_cpu = ((icdictr >> 5) & 0x7) + 1;
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
    ef24:	e205601f 	and	r6, r5, #31

    /* Discover CPU and interrupt count
     / See GIC 1.0, section 4.3.2. */
    {
        uint32_t icdictr = alt_read_word(alt_int_base_dist + 0x4);
        alt_int_count_cpu = ((icdictr >> 5) & 0x7) + 1;
    ef28:	e7e252d5 	ubfx	r5, r5, #5, #3
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
    ef2c:	e2866001 	add	r6, r6, #1

    /* Discover CPU and interrupt count
     / See GIC 1.0, section 4.3.2. */
    {
        uint32_t icdictr = alt_read_word(alt_int_base_dist + 0x4);
        alt_int_count_cpu = ((icdictr >> 5) & 0x7) + 1;
    ef30:	e2855001 	add	r5, r5, #1
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
    ef34:	e1a06286 	lsl	r6, r6, #5
    /* Cache the distributor and CPU base addresses
     / See: Cortex-A9 MPCore TRM, section 1.5. */
    {
        uint32_t periphbase = get_periphbase();
        alt_int_base_dist = periphbase + 0x1000;
        alt_int_base_cpu  = periphbase + 0x0100;
    ef38:	e8830180 	stm	r3, {r7, r8}

    /* Discover CPU and interrupt count
     / See GIC 1.0, section 4.3.2. */
    {
        uint32_t icdictr = alt_read_word(alt_int_base_dist + 0x4);
        alt_int_count_cpu = ((icdictr >> 5) & 0x7) + 1;
    ef3c:	e5835008 	str	r5, [r3, #8]
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
    ef40:	e583600c 	str	r6, [r3, #12]

    /* Initialize the callback and context array
     / Initialize interrupt flags array */
    for (i = 0; i < ALT_INT_PROVISION_INT_COUNT; ++i)
    {
        alt_int_dispatch[i].callback = 0;
    ef44:	e1a0300c 	mov	r3, r12
        alt_int_dispatch[i].context  = 0;

        alt_int_flag[i] = 0;
    ef48:	e5e01001 	strb	r1, [r0, #1]!

    /* Initialize the callback and context array
     / Initialize interrupt flags array */
    for (i = 0; i < ALT_INT_PROVISION_INT_COUNT; ++i)
    {
        alt_int_dispatch[i].callback = 0;
    ef4c:	e7a31002 	str	r1, [r3, r2]!
    ef50:	e2822008 	add	r2, r2, #8
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
    }

    /* Initialize the callback and context array
     / Initialize interrupt flags array */
    for (i = 0; i < ALT_INT_PROVISION_INT_COUNT; ++i)
    ef54:	e3520b02 	cmp	r2, #2048	; 0x800
    {
        alt_int_dispatch[i].callback = 0;
        alt_int_dispatch[i].context  = 0;
    ef58:	e5831004 	str	r1, [r3, #4]
        alt_int_count_int = ((icdictr & 0x1F) + 1) << 5;
    }

    /* Initialize the callback and context array
     / Initialize interrupt flags array */
    for (i = 0; i < ALT_INT_PROVISION_INT_COUNT; ++i)
    ef5c:	1afffff8 	bne	ef44 <alt_int_global_init+0x4c>
ALT_STATUS_CODE alt_int_global_disable()
{
    /* See GIC 1.0, section 4.3.1.
     / See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x1); /* icddcr */
    ef60:	e5973000 	ldr	r3, [r7]
    ef64:	e2844c11 	add	r4, r4, #4352	; 0x1100
    ef68:	e59f2058 	ldr	r2, [pc, #88]	; efc8 <alt_int_global_init+0xd0>
#endif

    return affinity & 0xFF;
}

ALT_STATUS_CODE alt_int_global_init()
    ef6c:	e2846020 	add	r6, r4, #32
    for (i = 0; i < (ALT_INT_PROVISION_INT_COUNT / 32); ++i)
    {
        int j;
        uint32_t value;
        /* Set the whole bank to be enabled. */
        alt_write_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t), 0xffffffff); /* icdisern */
    ef70:	e3e05000 	mvn	r5, #0

        /* Read it back to see which bits stick. */
        value = alt_read_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t)); /* icdisern */
        for (j = 0; j < 32; ++j)
        {
            if (((1 << j) & value) != 0)
    ef74:	e3a00001 	mov	r0, #1
ALT_STATUS_CODE alt_int_global_disable()
{
    /* See GIC 1.0, section 4.3.1.
     / See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x1); /* icddcr */
    ef78:	e3c33001 	bic	r3, r3, #1
    ef7c:	e5873000 	str	r3, [r7]
    for (i = 0; i < (ALT_INT_PROVISION_INT_COUNT / 32); ++i)
    {
        int j;
        uint32_t value;
        /* Set the whole bank to be enabled. */
        alt_write_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t), 0xffffffff); /* icdisern */
    ef80:	e5845000 	str	r5, [r4]

        /* Read it back to see which bits stick. */
        value = alt_read_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t)); /* icdisern */
        for (j = 0; j < 32; ++j)
    ef84:	e3a03000 	mov	r3, #0
        uint32_t value;
        /* Set the whole bank to be enabled. */
        alt_write_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t), 0xffffffff); /* icdisern */

        /* Read it back to see which bits stick. */
        value = alt_read_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t)); /* icdisern */
    ef88:	e5941000 	ldr	r1, [r4]
        for (j = 0; j < 32; ++j)
        {
            if (((1 << j) & value) != 0)
    ef8c:	e011c310 	ands	r12, r1, r0, lsl r3
            {
                alt_int_flag[i * 32 + j] |= INT_FLAG_IMPLEMENTED;
    ef90:	17d2c003 	ldrbne	r12, [r2, r3]
    ef94:	138cc001 	orrne	r12, r12, #1
    ef98:	17c2c003 	strbne	r12, [r2, r3]
        /* Set the whole bank to be enabled. */
        alt_write_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t), 0xffffffff); /* icdisern */

        /* Read it back to see which bits stick. */
        value = alt_read_word(alt_int_base_dist + 0x100 + i * sizeof(uint32_t)); /* icdisern */
        for (j = 0; j < 32; ++j)
    ef9c:	e2833001 	add	r3, r3, #1
    efa0:	e3530020 	cmp	r3, #32
    efa4:	1afffff8 	bne	ef8c <alt_int_global_init+0x94>
                alt_int_flag[i * 32 + j] |= INT_FLAG_IMPLEMENTED;
            }
        }

        /* Clear the whole bank to be disabled. */
        alt_write_word(alt_int_base_dist + 0x180 + i * sizeof(uint32_t), 0xffffffff); /* icdicern */
    efa8:	e5845080 	str	r5, [r4, #128]	; 0x80
    efac:	e2844004 	add	r4, r4, #4
     / the preloader. */
    alt_int_global_disable();

    /* Discover all interrupts that are implemented in hardware.
     / See GIC 1.0, section 3.1.2. */
    for (i = 0; i < (ALT_INT_PROVISION_INT_COUNT / 32); ++i)
    efb0:	e1540006 	cmp	r4, r6
    efb4:	e2822020 	add	r2, r2, #32
    efb8:	1afffff0 	bne	ef80 <alt_int_global_init+0x88>
        /* Clear the whole bank to be disabled. */
        alt_write_word(alt_int_base_dist + 0x180 + i * sizeof(uint32_t), 0xffffffff); /* icdicern */
    }

    return ALT_E_SUCCESS;
}
    efbc:	e3a00000 	mov	r0, #0
    efc0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    efc4:	e12fff1e 	bx	lr
    efc8:	26734850 	.word	0x26734850

0000efcc <alt_int_global_uninit>:

ALT_STATUS_CODE alt_int_global_uninit()
{
    return ALT_E_SUCCESS;
}
    efcc:	e3a00000 	mov	r0, #0
    efd0:	e12fff1e 	bx	lr

0000efd4 <alt_int_global_enable>:
ALT_STATUS_CODE alt_int_global_enable()
{
    /* See GIC 1.0, section 4.3.1.
     / See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x1); /* icddcr */
    efd4:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    efd8:	e3a00000 	mov	r0, #0
ALT_STATUS_CODE alt_int_global_enable()
{
    /* See GIC 1.0, section 4.3.1.
     / See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x1); /* icddcr */
    efdc:	e3423673 	movt	r3, #9843	; 0x2673
    efe0:	e5933000 	ldr	r3, [r3]
    efe4:	e5932000 	ldr	r2, [r3]
    efe8:	e3822001 	orr	r2, r2, #1
    efec:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    eff0:	e12fff1e 	bx	lr

0000eff4 <alt_int_global_disable>:
ALT_STATUS_CODE alt_int_global_disable()
{
    /* See GIC 1.0, section 4.3.1.
     / See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x1); /* icddcr */
    eff4:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    eff8:	e3a00000 	mov	r0, #0
ALT_STATUS_CODE alt_int_global_disable()
{
    /* See GIC 1.0, section 4.3.1.
     / See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x1); /* icddcr */
    effc:	e3423673 	movt	r3, #9843	; 0x2673
    f000:	e5933000 	ldr	r3, [r3]
    f004:	e5932000 	ldr	r2, [r3]
    f008:	e3c22001 	bic	r2, r2, #1
    f00c:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f010:	e12fff1e 	bx	lr

0000f014 <alt_int_global_enable_ns>:

ALT_STATUS_CODE alt_int_global_enable_ns()
{
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x2); /* icddcr */
    f014:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    f018:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_int_global_enable_ns()
{
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x2); /* icddcr */
    f01c:	e3423673 	movt	r3, #9843	; 0x2673
    f020:	e5933000 	ldr	r3, [r3]
    f024:	e5932000 	ldr	r2, [r3]
    f028:	e3822002 	orr	r2, r2, #2
    f02c:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f030:	e12fff1e 	bx	lr

0000f034 <alt_int_global_disable_ns>:

ALT_STATUS_CODE alt_int_global_disable_ns()
{
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x2);
    f034:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    f038:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_int_global_disable_ns()
{
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x2);
    f03c:	e3423673 	movt	r3, #9843	; 0x2673
    f040:	e5933000 	ldr	r3, [r3]
    f044:	e5932000 	ldr	r2, [r3]
    f048:	e3c22002 	bic	r2, r2, #2
    f04c:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f050:	e12fff1e 	bx	lr

0000f054 <alt_int_global_enable_all>:

ALT_STATUS_CODE alt_int_global_enable_all()
{
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x3); /* icddcr */
    f054:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    f058:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_int_global_enable_all()
{
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_setbits_word(alt_int_base_dist + 0x0, 0x3); /* icddcr */
    f05c:	e3423673 	movt	r3, #9843	; 0x2673
    f060:	e5933000 	ldr	r3, [r3]
    f064:	e5932000 	ldr	r2, [r3]
    f068:	e3822003 	orr	r2, r2, #3
    f06c:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f070:	e12fff1e 	bx	lr

0000f074 <alt_int_global_disable_all>:

ALT_STATUS_CODE alt_int_global_disable_all()
{
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x3); /* icddcr */
    f074:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    f078:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_int_global_disable_all()
{
    /* See Cortex-A9 MPCore TRM, section 3.3.1. */

    alt_clrbits_word(alt_int_base_dist + 0x0, 0x3); /* icddcr */
    f07c:	e3423673 	movt	r3, #9843	; 0x2673
    f080:	e5933000 	ldr	r3, [r3]
    f084:	e5932000 	ldr	r2, [r3]
    f088:	e3c22003 	bic	r2, r2, #3
    f08c:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f090:	e12fff1e 	bx	lr

0000f094 <alt_int_dist_secure_enable>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f094:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}

ALT_STATUS_CODE alt_int_dist_secure_enable(ALT_INT_INTERRUPT_t int_id)
{
    f098:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f09c:	e3423673 	movt	r3, #9843	; 0x2673
    f0a0:	e0832000 	add	r2, r3, r0
    f0a4:	e5d22010 	ldrb	r2, [r2, #16]
    f0a8:	e3120001 	tst	r2, #1
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_clrbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
    f0ac:	15933000 	ldrne	r3, [r3]
    {
        return ALT_E_BAD_ARG;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f0b0:	11a022a0 	lsrne	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        alt_clrbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
    f0b4:	1200101f 	andne	r1, r0, #31
    f0b8:	13a04001 	movne	r4, #1

        return ALT_E_SUCCESS;
    f0bc:	13a00000 	movne	r0, #0
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_clrbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
    f0c0:	12833080 	addne	r3, r3, #128	; 0x80
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        return ALT_E_BAD_ARG;
    f0c4:	03e00008 	mvneq	r0, #8
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_clrbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
    f0c8:	1793c102 	ldrne	r12, [r3, r2, lsl #2]
    f0cc:	11cc1114 	bicne	r1, r12, r4, lsl r1
    f0d0:	17831102 	strne	r1, [r3, r2, lsl #2]

        return ALT_E_SUCCESS;
    }
}
    f0d4:	e8bd0010 	ldmfd	sp!, {r4}
    f0d8:	e12fff1e 	bx	lr

0000f0dc <alt_int_dist_secure_disable>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f0dc:	e3043840 	movw	r3, #18496	; 0x4840
        return ALT_E_SUCCESS;
    }
}

ALT_STATUS_CODE alt_int_dist_secure_disable(ALT_INT_INTERRUPT_t int_id)
{
    f0e0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f0e4:	e3423673 	movt	r3, #9843	; 0x2673
    f0e8:	e0832000 	add	r2, r3, r0
    f0ec:	e5d22010 	ldrb	r2, [r2, #16]
    f0f0:	e3120001 	tst	r2, #1
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_setbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
    f0f4:	15933000 	ldrne	r3, [r3]
    {
        return ALT_E_BAD_ARG;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f0f8:	11a022a0 	lsrne	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        alt_setbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
    f0fc:	1200101f 	andne	r1, r0, #31
    f100:	13a04001 	movne	r4, #1

        return ALT_E_SUCCESS;
    f104:	13a00000 	movne	r0, #0
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_setbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
    f108:	12833080 	addne	r3, r3, #128	; 0x80
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        return ALT_E_BAD_ARG;
    f10c:	03e00008 	mvneq	r0, #8
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_setbits_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisrn */
    f110:	1793c102 	ldrne	r12, [r3, r2, lsl #2]
    f114:	118c1114 	orrne	r1, r12, r4, lsl r1
    f118:	17831102 	strne	r1, [r3, r2, lsl #2]

        return ALT_E_SUCCESS;
    }
}
    f11c:	e8bd0010 	ldmfd	sp!, {r4}
    f120:	e12fff1e 	bx	lr

0000f124 <alt_int_dist_is_secure>:
    {
        /* Because interrupts are by default after reset secure, return the
         / default security state. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f124:	e3043840 	movw	r3, #18496	; 0x4840
    f128:	e3423673 	movt	r3, #9843	; 0x2673
    f12c:	e0832000 	add	r2, r3, r0
    f130:	e5d22010 	ldrb	r2, [r2, #16]
    f134:	e3120001 	tst	r2, #1
    f138:	0a000009 	beq	f164 <alt_int_dist_is_secure+0x40>
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisrn = alt_read_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t));
    f13c:	e5933000 	ldr	r3, [r3]
         / default security state. */
        return ALT_E_TRUE;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f140:	e1a022a0 	lsr	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisrn = alt_read_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t));

        if ((icdisrn & (1 << regbitshift)) == 0)
    f144:	e200001f 	and	r0, r0, #31
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisrn = alt_read_word(alt_int_base_dist + 0x80 + regoffset * sizeof(uint32_t));
    f148:	e2833080 	add	r3, r3, #128	; 0x80
    f14c:	e7933102 	ldr	r3, [r3, r2, lsl #2]

        if ((icdisrn & (1 << regbitshift)) == 0)
    f150:	e3a02001 	mov	r2, #1
    f154:	e0132012 	ands	r2, r3, r2, lsl r0
    f158:	13a00000 	movne	r0, #0
    f15c:	03a00001 	moveq	r0, #1
    f160:	e12fff1e 	bx	lr
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        /* Because interrupts are by default after reset secure, return the
         / default security state. */
        return ALT_E_TRUE;
    f164:	e3a00001 	mov	r0, #1
        else
        {
            return ALT_E_FALSE;
        }
    }
}
    f168:	e12fff1e 	bx	lr

0000f16c <alt_int_dist_enable>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f16c:	e3043840 	movw	r3, #18496	; 0x4840
    f170:	e3423673 	movt	r3, #9843	; 0x2673
    f174:	e0832000 	add	r2, r3, r0
    f178:	e5d22010 	ldrb	r2, [r2, #16]
    f17c:	e3120001 	tst	r2, #1
    f180:	0a000008 	beq	f1a8 <alt_int_dist_enable+0x3c>
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisern */
    f184:	e5933000 	ldr	r3, [r3]
    {
        return ALT_E_BAD_ARG;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f188:	e1a022a0 	lsr	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisern */
    f18c:	e200101f 	and	r1, r0, #31
    f190:	e3a00001 	mov	r0, #1
    f194:	e1a01110 	lsl	r1, r0, r1
    f198:	e2833c01 	add	r3, r3, #256	; 0x100

        return ALT_E_SUCCESS;
    f19c:	e3a00000 	mov	r0, #0
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisern */
    f1a0:	e7831102 	str	r1, [r3, r2, lsl #2]

        return ALT_E_SUCCESS;
    f1a4:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        return ALT_E_BAD_ARG;
    f1a8:	e3e00008 	mvn	r0, #8

        alt_write_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisern */

        return ALT_E_SUCCESS;
    }
}
    f1ac:	e12fff1e 	bx	lr

0000f1b0 <alt_int_dist_disable>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f1b0:	e3043840 	movw	r3, #18496	; 0x4840
    f1b4:	e3423673 	movt	r3, #9843	; 0x2673
    f1b8:	e0832000 	add	r2, r3, r0
    f1bc:	e5d22010 	ldrb	r2, [r2, #16]
    f1c0:	e3120001 	tst	r2, #1
    f1c4:	0a000008 	beq	f1ec <alt_int_dist_disable+0x3c>
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x180 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicern */
    f1c8:	e5933000 	ldr	r3, [r3]
    {
        return ALT_E_BAD_ARG;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f1cc:	e1a022a0 	lsr	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x180 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicern */
    f1d0:	e200101f 	and	r1, r0, #31
    f1d4:	e3a00001 	mov	r0, #1
    f1d8:	e1a01110 	lsl	r1, r0, r1
    f1dc:	e2833d06 	add	r3, r3, #384	; 0x180

        return ALT_E_SUCCESS;
    f1e0:	e3a00000 	mov	r0, #0
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x180 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicern */
    f1e4:	e7831102 	str	r1, [r3, r2, lsl #2]

        return ALT_E_SUCCESS;
    f1e8:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        return ALT_E_BAD_ARG;
    f1ec:	e3e00008 	mvn	r0, #8

        alt_write_word(alt_int_base_dist + 0x180 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicern */

        return ALT_E_SUCCESS;
    }
}
    f1f0:	e12fff1e 	bx	lr

0000f1f4 <alt_int_dist_is_enabled>:
    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        /* Interrupts on the GIC is disabled by default, so report disabled. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f1f4:	e3043840 	movw	r3, #18496	; 0x4840
    f1f8:	e3423673 	movt	r3, #9843	; 0x2673
    f1fc:	e0832000 	add	r2, r3, r0
    f200:	e5d22010 	ldrb	r2, [r2, #16]
    f204:	e2122001 	ands	r2, r2, #1
    f208:	0a000009 	beq	f234 <alt_int_dist_is_enabled+0x40>
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisern = alt_read_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t));
    f20c:	e5933000 	ldr	r3, [r3]
        /* Interrupts on the GIC is disabled by default, so report disabled. */
        return ALT_E_FALSE;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f210:	e1a022a0 	lsr	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisern = alt_read_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t));

        if ((icdisern & (1 << regbitshift)) != 0)
    f214:	e200001f 	and	r0, r0, #31
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisern = alt_read_word(alt_int_base_dist + 0x100 + regoffset * sizeof(uint32_t));
    f218:	e2833c01 	add	r3, r3, #256	; 0x100
    f21c:	e7933102 	ldr	r3, [r3, r2, lsl #2]

        if ((icdisern & (1 << regbitshift)) != 0)
    f220:	e3a02001 	mov	r2, #1
    f224:	e0132012 	ands	r2, r3, r2, lsl r0
    f228:	03a00000 	moveq	r0, #0
    f22c:	13a00001 	movne	r0, #1
    f230:	e12fff1e 	bx	lr
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        /* Interrupts on the GIC is disabled by default, so report disabled. */
        return ALT_E_FALSE;
    f234:	e1a00002 	mov	r0, r2
        else
        {
            return ALT_E_FALSE;
        }
    }
}
    f238:	e12fff1e 	bx	lr

0000f23c <alt_int_dist_pending_set>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f23c:	e3043840 	movw	r3, #18496	; 0x4840
    f240:	e3423673 	movt	r3, #9843	; 0x2673
    f244:	e0832000 	add	r2, r3, r0
    f248:	e5d22010 	ldrb	r2, [r2, #16]
    f24c:	e3120001 	tst	r2, #1
    f250:	0a00000a 	beq	f280 <alt_int_dist_pending_set+0x44>
    {
        return ALT_E_BAD_ARG;
    }
    else if ((uint32_t)int_id < 16)
    f254:	e350000f 	cmp	r0, #15
    f258:	9a000008 	bls	f280 <alt_int_dist_pending_set+0x44>
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisprn */
    f25c:	e5933000 	ldr	r3, [r3]
    {
        return ALT_E_BAD_ARG;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f260:	e1a022a0 	lsr	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisprn */
    f264:	e200101f 	and	r1, r0, #31
    f268:	e3a00001 	mov	r0, #1
    f26c:	e1a01110 	lsl	r1, r0, r1
    f270:	e2833c02 	add	r3, r3, #512	; 0x200

        return ALT_E_SUCCESS;
    f274:	e3a00000 	mov	r0, #0
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisprn */
    f278:	e7831102 	str	r1, [r3, r2, lsl #2]

        return ALT_E_SUCCESS;
    f27c:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        return ALT_E_BAD_ARG;
    f280:	e3e00008 	mvn	r0, #8

        alt_write_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdisprn */

        return ALT_E_SUCCESS;
    }
}
    f284:	e12fff1e 	bx	lr

0000f288 <alt_int_dist_pending_clear>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f288:	e3043840 	movw	r3, #18496	; 0x4840
    f28c:	e3423673 	movt	r3, #9843	; 0x2673
    f290:	e0832000 	add	r2, r3, r0
    f294:	e5d22010 	ldrb	r2, [r2, #16]
    f298:	e3120001 	tst	r2, #1
    f29c:	0a00000a 	beq	f2cc <alt_int_dist_pending_clear+0x44>
    {
        return ALT_E_BAD_ARG;
    }
    else if ((uint32_t)int_id < 16)
    f2a0:	e350000f 	cmp	r0, #15
    f2a4:	9a000008 	bls	f2cc <alt_int_dist_pending_clear+0x44>
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x280 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicprn */
    f2a8:	e5933000 	ldr	r3, [r3]
    {
        return ALT_E_BAD_ARG;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f2ac:	e1a022a0 	lsr	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x280 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicprn */
    f2b0:	e200101f 	and	r1, r0, #31
    f2b4:	e3a00001 	mov	r0, #1
    f2b8:	e1a01110 	lsl	r1, r0, r1
    f2bc:	e2833d0a 	add	r3, r3, #640	; 0x280

        return ALT_E_SUCCESS;
    f2c0:	e3a00000 	mov	r0, #0
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        alt_write_word(alt_int_base_dist + 0x280 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicprn */
    f2c4:	e7831102 	str	r1, [r3, r2, lsl #2]

        return ALT_E_SUCCESS;
    f2c8:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        return ALT_E_BAD_ARG;
    f2cc:	e3e00008 	mvn	r0, #8

        alt_write_word(alt_int_base_dist + 0x280 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicprn */

        return ALT_E_SUCCESS;
    }
}
    f2d0:	e12fff1e 	bx	lr

0000f2d4 <alt_int_dist_is_pending>:
    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        /* Interrupts on the GIC is not pending by default, so report false. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f2d4:	e3043840 	movw	r3, #18496	; 0x4840
    f2d8:	e3423673 	movt	r3, #9843	; 0x2673
    f2dc:	e0832000 	add	r2, r3, r0
    f2e0:	e5d22010 	ldrb	r2, [r2, #16]
    f2e4:	e2122001 	ands	r2, r2, #1
    f2e8:	0a000009 	beq	f314 <alt_int_dist_is_pending+0x40>
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisprn = alt_read_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t));
    f2ec:	e5933000 	ldr	r3, [r3]
        /* Interrupts on the GIC is not pending by default, so report false. */
        return ALT_E_FALSE;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f2f0:	e1a022a0 	lsr	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisprn = alt_read_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t));

        if ((icdisprn & (1 << regbitshift)) != 0)
    f2f4:	e200001f 	and	r0, r0, #31
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdisprn = alt_read_word(alt_int_base_dist + 0x200 + regoffset * sizeof(uint32_t));
    f2f8:	e2833c02 	add	r3, r3, #512	; 0x200
    f2fc:	e7933102 	ldr	r3, [r3, r2, lsl #2]

        if ((icdisprn & (1 << regbitshift)) != 0)
    f300:	e3a02001 	mov	r2, #1
    f304:	e0132012 	ands	r2, r3, r2, lsl r0
    f308:	03a00000 	moveq	r0, #0
    f30c:	13a00001 	movne	r0, #1
    f310:	e12fff1e 	bx	lr
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        /* Interrupts on the GIC is not pending by default, so report false. */
        return ALT_E_FALSE;
    f314:	e1a00002 	mov	r0, r2
        else
        {
            return ALT_E_FALSE;
        }
    }
}
    f318:	e12fff1e 	bx	lr

0000f31c <alt_int_dist_is_active>:
    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        /* Interrupts on the GIC is not active by default, so report false. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f31c:	e3043840 	movw	r3, #18496	; 0x4840
    f320:	e3423673 	movt	r3, #9843	; 0x2673
    f324:	e0832000 	add	r2, r3, r0
    f328:	e5d22010 	ldrb	r2, [r2, #16]
    f32c:	e2122001 	ands	r2, r2, #1
    f330:	0a000009 	beq	f35c <alt_int_dist_is_active+0x40>
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdabrn = alt_read_word(alt_int_base_dist + 0x300 + regoffset * sizeof(uint32_t));
    f334:	e5933000 	ldr	r3, [r3]
        /* Interrupts on the GIC is not active by default, so report false. */
        return ALT_E_FALSE;
    }
    else
    {
        uint32_t regoffset   = int_id >> 5;
    f338:	e1a022a0 	lsr	r2, r0, #5
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdabrn = alt_read_word(alt_int_base_dist + 0x300 + regoffset * sizeof(uint32_t));

        if ((icdabrn & (1 << regbitshift)) != 0)
    f33c:	e200001f 	and	r0, r0, #31
    else
    {
        uint32_t regoffset   = int_id >> 5;
        uint32_t regbitshift = int_id & 0x1F;

        uint32_t icdabrn = alt_read_word(alt_int_base_dist + 0x300 + regoffset * sizeof(uint32_t));
    f340:	e2833c03 	add	r3, r3, #768	; 0x300
    f344:	e7933102 	ldr	r3, [r3, r2, lsl #2]

        if ((icdabrn & (1 << regbitshift)) != 0)
    f348:	e3a02001 	mov	r2, #1
    f34c:	e0132012 	ands	r2, r3, r2, lsl r0
    f350:	03a00000 	moveq	r0, #0
    f354:	13a00001 	movne	r0, #1
    f358:	e12fff1e 	bx	lr
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        /* Interrupts on the GIC is not active by default, so report false. */
        return ALT_E_FALSE;
    f35c:	e1a00002 	mov	r0, r2
        else
        {
            return ALT_E_FALSE;
        }
    }
}
    f360:	e12fff1e 	bx	lr

0000f364 <alt_int_dist_priority_get>:
    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        /* Interrupts on the GIC have a default priority of 0. */
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f364:	e3043840 	movw	r3, #18496	; 0x4840
    f368:	e3423673 	movt	r3, #9843	; 0x2673
    f36c:	e0832000 	add	r2, r3, r0
    f370:	e5d22010 	ldrb	r2, [r2, #16]
    f374:	e2122001 	ands	r2, r2, #1
    }
    else
    {
        uint32_t regoffset = int_id;

        uint8_t icdiprn = alt_read_byte(alt_int_base_dist + 0x400 + regoffset * sizeof(uint8_t));
    f378:	15933000 	ldrne	r3, [r3]
    f37c:	12833b01 	addne	r3, r3, #1024	; 0x400
    f380:	17d32000 	ldrbne	r2, [r3, r0]

        *priority = icdiprn;
        return ALT_E_SUCCESS;
    }
}
    f384:	e3a00000 	mov	r0, #0
    f388:	e5812000 	str	r2, [r1]
    f38c:	e12fff1e 	bx	lr

0000f390 <alt_int_dist_priority_set>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f390:	e3043840 	movw	r3, #18496	; 0x4840
    }
}

ALT_STATUS_CODE alt_int_dist_priority_set(ALT_INT_INTERRUPT_t int_id, 
                                          uint32_t priority)
{
    f394:	e1a02000 	mov	r2, r0

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f398:	e3423673 	movt	r3, #9843	; 0x2673
    f39c:	e0830000 	add	r0, r3, r0
    f3a0:	e5d00010 	ldrb	r0, [r0, #16]
    f3a4:	e3100001 	tst	r0, #1
    f3a8:	0a000006 	beq	f3c8 <alt_int_dist_priority_set+0x38>
    {
        return ALT_E_BAD_ARG;
    }
    else if (priority < 256)
    f3ac:	e35100ff 	cmp	r1, #255	; 0xff
    f3b0:	8a000004 	bhi	f3c8 <alt_int_dist_priority_set+0x38>
    {
        uint32_t regoffset = int_id;

        alt_write_byte(alt_int_base_dist + 0x400 + regoffset * sizeof(uint8_t), (uint8_t)priority); /* icdiprn */
    f3b4:	e5933000 	ldr	r3, [r3]

        return ALT_E_SUCCESS;
    f3b8:	e3a00000 	mov	r0, #0
    }
    else if (priority < 256)
    {
        uint32_t regoffset = int_id;

        alt_write_byte(alt_int_base_dist + 0x400 + regoffset * sizeof(uint8_t), (uint8_t)priority); /* icdiprn */
    f3bc:	e2833b01 	add	r3, r3, #1024	; 0x400
    f3c0:	e7c31002 	strb	r1, [r3, r2]

        return ALT_E_SUCCESS;
    f3c4:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        return ALT_E_BAD_ARG;
    f3c8:	e3e00008 	mvn	r0, #8
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f3cc:	e12fff1e 	bx	lr

0000f3d0 <alt_int_dist_target_get>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f3d0:	e3043840 	movw	r3, #18496	; 0x4840
    f3d4:	e3423673 	movt	r3, #9843	; 0x2673
    f3d8:	e0832000 	add	r2, r3, r0
    f3dc:	e5d22010 	ldrb	r2, [r2, #16]
    f3e0:	e2122001 	ands	r2, r2, #1
    }
    else
    {
        uint32_t regoffset = int_id;

        uint8_t icdiptr = alt_read_byte(alt_int_base_dist + 0x800 + regoffset * sizeof(uint8_t));
    f3e4:	15933000 	ldrne	r3, [r3]
    f3e8:	12833b02 	addne	r3, r3, #2048	; 0x800
    f3ec:	17d32000 	ldrbne	r2, [r3, r0]
        
        *target = icdiptr;
        return ALT_E_SUCCESS;
    }
}
    f3f0:	e3a00000 	mov	r0, #0
    f3f4:	e5812000 	str	r2, [r1]
    f3f8:	e12fff1e 	bx	lr

0000f3fc <alt_int_dist_target_set>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f3fc:	e3043840 	movw	r3, #18496	; 0x4840
    }
}

ALT_STATUS_CODE alt_int_dist_target_set(ALT_INT_INTERRUPT_t int_id,
                                        alt_int_cpu_target_t target)
{
    f400:	e1a02000 	mov	r2, r0

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f404:	e3423673 	movt	r3, #9843	; 0x2673
    f408:	e0830000 	add	r0, r3, r0
    f40c:	e5d00010 	ldrb	r0, [r0, #16]
    f410:	e3100001 	tst	r0, #1
    f414:	0a000010 	beq	f45c <alt_int_dist_target_set+0x60>
    {
        return ALT_E_BAD_ARG;
    }
    else if (target >= (1 << alt_int_count_cpu))
    f418:	e593c008 	ldr	r12, [r3, #8]
    f41c:	e3a00001 	mov	r0, #1
    f420:	e1510c10 	cmp	r1, r0, lsl r12
    f424:	2a000006 	bcs	f444 <alt_int_dist_target_set+0x48>
        {
            return ALT_E_SUCCESS;
        }
        return ALT_E_BAD_ARG;
    }
    else if (int_id < 32)
    f428:	e352001f 	cmp	r2, #31
    f42c:	9a00000a 	bls	f45c <alt_int_dist_target_set+0x60>
    }
    else
    {
        uint32_t regoffset = int_id;

        alt_write_byte(alt_int_base_dist + 0x800 + regoffset * sizeof(uint8_t), target); /* icdiptr */
    f430:	e5933000 	ldr	r3, [r3]

        return ALT_E_SUCCESS;
    f434:	e3a00000 	mov	r0, #0
    }
    else
    {
        uint32_t regoffset = int_id;

        alt_write_byte(alt_int_base_dist + 0x800 + regoffset * sizeof(uint8_t), target); /* icdiptr */
    f438:	e2833b02 	add	r3, r3, #2048	; 0x800
    f43c:	e7c31002 	strb	r1, [r3, r2]

        return ALT_E_SUCCESS;
    f440:	e12fff1e 	bx	lr
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, affinity, c0, c0, 5");
#elif defined(_MSC_VER)
	affinity = 0;
#else
    __asm ("MRC p15, 0, %0, c0, c0, 5" : "=r" (affinity));
    f444:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
#endif

    return affinity & 0xFF;
    f448:	e6ef3073 	uxtb	r3, r3
    {
        return ALT_E_BAD_ARG;
    }
    else if (target >= (1 << alt_int_count_cpu))
    {
        if (target == (1 << get_current_cpu_num()))
    f44c:	e1510310 	cmp	r1, r0, lsl r3
        {
            return ALT_E_SUCCESS;
    f450:	13e00008 	mvnne	r0, #8
    f454:	03a00000 	moveq	r0, #0
    f458:	e12fff1e 	bx	lr
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        return ALT_E_BAD_ARG;
    f45c:	e3e00008 	mvn	r0, #8

        alt_write_byte(alt_int_base_dist + 0x800 + regoffset * sizeof(uint8_t), target); /* icdiptr */

        return ALT_E_SUCCESS;
    }
}
    f460:	e12fff1e 	bx	lr

0000f464 <alt_int_dist_trigger_get>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f464:	e3043840 	movw	r3, #18496	; 0x4840
    f468:	e3423673 	movt	r3, #9843	; 0x2673
    f46c:	e0832000 	add	r2, r3, r0
    f470:	e5d22010 	ldrb	r2, [r2, #16]
    f474:	e3120001 	tst	r2, #1
    {
        *trigger = ALT_INT_TRIGGER_NA;
    f478:	03a03004 	moveq	r3, #4
    f47c:	05c13000 	strbeq	r3, [r1]

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f480:	0a00000e 	beq	f4c0 <alt_int_dist_trigger_get+0x5c>
    {
        *trigger = ALT_INT_TRIGGER_NA;
        return ALT_E_SUCCESS;
    }
    else if (int_id < 16)
    f484:	e350000f 	cmp	r0, #15
    {
        *trigger = ALT_INT_TRIGGER_SOFTWARE;
    f488:	93a03002 	movls	r3, #2
    f48c:	95c13000 	strbls	r3, [r1]
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    {
        *trigger = ALT_INT_TRIGGER_NA;
        return ALT_E_SUCCESS;
    }
    else if (int_id < 16)
    f490:	9a00000a 	bls	f4c0 <alt_int_dist_trigger_get+0x5c>
    else
    {
        uint32_t regoffset   = int_id >> 4;
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;

        uint32_t icdicfrn = alt_read_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t));
    f494:	e5932000 	ldr	r2, [r3]
        *trigger = ALT_INT_TRIGGER_SOFTWARE;
        return ALT_E_SUCCESS;
    }
    else
    {
        uint32_t regoffset   = int_id >> 4;
    f498:	e1a0c220 	lsr	r12, r0, #4
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;
    f49c:	e200000f 	and	r0, r0, #15
    f4a0:	e1a00080 	lsl	r0, r0, #1

        uint32_t icdicfrn = alt_read_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t));

        if ((icdicfrn & (1 << regbitshift)) == 0)
    f4a4:	e3a03001 	mov	r3, #1
    else
    {
        uint32_t regoffset   = int_id >> 4;
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;

        uint32_t icdicfrn = alt_read_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t));
    f4a8:	e2822b03 	add	r2, r2, #3072	; 0xc00
    f4ac:	e792210c 	ldr	r2, [r2, r12, lsl #2]
        return ALT_E_SUCCESS;
    }
    else
    {
        uint32_t regoffset   = int_id >> 4;
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;
    f4b0:	e0800003 	add	r0, r0, r3

        uint32_t icdicfrn = alt_read_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t));

        if ((icdicfrn & (1 << regbitshift)) == 0)
    f4b4:	e0120013 	ands	r0, r2, r3, lsl r0
        {
            *trigger = ALT_INT_TRIGGER_LEVEL;
        }
        else
        {
            *trigger = ALT_INT_TRIGGER_EDGE;
    f4b8:	13a03000 	movne	r3, #0
    f4bc:	e5c13000 	strb	r3, [r1]
        }

        return ALT_E_SUCCESS;
    }
}
    f4c0:	e3a00000 	mov	r0, #0
    f4c4:	e12fff1e 	bx	lr

0000f4c8 <alt_int_dist_trigger_set>:

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f4c8:	e3043840 	movw	r3, #18496	; 0x4840
    }
}

ALT_STATUS_CODE alt_int_dist_trigger_set(ALT_INT_INTERRUPT_t int_id,
                                         ALT_INT_TRIGGER_t trigger_type)
{
    f4cc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)

    if ((uint32_t)int_id >= ALT_INT_PROVISION_INT_COUNT)
    {
        return ALT_E_BAD_ARG;
    }
    else if ((alt_int_flag[int_id] & INT_FLAG_IMPLEMENTED) == 0)
    f4d0:	e3423673 	movt	r3, #9843	; 0x2673
    f4d4:	e0832000 	add	r2, r3, r0
    f4d8:	e5d22010 	ldrb	r2, [r2, #16]
    f4dc:	e3120001 	tst	r2, #1
    f4e0:	0a000011 	beq	f52c <alt_int_dist_trigger_set+0x64>
    {
        return ALT_E_BAD_ARG;
    }
    else if (int_id < 16)
    f4e4:	e350000f 	cmp	r0, #15
    f4e8:	8a000005 	bhi	f504 <alt_int_dist_trigger_set+0x3c>
    {
        if (   (trigger_type == ALT_INT_TRIGGER_AUTODETECT)
    f4ec:	e2411002 	sub	r1, r1, #2
            || (trigger_type == ALT_INT_TRIGGER_SOFTWARE))
        {
            return ALT_E_SUCCESS;
    f4f0:	e3510001 	cmp	r1, #1
    f4f4:	83e00008 	mvnhi	r0, #8
    f4f8:	93a00000 	movls	r0, #0
            return ALT_E_BAD_ARG;
        }

        return ALT_E_SUCCESS;
    }
}
    f4fc:	e8bd0010 	ldmfd	sp!, {r4}
    f500:	e12fff1e 	bx	lr
        }
    }
    else
    {
        uint32_t regoffset   = int_id >> 4;
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;
    f504:	e200c00f 	and	r12, r0, #15

        if (trigger_type == ALT_INT_TRIGGER_AUTODETECT)
    f508:	e3510003 	cmp	r1, #3
        }
    }
    else
    {
        uint32_t regoffset   = int_id >> 4;
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;
    f50c:	e1a0c08c 	lsl	r12, r12, #1
            return ALT_E_BAD_ARG;
        }
    }
    else
    {
        uint32_t regoffset   = int_id >> 4;
    f510:	e1a02220 	lsr	r2, r0, #4
        uint32_t regbitshift = ((int_id & 0x0F) * 2) + 1;
    f514:	e28cc001 	add	r12, r12, #1

        if (trigger_type == ALT_INT_TRIGGER_AUTODETECT)
    f518:	0a000005 	beq	f534 <alt_int_dist_trigger_set+0x6c>
#else
#error Unknown SoCFPGA device.
#endif
        }

        switch (trigger_type)
    f51c:	e3510000 	cmp	r1, #0
    f520:	0a000005 	beq	f53c <alt_int_dist_trigger_set+0x74>
    f524:	e3510001 	cmp	r1, #1
    f528:	0a000019 	beq	f594 <alt_int_dist_trigger_set+0xcc>
            break;
        case ALT_INT_TRIGGER_EDGE:
            alt_setbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
            break;
        default:
            return ALT_E_BAD_ARG;
    f52c:	e3e00008 	mvn	r0, #8
    f530:	eafffff1 	b	f4fc <alt_int_dist_trigger_set+0x34>

        if (trigger_type == ALT_INT_TRIGGER_AUTODETECT)
        {
#if defined(soc_cv_av)
            if      (int_id <=  31) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* PPI */
            else if (int_id <=  40) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* CPU0_PARITYFAIL */
    f534:	e3500028 	cmp	r0, #40	; 0x28
    f538:	8a000007 	bhi	f55c <alt_int_dist_trigger_set+0x94>
        {
        case ALT_INT_TRIGGER_LEVEL:
            alt_clrbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
            break;
        case ALT_INT_TRIGGER_EDGE:
            alt_setbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
    f53c:	e5933000 	ldr	r3, [r3]
    f540:	e3a04001 	mov	r4, #1
            break;
        default:
            return ALT_E_BAD_ARG;
        }

        return ALT_E_SUCCESS;
    f544:	e3a00000 	mov	r0, #0
        {
        case ALT_INT_TRIGGER_LEVEL:
            alt_clrbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
            break;
        case ALT_INT_TRIGGER_EDGE:
            alt_setbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
    f548:	e2833b03 	add	r3, r3, #3072	; 0xc00
    f54c:	e7931102 	ldr	r1, [r3, r2, lsl #2]
    f550:	e181cc14 	orr	r12, r1, r4, lsl r12
    f554:	e783c102 	str	r12, [r3, r2, lsl #2]
            break;
    f558:	eaffffe7 	b	f4fc <alt_int_dist_trigger_set+0x34>
        if (trigger_type == ALT_INT_TRIGGER_AUTODETECT)
        {
#if defined(soc_cv_av)
            if      (int_id <=  31) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* PPI */
            else if (int_id <=  40) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* CPU0_PARITYFAIL */
            else if (int_id <=  47) { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* CPU0_DEFLAGS */
    f55c:	e350002f 	cmp	r0, #47	; 0x2f
    f560:	9a00000b 	bls	f594 <alt_int_dist_trigger_set+0xcc>
            else if (int_id <=  56) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* CPU1_PARITYFAIL */
    f564:	e3500038 	cmp	r0, #56	; 0x38
    f568:	9afffff3 	bls	f53c <alt_int_dist_trigger_set+0x74>
            else if (int_id <=  63) { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* CPU1_DEFLAGS */
    f56c:	e350003f 	cmp	r0, #63	; 0x3f
    f570:	9a000007 	bls	f594 <alt_int_dist_trigger_set+0xcc>
            else if (int_id <=  66) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* SCU */
            else if (int_id <=  69) { trigger_type = ALT_INT_TRIGGER_EDGE;  } /* L2_ECC */
    f574:	e3500045 	cmp	r0, #69	; 0x45
    f578:	9affffef 	bls	f53c <alt_int_dist_trigger_set+0x74>
            else if (int_id <=  70) { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* L2 (other) */
    f57c:	e3500046 	cmp	r0, #70	; 0x46
    f580:	0a000003 	beq	f594 <alt_int_dist_trigger_set+0xcc>
            else if (int_id <=  71) { trigger_type = ALT_INT_TRIGGER_LEVEL; } /* DDR */
    f584:	e3500047 	cmp	r0, #71	; 0x47
    f588:	0a000001 	beq	f594 <alt_int_dist_trigger_set+0xcc>
            else if (int_id <= 135) { /* do nothing */                      } /* FPGA !!! */
    f58c:	e3500087 	cmp	r0, #135	; 0x87
    f590:	9affffe5 	bls	f52c <alt_int_dist_trigger_set+0x64>
        }

        switch (trigger_type)
        {
        case ALT_INT_TRIGGER_LEVEL:
            alt_clrbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
    f594:	e5933000 	ldr	r3, [r3]
    f598:	e3a04001 	mov	r4, #1
            break;
        default:
            return ALT_E_BAD_ARG;
        }

        return ALT_E_SUCCESS;
    f59c:	e3a00000 	mov	r0, #0
        }

        switch (trigger_type)
        {
        case ALT_INT_TRIGGER_LEVEL:
            alt_clrbits_word(alt_int_base_dist + 0xC00 + regoffset * sizeof(uint32_t), 1 << regbitshift); /* icdicfrn */
    f5a0:	e2833b03 	add	r3, r3, #3072	; 0xc00
    f5a4:	e7931102 	ldr	r1, [r3, r2, lsl #2]
    f5a8:	e1c1cc14 	bic	r12, r1, r4, lsl r12
    f5ac:	e783c102 	str	r12, [r3, r2, lsl #2]
            break;
    f5b0:	eaffffd1 	b	f4fc <alt_int_dist_trigger_set+0x34>

0000f5b4 <alt_int_sgi_trigger>:
                                    alt_int_cpu_target_t target_list,
                                    bool secure_only)
{
    /* See GIC 1.0, section 4.3.13. */

    if (target_list >= (1 << alt_int_count_cpu))
    f5b4:	e304c840 	movw	r12, #18496	; 0x4840

ALT_STATUS_CODE alt_int_sgi_trigger(ALT_INT_INTERRUPT_t int_id,
                                    ALT_INT_SGI_TARGET_t target_filter,
                                    alt_int_cpu_target_t target_list,
                                    bool secure_only)
{
    f5b8:	e92d0030 	push	{r4, r5}
    /* See GIC 1.0, section 4.3.13. */

    if (target_list >= (1 << alt_int_count_cpu))
    f5bc:	e342c673 	movt	r12, #9843	; 0x2673
    f5c0:	e3a05001 	mov	r5, #1
    f5c4:	e59c4008 	ldr	r4, [r12, #8]
    f5c8:	e1520415 	cmp	r2, r5, lsl r4
    f5cc:	2a000006 	bcs	f5ec <alt_int_sgi_trigger+0x38>
    {
        return ALT_E_BAD_ARG;
    }
    else if ((uint32_t)int_id < 16)
    f5d0:	e350000f 	cmp	r0, #15
    f5d4:	8a000004 	bhi	f5ec <alt_int_sgi_trigger+0x38>
    {
        uint32_t filterbits;
        uint32_t sattmask = 0;

        switch (target_filter)
    f5d8:	e1510005 	cmp	r1, r5
    f5dc:	0a000010 	beq	f624 <alt_int_sgi_trigger+0x70>
    f5e0:	3a000004 	bcc	f5f8 <alt_int_sgi_trigger+0x44>
    f5e4:	e3510002 	cmp	r1, #2
    f5e8:	0a00000f 	beq	f62c <alt_int_sgi_trigger+0x78>
            break;
        case ALT_INT_SGI_TARGET_SENDER_ONLY:
            filterbits = 0x2 << 24;
            break;
        default:
            return ALT_E_BAD_ARG;
    f5ec:	e3e00008 	mvn	r0, #8
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f5f0:	e8bd0030 	pop	{r4, r5}
    f5f4:	e12fff1e 	bx	lr
        uint32_t sattmask = 0;

        switch (target_filter)
        {
        case ALT_INT_SGI_TARGET_LIST:
            filterbits = 0x0 << 24;
    f5f8:	e3a04000 	mov	r4, #0
        if (!secure_only)
        {
            sattmask = 1 << 15;
        }

        alt_write_word(alt_int_base_dist + 0xF00, int_id | sattmask | (target_list << 16) | filterbits); /* icdsgir */
    f5fc:	e1802802 	orr	r2, r0, r2, lsl #16
        return ALT_E_BAD_ARG;
    }
    else if ((uint32_t)int_id < 16)
    {
        uint32_t filterbits;
        uint32_t sattmask = 0;
    f600:	e3530000 	cmp	r3, #0
        if (!secure_only)
        {
            sattmask = 1 << 15;
        }

        alt_write_word(alt_int_base_dist + 0xF00, int_id | sattmask | (target_list << 16) | filterbits); /* icdsgir */
    f604:	e59c1000 	ldr	r1, [r12]
        return ALT_E_BAD_ARG;
    }
    else if ((uint32_t)int_id < 16)
    {
        uint32_t filterbits;
        uint32_t sattmask = 0;
    f608:	03a03902 	moveq	r3, #32768	; 0x8000
    f60c:	13a03000 	movne	r3, #0
        if (!secure_only)
        {
            sattmask = 1 << 15;
        }

        alt_write_word(alt_int_base_dist + 0xF00, int_id | sattmask | (target_list << 16) | filterbits); /* icdsgir */
    f610:	e1822004 	orr	r2, r2, r4
    f614:	e1823003 	orr	r3, r2, r3

        return ALT_E_SUCCESS;
    f618:	e3a00000 	mov	r0, #0
        if (!secure_only)
        {
            sattmask = 1 << 15;
        }

        alt_write_word(alt_int_base_dist + 0xF00, int_id | sattmask | (target_list << 16) | filterbits); /* icdsgir */
    f61c:	e5813f00 	str	r3, [r1, #3840]	; 0xf00

        return ALT_E_SUCCESS;
    f620:	eafffff2 	b	f5f0 <alt_int_sgi_trigger+0x3c>
        {
        case ALT_INT_SGI_TARGET_LIST:
            filterbits = 0x0 << 24;
            break;
        case ALT_INT_SGI_TARGET_ALL_EXCL_SENDER:
            filterbits = 0x1 << 24;
    f624:	e3a04401 	mov	r4, #16777216	; 0x1000000
    f628:	eafffff3 	b	f5fc <alt_int_sgi_trigger+0x48>
            break;
        case ALT_INT_SGI_TARGET_SENDER_ONLY:
            filterbits = 0x2 << 24;
    f62c:	e3a04402 	mov	r4, #33554432	; 0x2000000
            break;
    f630:	eafffff1 	b	f5fc <alt_int_sgi_trigger+0x48>

0000f634 <alt_int_cpu_init>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, affinity, c0, c0, 5");
#elif defined(_MSC_VER)
	affinity = 0;
#else
    __asm ("MRC p15, 0, %0, c0, c0, 5" : "=r" (affinity));
    f634:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
{
    uint32_t cpu_num = get_current_cpu_num();
    uint32_t stack_irq; 
    ALT_STATUS_CODE status;

    if (cpu_num >= ALT_INT_PROVISION_CPU_COUNT)
    f638:	e31300ff 	tst	r3, #255	; 0xff
    f63c:	1a000013 	bne	f690 <alt_int_cpu_init+0x5c>

#if ALT_INT_PROVISION_STACK_SUPPORT

    /* The ARM stack lowers in address as it is being used. 16 is the alignment
     / of the block. */
    stack_irq = (uint32_t) &alt_int_stack_irq_block[cpu_num][sizeof(alt_int_stack_irq_block[0]) - 16];
    f640:	e59f2050 	ldr	r2, [pc, #80]	; f698 <alt_int_cpu_init+0x64>
#elif defined(_MSC_VER)
static void alt_int_fixup_irq_stack(uint32_t stack_irq) { }
#else
static void alt_int_fixup_irq_stack(uint32_t stack_irq)
{
    __asm(
    f644:	e10f3000 	mrs	r3, CPSR
    f648:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
    f64c:	e1a0d002 	mov	sp, r2
    f650:	e121f003 	msr	CPSR_c, r3
    __asm("MRC p15, 0, %[sctlr], c1, c0, 0" : [sctlr] "=r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, sctlr, c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MRC p15, 0, %0, c1, c0, 0" : "=r" (sctlr));
    f654:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    {
        sctlr |= 1 << 13;
    }
    else
    {
        sctlr &= ~(1 << 13);
    f658:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
    __asm("MCR p15, 0, %[sctlr], c1, c0, 0" : : [sctlr] "r" (sctlr));
#elif defined(__ARMCC_VERSION)
    __asm("MCR p15, 0, sctlr, c1, c0, 0");
#elif defined(_MSC_VER)
#else
    __asm("MCR p15, 0, %0, c1, c0, 0" : : "r" (sctlr));
    f65c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    __asm("MCR p15, 0, vector_table, c12, c0, 0");
#elif defined(_MSC_VER)
#else
    extern char __cs3_interrupt_vector;
    uint32_t vector_table = (uint32_t)&__cs3_interrupt_vector;
    __asm("MCR p15, 0, %0,           c12, c0, 0" : : "r" (vector_table));
    f660:	e3003000 	movw	r3, #0
    f664:	e3403000 	movt	r3, #0
    f668:	ee0c3f10 	mcr	15, 0, r3, cr12, cr0, {0}
{
    /* See GIC 1.0, section 4.4.2. */

    if (priority_mask < 256)
    {
        alt_write_word(alt_int_base_cpu + 0x4, priority_mask); /* iccpmr */
    f66c:	e3043840 	movw	r3, #18496	; 0x4840
{
    /* See GIC 1.0, section 4.4.3. */

    if (binary_point < 8)
    {
        alt_write_word(alt_int_base_cpu + 0x8, binary_point); /* iccbpr */
    f670:	e3a02000 	mov	r2, #0
{
    /* See GIC 1.0, section 4.4.2. */

    if (priority_mask < 256)
    {
        alt_write_word(alt_int_base_cpu + 0x4, priority_mask); /* iccpmr */
    f674:	e3423673 	movt	r3, #9843	; 0x2673
    f678:	e3a010ff 	mov	r1, #255	; 0xff
    f67c:	e5933004 	ldr	r3, [r3, #4]
    if (status != ALT_E_SUCCESS)
    {
        return status;
    }

    return ALT_E_SUCCESS;
    f680:	e1a00002 	mov	r0, r2
{
    /* See GIC 1.0, section 4.4.2. */

    if (priority_mask < 256)
    {
        alt_write_word(alt_int_base_cpu + 0x4, priority_mask); /* iccpmr */
    f684:	e5831004 	str	r1, [r3, #4]
{
    /* See GIC 1.0, section 4.4.3. */

    if (binary_point < 8)
    {
        alt_write_word(alt_int_base_cpu + 0x8, binary_point); /* iccbpr */
    f688:	e5832008 	str	r2, [r3, #8]
    if (status != ALT_E_SUCCESS)
    {
        return status;
    }

    return ALT_E_SUCCESS;
    f68c:	e12fff1e 	bx	lr
    uint32_t stack_irq; 
    ALT_STATUS_CODE status;

    if (cpu_num >= ALT_INT_PROVISION_CPU_COUNT)
    {
        return ALT_E_ERROR;
    f690:	e3e00000 	mvn	r0, #0
    {
        return status;
    }

    return ALT_E_SUCCESS;
}
    f694:	e12fff1e 	bx	lr
    f698:	26736140 	.word	0x26736140

0000f69c <alt_int_cpu_uninit>:

ALT_STATUS_CODE alt_int_cpu_uninit()
{
    return ALT_E_SUCCESS;
}
    f69c:	e3a00000 	mov	r0, #0
    f6a0:	e12fff1e 	bx	lr

0000f6a4 <alt_int_cpu_enable>:

ALT_STATUS_CODE alt_int_cpu_enable()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_setbits_word(alt_int_base_cpu + 0x0, 0x1); /* iccicr */
    f6a4:	e3043840 	movw	r3, #18496	; 0x4840
    f6a8:	e3423673 	movt	r3, #9843	; 0x2673
    f6ac:	e5933004 	ldr	r3, [r3, #4]
    f6b0:	e5932000 	ldr	r2, [r3]
    f6b4:	e3822001 	orr	r2, r2, #1
    f6b8:	e5832000 	str	r2, [r3]
    __asm("CPSIE i");
#elif defined(__ARMCC_VERSION)
    __enable_irq();
#elif defined(_MSC_VER)
#else
    __asm("CPSIE i");
    f6bc:	f1080080 	cpsie	i
#endif

    return ALT_E_SUCCESS;
}
    f6c0:	e3a00000 	mov	r0, #0
    f6c4:	e12fff1e 	bx	lr

0000f6c8 <alt_int_cpu_disable>:

ALT_STATUS_CODE alt_int_cpu_disable()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_clrbits_word(alt_int_base_cpu + 0x0, 0x1); /* iccicr */
    f6c8:	e3043840 	movw	r3, #18496	; 0x4840
    f6cc:	e3423673 	movt	r3, #9843	; 0x2673
    f6d0:	e5933004 	ldr	r3, [r3, #4]
    f6d4:	e5932000 	ldr	r2, [r3]
    f6d8:	e3c22001 	bic	r2, r2, #1
    f6dc:	e5832000 	str	r2, [r3]
    __asm("CPSID i");
#elif defined(__ARMCC_VERSION)
    __disable_irq();
#elif defined(_MSC_VER)
#else
    __asm("CPSID i");
    f6e0:	f10c0080 	cpsid	i
#endif

    return ALT_E_SUCCESS;
}
    f6e4:	e3a00000 	mov	r0, #0
    f6e8:	e12fff1e 	bx	lr

0000f6ec <alt_int_cpu_enable_ns>:

ALT_STATUS_CODE alt_int_cpu_enable_ns()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_setbits_word(alt_int_base_cpu + 0x0, 0x2); /* iccicr */
    f6ec:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    f6f0:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_int_cpu_enable_ns()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_setbits_word(alt_int_base_cpu + 0x0, 0x2); /* iccicr */
    f6f4:	e3423673 	movt	r3, #9843	; 0x2673
    f6f8:	e5933004 	ldr	r3, [r3, #4]
    f6fc:	e5932000 	ldr	r2, [r3]
    f700:	e3822002 	orr	r2, r2, #2
    f704:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f708:	e12fff1e 	bx	lr

0000f70c <alt_int_cpu_disable_ns>:

ALT_STATUS_CODE alt_int_cpu_disable_ns()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_clrbits_word(alt_int_base_cpu + 0x0, 0x2); /* iccicr */
    f70c:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    f710:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_int_cpu_disable_ns()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_clrbits_word(alt_int_base_cpu + 0x0, 0x2); /* iccicr */
    f714:	e3423673 	movt	r3, #9843	; 0x2673
    f718:	e5933004 	ldr	r3, [r3, #4]
    f71c:	e5932000 	ldr	r2, [r3]
    f720:	e3c22002 	bic	r2, r2, #2
    f724:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f728:	e12fff1e 	bx	lr

0000f72c <alt_int_cpu_enable_all>:

ALT_STATUS_CODE alt_int_cpu_enable_all()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_setbits_word(alt_int_base_cpu + 0x0, 0x3); /* iccicr */
    f72c:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    f730:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_int_cpu_enable_all()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_setbits_word(alt_int_base_cpu + 0x0, 0x3); /* iccicr */
    f734:	e3423673 	movt	r3, #9843	; 0x2673
    f738:	e5933004 	ldr	r3, [r3, #4]
    f73c:	e5932000 	ldr	r2, [r3]
    f740:	e3822003 	orr	r2, r2, #3
    f744:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f748:	e12fff1e 	bx	lr

0000f74c <alt_int_cpu_disable_all>:

ALT_STATUS_CODE alt_int_cpu_disable_all()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_clrbits_word(alt_int_base_cpu + 0x0, 0x3); /* iccicr */
    f74c:	e3043840 	movw	r3, #18496	; 0x4840

    return ALT_E_SUCCESS;
}
    f750:	e3a00000 	mov	r0, #0

ALT_STATUS_CODE alt_int_cpu_disable_all()
{
    /* See GIC 1.0, section 4.4.1. */

    alt_clrbits_word(alt_int_base_cpu + 0x0, 0x3); /* iccicr */
    f754:	e3423673 	movt	r3, #9843	; 0x2673
    f758:	e5933004 	ldr	r3, [r3, #4]
    f75c:	e5932000 	ldr	r2, [r3]
    f760:	e3c22003 	bic	r2, r2, #3
    f764:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f768:	e12fff1e 	bx	lr

0000f76c <alt_int_cpu_config_get>:
                                       bool* use_FIQ_for_secure_interrupts,
                                       bool* allow_secure_ack_all_interrupts)
{
    /* See GIC 1.0, section 4.4.1. */

    uint32_t iccicr = alt_read_word(alt_int_base_cpu + 0x0);
    f76c:	e3043840 	movw	r3, #18496	; 0x4840

    if (use_secure_binary_point)
    f770:	e3500000 	cmp	r0, #0
                                       bool* use_FIQ_for_secure_interrupts,
                                       bool* allow_secure_ack_all_interrupts)
{
    /* See GIC 1.0, section 4.4.1. */

    uint32_t iccicr = alt_read_word(alt_int_base_cpu + 0x0);
    f774:	e3423673 	movt	r3, #9843	; 0x2673
    f778:	e5933004 	ldr	r3, [r3, #4]
    f77c:	e5933000 	ldr	r3, [r3]

    if (use_secure_binary_point)
    {
        *use_secure_binary_point = (iccicr & (1 << 4)) != 0;
    f780:	17e0c253 	ubfxne	r12, r3, #4, #1
    f784:	15c0c000 	strbne	r12, [r0]
    }
    if (use_FIQ_for_secure_interrupts)
    f788:	e3510000 	cmp	r1, #0
    {
        *use_FIQ_for_secure_interrupts = (iccicr & (1 << 3)) != 0;
    f78c:	17e001d3 	ubfxne	r0, r3, #3, #1
    f790:	15c10000 	strbne	r0, [r1]
    }
    if (allow_secure_ack_all_interrupts)
    f794:	e3520000 	cmp	r2, #0
    {
        *allow_secure_ack_all_interrupts = (iccicr & (1 << 2)) != 0;
    f798:	17e03153 	ubfxne	r3, r3, #2, #1
    }

    return ALT_E_SUCCESS;
}
    f79c:	e3a00000 	mov	r0, #0
    {
        *use_FIQ_for_secure_interrupts = (iccicr & (1 << 3)) != 0;
    }
    if (allow_secure_ack_all_interrupts)
    {
        *allow_secure_ack_all_interrupts = (iccicr & (1 << 2)) != 0;
    f7a0:	15c23000 	strbne	r3, [r2]
    }

    return ALT_E_SUCCESS;
}
    f7a4:	e12fff1e 	bx	lr

0000f7a8 <alt_int_cpu_config_set>:
                                       bool use_FIQ_for_secure_interrupts,
                                       bool allow_secure_ack_all_interrupts)
{
    /* See GIC 1.0, section 4.4.1. */

    uint32_t iccicr = alt_read_word(alt_int_base_cpu + 0x0);
    f7a8:	e3043840 	movw	r3, #18496	; 0x4840

    if (use_secure_binary_point)
    f7ac:	e3500000 	cmp	r0, #0
                                       bool use_FIQ_for_secure_interrupts,
                                       bool allow_secure_ack_all_interrupts)
{
    /* See GIC 1.0, section 4.4.1. */

    uint32_t iccicr = alt_read_word(alt_int_base_cpu + 0x0);
    f7b0:	e3423673 	movt	r3, #9843	; 0x2673
    f7b4:	e5933004 	ldr	r3, [r3, #4]
    f7b8:	e5930000 	ldr	r0, [r3]

    if (use_secure_binary_point)
    {
        iccicr |= 1 << 4;
    f7bc:	13800010 	orrne	r0, r0, #16
    }
    else
    {
        iccicr &= ~(1 << 4);
    f7c0:	03c00010 	biceq	r0, r0, #16
    }

    if (use_FIQ_for_secure_interrupts)
    f7c4:	e3510000 	cmp	r1, #0
    {
        iccicr |= 1 << 3;
    f7c8:	13801008 	orrne	r1, r0, #8
    }
    else
    {
        iccicr &= ~(1 << 3);
    f7cc:	03c01008 	biceq	r1, r0, #8
    }

    if (allow_secure_ack_all_interrupts)
    f7d0:	e3520000 	cmp	r2, #0
    }

    alt_write_word(alt_int_base_cpu + 0x0, iccicr);

    return ALT_E_SUCCESS;
}
    f7d4:	e3a00000 	mov	r0, #0
        iccicr &= ~(1 << 3);
    }

    if (allow_secure_ack_all_interrupts)
    {
        iccicr |= 1 << 2;
    f7d8:	13812004 	orrne	r2, r1, #4
    }
    else
    {
        iccicr &= ~(1 << 2);
    f7dc:	03c12004 	biceq	r2, r1, #4
    }

    alt_write_word(alt_int_base_cpu + 0x0, iccicr);
    f7e0:	e5832000 	str	r2, [r3]

    return ALT_E_SUCCESS;
}
    f7e4:	e12fff1e 	bx	lr

0000f7e8 <alt_int_cpu_priority_mask_get>:

uint32_t alt_int_cpu_priority_mask_get()
{
    /* See GIC 1.0, section 4.4.2. */

    uint32_t iccpmr = alt_read_word(alt_int_base_cpu + 0x4);
    f7e8:	e3043840 	movw	r3, #18496	; 0x4840
    f7ec:	e3423673 	movt	r3, #9843	; 0x2673
    f7f0:	e5933004 	ldr	r3, [r3, #4]
    f7f4:	e5930004 	ldr	r0, [r3, #4]

    return iccpmr;
}
    f7f8:	e12fff1e 	bx	lr

0000f7fc <alt_int_cpu_priority_mask_set>:

ALT_STATUS_CODE alt_int_cpu_priority_mask_set(uint32_t priority_mask)
{
    /* See GIC 1.0, section 4.4.2. */

    if (priority_mask < 256)
    f7fc:	e35000ff 	cmp	r0, #255	; 0xff

    return iccpmr;
}

ALT_STATUS_CODE alt_int_cpu_priority_mask_set(uint32_t priority_mask)
{
    f800:	e1a02000 	mov	r2, r0
    /* See GIC 1.0, section 4.4.2. */

    if (priority_mask < 256)
    {
        alt_write_word(alt_int_base_cpu + 0x4, priority_mask); /* iccpmr */
    f804:	93043840 	movwls	r3, #18496	; 0x4840

        return ALT_E_SUCCESS;
    f808:	93a00000 	movls	r0, #0
{
    /* See GIC 1.0, section 4.4.2. */

    if (priority_mask < 256)
    {
        alt_write_word(alt_int_base_cpu + 0x4, priority_mask); /* iccpmr */
    f80c:	93423673 	movtls	r3, #9843	; 0x2673

        return ALT_E_SUCCESS;
    }
    else
    {
        return ALT_E_BAD_ARG;
    f810:	83e00008 	mvnhi	r0, #8
{
    /* See GIC 1.0, section 4.4.2. */

    if (priority_mask < 256)
    {
        alt_write_word(alt_int_base_cpu + 0x4, priority_mask); /* iccpmr */
    f814:	95933004 	ldrls	r3, [r3, #4]
    f818:	95832004 	strls	r2, [r3, #4]
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f81c:	e12fff1e 	bx	lr

0000f820 <alt_int_cpu_binary_point_get>:

uint32_t alt_int_cpu_binary_point_get()
{
    /* See GIC 1.0, section 4.4.3. */

    uint32_t iccbpr = alt_read_word(alt_int_base_cpu + 0x8);
    f820:	e3043840 	movw	r3, #18496	; 0x4840
    f824:	e3423673 	movt	r3, #9843	; 0x2673
    f828:	e5933004 	ldr	r3, [r3, #4]
    f82c:	e5930008 	ldr	r0, [r3, #8]

    return iccbpr;
}
    f830:	e12fff1e 	bx	lr

0000f834 <alt_int_cpu_binary_point_set>:

ALT_STATUS_CODE alt_int_cpu_binary_point_set(uint32_t binary_point)
{
    /* See GIC 1.0, section 4.4.3. */

    if (binary_point < 8)
    f834:	e3500007 	cmp	r0, #7

    return iccbpr;
}

ALT_STATUS_CODE alt_int_cpu_binary_point_set(uint32_t binary_point)
{
    f838:	e1a02000 	mov	r2, r0
    /* See GIC 1.0, section 4.4.3. */

    if (binary_point < 8)
    {
        alt_write_word(alt_int_base_cpu + 0x8, binary_point); /* iccbpr */
    f83c:	93043840 	movwls	r3, #18496	; 0x4840

        return ALT_E_SUCCESS;
    f840:	93a00000 	movls	r0, #0
{
    /* See GIC 1.0, section 4.4.3. */

    if (binary_point < 8)
    {
        alt_write_word(alt_int_base_cpu + 0x8, binary_point); /* iccbpr */
    f844:	93423673 	movtls	r3, #9843	; 0x2673

        return ALT_E_SUCCESS;
    }
    else
    {
        return ALT_E_BAD_ARG;
    f848:	83e00008 	mvnhi	r0, #8
{
    /* See GIC 1.0, section 4.4.3. */

    if (binary_point < 8)
    {
        alt_write_word(alt_int_base_cpu + 0x8, binary_point); /* iccbpr */
    f84c:	95933004 	ldrls	r3, [r3, #4]
    f850:	95832008 	strls	r2, [r3, #8]
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f854:	e12fff1e 	bx	lr

0000f858 <alt_int_cpu_binary_point_get_ns>:

uint32_t alt_int_cpu_binary_point_get_ns()
{
    /* See GIC 1.0, section 4.4.7. */

    uint32_t iccabpr = alt_read_word(alt_int_base_cpu + 0x1C);
    f858:	e3043840 	movw	r3, #18496	; 0x4840
    f85c:	e3423673 	movt	r3, #9843	; 0x2673
    f860:	e5933004 	ldr	r3, [r3, #4]
    f864:	e593001c 	ldr	r0, [r3, #28]

    return iccabpr;
}
    f868:	e12fff1e 	bx	lr

0000f86c <alt_int_cpu_binary_point_set_ns>:

ALT_STATUS_CODE alt_int_cpu_binary_point_set_ns(uint32_t binary_point)
{
    /* See GIC 1.0, section 4.4.7. */

    if (binary_point < 8)
    f86c:	e3500007 	cmp	r0, #7

    return iccabpr;
}

ALT_STATUS_CODE alt_int_cpu_binary_point_set_ns(uint32_t binary_point)
{
    f870:	e1a02000 	mov	r2, r0
    /* See GIC 1.0, section 4.4.7. */

    if (binary_point < 8)
    {
        alt_write_word(alt_int_base_cpu + 0x1C, binary_point); /* iccabpr */
    f874:	93043840 	movwls	r3, #18496	; 0x4840

        return ALT_E_SUCCESS;
    f878:	93a00000 	movls	r0, #0
{
    /* See GIC 1.0, section 4.4.7. */

    if (binary_point < 8)
    {
        alt_write_word(alt_int_base_cpu + 0x1C, binary_point); /* iccabpr */
    f87c:	93423673 	movtls	r3, #9843	; 0x2673

        return ALT_E_SUCCESS;
    }
    else
    {
        return ALT_E_BAD_ARG;
    f880:	83e00008 	mvnhi	r0, #8
{
    /* See GIC 1.0, section 4.4.7. */

    if (binary_point < 8)
    {
        alt_write_word(alt_int_base_cpu + 0x1C, binary_point); /* iccabpr */
    f884:	95933004 	ldrls	r3, [r3, #4]
    f888:	9583201c 	strls	r2, [r3, #28]
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f88c:	e12fff1e 	bx	lr

0000f890 <alt_int_isr_register>:
                                     alt_int_callback_t callback,
                                     void * context)
{
    if ((uint32_t)int_id < ALT_INT_PROVISION_INT_COUNT)
    {
        alt_int_dispatch[int_id].callback = callback;
    f890:	e3043840 	movw	r3, #18496	; 0x4840
    f894:	e3423673 	movt	r3, #9843	; 0x2673
    f898:	e0833180 	add	r3, r3, r0, lsl #3
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f89c:	e3a00000 	mov	r0, #0
                                     alt_int_callback_t callback,
                                     void * context)
{
    if ((uint32_t)int_id < ALT_INT_PROVISION_INT_COUNT)
    {
        alt_int_dispatch[int_id].callback = callback;
    f8a0:	e5831110 	str	r1, [r3, #272]	; 0x110
        alt_int_dispatch[int_id].context  = context;
    f8a4:	e5832114 	str	r2, [r3, #276]	; 0x114
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f8a8:	e12fff1e 	bx	lr

0000f8ac <alt_int_isr_unregister>:

ALT_STATUS_CODE alt_int_isr_unregister(ALT_INT_INTERRUPT_t int_id)
{
    if ((uint32_t)int_id < ALT_INT_PROVISION_INT_COUNT)
    {
        alt_int_dispatch[int_id].callback = 0;
    f8ac:	e3042840 	movw	r2, #18496	; 0x4840
    f8b0:	e3a03000 	mov	r3, #0
    f8b4:	e3422673 	movt	r2, #9843	; 0x2673
    f8b8:	e0822180 	add	r2, r2, r0, lsl #3
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f8bc:	e1a00003 	mov	r0, r3

ALT_STATUS_CODE alt_int_isr_unregister(ALT_INT_INTERRUPT_t int_id)
{
    if ((uint32_t)int_id < ALT_INT_PROVISION_INT_COUNT)
    {
        alt_int_dispatch[int_id].callback = 0;
    f8c0:	e5823110 	str	r3, [r2, #272]	; 0x110
        alt_int_dispatch[int_id].context  = 0;
    f8c4:	e5823114 	str	r3, [r2, #276]	; 0x114
    }
    else
    {
        return ALT_E_BAD_ARG;
    }
}
    f8c8:	e12fff1e 	bx	lr

0000f8cc <alt_int_util_cpu_count>:

uint32_t alt_int_util_cpu_count(void)
{
    return alt_int_count_cpu;
    f8cc:	e3043840 	movw	r3, #18496	; 0x4840
    f8d0:	e3423673 	movt	r3, #9843	; 0x2673
}
    f8d4:	e5930008 	ldr	r0, [r3, #8]
    f8d8:	e12fff1e 	bx	lr

0000f8dc <alt_int_util_int_count>:

uint32_t alt_int_util_int_count(void)
{
    return alt_int_count_int;
    f8dc:	e3043840 	movw	r3, #18496	; 0x4840
    f8e0:	e3423673 	movt	r3, #9843	; 0x2673
}
    f8e4:	e593000c 	ldr	r0, [r3, #12]
    f8e8:	e12fff1e 	bx	lr

0000f8ec <alt_int_util_cpu_current>:
#elif defined(__ARMCC_VERSION)
    __asm("MRC p15, 0, affinity, c0, c0, 5");
#elif defined(_MSC_VER)
	affinity = 0;
#else
    __asm ("MRC p15, 0, %0, c0, c0, 5" : "=r" (affinity));
    f8ec:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
#endif

    return affinity & 0xFF;
    f8f0:	e6ef3073 	uxtb	r3, r3
    return alt_int_count_int;
}

alt_int_cpu_target_t alt_int_util_cpu_current(void)
{
    return 1 << get_current_cpu_num();
    f8f4:	e3a00001 	mov	r0, #1
}
    f8f8:	e1a00310 	lsl	r0, r0, r3
    f8fc:	e12fff1e 	bx	lr

0000f900 <__cs3_isr_irq>:
#else /* #if ALT_INT_PROVISION_VECTOR_SUPPORT */

void alt_int_handler_irq(void)

#endif /* #if ALT_INT_PROVISION_VECTOR_SUPPORT */
{
    f900:	e24ee004 	sub	lr, lr, #4
    f904:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
    /* See GIC 1.0, sections 4.4.4, 4.4.5. */

    uint32_t icciar = alt_read_word(alt_int_base_cpu + 0xC);
    f908:	e3044840 	movw	r4, #18496	; 0x4840
    f90c:	e3424673 	movt	r4, #9843	; 0x2673
    f910:	e5942004 	ldr	r2, [r4, #4]
    f914:	e592500c 	ldr	r5, [r2, #12]

    uint32_t ackintid = ALT_INT_ICCIAR_ACKINTID_GET(icciar);
    f918:	e1a03b05 	lsl	r3, r5, #22
    f91c:	e1a03b23 	lsr	r3, r3, #22

    if (ackintid < ALT_INT_PROVISION_INT_COUNT)
    f920:	e35300ff 	cmp	r3, #255	; 0xff
    f924:	8a000007 	bhi	f948 <__cs3_isr_irq+0x48>
    {
        if (alt_int_dispatch[ackintid].callback)
    f928:	e0843183 	add	r3, r4, r3, lsl #3
    f92c:	e593c110 	ldr	r12, [r3, #272]	; 0x110
    f930:	e35c0000 	cmp	r12, #0
    f934:	0a000003 	beq	f948 <__cs3_isr_irq+0x48>
        {
            alt_int_dispatch[ackintid].callback(icciar, alt_int_dispatch[ackintid].context);
    f938:	e1a00005 	mov	r0, r5
    f93c:	e5931114 	ldr	r1, [r3, #276]	; 0x114
    f940:	e12fff3c 	blx	r12
    f944:	e5942004 	ldr	r2, [r4, #4]
    {
        /* Report error. */
        dprintf("INT[ISR]: Unhandled interrupt ID = 0x%" PRIx32 ".\n", ackintid);
    }

    alt_write_word(alt_int_base_cpu + 0x10, icciar); /* icceoir */
    f948:	e5825010 	str	r5, [r2, #16]
    f94c:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

0000f950 <fatfs_sector_reader.constprop.1>:
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    f950:	e5d0302d 	ldrb	r3, [r0, #45]	; 0x2d
}
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
    f954:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f958:	e1a06000 	mov	r6, r0
    f95c:	e1a05001 	mov	r5, r1
    f960:	e1a04002 	mov	r4, r2
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    f964:	e3530000 	cmp	r3, #0
    f968:	1a000001 	bne	f974 <fatfs_sector_reader.constprop.1+0x24>
    f96c:	e3510000 	cmp	r1, #0
    f970:	0a000029 	beq	fa1c <fatfs_sector_reader.constprop.1+0xcc>
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
    f974:	e5d68000 	ldrb	r8, [r6]
    f978:	e1a00004 	mov	r0, r4
    f97c:	e1a01008 	mov	r1, r8
    f980:	eb0023ed 	bl	1893c <__aeabi_uidiv>
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    f984:	e3500000 	cmp	r0, #0
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
    f988:	e1a07000 	mov	r7, r0
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
    f98c:	e0684098 	mls	r8, r8, r0, r4

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    f990:	0a000007 	beq	f9b4 <fatfs_sector_reader.constprop.1+0x64>
    f994:	e3a04000 	mov	r4, #0
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
    f998:	e1a01005 	mov	r1, r5
    f99c:	e1a00006 	mov	r0, r6
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    f9a0:	e2844001 	add	r4, r4, #1
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
    f9a4:	eb001d1b 	bl	16e18 <fatfs_find_next_cluster>
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    f9a8:	e1540007 	cmp	r4, r7
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
    f9ac:	e1a05000 	mov	r5, r0
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    f9b0:	1afffff8 	bne	f998 <fatfs_sector_reader.constprop.1+0x48>
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
    f9b4:	e3750001 	cmn	r5, #1
    f9b8:	0a00001f 	beq	fa3c <fatfs_sector_reader.constprop.1+0xec>
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
    f9bc:	e5d6302d 	ldrb	r3, [r6, #45]	; 0x2d
    f9c0:	e3530000 	cmp	r3, #0
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    f9c4:	05963004 	ldreq	r3, [r6, #4]
    f9c8:	02455002 	subeq	r5, r5, #2
    f9cc:	01d622b8 	ldrheq	r2, [r6, #40]	; 0x28
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    f9d0:	12455002 	subne	r5, r5, #2
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    f9d4:	05d60000 	ldrbeq	r0, [r6]
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    f9d8:	15d60000 	ldrbne	r0, [r6]
    f9dc:	15963004 	ldrne	r3, [r6, #4]
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    f9e0:	00833222 	addeq	r3, r3, r2, lsr #4
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    f9e4:	e0203590 	mla	r0, r0, r5, r3
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
    f9e8:	e0880000 	add	r0, r8, r0

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
    f9ec:	e3a03d81 	mov	r3, #8256	; 0x2040
    f9f0:	e7962003 	ldr	r2, [r6, r3]
    f9f4:	e1500002 	cmp	r0, r2
    f9f8:	0a000005 	beq	fa14 <fatfs_sector_reader.constprop.1+0xc4>
    {
        fs->currentsector.address = lba;
    f9fc:	e7860003 	str	r0, [r6, r3]
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    fa00:	e2861040 	add	r1, r6, #64	; 0x40
    fa04:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    fa08:	e3a02001 	mov	r2, #1
    fa0c:	e12fff33 	blx	r3
    fa10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }
    else
        return 1;
    fa14:	e3a00001 	mov	r0, #1
}
    fa18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
    fa1c:	e5903010 	ldr	r3, [r0, #16]
    fa20:	e1530002 	cmp	r3, r2
    fa24:	9a000004 	bls	fa3c <fatfs_sector_reader.constprop.1+0xec>
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
    fa28:	e590000c 	ldr	r0, [r0, #12]
    fa2c:	e596301c 	ldr	r3, [r6, #28]
    fa30:	e0800003 	add	r0, r0, r3
    fa34:	e0800002 	add	r0, r0, r2
    fa38:	eaffffeb 	b	f9ec <fatfs_sector_reader.constprop.1+0x9c>
        else
            return 0;
    fa3c:	e3a00000 	mov	r0, #0
    fa40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000fa44 <fatfs_init>:
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fa44:	e3e02000 	mvn	r2, #0
    fa48:	e3a03d81 	mov	r3, #8256	; 0x2040

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
    fa4c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fs->currentsector.dirty = 0;
    fa50:	e3a05000 	mov	r5, #0
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fa54:	e7802003 	str	r2, [r0, r3]
    fs->currentsector.dirty = 0;
    fa58:	e2833004 	add	r3, r3, #4

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
    fa5c:	e1a04000 	mov	r4, r0
    fa60:	e24dd024 	sub	sp, sp, #36	; 0x24
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fs->currentsector.dirty = 0;
    fa64:	e7805003 	str	r5, [r0, r3]

    fs->next_free_cluster = 0; // Invalid
    fa68:	e5805024 	str	r5, [r0, #36]	; 0x24

    fatfs_fat_init(fs);
    fa6c:	eb001b8d 	bl	168a8 <fatfs_fat_init>

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
    fa70:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    fa74:	e1530005 	cmp	r3, r5
    fa78:	0a0000b0 	beq	fd40 <fatfs_init+0x2fc>

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
    fa7c:	e2846040 	add	r6, r4, #64	; 0x40
    fa80:	e1a00005 	mov	r0, r5
    fa84:	e1a01006 	mov	r1, r6
    fa88:	e3a02001 	mov	r2, #1
    fa8c:	e12fff33 	blx	r3
    fa90:	e3500000 	cmp	r0, #0
    fa94:	0a0000a9 	beq	fd40 <fatfs_init+0x2fc>
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
    fa98:	e300323e 	movw	r3, #574	; 0x23e
    fa9c:	e30a2a55 	movw	r2, #43605	; 0xaa55
    faa0:	e19430b3 	ldrh	r3, [r4, r3]
    faa4:	e1530002 	cmp	r3, r2
    faa8:	1a0000a2 	bne	fd38 <fatfs_init+0x2f4>
        return FAT_INIT_INVALID_SIGNATURE;

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
    faac:	e5d4123f 	ldrb	r1, [r4, #575]	; 0x23f
    fab0:	e5d4223e 	ldrb	r2, [r4, #574]	; 0x23e
    fab4:	e0822401 	add	r2, r2, r1, lsl #8
    fab8:	e1520003 	cmp	r2, r3
    fabc:	1a0000a1 	bne	fd48 <fatfs_init+0x304>
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
    fac0:	e5d43202 	ldrb	r3, [r4, #514]	; 0x202
    fac4:	e353000f 	cmp	r3, #15
    fac8:	8a00008e 	bhi	fd08 <fatfs_init+0x2c4>
    facc:	e6af1073 	sxtb	r1, r3
    fad0:	e3a02000 	mov	r2, #0
    fad4:	e340261b 	movt	r2, #1563	; 0x61b
    fad8:	e1b02112 	lsls	r2, r2, r1
    fadc:	4a00008c 	bmi	fd14 <fatfs_init+0x2d0>
    fae0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    fae4:	e1b02112 	lsls	r2, r2, r1
    // Read LBA Begin for the file system
    if (valid_partition)
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
    fae8:	41a00005 	movmi	r0, r5
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
    faec:	5a000085 	bpl	fd08 <fatfs_init+0x2c4>
    faf0:	e584001c 	str	r0, [r4, #28]
    else
        fs->lba_begin = 0;

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
    faf4:	e1a01006 	mov	r1, r6
    faf8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    fafc:	e3a02001 	mov	r2, #1
    fb00:	e12fff33 	blx	r3
    fb04:	e3500000 	cmp	r0, #0
    fb08:	0a00008c 	beq	fd40 <fatfs_init+0x2fc>
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
    fb0c:	e5d4204c 	ldrb	r2, [r4, #76]	; 0x4c
    fb10:	e5d4304b 	ldrb	r3, [r4, #75]	; 0x4b
    fb14:	e0833402 	add	r3, r3, r2, lsl #8
    fb18:	e3530c02 	cmp	r3, #512	; 0x200
    fb1c:	1a00008b 	bne	fd50 <fatfs_init+0x30c>
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    fb20:	e5d4304f 	ldrb	r3, [r4, #79]	; 0x4f
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
    fb24:	e5d41052 	ldrb	r1, [r4, #82]	; 0x52

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
    fb28:	e5d40057 	ldrb	r0, [r4, #87]	; 0x57
    fb2c:	e5d42056 	ldrb	r2, [r4, #86]	; 0x56
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    fb30:	e1a03403 	lsl	r3, r3, #8
    fb34:	e5d4b04e 	ldrb	r11, [r4, #78]	; 0x4e
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
    fb38:	e1a01401 	lsl	r1, r1, #8
    fb3c:	e5d45051 	ldrb	r5, [r4, #81]	; 0x51
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    fb40:	e58d3010 	str	r3, [sp, #16]
    fb44:	e59dc010 	ldr	r12, [sp, #16]
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
    fb48:	e0922400 	adds	r2, r2, r0, lsl #8

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
    fb4c:	e58d1014 	str	r1, [sp, #20]
    fb50:	e59d6014 	ldr	r6, [sp, #20]
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    fb54:	e08b000c 	add	r0, r11, r12
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fb58:	05d4c066 	ldrbeq	r12, [r4, #102]	; 0x66

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
    fb5c:	e58d500c 	str	r5, [sp, #12]

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    fb60:	11a0c002 	movne	r12, r2

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
    fb64:	e0853006 	add	r3, r5, r6

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fb68:	05d46067 	ldrbeq	r6, [r4, #103]	; 0x67
    fb6c:	05d45064 	ldrbeq	r5, [r4, #100]	; 0x64

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
    fb70:	e6ff3073 	uxth	r3, r3

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fb74:	01a0c80c 	lsleq	r12, r12, #16

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fb78:	e5d4a06e 	ldrb	r10, [r4, #110]	; 0x6e
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
    fb7c:	e5d4923e 	ldrb	r9, [r4, #574]	; 0x23e
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    fb80:	e6ff0070 	uxth	r0, r0
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fb84:	008ccc06 	addeq	r12, r12, r6, lsl #24
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
    fb88:	e5d4623f 	ldrb	r6, [r4, #575]	; 0x23f
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
    fb8c:	e58d2018 	str	r2, [sp, #24]
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fb90:	008cc005 	addeq	r12, r12, r5

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fb94:	e5d4506f 	ldrb	r5, [r4, #111]	; 0x6f
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
    fb98:	e58d6008 	str	r6, [sp, #8]
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fb9c:	e1a0a80a 	lsl	r10, r10, #16
    fba0:	e5d4606d 	ldrb	r6, [r4, #109]	; 0x6d
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fba4:	05d42065 	ldrbeq	r2, [r4, #101]	; 0x65

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fba8:	e5d4806c 	ldrb	r8, [r4, #108]	; 0x6c
    fbac:	e08aac05 	add	r10, r10, r5, lsl #24
    fbb0:	e58d601c 	str	r6, [sp, #28]
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
    fbb4:	e5d46071 	ldrb	r6, [r4, #113]	; 0x71
    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    fbb8:	e5d4104d 	ldrb	r1, [r4, #77]	; 0x4d
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fbbc:	008cc402 	addeq	r12, r12, r2, lsl #8
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fbc0:	e5d47050 	ldrb	r7, [r4, #80]	; 0x50
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fbc4:	e08a8008 	add	r8, r10, r8
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
    fbc8:	e58d6004 	str	r6, [sp, #4]
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
    fbcc:	e59d6008 	ldr	r6, [sp, #8]

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
    fbd0:	e1c432b8 	strh	r3, [r4, #40]	; 0x28
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
    fbd4:	e1a03283 	lsl	r3, r3, #5
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
    fbd8:	e5d45070 	ldrb	r5, [r4, #112]	; 0x70

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fbdc:	e0020c97 	mul	r2, r7, r12
    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    fbe0:	e5c41000 	strb	r1, [r4]
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
    fbe4:	e2833f7f 	add	r3, r3, #508	; 0x1fc
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
    fbe8:	e0899406 	add	r9, r9, r6, lsl #8
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fbec:	e59d601c 	ldr	r6, [sp, #28]
    fbf0:	e584c020 	str	r12, [r4, #32]
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
    fbf4:	e2833003 	add	r3, r3, #3
    fbf8:	e1a034c3 	asr	r3, r3, #9
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fbfc:	e0888406 	add	r8, r8, r6, lsl #8
    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
    fc00:	e594601c 	ldr	r6, [r4, #28]
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
    fc04:	e5843010 	str	r3, [r4, #16]
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fc08:	e5848008 	str	r8, [r4, #8]
    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
    fc0c:	e080c006 	add	r12, r0, r6
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
    fc10:	e59d6004 	ldr	r6, [sp, #4]

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fc14:	e0820000 	add	r0, r2, r0

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
    fc18:	e082200c 	add	r2, r2, r12
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fc1c:	e584000c 	str	r0, [r4, #12]
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
    fc20:	e584c014 	str	r12, [r4, #20]
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
    fc24:	e0855406 	add	r5, r5, r6, lsl #8
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
    fc28:	e30a6a55 	movw	r6, #43605	; 0xaa55
    fc2c:	e1590006 	cmp	r9, r6

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
    fc30:	e5842004 	str	r2, [r4, #4]
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
    fc34:	e1c451b8 	strh	r5, [r4, #24]
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
    fc38:	1a00003e 	bne	fd38 <fatfs_init+0x2f4>
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
    fc3c:	e59d2018 	ldr	r2, [sp, #24]

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
    fc40:	e59dc014 	ldr	r12, [sp, #20]
    fc44:	e59d000c 	ldr	r0, [sp, #12]

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
    fc48:	e3520000 	cmp	r2, #0
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fc4c:	05d45067 	ldrbeq	r5, [r4, #103]	; 0x67

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
    fc50:	e08c3000 	add	r3, r12, r0

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fc54:	05d4c066 	ldrbeq	r12, [r4, #102]	; 0x66
    fc58:	05d40064 	ldrbeq	r0, [r4, #100]	; 0x64

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    fc5c:	11a0c002 	movne	r12, r2
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fc60:	05d42065 	ldrbeq	r2, [r4, #101]	; 0x65

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
    fc64:	e1a03283 	lsl	r3, r3, #5

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fc68:	01a0c80c 	lsleq	r12, r12, #16

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
    fc6c:	e2833f7f 	add	r3, r3, #508	; 0x1fc
    fc70:	e2833003 	add	r3, r3, #3

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fc74:	008ccc05 	addeq	r12, r12, r5, lsl #24

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
    fc78:	e1a034c3 	asr	r3, r3, #9

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fc7c:	008cc000 	addeq	r12, r12, r0

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
    fc80:	e5d40054 	ldrb	r0, [r4, #84]	; 0x54
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    fc84:	008cc402 	addeq	r12, r12, r2, lsl #8

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
    fc88:	e5d42053 	ldrb	r2, [r4, #83]	; 0x53
    fc8c:	e0920400 	adds	r0, r2, r0, lsl #8
    fc90:	1a000007 	bne	fcb4 <fatfs_init+0x270>
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
    fc94:	e5d40062 	ldrb	r0, [r4, #98]	; 0x62
    fc98:	e5d46063 	ldrb	r6, [r4, #99]	; 0x63
    fc9c:	e5d45060 	ldrb	r5, [r4, #96]	; 0x60
    fca0:	e5d42061 	ldrb	r2, [r4, #97]	; 0x61
    fca4:	e1a00800 	lsl	r0, r0, #16
    fca8:	e0800c06 	add	r0, r0, r6, lsl #24
    fcac:	e0800005 	add	r0, r0, r5
    fcb0:	e0800402 	add	r0, r0, r2, lsl #8

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
    fcb4:	e59d5010 	ldr	r5, [sp, #16]

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
    fcb8:	e3510000 	cmp	r1, #0
    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
    fcbc:	e085200b 	add	r2, r5, r11
#include "fat_misc.h"

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
    fcc0:	e0823003 	add	r3, r2, r3
    fcc4:	e0233c97 	mla	r3, r7, r12, r3
    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
    fcc8:	e0630000 	rsb	r0, r3, r0

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
    fccc:	0a000021 	beq	fd58 <fatfs_init+0x314>
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
    fcd0:	eb002319 	bl	1893c <__aeabi_uidiv>

        if(count_of_clusters < 4085)
    fcd4:	e3003ff4 	movw	r3, #4084	; 0xff4
    fcd8:	e1500003 	cmp	r0, r3
    fcdc:	9a00001d 	bls	fd58 <fatfs_init+0x314>
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
        else if(count_of_clusters < 65525)
    fce0:	e2833a0f 	add	r3, r3, #61440	; 0xf000
    fce4:	e1500003 	cmp	r0, r3
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
    fce8:	93a03000 	movls	r3, #0
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
    fcec:	83a00000 	movhi	r0, #0
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
            return FAT_INIT_OK;
    fcf0:	91a00003 	movls	r0, r3
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
    fcf4:	83a03001 	movhi	r3, #1
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
        else if(count_of_clusters < 65525)
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
    fcf8:	95843008 	strls	r3, [r4, #8]
            return FAT_INIT_OK;
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
    fcfc:	e5c4302d 	strb	r3, [r4, #45]	; 0x2d
            return FAT_INIT_OK;
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
}
    fd00:	e28dd024 	add	sp, sp, #36	; 0x24
    fd04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
        break;
        case 0x00:
            valid_partition = 0;
            break;
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
    fd08:	e3530006 	cmp	r3, #6
    // Read LBA Begin for the file system
    if (valid_partition)
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
    fd0c:	83a00000 	movhi	r0, #0
        break;
        case 0x00:
            valid_partition = 0;
            break;
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
    fd10:	8affff76 	bhi	faf0 <fatfs_init+0xac>
        break;
    }

    // Read LBA Begin for the file system
    if (valid_partition)
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
    fd14:	e5d40208 	ldrb	r0, [r4, #520]	; 0x208
    fd18:	e5d42209 	ldrb	r2, [r4, #521]	; 0x209
    fd1c:	e5d43206 	ldrb	r3, [r4, #518]	; 0x206
    fd20:	e5d45207 	ldrb	r5, [r4, #519]	; 0x207
    fd24:	e1a00800 	lsl	r0, r0, #16
    fd28:	e0800c02 	add	r0, r0, r2, lsl #24
    fd2c:	e0800003 	add	r0, r0, r3
    fd30:	e0800405 	add	r0, r0, r5, lsl #8
    fd34:	eaffff6d 	b	faf0 <fatfs_init+0xac>
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
        return FAT_INIT_INVALID_SIGNATURE;
    fd38:	e3e00002 	mvn	r0, #2
    fd3c:	eaffffef 	b	fd00 <fatfs_init+0x2bc>

    fatfs_fat_init(fs);

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
    fd40:	e3e00000 	mvn	r0, #0
    fd44:	eaffffed 	b	fd00 <fatfs_init+0x2bc>
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
        return FAT_INIT_INVALID_SIGNATURE;

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
        return FAT_INIT_ENDIAN_ERROR;
    fd48:	e3e00003 	mvn	r0, #3
    fd4c:	eaffffeb 	b	fd00 <fatfs_init+0x2bc>
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;
    fd50:	e3e00001 	mvn	r0, #1
    fd54:	eaffffe9 	b	fd00 <fatfs_init+0x2bc>
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
    fd58:	e3e00004 	mvn	r0, #4
    fd5c:	eaffffe7 	b	fd00 <fatfs_init+0x2bc>

0000fd60 <fatfs_lba_of_cluster>:
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
    fd60:	e5d0302d 	ldrb	r3, [r0, #45]	; 0x2d
    fd64:	e3530000 	cmp	r3, #0
    fd68:	0a000004 	beq	fd80 <fatfs_lba_of_cluster+0x20>
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    fd6c:	e5d02000 	ldrb	r2, [r0]
    fd70:	e2411002 	sub	r1, r1, #2
    fd74:	e5903004 	ldr	r3, [r0, #4]
    fd78:	e0203192 	mla	r0, r2, r1, r3
}
    fd7c:	e12fff1e 	bx	lr
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    fd80:	e1d022b8 	ldrh	r2, [r0, #40]	; 0x28
    fd84:	e2411002 	sub	r1, r1, #2
    fd88:	e5903004 	ldr	r3, [r0, #4]
    fd8c:	e5d00000 	ldrb	r0, [r0]
    fd90:	e0833222 	add	r3, r3, r2, lsr #4
    fd94:	e0203190 	mla	r0, r0, r1, r3
    fd98:	e12fff1e 	bx	lr

0000fd9c <fatfs_sector_read>:
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
    return fs->disk_io.read_media(lba, target, count);
    fd9c:	e590c030 	ldr	r12, [r0, #48]	; 0x30
    fda0:	e1a00001 	mov	r0, r1
}
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
    fda4:	e92d4008 	push	{r3, lr}
    return fs->disk_io.read_media(lba, target, count);
    fda8:	e1a01002 	mov	r1, r2
    fdac:	e1a02003 	mov	r2, r3
    fdb0:	e12fff3c 	blx	r12
}
    fdb4:	e8bd8008 	pop	{r3, pc}

0000fdb8 <fatfs_sector_write>:
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
    return fs->disk_io.write_media(lba, target, count);
    fdb8:	e590c034 	ldr	r12, [r0, #52]	; 0x34
    fdbc:	e1a00001 	mov	r0, r1
}
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
    fdc0:	e92d4008 	push	{r3, lr}
    return fs->disk_io.write_media(lba, target, count);
    fdc4:	e1a01002 	mov	r1, r2
    fdc8:	e1a02003 	mov	r2, r3
    fdcc:	e12fff3c 	blx	r12
}
    fdd0:	e8bd8008 	pop	{r3, pc}

0000fdd4 <fatfs_sector_reader>:
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
    fdd4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    fdd8:	e1a08001 	mov	r8, r1
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    fddc:	e5d0102d 	ldrb	r1, [r0, #45]	; 0x2d
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
    fde0:	e1a05000 	mov	r5, r0
    fde4:	e1a04002 	mov	r4, r2
    fde8:	e1a0a003 	mov	r10, r3
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    fdec:	e3510000 	cmp	r1, #0
    fdf0:	1a000001 	bne	fdfc <fatfs_sector_reader+0x28>
    fdf4:	e3580000 	cmp	r8, #0
    fdf8:	0a00002e 	beq	feb8 <fatfs_sector_reader+0xe4>
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
    fdfc:	e5d57000 	ldrb	r7, [r5]
    fe00:	e1a00004 	mov	r0, r4
    fe04:	e1a01007 	mov	r1, r7
    fe08:	eb0022cb 	bl	1893c <__aeabi_uidiv>
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    fe0c:	e3500000 	cmp	r0, #0
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
    fe10:	e1a06000 	mov	r6, r0
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    fe14:	e1a01008 	mov	r1, r8
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
    fe18:	e0674097 	mls	r7, r7, r0, r4

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    fe1c:	0a000006 	beq	fe3c <fatfs_sector_reader+0x68>
    fe20:	e3a04000 	mov	r4, #0
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
    fe24:	e1a00005 	mov	r0, r5
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    fe28:	e2844001 	add	r4, r4, #1
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
    fe2c:	eb001bf9 	bl	16e18 <fatfs_find_next_cluster>
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    fe30:	e1540006 	cmp	r4, r6
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
    fe34:	e1a01000 	mov	r1, r0
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
    fe38:	1afffff9 	bne	fe24 <fatfs_sector_reader+0x50>
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
    fe3c:	e3710001 	cmn	r1, #1
    fe40:	0a000024 	beq	fed8 <fatfs_sector_reader+0x104>
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
    fe44:	e5d5302d 	ldrb	r3, [r5, #45]	; 0x2d
    fe48:	e3530000 	cmp	r3, #0
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    fe4c:	05953004 	ldreq	r3, [r5, #4]
    fe50:	02411002 	subeq	r1, r1, #2
    fe54:	01d522b8 	ldrheq	r2, [r5, #40]	; 0x28
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    fe58:	12411002 	subne	r1, r1, #2
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    fe5c:	05d50000 	ldrbeq	r0, [r5]
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    fe60:	15d50000 	ldrbne	r0, [r5]
    fe64:	15953004 	ldrne	r3, [r5, #4]
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    fe68:	00833222 	addeq	r3, r3, r2, lsr #4
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    fe6c:	e0203190 	mla	r0, r0, r1, r3
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
    fe70:	e0870000 	add	r0, r7, r0
    }

    // User provided target array
    if (target)
    fe74:	e35a0000 	cmp	r10, #0
    fe78:	0a000004 	beq	fe90 <fatfs_sector_reader+0xbc>
        return fs->disk_io.read_media(lba, target, 1);
    fe7c:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    fe80:	e1a0100a 	mov	r1, r10
    fe84:	e3a02001 	mov	r2, #1
    fe88:	e12fff33 	blx	r3
    fe8c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
    fe90:	e3a03d81 	mov	r3, #8256	; 0x2040
    fe94:	e7952003 	ldr	r2, [r5, r3]
    fe98:	e1520000 	cmp	r2, r0
    fe9c:	0a00000f 	beq	fee0 <fatfs_sector_reader+0x10c>
    {
        fs->currentsector.address = lba;
    fea0:	e7850003 	str	r0, [r5, r3]
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    fea4:	e2851040 	add	r1, r5, #64	; 0x40
    fea8:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    feac:	e3a02001 	mov	r2, #1
    feb0:	e12fff33 	blx	r3
    feb4:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
    feb8:	e5903010 	ldr	r3, [r0, #16]
    febc:	e1530002 	cmp	r3, r2
    fec0:	9a000004 	bls	fed8 <fatfs_sector_reader+0x104>
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
    fec4:	e590000c 	ldr	r0, [r0, #12]
    fec8:	e595301c 	ldr	r3, [r5, #28]
    fecc:	e0800003 	add	r0, r0, r3
    fed0:	e0800002 	add	r0, r0, r2
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
    fed4:	eaffffe6 	b	fe74 <fatfs_sector_reader+0xa0>
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
    fed8:	e3a00000 	mov	r0, #0
    fedc:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
    {
        fs->currentsector.address = lba;
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    }
    else
        return 1;
    fee0:	e3a00001 	mov	r0, #1
}
    fee4:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

0000fee8 <fatfs_read_sector>:
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
    fee8:	e1a0c000 	mov	r12, r0
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
    feec:	e5d0002d 	ldrb	r0, [r0, #45]	; 0x2d
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
    fef0:	e92d4010 	push	{r4, lr}
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
    fef4:	e3500000 	cmp	r0, #0
    fef8:	0a00000b 	beq	ff2c <fatfs_read_sector+0x44>
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
    fefc:	e3530000 	cmp	r3, #0
    ff00:	0a000024 	beq	ff98 <fatfs_read_sector+0xb0>
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    ff04:	e5dc0000 	ldrb	r0, [r12]
    ff08:	e2411002 	sub	r1, r1, #2
    ff0c:	e59ce004 	ldr	lr, [r12, #4]
    ff10:	e020e190 	mla	r0, r0, r1, lr
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
    ff14:	e59cc030 	ldr	r12, [r12, #48]	; 0x30
    ff18:	e0800002 	add	r0, r0, r2
    ff1c:	e1a01003 	mov	r1, r3
    ff20:	e3a02001 	mov	r2, #1
    ff24:	e12fff3c 	blx	r12
    ff28:	e8bd8010 	pop	{r4, pc}
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
    ff2c:	e3510000 	cmp	r1, #0
    ff30:	0a000008 	beq	ff58 <fatfs_read_sector+0x70>
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
    ff34:	e3530000 	cmp	r3, #0
    ff38:	0a000023 	beq	ffcc <fatfs_read_sector+0xe4>
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    ff3c:	e1dc42b8 	ldrh	r4, [r12, #40]	; 0x28
    ff40:	e2411002 	sub	r1, r1, #2
    ff44:	e59ce004 	ldr	lr, [r12, #4]
    ff48:	e5dc0000 	ldrb	r0, [r12]
    ff4c:	e08ee224 	add	lr, lr, r4, lsr #4
    ff50:	e020e190 	mla	r0, r0, r1, lr
    ff54:	eaffffee 	b	ff14 <fatfs_read_sector+0x2c>
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
    ff58:	e59c0010 	ldr	r0, [r12, #16]
    ff5c:	e1500002 	cmp	r0, r2
    ff60:	9a00000a 	bls	ff90 <fatfs_read_sector+0xa8>
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
    ff64:	e59c000c 	ldr	r0, [r12, #12]
        else
            return 0;

        // User target buffer passed in
        if (target)
    ff68:	e3530000 	cmp	r3, #0
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
    ff6c:	e59c101c 	ldr	r1, [r12, #28]
    ff70:	e0800001 	add	r0, r0, r1
    ff74:	e0800002 	add	r0, r0, r2
        else
            return 0;

        // User target buffer passed in
        if (target)
    ff78:	0a00001a 	beq	ffe8 <fatfs_read_sector+0x100>
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
    ff7c:	e59cc030 	ldr	r12, [r12, #48]	; 0x30
    ff80:	e1a01003 	mov	r1, r3
    ff84:	e3a02001 	mov	r2, #1
    ff88:	e12fff3c 	blx	r12
    ff8c:	e8bd8010 	pop	{r4, pc}

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
    ff90:	e1a00001 	mov	r0, r1
    ff94:	e8bd8010 	pop	{r4, pc}
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
    ff98:	e5dc0000 	ldrb	r0, [r12]
    ff9c:	e2411002 	sub	r1, r1, #2
    ffa0:	e59c3004 	ldr	r3, [r12, #4]
    ffa4:	e0213190 	mla	r1, r0, r1, r3
            return fs->disk_io.read_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
    ffa8:	e0812002 	add	r2, r1, r2

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    ffac:	e59c3030 	ldr	r3, [r12, #48]	; 0x30
            return fs->disk_io.read_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
    ffb0:	e3a01d81 	mov	r1, #8256	; 0x2040

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    ffb4:	e1a00002 	mov	r0, r2
            return fs->disk_io.read_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
    ffb8:	e78c2001 	str	r2, [r12, r1]

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    ffbc:	e28c1040 	add	r1, r12, #64	; 0x40
    ffc0:	e3a02001 	mov	r2, #1
    ffc4:	e12fff33 	blx	r3
    ffc8:	e8bd8010 	pop	{r4, pc}
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    ffcc:	e1dce2b8 	ldrh	lr, [r12, #40]	; 0x28
    ffd0:	e2411002 	sub	r1, r1, #2
    ffd4:	e59c3004 	ldr	r3, [r12, #4]
    ffd8:	e5dc0000 	ldrb	r0, [r12]
    ffdc:	e083322e 	add	r3, r3, lr, lsr #4
    ffe0:	e0213190 	mla	r1, r0, r1, r3
    ffe4:	eaffffef 	b	ffa8 <fatfs_read_sector+0xc0>
            return fs->disk_io.read_media(lba, target, 1);
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
    ffe8:	e3a02d81 	mov	r2, #8256	; 0x2040

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    ffec:	e59c3030 	ldr	r3, [r12, #48]	; 0x30
            return fs->disk_io.read_media(lba, target, 1);
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
    fff0:	e78c0002 	str	r0, [r12, r2]

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    fff4:	e28c1040 	add	r1, r12, #64	; 0x40
    fff8:	e3a02001 	mov	r2, #1
    fffc:	e12fff33 	blx	r3
   10000:	e8bd8010 	pop	{r4, pc}

00010004 <fatfs_write_sector>:
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   10004:	e92d4038 	push	{r3, r4, r5, lr}
   10008:	e1a0c000 	mov	r12, r0
    // No write access?
    if (!fs->disk_io.write_media)
   1000c:	e5904034 	ldr	r4, [r0, #52]	; 0x34
   10010:	e3540000 	cmp	r4, #0
   10014:	0a000023 	beq	100a8 <fatfs_write_sector+0xa4>
        return 0;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   10018:	e5d0002d 	ldrb	r0, [r0, #45]	; 0x2d
   1001c:	e3500000 	cmp	r0, #0
   10020:	1a00002b 	bne	100d4 <fatfs_write_sector+0xd0>
   10024:	e3510000 	cmp	r1, #0
   10028:	0a00000c 	beq	10060 <fatfs_write_sector+0x5c>
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1002c:	e3530000 	cmp	r3, #0
   10030:	0a00001e 	beq	100b0 <fatfs_write_sector+0xac>
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   10034:	e1dc52b8 	ldrh	r5, [r12, #40]	; 0x28
   10038:	e2411002 	sub	r1, r1, #2
   1003c:	e59ce004 	ldr	lr, [r12, #4]
   10040:	e5dc0000 	ldrb	r0, [r12]
   10044:	e08ec225 	add	r12, lr, r5, lsr #4
   10048:	e020c190 	mla	r0, r0, r1, r12
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1004c:	e0800002 	add	r0, r0, r2
   10050:	e1a01003 	mov	r1, r3
   10054:	e3a02001 	mov	r2, #1
   10058:	e12fff34 	blx	r4
   1005c:	e8bd8038 	pop	{r3, r4, r5, pc}
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
   10060:	e59c0010 	ldr	r0, [r12, #16]
   10064:	e1500002 	cmp	r0, r2
   10068:	9a00000c 	bls	100a0 <fatfs_write_sector+0x9c>
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1006c:	e59c000c 	ldr	r0, [r12, #12]
        else
            return 0;

        // User target buffer passed in
        if (target)
   10070:	e3530000 	cmp	r3, #0
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   10074:	e59c101c 	ldr	r1, [r12, #28]
   10078:	e0801001 	add	r1, r0, r1
   1007c:	e0812002 	add	r2, r1, r2

        // User target buffer passed in
        if (target)
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   10080:	e1a00002 	mov	r0, r2
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;

        // User target buffer passed in
        if (target)
   10084:	1afffff1 	bne	10050 <fatfs_write_sector+0x4c>
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   10088:	e3a03d81 	mov	r3, #8256	; 0x2040

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1008c:	e28c1040 	add	r1, r12, #64	; 0x40
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   10090:	e78c2003 	str	r2, [r12, r3]

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   10094:	e3a02001 	mov	r2, #1
   10098:	e12fff34 	blx	r4
   1009c:	e8bd8038 	pop	{r3, r4, r5, pc}
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
   100a0:	e1a00001 	mov	r0, r1
   100a4:	e8bd8038 	pop	{r3, r4, r5, pc}
   100a8:	e1a00004 	mov	r0, r4
   100ac:	e8bd8038 	pop	{r3, r4, r5, pc}
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   100b0:	e1dce2b8 	ldrh	lr, [r12, #40]	; 0x28
   100b4:	e2411002 	sub	r1, r1, #2
   100b8:	e59c3004 	ldr	r3, [r12, #4]
   100bc:	e5dc0000 	ldrb	r0, [r12]
   100c0:	e083322e 	add	r3, r3, lr, lsr #4
   100c4:	e0213190 	mla	r1, r0, r1, r3
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   100c8:	e0812002 	add	r2, r1, r2

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   100cc:	e1a00002 	mov	r0, r2
   100d0:	eaffffec 	b	10088 <fatfs_write_sector+0x84>
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   100d4:	e3530000 	cmp	r3, #0
   100d8:	0a000004 	beq	100f0 <fatfs_write_sector+0xec>
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   100dc:	e5dc0000 	ldrb	r0, [r12]
   100e0:	e2411002 	sub	r1, r1, #2
   100e4:	e59cc004 	ldr	r12, [r12, #4]
   100e8:	e020c190 	mla	r0, r0, r1, r12
   100ec:	eaffffd6 	b	1004c <fatfs_write_sector+0x48>
   100f0:	e5dc0000 	ldrb	r0, [r12]
   100f4:	e2411002 	sub	r1, r1, #2
   100f8:	e59c3004 	ldr	r3, [r12, #4]
   100fc:	e0213190 	mla	r1, r0, r1, r3
   10100:	eafffff0 	b	100c8 <fatfs_write_sector+0xc4>

00010104 <fatfs_show_details>:
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
   10104:	e92d4010 	push	{r4, lr}
   10108:	e1a04000 	mov	r4, r0
    FAT_PRINTF(("FAT details:\r\n"));
   1010c:	e30206cc 	movw	r0, #9932	; 0x26cc
   10110:	e3400002 	movt	r0, #2
   10114:	ebffc0ce 	bl	454 <print_debug>
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
   10118:	e5d4102d 	ldrb	r1, [r4, #45]	; 0x2d
   1011c:	e30226c4 	movw	r2, #9924	; 0x26c4
   10120:	e30236bc 	movw	r3, #9916	; 0x26bc
   10124:	e3402002 	movt	r2, #2
   10128:	e3403002 	movt	r3, #2
   1012c:	e30206dc 	movw	r0, #9948	; 0x26dc
   10130:	e3510001 	cmp	r1, #1
   10134:	e3400002 	movt	r0, #2
   10138:	11a01002 	movne	r1, r2
   1013c:	01a01003 	moveq	r1, r3
   10140:	ebffc0c3 	bl	454 <print_debug>
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
   10144:	e30206e8 	movw	r0, #9960	; 0x26e8
   10148:	e5941008 	ldr	r1, [r4, #8]
   1014c:	e3400002 	movt	r0, #2
   10150:	ebffc0bf 	bl	454 <print_debug>
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
   10154:	e3020708 	movw	r0, #9992	; 0x2708
   10158:	e5941014 	ldr	r1, [r4, #20]
   1015c:	e3400002 	movt	r0, #2
   10160:	ebffc0bb 	bl	454 <print_debug>
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
   10164:	e3020720 	movw	r0, #10016	; 0x2720
   10168:	e5941004 	ldr	r1, [r4, #4]
   1016c:	e3400002 	movt	r0, #2
   10170:	ebffc0b7 	bl	454 <print_debug>
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
   10174:	e302073c 	movw	r0, #10044	; 0x273c
   10178:	e5d41000 	ldrb	r1, [r4]
   1017c:	e3400002 	movt	r0, #2
}
   10180:	e8bd4010 	pop	{r4, lr}
    FAT_PRINTF(("FAT details:\r\n"));
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
   10184:	eaffc0b2 	b	454 <print_debug>

00010188 <fatfs_get_root_cluster>:
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
}
   10188:	e5900008 	ldr	r0, [r0, #8]
   1018c:	e12fff1e 	bx	lr

00010190 <fatfs_get_file_entry>:
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
   10190:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   10194:	e24ddf4b 	sub	sp, sp, #300	; 0x12c
   10198:	e1a0a002 	mov	r10, r2
   1019c:	e1a06000 	mov	r6, r0
   101a0:	e1a09001 	mov	r9, r1
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
   101a4:	e28d0020 	add	r0, sp, #32
   101a8:	e3a01001 	mov	r1, #1
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
    uint8 item=0;
    uint16 recordoffset = 0;
    uint8 i=0;
    int x=0;
   101ac:	e3a0b000 	mov	r11, #0
}
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
   101b0:	e58d300c 	str	r3, [sp, #12]
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
   101b4:	eb00140a 	bl	151e4 <fatfs_lfn_cache_init>
   101b8:	e1a0300a 	mov	r3, r10
   101bc:	e1a0a00b 	mov	r10, r11
   101c0:	e1a0b003 	mov	r11, r3

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   101c4:	e1a0200a 	mov	r2, r10
   101c8:	e1a00006 	mov	r0, r6
   101cc:	e1a01009 	mov	r1, r9
   101d0:	e28aa001 	add	r10, r10, #1
   101d4:	ebfffddd 	bl	f950 <fatfs_sector_reader.constprop.1>
   101d8:	e3500000 	cmp	r0, #0
   101dc:	0a00005d 	beq	10358 <fatfs_get_file_entry+0x1c8>
   101e0:	e3a04000 	mov	r4, #0
   101e4:	ea000005 	b	10200 <fatfs_get_file_entry+0x70>
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   101e8:	e28d0020 	add	r0, sp, #32
   101ec:	e1a01005 	mov	r1, r5
   101f0:	eb001415 	bl	1524c <fatfs_lfn_cache_entry>
   101f4:	e2844020 	add	r4, r4, #32
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   101f8:	e3540c02 	cmp	r4, #512	; 0x200
   101fc:	0afffff0 	beq	101c4 <fatfs_get_file_entry+0x34>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10200:	e2848040 	add	r8, r4, #64	; 0x40
   10204:	e0865008 	add	r5, r6, r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10208:	e1a00005 	mov	r0, r5
   1020c:	eb00149e 	bl	1548c <fatfs_entry_lfn_text>
   10210:	e3500000 	cmp	r0, #0
   10214:	1afffff3 	bne	101e8 <fatfs_get_file_entry+0x58>
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10218:	e1a00005 	mov	r0, r5
   1021c:	eb0014a0 	bl	154a4 <fatfs_entry_lfn_invalid>
   10220:	e3500000 	cmp	r0, #0
   10224:	1a00000a 	bne	10254 <fatfs_get_file_entry+0xc4>
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   10228:	e28d0020 	add	r0, sp, #32
   1022c:	e1a01005 	mov	r1, r5
   10230:	eb0014a8 	bl	154d8 <fatfs_entry_lfn_exists>
   10234:	e2507000 	subs	r7, r0, #0
   10238:	0a000009 	beq	10264 <fatfs_get_file_entry+0xd4>
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1023c:	e28d0020 	add	r0, sp, #32
   10240:	eb001484 	bl	15458 <fatfs_lfn_cache_get>

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
   10244:	e1a0100b 	mov	r1, r11
   10248:	eb0017ff 	bl	1624c <fatfs_compare_names>
   1024c:	e3500000 	cmp	r0, #0
   10250:	1a00002e 	bne	10310 <fatfs_get_file_entry+0x180>
                if (fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);
   10254:	e28d0020 	add	r0, sp, #32
   10258:	e3a01000 	mov	r1, #0
   1025c:	eb0013e0 	bl	151e4 <fatfs_lfn_cache_init>
   10260:	eaffffe3 	b	101f4 <fatfs_get_file_entry+0x64>
                    fatfs_lfn_cache_init(&lfn, 0);
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   10264:	e1a00005 	mov	r0, r5
   10268:	eb0014ae 	bl	15528 <fatfs_entry_sfn_only>
   1026c:	e3500000 	cmp	r0, #0
   10270:	0affffdf 	beq	101f4 <fatfs_get_file_entry+0x64>
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
   10274:	e5d51005 	ldrb	r1, [r5, #5]
   10278:	e5d5c003 	ldrb	r12, [r5, #3]

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1027c:	e5d53009 	ldrb	r3, [r5, #9]
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
   10280:	e58d1000 	str	r1, [sp]
   10284:	e5d51006 	ldrb	r1, [r5, #6]
   10288:	e5d50004 	ldrb	r0, [r5, #4]
                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
                        if (directoryEntry->Name[i] != ' ')
   1028c:	e3530020 	cmp	r3, #32
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
   10290:	e5cdc013 	strb	r12, [sp, #19]
   10294:	e58d1004 	str	r1, [sp, #4]
   10298:	e5d51007 	ldrb	r1, [r5, #7]
   1029c:	e59dc000 	ldr	r12, [sp]
   102a0:	e7d62008 	ldrb	r2, [r6, r8]
   102a4:	e58d1008 	str	r1, [sp, #8]
   102a8:	e5d58001 	ldrb	r8, [r5, #1]
   102ac:	e5d5e002 	ldrb	lr, [r5, #2]

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   102b0:	e5d51008 	ldrb	r1, [r5, #8]
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
   102b4:	e5cd0014 	strb	r0, [sp, #20]
   102b8:	e5cdc015 	strb	r12, [sp, #21]
   102bc:	e99d1001 	ldmib	sp, {r0, r12}

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   102c0:	e5cd301a 	strb	r3, [sp, #26]
   102c4:	e5d5300a 	ldrb	r3, [r5, #10]
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));
   102c8:	e5cd701c 	strb	r7, [sp, #28]

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
   102cc:	e5cd2010 	strb	r2, [sp, #16]
   102d0:	e5cd8011 	strb	r8, [sp, #17]
   102d4:	e5cde012 	strb	lr, [sp, #18]
   102d8:	e5cd0016 	strb	r0, [sp, #22]
   102dc:	e5cdc017 	strb	r12, [sp, #23]

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   102e0:	e5cd1019 	strb	r1, [sp, #25]
   102e4:	15cd301b 	strbne	r3, [sp, #27]
                        if (directoryEntry->Name[i] != ' ')
   102e8:	0a00001c 	beq	10360 <fatfs_get_file_entry+0x1d0>
                    // Dot only required if extension present
                    if (dotRequired)
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
                            short_filename[8] = '.';
   102ec:	e352002e 	cmp	r2, #46	; 0x2e
   102f0:	03a03020 	moveq	r3, #32
   102f4:	13a0302e 	movne	r3, #46	; 0x2e
   102f8:	e5cd3018 	strb	r3, [sp, #24]
                    }
                    else
                        short_filename[8] = ' ';

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
   102fc:	e28d0010 	add	r0, sp, #16
   10300:	e1a0100b 	mov	r1, r11
   10304:	eb0017d0 	bl	1624c <fatfs_compare_names>
   10308:	e3500000 	cmp	r0, #0
   1030c:	0affffd0 	beq	10254 <fatfs_get_file_entry+0xc4>
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   10310:	e595c000 	ldr	r12, [r5]
                        return 1;
   10314:	e3a00001 	mov	r0, #1
                        short_filename[8] = ' ';

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   10318:	e5951004 	ldr	r1, [r5, #4]
   1031c:	e5952008 	ldr	r2, [r5, #8]
   10320:	e595300c 	ldr	r3, [r5, #12]
   10324:	e59d400c 	ldr	r4, [sp, #12]
   10328:	e584c000 	str	r12, [r4]
   1032c:	e5841004 	str	r1, [r4, #4]
   10330:	e5842008 	str	r2, [r4, #8]
   10334:	e584300c 	str	r3, [r4, #12]
   10338:	e595c010 	ldr	r12, [r5, #16]
   1033c:	e5951014 	ldr	r1, [r5, #20]
   10340:	e5952018 	ldr	r2, [r5, #24]
   10344:	e595301c 	ldr	r3, [r5, #28]
   10348:	e584c010 	str	r12, [r4, #16]
   1034c:	e5841014 	str	r1, [r4, #20]
   10350:	e5842018 	str	r2, [r4, #24]
   10354:	e584301c 	str	r3, [r4, #28]
        else
            break;
    } // End of while loop

    return 0;
}
   10358:	e28ddf4b 	add	sp, sp, #300	; 0x12c
   1035c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
                        if (directoryEntry->Name[i] != ' ')
   10360:	e3530020 	cmp	r3, #32

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   10364:	e5cd301b 	strb	r3, [sp, #27]
                        if (directoryEntry->Name[i] != ' ')
   10368:	1affffdf 	bne	102ec <fatfs_get_file_entry+0x15c>
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1036c:	e3510020 	cmp	r1, #32
                            short_filename[8] = '.';
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
   10370:	05cd1018 	strbeq	r1, [sp, #24]
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   10374:	0affffe0 	beq	102fc <fatfs_get_file_entry+0x16c>
   10378:	eaffffdb 	b	102ec <fatfs_get_file_entry+0x15c>

0001037c <fatfs_sfn_exists>:
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1037c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   10380:	e1a04000 	mov	r4, r0
    uint8 item=0;
    uint16 recordoffset = 0;
    int x=0;
   10384:	e3a06000 	mov	r6, #0

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
   10388:	e3a0bd81 	mov	r11, #8256	; 0x2040
    {
        fs->currentsector.address = lba;
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1038c:	e2807040 	add	r7, r0, #64	; 0x40
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10390:	e2808060 	add	r8, r0, #96	; 0x60
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   10394:	e24dd00c 	sub	sp, sp, #12
   10398:	e88d0006 	stm	sp, {r1, r2}
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
   1039c:	e5d4302d 	ldrb	r3, [r4, #45]	; 0x2d

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   103a0:	e1a0a006 	mov	r10, r6
   103a4:	e2866001 	add	r6, r6, #1
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
   103a8:	e3530000 	cmp	r3, #0
   103ac:	1a000071 	bne	10578 <fatfs_sfn_exists+0x1fc>
   103b0:	e59d3000 	ldr	r3, [sp]
   103b4:	e3530000 	cmp	r3, #0
   103b8:	1a00006e 	bne	10578 <fatfs_sfn_exists+0x1fc>
    {
        if (offset < fs->rootdir_sectors)
   103bc:	e5943010 	ldr	r3, [r4, #16]
   103c0:	e15a0003 	cmp	r10, r3
   103c4:	2a00016e 	bcs	10984 <fatfs_sfn_exists+0x608>
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
   103c8:	e594000c 	ldr	r0, [r4, #12]
   103cc:	e594301c 	ldr	r3, [r4, #28]
   103d0:	e0800003 	add	r0, r0, r3
   103d4:	e080000a 	add	r0, r0, r10

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
   103d8:	e794300b 	ldr	r3, [r4, r11]
   103dc:	e1500003 	cmp	r0, r3
   103e0:	0a000006 	beq	10400 <fatfs_sfn_exists+0x84>
    {
        fs->currentsector.address = lba;
   103e4:	e784000b 	str	r0, [r4, r11]
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   103e8:	e1a01007 	mov	r1, r7
   103ec:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   103f0:	e3a02001 	mov	r2, #1
   103f4:	e12fff33 	blx	r3

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   103f8:	e3500000 	cmp	r0, #0
   103fc:	0a000161 	beq	10988 <fatfs_sfn_exists+0x60c>
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10400:	e1a00007 	mov	r0, r7
   10404:	eb001420 	bl	1548c <fatfs_entry_lfn_text>
   10408:	e3500000 	cmp	r0, #0
   1040c:	0a000078 	beq	105f4 <fatfs_sfn_exists+0x278>
   10410:	e1a00008 	mov	r0, r8
   10414:	eb00141c 	bl	1548c <fatfs_entry_lfn_text>
   10418:	e3500000 	cmp	r0, #0
   1041c:	0a000086 	beq	1063c <fatfs_sfn_exists+0x2c0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10420:	e2845080 	add	r5, r4, #128	; 0x80

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10424:	e1a00005 	mov	r0, r5
   10428:	eb001417 	bl	1548c <fatfs_entry_lfn_text>
   1042c:	e3500000 	cmp	r0, #0
   10430:	0a000090 	beq	10678 <fatfs_sfn_exists+0x2fc>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10434:	e28450a0 	add	r5, r4, #160	; 0xa0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10438:	e1a00005 	mov	r0, r5
   1043c:	eb001412 	bl	1548c <fatfs_entry_lfn_text>
   10440:	e3500000 	cmp	r0, #0
   10444:	0a0000a9 	beq	106f0 <fatfs_sfn_exists+0x374>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10448:	e28450c0 	add	r5, r4, #192	; 0xc0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1044c:	e1a00005 	mov	r0, r5
   10450:	eb00140d 	bl	1548c <fatfs_entry_lfn_text>
   10454:	e3500000 	cmp	r0, #0
   10458:	0a000095 	beq	106b4 <fatfs_sfn_exists+0x338>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1045c:	e28450e0 	add	r5, r4, #224	; 0xe0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10460:	e1a00005 	mov	r0, r5
   10464:	eb001408 	bl	1548c <fatfs_entry_lfn_text>
   10468:	e3500000 	cmp	r0, #0
   1046c:	0a000108 	beq	10894 <fatfs_sfn_exists+0x518>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10470:	e2845c01 	add	r5, r4, #256	; 0x100

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10474:	e1a00005 	mov	r0, r5
   10478:	eb001403 	bl	1548c <fatfs_entry_lfn_text>
   1047c:	e3500000 	cmp	r0, #0
   10480:	0a0000f4 	beq	10858 <fatfs_sfn_exists+0x4dc>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10484:	e2845e12 	add	r5, r4, #288	; 0x120

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10488:	e1a00005 	mov	r0, r5
   1048c:	eb0013fe 	bl	1548c <fatfs_entry_lfn_text>
   10490:	e3500000 	cmp	r0, #0
   10494:	0a0000e0 	beq	1081c <fatfs_sfn_exists+0x4a0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10498:	e2845d05 	add	r5, r4, #320	; 0x140

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1049c:	e1a00005 	mov	r0, r5
   104a0:	eb0013f9 	bl	1548c <fatfs_entry_lfn_text>
   104a4:	e3500000 	cmp	r0, #0
   104a8:	0a0000cc 	beq	107e0 <fatfs_sfn_exists+0x464>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   104ac:	e2845e16 	add	r5, r4, #352	; 0x160

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   104b0:	e1a00005 	mov	r0, r5
   104b4:	eb0013f4 	bl	1548c <fatfs_entry_lfn_text>
   104b8:	e3500000 	cmp	r0, #0
   104bc:	0a0000b8 	beq	107a4 <fatfs_sfn_exists+0x428>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   104c0:	e2845d06 	add	r5, r4, #384	; 0x180

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   104c4:	e1a00005 	mov	r0, r5
   104c8:	eb0013ef 	bl	1548c <fatfs_entry_lfn_text>
   104cc:	e3500000 	cmp	r0, #0
   104d0:	0a0000a4 	beq	10768 <fatfs_sfn_exists+0x3ec>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   104d4:	e2845e1a 	add	r5, r4, #416	; 0x1a0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   104d8:	e1a00005 	mov	r0, r5
   104dc:	eb0013ea 	bl	1548c <fatfs_entry_lfn_text>
   104e0:	e3500000 	cmp	r0, #0
   104e4:	0a000090 	beq	1072c <fatfs_sfn_exists+0x3b0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   104e8:	e2845d07 	add	r5, r4, #448	; 0x1c0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   104ec:	e1a00005 	mov	r0, r5
   104f0:	eb0013e5 	bl	1548c <fatfs_entry_lfn_text>
   104f4:	e3500000 	cmp	r0, #0
   104f8:	0a0000f4 	beq	108d0 <fatfs_sfn_exists+0x554>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   104fc:	e2845e1e 	add	r5, r4, #480	; 0x1e0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10500:	e1a00005 	mov	r0, r5
   10504:	eb0013e0 	bl	1548c <fatfs_entry_lfn_text>
   10508:	e3500000 	cmp	r0, #0
   1050c:	0a00010d 	beq	10948 <fatfs_sfn_exists+0x5cc>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10510:	e2845c02 	add	r5, r4, #512	; 0x200

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10514:	e1a00005 	mov	r0, r5
   10518:	eb0013db 	bl	1548c <fatfs_entry_lfn_text>
   1051c:	e3500000 	cmp	r0, #0
   10520:	0a0000f9 	beq	1090c <fatfs_sfn_exists+0x590>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10524:	e2845e22 	add	r5, r4, #544	; 0x220

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10528:	e1a00005 	mov	r0, r5
   1052c:	eb0013d6 	bl	1548c <fatfs_entry_lfn_text>
   10530:	e3500000 	cmp	r0, #0
   10534:	1affff98 	bne	1039c <fatfs_sfn_exists+0x20>
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10538:	e1a00005 	mov	r0, r5
   1053c:	eb0013d8 	bl	154a4 <fatfs_entry_lfn_invalid>
   10540:	e3500000 	cmp	r0, #0
   10544:	1affff94 	bne	1039c <fatfs_sfn_exists+0x20>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   10548:	e1a00005 	mov	r0, r5
   1054c:	eb0013f5 	bl	15528 <fatfs_entry_sfn_only>
   10550:	e3500000 	cmp	r0, #0
   10554:	0affff90 	beq	1039c <fatfs_sfn_exists+0x20>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10558:	e1a00005 	mov	r0, r5
   1055c:	e59d1004 	ldr	r1, [sp, #4]
   10560:	e3a0200b 	mov	r2, #11
   10564:	eb0024d7 	bl	198c8 <strncmp>
   10568:	e3500000 	cmp	r0, #0
   1056c:	1affff8a 	bne	1039c <fatfs_sfn_exists+0x20>
                        return 1;
   10570:	e3a00001 	mov	r0, #1
   10574:	ea000103 	b	10988 <fatfs_sfn_exists+0x60c>
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
   10578:	e5d49000 	ldrb	r9, [r4]
   1057c:	e1a0000a 	mov	r0, r10
   10580:	e1a01009 	mov	r1, r9
   10584:	eb0020ec 	bl	1893c <__aeabi_uidiv>
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   10588:	e3500000 	cmp	r0, #0
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
   1058c:	e1a05000 	mov	r5, r0
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   10590:	e59d1000 	ldr	r1, [sp]
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
   10594:	e06aa099 	mls	r10, r9, r0, r10

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   10598:	0a000006 	beq	105b8 <fatfs_sfn_exists+0x23c>
   1059c:	e3a09000 	mov	r9, #0
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   105a0:	e1a00004 	mov	r0, r4
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   105a4:	e2899001 	add	r9, r9, #1
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   105a8:	eb001a1a 	bl	16e18 <fatfs_find_next_cluster>
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   105ac:	e1590005 	cmp	r9, r5
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   105b0:	e1a01000 	mov	r1, r0
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   105b4:	1afffff9 	bne	105a0 <fatfs_sfn_exists+0x224>
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
   105b8:	e3710001 	cmn	r1, #1
   105bc:	0a0000f0 	beq	10984 <fatfs_sfn_exists+0x608>
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
   105c0:	e5d4302d 	ldrb	r3, [r4, #45]	; 0x2d
   105c4:	e3530000 	cmp	r3, #0
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   105c8:	05943004 	ldreq	r3, [r4, #4]
   105cc:	02411002 	subeq	r1, r1, #2
   105d0:	01d422b8 	ldrheq	r2, [r4, #40]	; 0x28
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   105d4:	12411002 	subne	r1, r1, #2
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   105d8:	05d40000 	ldrbeq	r0, [r4]
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   105dc:	15d40000 	ldrbne	r0, [r4]
   105e0:	15943004 	ldrne	r3, [r4, #4]
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   105e4:	00833222 	addeq	r3, r3, r2, lsr #4
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   105e8:	e0203190 	mla	r0, r0, r1, r3
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
   105ec:	e08a0000 	add	r0, r10, r0
   105f0:	eaffff78 	b	103d8 <fatfs_sfn_exists+0x5c>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   105f4:	e1a00007 	mov	r0, r7
   105f8:	eb0013a9 	bl	154a4 <fatfs_entry_lfn_invalid>
   105fc:	e3500000 	cmp	r0, #0
   10600:	1affff82 	bne	10410 <fatfs_sfn_exists+0x94>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   10604:	e1a00007 	mov	r0, r7
   10608:	eb0013c6 	bl	15528 <fatfs_entry_sfn_only>
   1060c:	e3500000 	cmp	r0, #0
   10610:	0affff7e 	beq	10410 <fatfs_sfn_exists+0x94>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10614:	e1a00007 	mov	r0, r7
   10618:	e59d1004 	ldr	r1, [sp, #4]
   1061c:	e3a0200b 	mov	r2, #11
   10620:	eb0024a8 	bl	198c8 <strncmp>
   10624:	e3500000 	cmp	r0, #0
   10628:	0affffd0 	beq	10570 <fatfs_sfn_exists+0x1f4>
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1062c:	e1a00008 	mov	r0, r8
   10630:	eb001395 	bl	1548c <fatfs_entry_lfn_text>
   10634:	e3500000 	cmp	r0, #0
   10638:	1affff78 	bne	10420 <fatfs_sfn_exists+0xa4>
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1063c:	e1a00008 	mov	r0, r8
   10640:	eb001397 	bl	154a4 <fatfs_entry_lfn_invalid>
   10644:	e3500000 	cmp	r0, #0
   10648:	1affff74 	bne	10420 <fatfs_sfn_exists+0xa4>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1064c:	e1a00008 	mov	r0, r8
   10650:	eb0013b4 	bl	15528 <fatfs_entry_sfn_only>
   10654:	e3500000 	cmp	r0, #0
   10658:	0affff70 	beq	10420 <fatfs_sfn_exists+0xa4>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1065c:	e1a00008 	mov	r0, r8
   10660:	e59d1004 	ldr	r1, [sp, #4]
   10664:	e3a0200b 	mov	r2, #11
   10668:	eb002496 	bl	198c8 <strncmp>
   1066c:	e3500000 	cmp	r0, #0
   10670:	1affff6a 	bne	10420 <fatfs_sfn_exists+0xa4>
   10674:	eaffffbd 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10678:	e1a00005 	mov	r0, r5
   1067c:	eb001388 	bl	154a4 <fatfs_entry_lfn_invalid>
   10680:	e3500000 	cmp	r0, #0
   10684:	1affff6a 	bne	10434 <fatfs_sfn_exists+0xb8>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   10688:	e1a00005 	mov	r0, r5
   1068c:	eb0013a5 	bl	15528 <fatfs_entry_sfn_only>
   10690:	e3500000 	cmp	r0, #0
   10694:	0affff66 	beq	10434 <fatfs_sfn_exists+0xb8>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10698:	e1a00005 	mov	r0, r5
   1069c:	e59d1004 	ldr	r1, [sp, #4]
   106a0:	e3a0200b 	mov	r2, #11
   106a4:	eb002487 	bl	198c8 <strncmp>
   106a8:	e3500000 	cmp	r0, #0
   106ac:	1affff60 	bne	10434 <fatfs_sfn_exists+0xb8>
   106b0:	eaffffae 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   106b4:	e1a00005 	mov	r0, r5
   106b8:	eb001379 	bl	154a4 <fatfs_entry_lfn_invalid>
   106bc:	e3500000 	cmp	r0, #0
   106c0:	1affff65 	bne	1045c <fatfs_sfn_exists+0xe0>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   106c4:	e1a00005 	mov	r0, r5
   106c8:	eb001396 	bl	15528 <fatfs_entry_sfn_only>
   106cc:	e3500000 	cmp	r0, #0
   106d0:	0affff61 	beq	1045c <fatfs_sfn_exists+0xe0>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   106d4:	e1a00005 	mov	r0, r5
   106d8:	e59d1004 	ldr	r1, [sp, #4]
   106dc:	e3a0200b 	mov	r2, #11
   106e0:	eb002478 	bl	198c8 <strncmp>
   106e4:	e3500000 	cmp	r0, #0
   106e8:	1affff5b 	bne	1045c <fatfs_sfn_exists+0xe0>
   106ec:	eaffff9f 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   106f0:	e1a00005 	mov	r0, r5
   106f4:	eb00136a 	bl	154a4 <fatfs_entry_lfn_invalid>
   106f8:	e3500000 	cmp	r0, #0
   106fc:	1affff51 	bne	10448 <fatfs_sfn_exists+0xcc>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   10700:	e1a00005 	mov	r0, r5
   10704:	eb001387 	bl	15528 <fatfs_entry_sfn_only>
   10708:	e3500000 	cmp	r0, #0
   1070c:	0affff4d 	beq	10448 <fatfs_sfn_exists+0xcc>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10710:	e1a00005 	mov	r0, r5
   10714:	e59d1004 	ldr	r1, [sp, #4]
   10718:	e3a0200b 	mov	r2, #11
   1071c:	eb002469 	bl	198c8 <strncmp>
   10720:	e3500000 	cmp	r0, #0
   10724:	1affff47 	bne	10448 <fatfs_sfn_exists+0xcc>
   10728:	eaffff90 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1072c:	e1a00005 	mov	r0, r5
   10730:	eb00135b 	bl	154a4 <fatfs_entry_lfn_invalid>
   10734:	e3500000 	cmp	r0, #0
   10738:	1affff6a 	bne	104e8 <fatfs_sfn_exists+0x16c>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1073c:	e1a00005 	mov	r0, r5
   10740:	eb001378 	bl	15528 <fatfs_entry_sfn_only>
   10744:	e3500000 	cmp	r0, #0
   10748:	0affff66 	beq	104e8 <fatfs_sfn_exists+0x16c>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1074c:	e1a00005 	mov	r0, r5
   10750:	e59d1004 	ldr	r1, [sp, #4]
   10754:	e3a0200b 	mov	r2, #11
   10758:	eb00245a 	bl	198c8 <strncmp>
   1075c:	e3500000 	cmp	r0, #0
   10760:	1affff60 	bne	104e8 <fatfs_sfn_exists+0x16c>
   10764:	eaffff81 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10768:	e1a00005 	mov	r0, r5
   1076c:	eb00134c 	bl	154a4 <fatfs_entry_lfn_invalid>
   10770:	e3500000 	cmp	r0, #0
   10774:	1affff56 	bne	104d4 <fatfs_sfn_exists+0x158>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   10778:	e1a00005 	mov	r0, r5
   1077c:	eb001369 	bl	15528 <fatfs_entry_sfn_only>
   10780:	e3500000 	cmp	r0, #0
   10784:	0affff52 	beq	104d4 <fatfs_sfn_exists+0x158>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10788:	e1a00005 	mov	r0, r5
   1078c:	e59d1004 	ldr	r1, [sp, #4]
   10790:	e3a0200b 	mov	r2, #11
   10794:	eb00244b 	bl	198c8 <strncmp>
   10798:	e3500000 	cmp	r0, #0
   1079c:	1affff4c 	bne	104d4 <fatfs_sfn_exists+0x158>
   107a0:	eaffff72 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   107a4:	e1a00005 	mov	r0, r5
   107a8:	eb00133d 	bl	154a4 <fatfs_entry_lfn_invalid>
   107ac:	e3500000 	cmp	r0, #0
   107b0:	1affff42 	bne	104c0 <fatfs_sfn_exists+0x144>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   107b4:	e1a00005 	mov	r0, r5
   107b8:	eb00135a 	bl	15528 <fatfs_entry_sfn_only>
   107bc:	e3500000 	cmp	r0, #0
   107c0:	0affff3e 	beq	104c0 <fatfs_sfn_exists+0x144>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   107c4:	e1a00005 	mov	r0, r5
   107c8:	e59d1004 	ldr	r1, [sp, #4]
   107cc:	e3a0200b 	mov	r2, #11
   107d0:	eb00243c 	bl	198c8 <strncmp>
   107d4:	e3500000 	cmp	r0, #0
   107d8:	1affff38 	bne	104c0 <fatfs_sfn_exists+0x144>
   107dc:	eaffff63 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   107e0:	e1a00005 	mov	r0, r5
   107e4:	eb00132e 	bl	154a4 <fatfs_entry_lfn_invalid>
   107e8:	e3500000 	cmp	r0, #0
   107ec:	1affff2e 	bne	104ac <fatfs_sfn_exists+0x130>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   107f0:	e1a00005 	mov	r0, r5
   107f4:	eb00134b 	bl	15528 <fatfs_entry_sfn_only>
   107f8:	e3500000 	cmp	r0, #0
   107fc:	0affff2a 	beq	104ac <fatfs_sfn_exists+0x130>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10800:	e1a00005 	mov	r0, r5
   10804:	e59d1004 	ldr	r1, [sp, #4]
   10808:	e3a0200b 	mov	r2, #11
   1080c:	eb00242d 	bl	198c8 <strncmp>
   10810:	e3500000 	cmp	r0, #0
   10814:	1affff24 	bne	104ac <fatfs_sfn_exists+0x130>
   10818:	eaffff54 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1081c:	e1a00005 	mov	r0, r5
   10820:	eb00131f 	bl	154a4 <fatfs_entry_lfn_invalid>
   10824:	e3500000 	cmp	r0, #0
   10828:	1affff1a 	bne	10498 <fatfs_sfn_exists+0x11c>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1082c:	e1a00005 	mov	r0, r5
   10830:	eb00133c 	bl	15528 <fatfs_entry_sfn_only>
   10834:	e3500000 	cmp	r0, #0
   10838:	0affff16 	beq	10498 <fatfs_sfn_exists+0x11c>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1083c:	e1a00005 	mov	r0, r5
   10840:	e59d1004 	ldr	r1, [sp, #4]
   10844:	e3a0200b 	mov	r2, #11
   10848:	eb00241e 	bl	198c8 <strncmp>
   1084c:	e3500000 	cmp	r0, #0
   10850:	1affff10 	bne	10498 <fatfs_sfn_exists+0x11c>
   10854:	eaffff45 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10858:	e1a00005 	mov	r0, r5
   1085c:	eb001310 	bl	154a4 <fatfs_entry_lfn_invalid>
   10860:	e3500000 	cmp	r0, #0
   10864:	1affff06 	bne	10484 <fatfs_sfn_exists+0x108>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   10868:	e1a00005 	mov	r0, r5
   1086c:	eb00132d 	bl	15528 <fatfs_entry_sfn_only>
   10870:	e3500000 	cmp	r0, #0
   10874:	0affff02 	beq	10484 <fatfs_sfn_exists+0x108>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10878:	e1a00005 	mov	r0, r5
   1087c:	e59d1004 	ldr	r1, [sp, #4]
   10880:	e3a0200b 	mov	r2, #11
   10884:	eb00240f 	bl	198c8 <strncmp>
   10888:	e3500000 	cmp	r0, #0
   1088c:	1afffefc 	bne	10484 <fatfs_sfn_exists+0x108>
   10890:	eaffff36 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10894:	e1a00005 	mov	r0, r5
   10898:	eb001301 	bl	154a4 <fatfs_entry_lfn_invalid>
   1089c:	e3500000 	cmp	r0, #0
   108a0:	1afffef2 	bne	10470 <fatfs_sfn_exists+0xf4>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   108a4:	e1a00005 	mov	r0, r5
   108a8:	eb00131e 	bl	15528 <fatfs_entry_sfn_only>
   108ac:	e3500000 	cmp	r0, #0
   108b0:	0afffeee 	beq	10470 <fatfs_sfn_exists+0xf4>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   108b4:	e1a00005 	mov	r0, r5
   108b8:	e59d1004 	ldr	r1, [sp, #4]
   108bc:	e3a0200b 	mov	r2, #11
   108c0:	eb002400 	bl	198c8 <strncmp>
   108c4:	e3500000 	cmp	r0, #0
   108c8:	1afffee8 	bne	10470 <fatfs_sfn_exists+0xf4>
   108cc:	eaffff27 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   108d0:	e1a00005 	mov	r0, r5
   108d4:	eb0012f2 	bl	154a4 <fatfs_entry_lfn_invalid>
   108d8:	e3500000 	cmp	r0, #0
   108dc:	1affff06 	bne	104fc <fatfs_sfn_exists+0x180>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   108e0:	e1a00005 	mov	r0, r5
   108e4:	eb00130f 	bl	15528 <fatfs_entry_sfn_only>
   108e8:	e3500000 	cmp	r0, #0
   108ec:	0affff02 	beq	104fc <fatfs_sfn_exists+0x180>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   108f0:	e1a00005 	mov	r0, r5
   108f4:	e59d1004 	ldr	r1, [sp, #4]
   108f8:	e3a0200b 	mov	r2, #11
   108fc:	eb0023f1 	bl	198c8 <strncmp>
   10900:	e3500000 	cmp	r0, #0
   10904:	1afffefc 	bne	104fc <fatfs_sfn_exists+0x180>
   10908:	eaffff18 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1090c:	e1a00005 	mov	r0, r5
   10910:	eb0012e3 	bl	154a4 <fatfs_entry_lfn_invalid>
   10914:	e3500000 	cmp	r0, #0
   10918:	1affff01 	bne	10524 <fatfs_sfn_exists+0x1a8>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1091c:	e1a00005 	mov	r0, r5
   10920:	eb001300 	bl	15528 <fatfs_entry_sfn_only>
   10924:	e3500000 	cmp	r0, #0
   10928:	0afffefd 	beq	10524 <fatfs_sfn_exists+0x1a8>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1092c:	e1a00005 	mov	r0, r5
   10930:	e59d1004 	ldr	r1, [sp, #4]
   10934:	e3a0200b 	mov	r2, #11
   10938:	eb0023e2 	bl	198c8 <strncmp>
   1093c:	e3500000 	cmp	r0, #0
   10940:	1afffef7 	bne	10524 <fatfs_sfn_exists+0x1a8>
   10944:	eaffff09 	b	10570 <fatfs_sfn_exists+0x1f4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10948:	e1a00005 	mov	r0, r5
   1094c:	eb0012d4 	bl	154a4 <fatfs_entry_lfn_invalid>
   10950:	e3500000 	cmp	r0, #0
   10954:	1afffeed 	bne	10510 <fatfs_sfn_exists+0x194>
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   10958:	e1a00005 	mov	r0, r5
   1095c:	eb0012f1 	bl	15528 <fatfs_entry_sfn_only>
   10960:	e3500000 	cmp	r0, #0
   10964:	0afffee9 	beq	10510 <fatfs_sfn_exists+0x194>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10968:	e1a00005 	mov	r0, r5
   1096c:	e59d1004 	ldr	r1, [sp, #4]
   10970:	e3a0200b 	mov	r2, #11
   10974:	eb0023d3 	bl	198c8 <strncmp>
   10978:	e3500000 	cmp	r0, #0
   1097c:	1afffee3 	bne	10510 <fatfs_sfn_exists+0x194>
   10980:	eafffefa 	b	10570 <fatfs_sfn_exists+0x1f4>
        }
        else
            break;
    } // End of while loop

    return 0;
   10984:	e3a00000 	mov	r0, #0
}
   10988:	e28dd00c 	add	sp, sp, #12
   1098c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00010990 <fatfs_update_file_length>:
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   10990:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   10994:	e1a08001 	mov	r8, r1
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   10998:	e5901034 	ldr	r1, [r0, #52]	; 0x34
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   1099c:	e24dd014 	sub	sp, sp, #20
   109a0:	e1a05000 	mov	r5, r0
   109a4:	e58d2008 	str	r2, [sp, #8]
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   109a8:	e3510000 	cmp	r1, #0
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   109ac:	e58d300c 	str	r3, [sp, #12]
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   109b0:	0a000177 	beq	10f94 <fatfs_update_file_length+0x604>
   109b4:	e3a06000 	mov	r6, #0
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   109b8:	e2807040 	add	r7, r0, #64	; 0x40
   109bc:	e280b060 	add	r11, r0, #96	; 0x60
   109c0:	e2809080 	add	r9, r0, #128	; 0x80
   109c4:	e280a0a0 	add	r10, r0, #160	; 0xa0
   109c8:	e28030c0 	add	r3, r0, #192	; 0xc0
   109cc:	e58d3004 	str	r3, [sp, #4]

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   109d0:	e1a02006 	mov	r2, r6
   109d4:	e1a00005 	mov	r0, r5
   109d8:	e1a01008 	mov	r1, r8
   109dc:	e2866001 	add	r6, r6, #1
   109e0:	ebfffbda 	bl	f950 <fatfs_sector_reader.constprop.1>
   109e4:	e3500000 	cmp	r0, #0
   109e8:	0a000169 	beq	10f94 <fatfs_update_file_length+0x604>
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   109ec:	e1a00007 	mov	r0, r7
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   109f0:	e1a04007 	mov	r4, r7

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   109f4:	eb0012a4 	bl	1548c <fatfs_entry_lfn_text>
   109f8:	e3500000 	cmp	r0, #0
   109fc:	0a000084 	beq	10c14 <fatfs_update_file_length+0x284>
   10a00:	e1a0000b 	mov	r0, r11
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10a04:	e1a0400b 	mov	r4, r11

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10a08:	eb00129f 	bl	1548c <fatfs_entry_lfn_text>
   10a0c:	e3500000 	cmp	r0, #0
   10a10:	0a00006f 	beq	10bd4 <fatfs_update_file_length+0x244>
   10a14:	e1a00009 	mov	r0, r9
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10a18:	e1a04009 	mov	r4, r9

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10a1c:	eb00129a 	bl	1548c <fatfs_entry_lfn_text>
   10a20:	e3500000 	cmp	r0, #0
   10a24:	0a00008a 	beq	10c54 <fatfs_update_file_length+0x2c4>
   10a28:	e1a0000a 	mov	r0, r10
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10a2c:	e1a0400a 	mov	r4, r10

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10a30:	eb001295 	bl	1548c <fatfs_entry_lfn_text>
   10a34:	e3500000 	cmp	r0, #0
   10a38:	0a0000c5 	beq	10d54 <fatfs_update_file_length+0x3c4>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10a3c:	e59d4004 	ldr	r4, [sp, #4]

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10a40:	e1a00004 	mov	r0, r4
   10a44:	eb001290 	bl	1548c <fatfs_entry_lfn_text>
   10a48:	e3500000 	cmp	r0, #0
   10a4c:	0a0000b0 	beq	10d14 <fatfs_update_file_length+0x384>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10a50:	e28540e0 	add	r4, r5, #224	; 0xe0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10a54:	e1a00004 	mov	r0, r4
   10a58:	eb00128b 	bl	1548c <fatfs_entry_lfn_text>
   10a5c:	e3500000 	cmp	r0, #0
   10a60:	0a00009b 	beq	10cd4 <fatfs_update_file_length+0x344>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10a64:	e2854c01 	add	r4, r5, #256	; 0x100

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10a68:	e1a00004 	mov	r0, r4
   10a6c:	eb001286 	bl	1548c <fatfs_entry_lfn_text>
   10a70:	e3500000 	cmp	r0, #0
   10a74:	0a000086 	beq	10c94 <fatfs_update_file_length+0x304>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10a78:	e2854e12 	add	r4, r5, #288	; 0x120

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10a7c:	e1a00004 	mov	r0, r4
   10a80:	eb001281 	bl	1548c <fatfs_entry_lfn_text>
   10a84:	e3500000 	cmp	r0, #0
   10a88:	0a000101 	beq	10e94 <fatfs_update_file_length+0x504>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10a8c:	e2854d05 	add	r4, r5, #320	; 0x140

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10a90:	e1a00004 	mov	r0, r4
   10a94:	eb00127c 	bl	1548c <fatfs_entry_lfn_text>
   10a98:	e3500000 	cmp	r0, #0
   10a9c:	0a0000ec 	beq	10e54 <fatfs_update_file_length+0x4c4>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10aa0:	e2854e16 	add	r4, r5, #352	; 0x160

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10aa4:	e1a00004 	mov	r0, r4
   10aa8:	eb001277 	bl	1548c <fatfs_entry_lfn_text>
   10aac:	e3500000 	cmp	r0, #0
   10ab0:	0a0000d7 	beq	10e14 <fatfs_update_file_length+0x484>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10ab4:	e2854d06 	add	r4, r5, #384	; 0x180

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10ab8:	e1a00004 	mov	r0, r4
   10abc:	eb001272 	bl	1548c <fatfs_entry_lfn_text>
   10ac0:	e3500000 	cmp	r0, #0
   10ac4:	0a0000c2 	beq	10dd4 <fatfs_update_file_length+0x444>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10ac8:	e2854e1a 	add	r4, r5, #416	; 0x1a0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10acc:	e1a00004 	mov	r0, r4
   10ad0:	eb00126d 	bl	1548c <fatfs_entry_lfn_text>
   10ad4:	e3500000 	cmp	r0, #0
   10ad8:	0a0000ad 	beq	10d94 <fatfs_update_file_length+0x404>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10adc:	e2854d07 	add	r4, r5, #448	; 0x1c0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10ae0:	e1a00004 	mov	r0, r4
   10ae4:	eb001268 	bl	1548c <fatfs_entry_lfn_text>
   10ae8:	e3500000 	cmp	r0, #0
   10aec:	0a0000f8 	beq	10ed4 <fatfs_update_file_length+0x544>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10af0:	e2854e1e 	add	r4, r5, #480	; 0x1e0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10af4:	e1a00004 	mov	r0, r4
   10af8:	eb001263 	bl	1548c <fatfs_entry_lfn_text>
   10afc:	e3500000 	cmp	r0, #0
   10b00:	0a000113 	beq	10f54 <fatfs_update_file_length+0x5c4>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10b04:	e2854c02 	add	r4, r5, #512	; 0x200

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10b08:	e1a00004 	mov	r0, r4
   10b0c:	eb00125e 	bl	1548c <fatfs_entry_lfn_text>
   10b10:	e3500000 	cmp	r0, #0
   10b14:	0a0000fe 	beq	10f14 <fatfs_update_file_length+0x584>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10b18:	e2854e22 	add	r4, r5, #544	; 0x220

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10b1c:	e1a00004 	mov	r0, r4
   10b20:	eb001259 	bl	1548c <fatfs_entry_lfn_text>
   10b24:	e3500000 	cmp	r0, #0
   10b28:	1affffa8 	bne	109d0 <fatfs_update_file_length+0x40>
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10b2c:	e1a00004 	mov	r0, r4
   10b30:	eb00125b 	bl	154a4 <fatfs_entry_lfn_invalid>
   10b34:	e3500000 	cmp	r0, #0
   10b38:	1affffa4 	bne	109d0 <fatfs_update_file_length+0x40>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10b3c:	e1a00004 	mov	r0, r4
   10b40:	eb001278 	bl	15528 <fatfs_entry_sfn_only>
   10b44:	e3500000 	cmp	r0, #0
   10b48:	0affffa0 	beq	109d0 <fatfs_update_file_length+0x40>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10b4c:	e1a00004 	mov	r0, r4
   10b50:	e59d1008 	ldr	r1, [sp, #8]
   10b54:	e3a0200b 	mov	r2, #11
   10b58:	eb00235a 	bl	198c8 <strncmp>
   10b5c:	e3500000 	cmp	r0, #0
   10b60:	1affff9a 	bne	109d0 <fatfs_update_file_length+0x40>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10b64:	e3a03e1e 	mov	r3, #480	; 0x1e0
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   10b68:	e5948000 	ldr	r8, [r4]
   10b6c:	e2833040 	add	r3, r3, #64	; 0x40
   10b70:	e5946004 	ldr	r6, [r4, #4]
   10b74:	e0850003 	add	r0, r5, r3
   10b78:	e594e008 	ldr	lr, [r4, #8]

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   10b7c:	e1a01007 	mov	r1, r7
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   10b80:	e594c00c 	ldr	r12, [r4, #12]
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
   10b84:	e59d200c 	ldr	r2, [sp, #12]
   10b88:	e584201c 	str	r2, [r4, #28]

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   10b8c:	e3a02001 	mov	r2, #1
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   10b90:	e7858003 	str	r8, [r5, r3]
   10b94:	e5806004 	str	r6, [r0, #4]
   10b98:	e580e008 	str	lr, [r0, #8]
   10b9c:	e580c00c 	str	r12, [r0, #12]
   10ba0:	e5948010 	ldr	r8, [r4, #16]
   10ba4:	e5946014 	ldr	r6, [r4, #20]
   10ba8:	e594e018 	ldr	lr, [r4, #24]
   10bac:	e594c01c 	ldr	r12, [r4, #28]
   10bb0:	e5808010 	str	r8, [r0, #16]
   10bb4:	e5806014 	str	r6, [r0, #20]
   10bb8:	e580e018 	str	lr, [r0, #24]
   10bbc:	e580c01c 	str	r12, [r0, #28]

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   10bc0:	e3a00d81 	mov	r0, #8256	; 0x2040
   10bc4:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   10bc8:	e7950000 	ldr	r0, [r5, r0]
   10bcc:	e12fff33 	blx	r3
   10bd0:	ea0000f0 	b	10f98 <fatfs_update_file_length+0x608>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10bd4:	e1a0000b 	mov	r0, r11
   10bd8:	eb001231 	bl	154a4 <fatfs_entry_lfn_invalid>
   10bdc:	e3500000 	cmp	r0, #0
   10be0:	1affff8b 	bne	10a14 <fatfs_update_file_length+0x84>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10be4:	e1a0000b 	mov	r0, r11
   10be8:	eb00124e 	bl	15528 <fatfs_entry_sfn_only>
   10bec:	e3500000 	cmp	r0, #0
   10bf0:	0affff87 	beq	10a14 <fatfs_update_file_length+0x84>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10bf4:	e1a0000b 	mov	r0, r11
   10bf8:	e59d1008 	ldr	r1, [sp, #8]
   10bfc:	e3a0200b 	mov	r2, #11
   10c00:	eb002330 	bl	198c8 <strncmp>
   10c04:	e3500000 	cmp	r0, #0
   10c08:	1affff81 	bne	10a14 <fatfs_update_file_length+0x84>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10c0c:	e3a03020 	mov	r3, #32
   10c10:	eaffffd4 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10c14:	e1a00007 	mov	r0, r7
   10c18:	eb001221 	bl	154a4 <fatfs_entry_lfn_invalid>
   10c1c:	e3500000 	cmp	r0, #0
   10c20:	1affff76 	bne	10a00 <fatfs_update_file_length+0x70>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10c24:	e1a00007 	mov	r0, r7
   10c28:	eb00123e 	bl	15528 <fatfs_entry_sfn_only>
   10c2c:	e3500000 	cmp	r0, #0
   10c30:	0affff72 	beq	10a00 <fatfs_update_file_length+0x70>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10c34:	e1a00007 	mov	r0, r7
   10c38:	e59d1008 	ldr	r1, [sp, #8]
   10c3c:	e3a0200b 	mov	r2, #11
   10c40:	eb002320 	bl	198c8 <strncmp>
   10c44:	e3500000 	cmp	r0, #0
   10c48:	1affff6c 	bne	10a00 <fatfs_update_file_length+0x70>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10c4c:	e1a03000 	mov	r3, r0
   10c50:	eaffffc4 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10c54:	e1a00009 	mov	r0, r9
   10c58:	eb001211 	bl	154a4 <fatfs_entry_lfn_invalid>
   10c5c:	e3500000 	cmp	r0, #0
   10c60:	1affff70 	bne	10a28 <fatfs_update_file_length+0x98>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10c64:	e1a00009 	mov	r0, r9
   10c68:	eb00122e 	bl	15528 <fatfs_entry_sfn_only>
   10c6c:	e3500000 	cmp	r0, #0
   10c70:	0affff6c 	beq	10a28 <fatfs_update_file_length+0x98>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10c74:	e1a00009 	mov	r0, r9
   10c78:	e59d1008 	ldr	r1, [sp, #8]
   10c7c:	e3a0200b 	mov	r2, #11
   10c80:	eb002310 	bl	198c8 <strncmp>
   10c84:	e3500000 	cmp	r0, #0
   10c88:	1affff66 	bne	10a28 <fatfs_update_file_length+0x98>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10c8c:	e3a03040 	mov	r3, #64	; 0x40
   10c90:	eaffffb4 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10c94:	e1a00004 	mov	r0, r4
   10c98:	eb001201 	bl	154a4 <fatfs_entry_lfn_invalid>
   10c9c:	e3500000 	cmp	r0, #0
   10ca0:	1affff74 	bne	10a78 <fatfs_update_file_length+0xe8>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10ca4:	e1a00004 	mov	r0, r4
   10ca8:	eb00121e 	bl	15528 <fatfs_entry_sfn_only>
   10cac:	e3500000 	cmp	r0, #0
   10cb0:	0affff70 	beq	10a78 <fatfs_update_file_length+0xe8>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10cb4:	e1a00004 	mov	r0, r4
   10cb8:	e59d1008 	ldr	r1, [sp, #8]
   10cbc:	e3a0200b 	mov	r2, #11
   10cc0:	eb002300 	bl	198c8 <strncmp>
   10cc4:	e3500000 	cmp	r0, #0
   10cc8:	1affff6a 	bne	10a78 <fatfs_update_file_length+0xe8>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10ccc:	e3a030c0 	mov	r3, #192	; 0xc0
   10cd0:	eaffffa4 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10cd4:	e1a00004 	mov	r0, r4
   10cd8:	eb0011f1 	bl	154a4 <fatfs_entry_lfn_invalid>
   10cdc:	e3500000 	cmp	r0, #0
   10ce0:	1affff5f 	bne	10a64 <fatfs_update_file_length+0xd4>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10ce4:	e1a00004 	mov	r0, r4
   10ce8:	eb00120e 	bl	15528 <fatfs_entry_sfn_only>
   10cec:	e3500000 	cmp	r0, #0
   10cf0:	0affff5b 	beq	10a64 <fatfs_update_file_length+0xd4>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10cf4:	e1a00004 	mov	r0, r4
   10cf8:	e59d1008 	ldr	r1, [sp, #8]
   10cfc:	e3a0200b 	mov	r2, #11
   10d00:	eb0022f0 	bl	198c8 <strncmp>
   10d04:	e3500000 	cmp	r0, #0
   10d08:	1affff55 	bne	10a64 <fatfs_update_file_length+0xd4>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10d0c:	e3a030a0 	mov	r3, #160	; 0xa0
   10d10:	eaffff94 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10d14:	e1a00004 	mov	r0, r4
   10d18:	eb0011e1 	bl	154a4 <fatfs_entry_lfn_invalid>
   10d1c:	e3500000 	cmp	r0, #0
   10d20:	1affff4a 	bne	10a50 <fatfs_update_file_length+0xc0>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10d24:	e1a00004 	mov	r0, r4
   10d28:	eb0011fe 	bl	15528 <fatfs_entry_sfn_only>
   10d2c:	e3500000 	cmp	r0, #0
   10d30:	0affff46 	beq	10a50 <fatfs_update_file_length+0xc0>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10d34:	e1a00004 	mov	r0, r4
   10d38:	e59d1008 	ldr	r1, [sp, #8]
   10d3c:	e3a0200b 	mov	r2, #11
   10d40:	eb0022e0 	bl	198c8 <strncmp>
   10d44:	e3500000 	cmp	r0, #0
   10d48:	1affff40 	bne	10a50 <fatfs_update_file_length+0xc0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10d4c:	e3a03080 	mov	r3, #128	; 0x80
   10d50:	eaffff84 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10d54:	e1a0000a 	mov	r0, r10
   10d58:	eb0011d1 	bl	154a4 <fatfs_entry_lfn_invalid>
   10d5c:	e3500000 	cmp	r0, #0
   10d60:	1affff35 	bne	10a3c <fatfs_update_file_length+0xac>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10d64:	e1a0000a 	mov	r0, r10
   10d68:	eb0011ee 	bl	15528 <fatfs_entry_sfn_only>
   10d6c:	e3500000 	cmp	r0, #0
   10d70:	0affff31 	beq	10a3c <fatfs_update_file_length+0xac>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10d74:	e1a0000a 	mov	r0, r10
   10d78:	e59d1008 	ldr	r1, [sp, #8]
   10d7c:	e3a0200b 	mov	r2, #11
   10d80:	eb0022d0 	bl	198c8 <strncmp>
   10d84:	e3500000 	cmp	r0, #0
   10d88:	1affff2b 	bne	10a3c <fatfs_update_file_length+0xac>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10d8c:	e3a03060 	mov	r3, #96	; 0x60
   10d90:	eaffff74 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10d94:	e1a00004 	mov	r0, r4
   10d98:	eb0011c1 	bl	154a4 <fatfs_entry_lfn_invalid>
   10d9c:	e3500000 	cmp	r0, #0
   10da0:	1affff4d 	bne	10adc <fatfs_update_file_length+0x14c>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10da4:	e1a00004 	mov	r0, r4
   10da8:	eb0011de 	bl	15528 <fatfs_entry_sfn_only>
   10dac:	e3500000 	cmp	r0, #0
   10db0:	0affff49 	beq	10adc <fatfs_update_file_length+0x14c>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10db4:	e1a00004 	mov	r0, r4
   10db8:	e59d1008 	ldr	r1, [sp, #8]
   10dbc:	e3a0200b 	mov	r2, #11
   10dc0:	eb0022c0 	bl	198c8 <strncmp>
   10dc4:	e3500000 	cmp	r0, #0
   10dc8:	1affff43 	bne	10adc <fatfs_update_file_length+0x14c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10dcc:	e3a03e16 	mov	r3, #352	; 0x160
   10dd0:	eaffff64 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10dd4:	e1a00004 	mov	r0, r4
   10dd8:	eb0011b1 	bl	154a4 <fatfs_entry_lfn_invalid>
   10ddc:	e3500000 	cmp	r0, #0
   10de0:	1affff38 	bne	10ac8 <fatfs_update_file_length+0x138>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10de4:	e1a00004 	mov	r0, r4
   10de8:	eb0011ce 	bl	15528 <fatfs_entry_sfn_only>
   10dec:	e3500000 	cmp	r0, #0
   10df0:	0affff34 	beq	10ac8 <fatfs_update_file_length+0x138>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10df4:	e1a00004 	mov	r0, r4
   10df8:	e59d1008 	ldr	r1, [sp, #8]
   10dfc:	e3a0200b 	mov	r2, #11
   10e00:	eb0022b0 	bl	198c8 <strncmp>
   10e04:	e3500000 	cmp	r0, #0
   10e08:	1affff2e 	bne	10ac8 <fatfs_update_file_length+0x138>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10e0c:	e3a03d05 	mov	r3, #320	; 0x140
   10e10:	eaffff54 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10e14:	e1a00004 	mov	r0, r4
   10e18:	eb0011a1 	bl	154a4 <fatfs_entry_lfn_invalid>
   10e1c:	e3500000 	cmp	r0, #0
   10e20:	1affff23 	bne	10ab4 <fatfs_update_file_length+0x124>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10e24:	e1a00004 	mov	r0, r4
   10e28:	eb0011be 	bl	15528 <fatfs_entry_sfn_only>
   10e2c:	e3500000 	cmp	r0, #0
   10e30:	0affff1f 	beq	10ab4 <fatfs_update_file_length+0x124>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10e34:	e1a00004 	mov	r0, r4
   10e38:	e59d1008 	ldr	r1, [sp, #8]
   10e3c:	e3a0200b 	mov	r2, #11
   10e40:	eb0022a0 	bl	198c8 <strncmp>
   10e44:	e3500000 	cmp	r0, #0
   10e48:	1affff19 	bne	10ab4 <fatfs_update_file_length+0x124>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10e4c:	e3a03e12 	mov	r3, #288	; 0x120
   10e50:	eaffff44 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10e54:	e1a00004 	mov	r0, r4
   10e58:	eb001191 	bl	154a4 <fatfs_entry_lfn_invalid>
   10e5c:	e3500000 	cmp	r0, #0
   10e60:	1affff0e 	bne	10aa0 <fatfs_update_file_length+0x110>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10e64:	e1a00004 	mov	r0, r4
   10e68:	eb0011ae 	bl	15528 <fatfs_entry_sfn_only>
   10e6c:	e3500000 	cmp	r0, #0
   10e70:	0affff0a 	beq	10aa0 <fatfs_update_file_length+0x110>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10e74:	e1a00004 	mov	r0, r4
   10e78:	e59d1008 	ldr	r1, [sp, #8]
   10e7c:	e3a0200b 	mov	r2, #11
   10e80:	eb002290 	bl	198c8 <strncmp>
   10e84:	e3500000 	cmp	r0, #0
   10e88:	1affff04 	bne	10aa0 <fatfs_update_file_length+0x110>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10e8c:	e3a03c01 	mov	r3, #256	; 0x100
   10e90:	eaffff34 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10e94:	e1a00004 	mov	r0, r4
   10e98:	eb001181 	bl	154a4 <fatfs_entry_lfn_invalid>
   10e9c:	e3500000 	cmp	r0, #0
   10ea0:	1afffef9 	bne	10a8c <fatfs_update_file_length+0xfc>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10ea4:	e1a00004 	mov	r0, r4
   10ea8:	eb00119e 	bl	15528 <fatfs_entry_sfn_only>
   10eac:	e3500000 	cmp	r0, #0
   10eb0:	0afffef5 	beq	10a8c <fatfs_update_file_length+0xfc>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10eb4:	e1a00004 	mov	r0, r4
   10eb8:	e59d1008 	ldr	r1, [sp, #8]
   10ebc:	e3a0200b 	mov	r2, #11
   10ec0:	eb002280 	bl	198c8 <strncmp>
   10ec4:	e3500000 	cmp	r0, #0
   10ec8:	1afffeef 	bne	10a8c <fatfs_update_file_length+0xfc>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10ecc:	e3a030e0 	mov	r3, #224	; 0xe0
   10ed0:	eaffff24 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10ed4:	e1a00004 	mov	r0, r4
   10ed8:	eb001171 	bl	154a4 <fatfs_entry_lfn_invalid>
   10edc:	e3500000 	cmp	r0, #0
   10ee0:	1affff02 	bne	10af0 <fatfs_update_file_length+0x160>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10ee4:	e1a00004 	mov	r0, r4
   10ee8:	eb00118e 	bl	15528 <fatfs_entry_sfn_only>
   10eec:	e3500000 	cmp	r0, #0
   10ef0:	0afffefe 	beq	10af0 <fatfs_update_file_length+0x160>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10ef4:	e1a00004 	mov	r0, r4
   10ef8:	e59d1008 	ldr	r1, [sp, #8]
   10efc:	e3a0200b 	mov	r2, #11
   10f00:	eb002270 	bl	198c8 <strncmp>
   10f04:	e3500000 	cmp	r0, #0
   10f08:	1afffef8 	bne	10af0 <fatfs_update_file_length+0x160>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10f0c:	e3a03d06 	mov	r3, #384	; 0x180
   10f10:	eaffff14 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10f14:	e1a00004 	mov	r0, r4
   10f18:	eb001161 	bl	154a4 <fatfs_entry_lfn_invalid>
   10f1c:	e3500000 	cmp	r0, #0
   10f20:	1afffefc 	bne	10b18 <fatfs_update_file_length+0x188>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10f24:	e1a00004 	mov	r0, r4
   10f28:	eb00117e 	bl	15528 <fatfs_entry_sfn_only>
   10f2c:	e3500000 	cmp	r0, #0
   10f30:	0afffef8 	beq	10b18 <fatfs_update_file_length+0x188>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10f34:	e1a00004 	mov	r0, r4
   10f38:	e59d1008 	ldr	r1, [sp, #8]
   10f3c:	e3a0200b 	mov	r2, #11
   10f40:	eb002260 	bl	198c8 <strncmp>
   10f44:	e3500000 	cmp	r0, #0
   10f48:	1afffef2 	bne	10b18 <fatfs_update_file_length+0x188>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10f4c:	e3a03d07 	mov	r3, #448	; 0x1c0
   10f50:	eaffff04 	b	10b68 <fatfs_update_file_length+0x1d8>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   10f54:	e1a00004 	mov	r0, r4
   10f58:	eb001151 	bl	154a4 <fatfs_entry_lfn_invalid>
   10f5c:	e3500000 	cmp	r0, #0
   10f60:	1afffee7 	bne	10b04 <fatfs_update_file_length+0x174>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   10f64:	e1a00004 	mov	r0, r4
   10f68:	eb00116e 	bl	15528 <fatfs_entry_sfn_only>
   10f6c:	e3500000 	cmp	r0, #0
   10f70:	0afffee3 	beq	10b04 <fatfs_update_file_length+0x174>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   10f74:	e1a00004 	mov	r0, r4
   10f78:	e59d1008 	ldr	r1, [sp, #8]
   10f7c:	e3a0200b 	mov	r2, #11
   10f80:	eb002250 	bl	198c8 <strncmp>
   10f84:	e3500000 	cmp	r0, #0
   10f88:	1afffedd 	bne	10b04 <fatfs_update_file_length+0x174>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10f8c:	e3a03e1a 	mov	r3, #416	; 0x1a0
   10f90:	eafffef4 	b	10b68 <fatfs_update_file_length+0x1d8>
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
   10f94:	e3a00000 	mov	r0, #0
        else
            break;
    } // End of while loop

    return 0;
}
   10f98:	e28dd014 	add	sp, sp, #20
   10f9c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00010fa0 <fatfs_mark_file_deleted>:
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   10fa0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   10fa4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   10fa8:	e24dd00c 	sub	sp, sp, #12
   10fac:	e1a05000 	mov	r5, r0
   10fb0:	e1a08001 	mov	r8, r1
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   10fb4:	e3530000 	cmp	r3, #0
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   10fb8:	e58d2004 	str	r2, [sp, #4]
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   10fbc:	0a000177 	beq	115a0 <fatfs_mark_file_deleted+0x600>
   10fc0:	e3a06000 	mov	r6, #0
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10fc4:	e2807040 	add	r7, r0, #64	; 0x40
   10fc8:	e280b060 	add	r11, r0, #96	; 0x60
   10fcc:	e2809080 	add	r9, r0, #128	; 0x80
   10fd0:	e280a0a0 	add	r10, r0, #160	; 0xa0
   10fd4:	e28030c0 	add	r3, r0, #192	; 0xc0
   10fd8:	e58d3000 	str	r3, [sp]

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   10fdc:	e1a02006 	mov	r2, r6
   10fe0:	e1a00005 	mov	r0, r5
   10fe4:	e1a01008 	mov	r1, r8
   10fe8:	e2866001 	add	r6, r6, #1
   10fec:	ebfffa57 	bl	f950 <fatfs_sector_reader.constprop.1>
   10ff0:	e3500000 	cmp	r0, #0
   10ff4:	0a000169 	beq	115a0 <fatfs_mark_file_deleted+0x600>
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   10ff8:	e1a00007 	mov	r0, r7
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   10ffc:	e1a04007 	mov	r4, r7

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11000:	eb001121 	bl	1548c <fatfs_entry_lfn_text>
   11004:	e3500000 	cmp	r0, #0
   11008:	0a000084 	beq	11220 <fatfs_mark_file_deleted+0x280>
   1100c:	e1a0000b 	mov	r0, r11
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11010:	e1a0400b 	mov	r4, r11

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11014:	eb00111c 	bl	1548c <fatfs_entry_lfn_text>
   11018:	e3500000 	cmp	r0, #0
   1101c:	0a00006f 	beq	111e0 <fatfs_mark_file_deleted+0x240>
   11020:	e1a00009 	mov	r0, r9
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11024:	e1a04009 	mov	r4, r9

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11028:	eb001117 	bl	1548c <fatfs_entry_lfn_text>
   1102c:	e3500000 	cmp	r0, #0
   11030:	0a00008a 	beq	11260 <fatfs_mark_file_deleted+0x2c0>
   11034:	e1a0000a 	mov	r0, r10
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11038:	e1a0400a 	mov	r4, r10

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1103c:	eb001112 	bl	1548c <fatfs_entry_lfn_text>
   11040:	e3500000 	cmp	r0, #0
   11044:	0a0000c5 	beq	11360 <fatfs_mark_file_deleted+0x3c0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11048:	e59d4000 	ldr	r4, [sp]

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1104c:	e1a00004 	mov	r0, r4
   11050:	eb00110d 	bl	1548c <fatfs_entry_lfn_text>
   11054:	e3500000 	cmp	r0, #0
   11058:	0a0000b0 	beq	11320 <fatfs_mark_file_deleted+0x380>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1105c:	e28540e0 	add	r4, r5, #224	; 0xe0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11060:	e1a00004 	mov	r0, r4
   11064:	eb001108 	bl	1548c <fatfs_entry_lfn_text>
   11068:	e3500000 	cmp	r0, #0
   1106c:	0a00009b 	beq	112e0 <fatfs_mark_file_deleted+0x340>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11070:	e2854c01 	add	r4, r5, #256	; 0x100

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11074:	e1a00004 	mov	r0, r4
   11078:	eb001103 	bl	1548c <fatfs_entry_lfn_text>
   1107c:	e3500000 	cmp	r0, #0
   11080:	0a000086 	beq	112a0 <fatfs_mark_file_deleted+0x300>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11084:	e2854e12 	add	r4, r5, #288	; 0x120

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11088:	e1a00004 	mov	r0, r4
   1108c:	eb0010fe 	bl	1548c <fatfs_entry_lfn_text>
   11090:	e3500000 	cmp	r0, #0
   11094:	0a000101 	beq	114a0 <fatfs_mark_file_deleted+0x500>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11098:	e2854d05 	add	r4, r5, #320	; 0x140

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1109c:	e1a00004 	mov	r0, r4
   110a0:	eb0010f9 	bl	1548c <fatfs_entry_lfn_text>
   110a4:	e3500000 	cmp	r0, #0
   110a8:	0a0000ec 	beq	11460 <fatfs_mark_file_deleted+0x4c0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   110ac:	e2854e16 	add	r4, r5, #352	; 0x160

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   110b0:	e1a00004 	mov	r0, r4
   110b4:	eb0010f4 	bl	1548c <fatfs_entry_lfn_text>
   110b8:	e3500000 	cmp	r0, #0
   110bc:	0a0000d7 	beq	11420 <fatfs_mark_file_deleted+0x480>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   110c0:	e2854d06 	add	r4, r5, #384	; 0x180

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   110c4:	e1a00004 	mov	r0, r4
   110c8:	eb0010ef 	bl	1548c <fatfs_entry_lfn_text>
   110cc:	e3500000 	cmp	r0, #0
   110d0:	0a0000c2 	beq	113e0 <fatfs_mark_file_deleted+0x440>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   110d4:	e2854e1a 	add	r4, r5, #416	; 0x1a0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   110d8:	e1a00004 	mov	r0, r4
   110dc:	eb0010ea 	bl	1548c <fatfs_entry_lfn_text>
   110e0:	e3500000 	cmp	r0, #0
   110e4:	0a0000ad 	beq	113a0 <fatfs_mark_file_deleted+0x400>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   110e8:	e2854d07 	add	r4, r5, #448	; 0x1c0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   110ec:	e1a00004 	mov	r0, r4
   110f0:	eb0010e5 	bl	1548c <fatfs_entry_lfn_text>
   110f4:	e3500000 	cmp	r0, #0
   110f8:	0a0000f8 	beq	114e0 <fatfs_mark_file_deleted+0x540>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   110fc:	e2854e1e 	add	r4, r5, #480	; 0x1e0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11100:	e1a00004 	mov	r0, r4
   11104:	eb0010e0 	bl	1548c <fatfs_entry_lfn_text>
   11108:	e3500000 	cmp	r0, #0
   1110c:	0a000113 	beq	11560 <fatfs_mark_file_deleted+0x5c0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11110:	e2854c02 	add	r4, r5, #512	; 0x200

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11114:	e1a00004 	mov	r0, r4
   11118:	eb0010db 	bl	1548c <fatfs_entry_lfn_text>
   1111c:	e3500000 	cmp	r0, #0
   11120:	0a0000fe 	beq	11520 <fatfs_mark_file_deleted+0x580>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11124:	e2854e22 	add	r4, r5, #544	; 0x220

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   11128:	e1a00004 	mov	r0, r4
   1112c:	eb0010d6 	bl	1548c <fatfs_entry_lfn_text>
   11130:	e3500000 	cmp	r0, #0
   11134:	1affffa8 	bne	10fdc <fatfs_mark_file_deleted+0x3c>
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11138:	e1a00004 	mov	r0, r4
   1113c:	eb0010d8 	bl	154a4 <fatfs_entry_lfn_invalid>
   11140:	e3500000 	cmp	r0, #0
   11144:	1affffa4 	bne	10fdc <fatfs_mark_file_deleted+0x3c>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11148:	e1a00004 	mov	r0, r4
   1114c:	eb0010f5 	bl	15528 <fatfs_entry_sfn_only>
   11150:	e3500000 	cmp	r0, #0
   11154:	0affffa0 	beq	10fdc <fatfs_mark_file_deleted+0x3c>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11158:	e1a00004 	mov	r0, r4
   1115c:	e59d1004 	ldr	r1, [sp, #4]
   11160:	e3a0200b 	mov	r2, #11
   11164:	eb0021d7 	bl	198c8 <strncmp>
   11168:	e3500000 	cmp	r0, #0
   1116c:	1affff9a 	bne	10fdc <fatfs_mark_file_deleted+0x3c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11170:	e3a03e1e 	mov	r3, #480	; 0x1e0
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
   11174:	e3e0201a 	mvn	r2, #26
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   11178:	e5946004 	ldr	r6, [r4, #4]
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
   1117c:	e5c42000 	strb	r2, [r4]
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   11180:	e2833040 	add	r3, r3, #64	; 0x40
   11184:	e5948000 	ldr	r8, [r4]
   11188:	e0850003 	add	r0, r5, r3
   1118c:	e594e008 	ldr	lr, [r4, #8]

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   11190:	e1a01007 	mov	r1, r7
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   11194:	e594c00c 	ldr	r12, [r4, #12]

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   11198:	e3a02001 	mov	r2, #1
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1119c:	e7858003 	str	r8, [r5, r3]
   111a0:	e5806004 	str	r6, [r0, #4]
   111a4:	e580e008 	str	lr, [r0, #8]
   111a8:	e580c00c 	str	r12, [r0, #12]
   111ac:	e5948010 	ldr	r8, [r4, #16]
   111b0:	e5946014 	ldr	r6, [r4, #20]
   111b4:	e594e018 	ldr	lr, [r4, #24]
   111b8:	e594c01c 	ldr	r12, [r4, #28]
   111bc:	e5808010 	str	r8, [r0, #16]
   111c0:	e5806014 	str	r6, [r0, #20]
   111c4:	e580e018 	str	lr, [r0, #24]
   111c8:	e580c01c 	str	r12, [r0, #28]

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   111cc:	e3a00d81 	mov	r0, #8256	; 0x2040
   111d0:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   111d4:	e7950000 	ldr	r0, [r5, r0]
   111d8:	e12fff33 	blx	r3
   111dc:	ea0000f0 	b	115a4 <fatfs_mark_file_deleted+0x604>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   111e0:	e1a0000b 	mov	r0, r11
   111e4:	eb0010ae 	bl	154a4 <fatfs_entry_lfn_invalid>
   111e8:	e3500000 	cmp	r0, #0
   111ec:	1affff8b 	bne	11020 <fatfs_mark_file_deleted+0x80>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   111f0:	e1a0000b 	mov	r0, r11
   111f4:	eb0010cb 	bl	15528 <fatfs_entry_sfn_only>
   111f8:	e3500000 	cmp	r0, #0
   111fc:	0affff87 	beq	11020 <fatfs_mark_file_deleted+0x80>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11200:	e1a0000b 	mov	r0, r11
   11204:	e59d1004 	ldr	r1, [sp, #4]
   11208:	e3a0200b 	mov	r2, #11
   1120c:	eb0021ad 	bl	198c8 <strncmp>
   11210:	e3500000 	cmp	r0, #0
   11214:	1affff81 	bne	11020 <fatfs_mark_file_deleted+0x80>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11218:	e3a03020 	mov	r3, #32
   1121c:	eaffffd4 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11220:	e1a00007 	mov	r0, r7
   11224:	eb00109e 	bl	154a4 <fatfs_entry_lfn_invalid>
   11228:	e3500000 	cmp	r0, #0
   1122c:	1affff76 	bne	1100c <fatfs_mark_file_deleted+0x6c>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11230:	e1a00007 	mov	r0, r7
   11234:	eb0010bb 	bl	15528 <fatfs_entry_sfn_only>
   11238:	e3500000 	cmp	r0, #0
   1123c:	0affff72 	beq	1100c <fatfs_mark_file_deleted+0x6c>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11240:	e1a00007 	mov	r0, r7
   11244:	e59d1004 	ldr	r1, [sp, #4]
   11248:	e3a0200b 	mov	r2, #11
   1124c:	eb00219d 	bl	198c8 <strncmp>
   11250:	e3500000 	cmp	r0, #0
   11254:	1affff6c 	bne	1100c <fatfs_mark_file_deleted+0x6c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11258:	e1a03000 	mov	r3, r0
   1125c:	eaffffc4 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11260:	e1a00009 	mov	r0, r9
   11264:	eb00108e 	bl	154a4 <fatfs_entry_lfn_invalid>
   11268:	e3500000 	cmp	r0, #0
   1126c:	1affff70 	bne	11034 <fatfs_mark_file_deleted+0x94>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11270:	e1a00009 	mov	r0, r9
   11274:	eb0010ab 	bl	15528 <fatfs_entry_sfn_only>
   11278:	e3500000 	cmp	r0, #0
   1127c:	0affff6c 	beq	11034 <fatfs_mark_file_deleted+0x94>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11280:	e1a00009 	mov	r0, r9
   11284:	e59d1004 	ldr	r1, [sp, #4]
   11288:	e3a0200b 	mov	r2, #11
   1128c:	eb00218d 	bl	198c8 <strncmp>
   11290:	e3500000 	cmp	r0, #0
   11294:	1affff66 	bne	11034 <fatfs_mark_file_deleted+0x94>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11298:	e3a03040 	mov	r3, #64	; 0x40
   1129c:	eaffffb4 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   112a0:	e1a00004 	mov	r0, r4
   112a4:	eb00107e 	bl	154a4 <fatfs_entry_lfn_invalid>
   112a8:	e3500000 	cmp	r0, #0
   112ac:	1affff74 	bne	11084 <fatfs_mark_file_deleted+0xe4>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   112b0:	e1a00004 	mov	r0, r4
   112b4:	eb00109b 	bl	15528 <fatfs_entry_sfn_only>
   112b8:	e3500000 	cmp	r0, #0
   112bc:	0affff70 	beq	11084 <fatfs_mark_file_deleted+0xe4>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   112c0:	e1a00004 	mov	r0, r4
   112c4:	e59d1004 	ldr	r1, [sp, #4]
   112c8:	e3a0200b 	mov	r2, #11
   112cc:	eb00217d 	bl	198c8 <strncmp>
   112d0:	e3500000 	cmp	r0, #0
   112d4:	1affff6a 	bne	11084 <fatfs_mark_file_deleted+0xe4>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   112d8:	e3a030c0 	mov	r3, #192	; 0xc0
   112dc:	eaffffa4 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   112e0:	e1a00004 	mov	r0, r4
   112e4:	eb00106e 	bl	154a4 <fatfs_entry_lfn_invalid>
   112e8:	e3500000 	cmp	r0, #0
   112ec:	1affff5f 	bne	11070 <fatfs_mark_file_deleted+0xd0>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   112f0:	e1a00004 	mov	r0, r4
   112f4:	eb00108b 	bl	15528 <fatfs_entry_sfn_only>
   112f8:	e3500000 	cmp	r0, #0
   112fc:	0affff5b 	beq	11070 <fatfs_mark_file_deleted+0xd0>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11300:	e1a00004 	mov	r0, r4
   11304:	e59d1004 	ldr	r1, [sp, #4]
   11308:	e3a0200b 	mov	r2, #11
   1130c:	eb00216d 	bl	198c8 <strncmp>
   11310:	e3500000 	cmp	r0, #0
   11314:	1affff55 	bne	11070 <fatfs_mark_file_deleted+0xd0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11318:	e3a030a0 	mov	r3, #160	; 0xa0
   1131c:	eaffff94 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11320:	e1a00004 	mov	r0, r4
   11324:	eb00105e 	bl	154a4 <fatfs_entry_lfn_invalid>
   11328:	e3500000 	cmp	r0, #0
   1132c:	1affff4a 	bne	1105c <fatfs_mark_file_deleted+0xbc>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11330:	e1a00004 	mov	r0, r4
   11334:	eb00107b 	bl	15528 <fatfs_entry_sfn_only>
   11338:	e3500000 	cmp	r0, #0
   1133c:	0affff46 	beq	1105c <fatfs_mark_file_deleted+0xbc>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11340:	e1a00004 	mov	r0, r4
   11344:	e59d1004 	ldr	r1, [sp, #4]
   11348:	e3a0200b 	mov	r2, #11
   1134c:	eb00215d 	bl	198c8 <strncmp>
   11350:	e3500000 	cmp	r0, #0
   11354:	1affff40 	bne	1105c <fatfs_mark_file_deleted+0xbc>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11358:	e3a03080 	mov	r3, #128	; 0x80
   1135c:	eaffff84 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11360:	e1a0000a 	mov	r0, r10
   11364:	eb00104e 	bl	154a4 <fatfs_entry_lfn_invalid>
   11368:	e3500000 	cmp	r0, #0
   1136c:	1affff35 	bne	11048 <fatfs_mark_file_deleted+0xa8>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11370:	e1a0000a 	mov	r0, r10
   11374:	eb00106b 	bl	15528 <fatfs_entry_sfn_only>
   11378:	e3500000 	cmp	r0, #0
   1137c:	0affff31 	beq	11048 <fatfs_mark_file_deleted+0xa8>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11380:	e1a0000a 	mov	r0, r10
   11384:	e59d1004 	ldr	r1, [sp, #4]
   11388:	e3a0200b 	mov	r2, #11
   1138c:	eb00214d 	bl	198c8 <strncmp>
   11390:	e3500000 	cmp	r0, #0
   11394:	1affff2b 	bne	11048 <fatfs_mark_file_deleted+0xa8>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11398:	e3a03060 	mov	r3, #96	; 0x60
   1139c:	eaffff74 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   113a0:	e1a00004 	mov	r0, r4
   113a4:	eb00103e 	bl	154a4 <fatfs_entry_lfn_invalid>
   113a8:	e3500000 	cmp	r0, #0
   113ac:	1affff4d 	bne	110e8 <fatfs_mark_file_deleted+0x148>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   113b0:	e1a00004 	mov	r0, r4
   113b4:	eb00105b 	bl	15528 <fatfs_entry_sfn_only>
   113b8:	e3500000 	cmp	r0, #0
   113bc:	0affff49 	beq	110e8 <fatfs_mark_file_deleted+0x148>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   113c0:	e1a00004 	mov	r0, r4
   113c4:	e59d1004 	ldr	r1, [sp, #4]
   113c8:	e3a0200b 	mov	r2, #11
   113cc:	eb00213d 	bl	198c8 <strncmp>
   113d0:	e3500000 	cmp	r0, #0
   113d4:	1affff43 	bne	110e8 <fatfs_mark_file_deleted+0x148>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   113d8:	e3a03e16 	mov	r3, #352	; 0x160
   113dc:	eaffff64 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   113e0:	e1a00004 	mov	r0, r4
   113e4:	eb00102e 	bl	154a4 <fatfs_entry_lfn_invalid>
   113e8:	e3500000 	cmp	r0, #0
   113ec:	1affff38 	bne	110d4 <fatfs_mark_file_deleted+0x134>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   113f0:	e1a00004 	mov	r0, r4
   113f4:	eb00104b 	bl	15528 <fatfs_entry_sfn_only>
   113f8:	e3500000 	cmp	r0, #0
   113fc:	0affff34 	beq	110d4 <fatfs_mark_file_deleted+0x134>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11400:	e1a00004 	mov	r0, r4
   11404:	e59d1004 	ldr	r1, [sp, #4]
   11408:	e3a0200b 	mov	r2, #11
   1140c:	eb00212d 	bl	198c8 <strncmp>
   11410:	e3500000 	cmp	r0, #0
   11414:	1affff2e 	bne	110d4 <fatfs_mark_file_deleted+0x134>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11418:	e3a03d05 	mov	r3, #320	; 0x140
   1141c:	eaffff54 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11420:	e1a00004 	mov	r0, r4
   11424:	eb00101e 	bl	154a4 <fatfs_entry_lfn_invalid>
   11428:	e3500000 	cmp	r0, #0
   1142c:	1affff23 	bne	110c0 <fatfs_mark_file_deleted+0x120>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11430:	e1a00004 	mov	r0, r4
   11434:	eb00103b 	bl	15528 <fatfs_entry_sfn_only>
   11438:	e3500000 	cmp	r0, #0
   1143c:	0affff1f 	beq	110c0 <fatfs_mark_file_deleted+0x120>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11440:	e1a00004 	mov	r0, r4
   11444:	e59d1004 	ldr	r1, [sp, #4]
   11448:	e3a0200b 	mov	r2, #11
   1144c:	eb00211d 	bl	198c8 <strncmp>
   11450:	e3500000 	cmp	r0, #0
   11454:	1affff19 	bne	110c0 <fatfs_mark_file_deleted+0x120>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11458:	e3a03e12 	mov	r3, #288	; 0x120
   1145c:	eaffff44 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11460:	e1a00004 	mov	r0, r4
   11464:	eb00100e 	bl	154a4 <fatfs_entry_lfn_invalid>
   11468:	e3500000 	cmp	r0, #0
   1146c:	1affff0e 	bne	110ac <fatfs_mark_file_deleted+0x10c>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11470:	e1a00004 	mov	r0, r4
   11474:	eb00102b 	bl	15528 <fatfs_entry_sfn_only>
   11478:	e3500000 	cmp	r0, #0
   1147c:	0affff0a 	beq	110ac <fatfs_mark_file_deleted+0x10c>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11480:	e1a00004 	mov	r0, r4
   11484:	e59d1004 	ldr	r1, [sp, #4]
   11488:	e3a0200b 	mov	r2, #11
   1148c:	eb00210d 	bl	198c8 <strncmp>
   11490:	e3500000 	cmp	r0, #0
   11494:	1affff04 	bne	110ac <fatfs_mark_file_deleted+0x10c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11498:	e3a03c01 	mov	r3, #256	; 0x100
   1149c:	eaffff34 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   114a0:	e1a00004 	mov	r0, r4
   114a4:	eb000ffe 	bl	154a4 <fatfs_entry_lfn_invalid>
   114a8:	e3500000 	cmp	r0, #0
   114ac:	1afffef9 	bne	11098 <fatfs_mark_file_deleted+0xf8>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   114b0:	e1a00004 	mov	r0, r4
   114b4:	eb00101b 	bl	15528 <fatfs_entry_sfn_only>
   114b8:	e3500000 	cmp	r0, #0
   114bc:	0afffef5 	beq	11098 <fatfs_mark_file_deleted+0xf8>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   114c0:	e1a00004 	mov	r0, r4
   114c4:	e59d1004 	ldr	r1, [sp, #4]
   114c8:	e3a0200b 	mov	r2, #11
   114cc:	eb0020fd 	bl	198c8 <strncmp>
   114d0:	e3500000 	cmp	r0, #0
   114d4:	1afffeef 	bne	11098 <fatfs_mark_file_deleted+0xf8>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   114d8:	e3a030e0 	mov	r3, #224	; 0xe0
   114dc:	eaffff24 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   114e0:	e1a00004 	mov	r0, r4
   114e4:	eb000fee 	bl	154a4 <fatfs_entry_lfn_invalid>
   114e8:	e3500000 	cmp	r0, #0
   114ec:	1affff02 	bne	110fc <fatfs_mark_file_deleted+0x15c>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   114f0:	e1a00004 	mov	r0, r4
   114f4:	eb00100b 	bl	15528 <fatfs_entry_sfn_only>
   114f8:	e3500000 	cmp	r0, #0
   114fc:	0afffefe 	beq	110fc <fatfs_mark_file_deleted+0x15c>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11500:	e1a00004 	mov	r0, r4
   11504:	e59d1004 	ldr	r1, [sp, #4]
   11508:	e3a0200b 	mov	r2, #11
   1150c:	eb0020ed 	bl	198c8 <strncmp>
   11510:	e3500000 	cmp	r0, #0
   11514:	1afffef8 	bne	110fc <fatfs_mark_file_deleted+0x15c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11518:	e3a03d06 	mov	r3, #384	; 0x180
   1151c:	eaffff14 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11520:	e1a00004 	mov	r0, r4
   11524:	eb000fde 	bl	154a4 <fatfs_entry_lfn_invalid>
   11528:	e3500000 	cmp	r0, #0
   1152c:	1afffefc 	bne	11124 <fatfs_mark_file_deleted+0x184>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11530:	e1a00004 	mov	r0, r4
   11534:	eb000ffb 	bl	15528 <fatfs_entry_sfn_only>
   11538:	e3500000 	cmp	r0, #0
   1153c:	0afffef8 	beq	11124 <fatfs_mark_file_deleted+0x184>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11540:	e1a00004 	mov	r0, r4
   11544:	e59d1004 	ldr	r1, [sp, #4]
   11548:	e3a0200b 	mov	r2, #11
   1154c:	eb0020dd 	bl	198c8 <strncmp>
   11550:	e3500000 	cmp	r0, #0
   11554:	1afffef2 	bne	11124 <fatfs_mark_file_deleted+0x184>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11558:	e3a03d07 	mov	r3, #448	; 0x1c0
   1155c:	eaffff04 	b	11174 <fatfs_mark_file_deleted+0x1d4>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   11560:	e1a00004 	mov	r0, r4
   11564:	eb000fce 	bl	154a4 <fatfs_entry_lfn_invalid>
   11568:	e3500000 	cmp	r0, #0
   1156c:	1afffee7 	bne	11110 <fatfs_mark_file_deleted+0x170>
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   11570:	e1a00004 	mov	r0, r4
   11574:	eb000feb 	bl	15528 <fatfs_entry_sfn_only>
   11578:	e3500000 	cmp	r0, #0
   1157c:	0afffee3 	beq	11110 <fatfs_mark_file_deleted+0x170>
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   11580:	e1a00004 	mov	r0, r4
   11584:	e59d1004 	ldr	r1, [sp, #4]
   11588:	e3a0200b 	mov	r2, #11
   1158c:	eb0020cd 	bl	198c8 <strncmp>
   11590:	e3500000 	cmp	r0, #0
   11594:	1afffedd 	bne	11110 <fatfs_mark_file_deleted+0x170>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11598:	e3a03e1a 	mov	r3, #416	; 0x1a0
   1159c:	eafffef4 	b	11174 <fatfs_mark_file_deleted+0x1d4>
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
   115a0:	e3a00000 	mov	r0, #0
        else
            break;
    } // End of while loop

    return 0;
}
   115a4:	e28dd00c 	add	sp, sp, #12
   115a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000115ac <fatfs_list_directory_start>:
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
    dirls->cluster = StartCluster;
    dirls->sector = 0;
   115ac:	e3a03000 	mov	r3, #0
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
    dirls->cluster = StartCluster;
   115b0:	e5812004 	str	r2, [r1, #4]
    dirls->sector = 0;
   115b4:	e5813000 	str	r3, [r1]
    dirls->offset = 0;
   115b8:	e5c13008 	strb	r3, [r1, #8]
   115bc:	e12fff1e 	bx	lr

000115c0 <fatfs_list_directory_next>:
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
   115c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   115c4:	e24ddf46 	sub	sp, sp, #280	; 0x118
   115c8:	e1a07001 	mov	r7, r1
   115cc:	e1a06000 	mov	r6, r0
    struct lfn_cache lfn;
    int dotRequired = 0;
    int result = 0;

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
   115d0:	e3a01000 	mov	r1, #0
   115d4:	e28d0010 	add	r0, sp, #16
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
   115d8:	e1a08002 	mov	r8, r2
                if ( fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);
   115dc:	e3a0a000 	mov	r10, #0
    struct lfn_cache lfn;
    int dotRequired = 0;
    int result = 0;

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
   115e0:	eb000eff 	bl	151e4 <fatfs_lfn_cache_init>
   115e4:	e5972000 	ldr	r2, [r7]

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
   115e8:	e1a00006 	mov	r0, r6
   115ec:	e5971004 	ldr	r1, [r7, #4]
   115f0:	ebfff8d6 	bl	f950 <fatfs_sector_reader.constprop.1>
   115f4:	e3500000 	cmp	r0, #0
   115f8:	0a00004f 	beq	1173c <fatfs_list_directory_next+0x17c>
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   115fc:	e5d75008 	ldrb	r5, [r7, #8]
   11600:	e355000f 	cmp	r5, #15
   11604:	9a000006 	bls	11624 <fatfs_list_directory_next+0x64>
   11608:	ea000018 	b	11670 <fatfs_list_directory_next+0xb0>
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1160c:	e28d0010 	add	r0, sp, #16
   11610:	eb000f0d 	bl	1524c <fatfs_lfn_cache_entry>
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   11614:	e2855001 	add	r5, r5, #1
   11618:	e6ef5075 	uxtb	r5, r5
   1161c:	e3550010 	cmp	r5, #16
   11620:	0a000012 	beq	11670 <fatfs_list_directory_next+0xb0>
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   11624:	e0864285 	add	r4, r6, r5, lsl #5
   11628:	e2844040 	add	r4, r4, #64	; 0x40

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
   1162c:	e1a00004 	mov	r0, r4
   11630:	eb000f95 	bl	1548c <fatfs_entry_lfn_text>
   11634:	e2509000 	subs	r9, r0, #0
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   11638:	e1a01004 	mov	r1, r4

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   1163c:	e1a00004 	mov	r0, r4
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
   11640:	1afffff1 	bne	1160c <fatfs_list_directory_next+0x4c>
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   11644:	eb000f96 	bl	154a4 <fatfs_entry_lfn_invalid>
   11648:	e3500000 	cmp	r0, #0
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1164c:	e1a01004 	mov	r1, r4
                if ( fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);
   11650:	e28d0010 	add	r0, sp, #16
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   11654:	0a00000a 	beq	11684 <fatfs_list_directory_next+0xc4>
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   11658:	e2855001 	add	r5, r5, #1
                if ( fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);
   1165c:	e1a01009 	mov	r1, r9
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   11660:	e6ef5075 	uxtb	r5, r5
                if ( fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);
   11664:	eb000ede 	bl	151e4 <fatfs_lfn_cache_init>
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   11668:	e3550010 	cmp	r5, #16
   1166c:	1affffec 	bne	11624 <fatfs_list_directory_next+0x64>
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
   11670:	e5972000 	ldr	r2, [r7]
            dirls->offset = 0;
   11674:	e5c7a008 	strb	r10, [r7, #8]
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
   11678:	e2822001 	add	r2, r2, #1
   1167c:	e5872000 	str	r2, [r7]
            dirls->offset = 0;
        }
        else
            break;
    }
   11680:	eaffffd8 	b	115e8 <fatfs_list_directory_next+0x28>
                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   11684:	e28d0010 	add	r0, sp, #16
   11688:	eb000f92 	bl	154d8 <fatfs_entry_lfn_exists>
   1168c:	e2509000 	subs	r9, r0, #0
                    return 1;
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
   11690:	e1a00004 	mov	r0, r4
                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   11694:	1a00002a 	bne	11744 <fatfs_list_directory_next+0x184>
                    return 1;
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
   11698:	eb000fa2 	bl	15528 <fatfs_entry_sfn_only>
   1169c:	e3500000 	cmp	r0, #0
   116a0:	0affffdb 	beq	11614 <fatfs_list_directory_next+0x54>
                {
                    fatfs_lfn_cache_init(&lfn, 0);
   116a4:	e28d0010 	add	r0, sp, #16
   116a8:	e1a01009 	mov	r1, r9
   116ac:	eb000ecc 	bl	151e4 <fatfs_lfn_cache_init>
   116b0:	e3140003 	tst	r4, #3

                    memset(short_filename, 0, sizeof(short_filename));
   116b4:	e5cd900c 	strb	r9, [sp, #12]
   116b8:	1a00002f 	bne	1177c <fatfs_list_directory_next+0x1bc>

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
   116bc:	e894000c 	ldm	r4, {r2, r3}
   116c0:	e88d000c 	stm	sp, {r2, r3}

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   116c4:	e5d43009 	ldrb	r3, [r4, #9]
   116c8:	e5d42008 	ldrb	r2, [r4, #8]
                        if (directoryEntry->Name[i] != ' ')
   116cc:	e3530020 	cmp	r3, #32

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   116d0:	e5cd300a 	strb	r3, [sp, #10]
   116d4:	e5d4300a 	ldrb	r3, [r4, #10]
   116d8:	e5cd2009 	strb	r2, [sp, #9]
   116dc:	15cd300b 	strbne	r3, [sp, #11]
                        if (directoryEntry->Name[i] != ' ')
   116e0:	0a00001e 	beq	11760 <fatfs_list_directory_next+0x1a0>

                    // Dot only required if extension present
                    if (dotRequired)
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   116e4:	e5dd3000 	ldrb	r3, [sp]
   116e8:	e353002e 	cmp	r3, #46	; 0x2e
                            short_filename[8] = '.';
   116ec:	13a0302e 	movne	r3, #46	; 0x2e
                        else
                            short_filename[8] = ' ';
   116f0:	03a03020 	moveq	r3, #32
   116f4:	e5cd3008 	strb	r3, [sp, #8]
                    }
                    else
                        short_filename[8] = ' ';

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
   116f8:	e1a0100d 	mov	r1, sp
   116fc:	e1a00008 	mov	r0, r8
   11700:	eb001385 	bl	1651c <fatfs_get_sfn_display_name>

                    if (fatfs_entry_is_dir(directoryEntry))
   11704:	e1a00004 	mov	r0, r4

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);

                    // Next starting position
                    dirls->offset = item + 1;
   11708:	e2855001 	add	r5, r5, #1
                    else
                        short_filename[8] = ' ';

                    fatfs_get_sfn_display_name(entry->filename, short_filename);

                    if (fatfs_entry_is_dir(directoryEntry))
   1170c:	eb000f95 	bl	15568 <fatfs_entry_is_dir>
   11710:	e2900000 	adds	r0, r0, #0
   11714:	13a00001 	movne	r0, #1
   11718:	e5c80104 	strb	r0, [r8, #260]	; 0x104
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);

                    // Next starting position
                    dirls->offset = item + 1;
                    result = 1;
                    return 1;
   1171c:	e3a00001 	mov	r0, #1
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   11720:	e594301c 	ldr	r3, [r4, #28]
   11724:	e588310c 	str	r3, [r8, #268]	; 0x10c
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   11728:	e1d421b4 	ldrh	r2, [r4, #20]
   1172c:	e1d431ba 	ldrh	r3, [r4, #26]
   11730:	e1833802 	orr	r3, r3, r2, lsl #16
   11734:	e5883108 	str	r3, [r8, #264]	; 0x108

                    // Next starting position
                    dirls->offset = item + 1;
   11738:	e5c75008 	strb	r5, [r7, #8]
        else
            break;
    }

    return result;
}
   1173c:	e28ddf46 	add	sp, sp, #280	; 0x118
   11740:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
   11744:	e28d0010 	add	r0, sp, #16
   11748:	eb000f42 	bl	15458 <fatfs_lfn_cache_get>
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
   1174c:	e3002103 	movw	r2, #259	; 0x103

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
   11750:	e1a01000 	mov	r1, r0
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
   11754:	e1a00008 	mov	r0, r8
   11758:	eb0020aa 	bl	19a08 <strncpy>
   1175c:	eaffffe8 	b	11704 <fatfs_list_directory_next+0x144>
                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
                        if (directoryEntry->Name[i] != ' ')
   11760:	e3530020 	cmp	r3, #32

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   11764:	e5cd300b 	strb	r3, [sp, #11]
                        if (directoryEntry->Name[i] != ' ')
   11768:	1affffdd 	bne	116e4 <fatfs_list_directory_next+0x124>
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1176c:	e3520020 	cmp	r2, #32
                            short_filename[8] = '.';
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
   11770:	05cd2008 	strbeq	r2, [sp, #8]
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   11774:	0affffdf 	beq	116f8 <fatfs_list_directory_next+0x138>
   11778:	eaffffd9 	b	116e4 <fatfs_list_directory_next+0x124>

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
   1177c:	e5d4a000 	ldrb	r10, [r4]
   11780:	e5d46001 	ldrb	r6, [r4, #1]
   11784:	e5d4e002 	ldrb	lr, [r4, #2]
   11788:	e5d4c003 	ldrb	r12, [r4, #3]
   1178c:	e5d40004 	ldrb	r0, [r4, #4]
   11790:	e5d41005 	ldrb	r1, [r4, #5]
   11794:	e5d42006 	ldrb	r2, [r4, #6]
   11798:	e5d43007 	ldrb	r3, [r4, #7]
   1179c:	e5cda000 	strb	r10, [sp]
   117a0:	e5cd6001 	strb	r6, [sp, #1]
   117a4:	e5cde002 	strb	lr, [sp, #2]
   117a8:	e5cdc003 	strb	r12, [sp, #3]
   117ac:	e5cd0004 	strb	r0, [sp, #4]
   117b0:	e5cd1005 	strb	r1, [sp, #5]
   117b4:	e5cd2006 	strb	r2, [sp, #6]
   117b8:	e5cd3007 	strb	r3, [sp, #7]
   117bc:	eaffffc0 	b	116c4 <fatfs_list_directory_next+0x104>

000117c0 <fatfs_cache_init>:
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   117c0:	e3e02000 	mvn	r2, #0
        file->cluster_cache_data[i] = 0;
   117c4:	e3a03000 	mov	r3, #0
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   117c8:	e5812228 	str	r2, [r1, #552]	; 0x228
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
}
   117cc:	e3a00001 	mov	r0, #1
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
        file->cluster_cache_data[i] = 0;
   117d0:	e5813268 	str	r3, [r1, #616]	; 0x268
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   117d4:	e581222c 	str	r2, [r1, #556]	; 0x22c
        file->cluster_cache_data[i] = 0;
   117d8:	e581326c 	str	r3, [r1, #620]	; 0x26c
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   117dc:	e5812230 	str	r2, [r1, #560]	; 0x230
        file->cluster_cache_data[i] = 0;
   117e0:	e5813270 	str	r3, [r1, #624]	; 0x270
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   117e4:	e5812234 	str	r2, [r1, #564]	; 0x234
        file->cluster_cache_data[i] = 0;
   117e8:	e5813274 	str	r3, [r1, #628]	; 0x274
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   117ec:	e5812238 	str	r2, [r1, #568]	; 0x238
        file->cluster_cache_data[i] = 0;
   117f0:	e5813278 	str	r3, [r1, #632]	; 0x278
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   117f4:	e581223c 	str	r2, [r1, #572]	; 0x23c
        file->cluster_cache_data[i] = 0;
   117f8:	e581327c 	str	r3, [r1, #636]	; 0x27c
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   117fc:	e5812240 	str	r2, [r1, #576]	; 0x240
        file->cluster_cache_data[i] = 0;
   11800:	e5813280 	str	r3, [r1, #640]	; 0x280
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   11804:	e5812244 	str	r2, [r1, #580]	; 0x244
        file->cluster_cache_data[i] = 0;
   11808:	e5813284 	str	r3, [r1, #644]	; 0x284
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   1180c:	e5812248 	str	r2, [r1, #584]	; 0x248
        file->cluster_cache_data[i] = 0;
   11810:	e5813288 	str	r3, [r1, #648]	; 0x288
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   11814:	e581224c 	str	r2, [r1, #588]	; 0x24c
        file->cluster_cache_data[i] = 0;
   11818:	e581328c 	str	r3, [r1, #652]	; 0x28c
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   1181c:	e5812250 	str	r2, [r1, #592]	; 0x250
        file->cluster_cache_data[i] = 0;
   11820:	e5813290 	str	r3, [r1, #656]	; 0x290
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   11824:	e5812254 	str	r2, [r1, #596]	; 0x254
        file->cluster_cache_data[i] = 0;
   11828:	e5813294 	str	r3, [r1, #660]	; 0x294
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   1182c:	e5812258 	str	r2, [r1, #600]	; 0x258
        file->cluster_cache_data[i] = 0;
   11830:	e5813298 	str	r3, [r1, #664]	; 0x298
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   11834:	e581225c 	str	r2, [r1, #604]	; 0x25c
        file->cluster_cache_data[i] = 0;
   11838:	e581329c 	str	r3, [r1, #668]	; 0x29c
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   1183c:	e5812260 	str	r2, [r1, #608]	; 0x260
        file->cluster_cache_data[i] = 0;
   11840:	e58132a0 	str	r3, [r1, #672]	; 0x2a0
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   11844:	e5812264 	str	r2, [r1, #612]	; 0x264
        file->cluster_cache_data[i] = 0;
   11848:	e58132a4 	str	r3, [r1, #676]	; 0x2a4
    }
#endif

    return 1;
}
   1184c:	e12fff1e 	bx	lr

00011850 <fatfs_cache_get_next_cluster>:
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;
   11850:	e202000f 	and	r0, r2, #15

    if (file->cluster_cache_idx[slot] == clusterIdx)
   11854:	e280c08a 	add	r12, r0, #138	; 0x8a
   11858:	e791c10c 	ldr	r12, [r1, r12, lsl #2]
   1185c:	e15c0002 	cmp	r12, r2
    {
        *pNextCluster = file->cluster_cache_data[slot];
   11860:	0280209a 	addeq	r2, r0, #154	; 0x9a
        return 1;
   11864:	03a00001 	moveq	r0, #1
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;

    if (file->cluster_cache_idx[slot] == clusterIdx)
    {
        *pNextCluster = file->cluster_cache_data[slot];
   11868:	07912102 	ldreq	r2, [r1, r2, lsl #2]
        return 1;
    }
#endif

    return 0;
   1186c:	13a00000 	movne	r0, #0
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;

    if (file->cluster_cache_idx[slot] == clusterIdx)
    {
        *pNextCluster = file->cluster_cache_data[slot];
   11870:	05832000 	streq	r2, [r3]
        return 1;
    }
#endif

    return 0;
}
   11874:	e12fff1e 	bx	lr

00011878 <fatfs_cache_set_next_cluster>:
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;
   11878:	e202000f 	and	r0, r2, #15
}
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
   1187c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;

    if (file->cluster_cache_idx[slot] == clusterIdx)
   11880:	e280c08a 	add	r12, r0, #138	; 0x8a
   11884:	e791410c 	ldr	r4, [r1, r12, lsl #2]
   11888:	e1540002 	cmp	r4, r2
        file->cluster_cache_data[slot] = nextCluster;
    else
    {
        file->cluster_cache_idx[slot] = clusterIdx;
   1188c:	1781210c 	strne	r2, [r1, r12, lsl #2]
   11890:	e280209a 	add	r2, r0, #154	; 0x9a
   11894:	e7813102 	str	r3, [r1, r2, lsl #2]
        file->cluster_cache_data[slot] = nextCluster;
    }
#endif

    return 1;
}
   11898:	e3a00001 	mov	r0, #1
   1189c:	e8bd0010 	ldmfd	sp!, {r4}
   118a0:	e12fff1e 	bx	lr

000118a4 <_open_directory>:
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   118a4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   118a8:	e1a06000 	mov	r6, r0
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   118ac:	e3060150 	movw	r0, #24912	; 0x6150
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   118b0:	e24ddf4a 	sub	sp, sp, #296	; 0x128
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   118b4:	e3420673 	movt	r0, #9843	; 0x2673
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   118b8:	e1a09001 	mov	r9, r1
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   118bc:	ebfffa31 	bl	10188 <fatfs_get_root_cluster>
   118c0:	e1a05000 	mov	r5, r0

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   118c4:	e1a00006 	mov	r0, r6
   118c8:	eb001190 	bl	15f10 <fatfs_total_path_levels>

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   118cc:	e250a000 	subs	r10, r0, #0
   118d0:	ba000022 	blt	11960 <_open_directory+0xbc>
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   118d4:	e30f8eec 	movw	r8, #65260	; 0xfeec
   118d8:	e30f7ef2 	movw	r7, #65266	; 0xfef2

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   118dc:	e3a04000 	mov	r4, #0
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   118e0:	e34f8fff 	movt	r8, #65535	; 0xffff
   118e4:	e34f7fff 	movt	r7, #65535	; 0xffff
   118e8:	ea00000c 	b	11920 <_open_directory+0x7c>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   118ec:	ebfffa27 	bl	10190 <fatfs_get_file_entry>
   118f0:	e3500000 	cmp	r0, #0
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   118f4:	e1a0000d 	mov	r0, sp
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   118f8:	0a000015 	beq	11954 <_open_directory+0xb0>
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   118fc:	eb000f19 	bl	15568 <fatfs_entry_is_dir>
   11900:	e3500000 	cmp	r0, #0
   11904:	0a000012 	beq	11954 <_open_directory+0xb0>
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11908:	e28d2f4a 	add	r2, sp, #296	; 0x128

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1190c:	e15a0004 	cmp	r10, r4
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11910:	e19250b8 	ldrh	r5, [r2, r8]
   11914:	e19230b7 	ldrh	r3, [r2, r7]
   11918:	e0835805 	add	r5, r3, r5, lsl #16

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1191c:	ba00000f 	blt	11960 <_open_directory+0xbc>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   11920:	e1a01004 	mov	r1, r4
   11924:	e28d2024 	add	r2, sp, #36	; 0x24
   11928:	e3a03f41 	mov	r3, #260	; 0x104
   1192c:	e1a00006 	mov	r0, r6
   11930:	eb00119e 	bl	15fb0 <fatfs_get_substring>
   11934:	e3700001 	cmn	r0, #1
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   11938:	e3060150 	movw	r0, #24912	; 0x6150

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1193c:	e2844001 	add	r4, r4, #1
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   11940:	e1a01005 	mov	r1, r5
   11944:	e28d2024 	add	r2, sp, #36	; 0x24
   11948:	e1a0300d 	mov	r3, sp
   1194c:	e3420673 	movt	r0, #9843	; 0x2673
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   11950:	1affffe5 	bne	118ec <_open_directory+0x48>
            return 0;
   11954:	e3a00000 	mov	r0, #0
            return 0;
    }

    *pathCluster = startcluster;
    return 1;
}
   11958:	e28ddf4a 	add	sp, sp, #296	; 0x128
   1195c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
        else
            return 0;
    }

    *pathCluster = startcluster;
    return 1;
   11960:	e3a00001 	mov	r0, #1
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   11964:	e5895000 	str	r5, [r9]
   11968:	eafffffa 	b	11958 <_open_directory+0xb4>

0001196c <_write_sectors>:
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1196c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11970:	e3067150 	movw	r7, #24912	; 0x6150
   11974:	e3427673 	movt	r7, #9843	; 0x2673
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   11978:	e24dd014 	sub	sp, sp, #20
   1197c:	e1a05000 	mov	r5, r0
   11980:	e1a09003 	mov	r9, r3
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11984:	e5d7a000 	ldrb	r10, [r7]
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
    uint32 SectorNumber = 0;
    uint32 ClusterIdx = 0;
    uint32 Cluster = 0;
    uint32 LastCluster = FAT32_LAST_CLUSTER;
   11988:	e3e03000 	mvn	r3, #0
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1198c:	e1a08001 	mov	r8, r1
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11990:	e1a00001 	mov	r0, r1
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
    uint32 SectorNumber = 0;
    uint32 ClusterIdx = 0;
    uint32 Cluster = 0;
    uint32 LastCluster = FAT32_LAST_CLUSTER;
   11994:	e58d3008 	str	r3, [sp, #8]
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11998:	e1a0100a 	mov	r1, r10
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1199c:	e58d2004 	str	r2, [sp, #4]
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   119a0:	eb001be5 	bl	1893c <__aeabi_uidiv>
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
   119a4:	e068809a 	mls	r8, r10, r0, r8
    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - SectorNumber;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   119a8:	e59542a8 	ldr	r4, [r5, #680]	; 0x2a8
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   119ac:	e1a06000 	mov	r6, r0
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
   119b0:	e0883009 	add	r3, r8, r9
   119b4:	e15a0003 	cmp	r10, r3
        count = _fs.sectors_per_cluster - SectorNumber;
   119b8:	3068a00a 	rsbcc	r10, r8, r10
    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
   119bc:	21a0a009 	movcs	r10, r9
        count = _fs.sectors_per_cluster - SectorNumber;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   119c0:	e1540000 	cmp	r4, r0
        Cluster = file->last_fat_lookup.CurrentCluster;
   119c4:	0595b2ac 	ldreq	r11, [r5, #684]	; 0x2ac
    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - SectorNumber;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   119c8:	0a000032 	beq	11a98 <_write_sectors+0x12c>
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   119cc:	e3500000 	cmp	r0, #0
   119d0:	1a00003f 	bne	11ad4 <_write_sectors+0x168>
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;
   119d4:	e595b004 	ldr	r11, [r5, #4]
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   119d8:	e3a04000 	mov	r4, #0
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   119dc:	e1560004 	cmp	r6, r4
   119e0:	8a000007 	bhi	11a04 <_write_sectors+0x98>
   119e4:	ea00001b 	b	11a58 <_write_sectors+0xec>

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }

            LastCluster = Cluster;
   119e8:	e58db008 	str	r11, [sp, #8]
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   119ec:	e2844001 	add	r4, r4, #1
                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }

            LastCluster = Cluster;
            Cluster = nextCluster;
   119f0:	e59db00c 	ldr	r11, [sp, #12]

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
   119f4:	e37b0001 	cmn	r11, #1
   119f8:	0a000018 	beq	11a60 <_write_sectors+0xf4>
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   119fc:	e1560004 	cmp	r6, r4
   11a00:	9a000022 	bls	11a90 <_write_sectors+0x124>
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   11a04:	e3060150 	movw	r0, #24912	; 0x6150
   11a08:	e1a02004 	mov	r2, r4
   11a0c:	e28d300c 	add	r3, sp, #12
   11a10:	e1a01005 	mov	r1, r5
   11a14:	e3420673 	movt	r0, #9843	; 0x2673
   11a18:	ebffff8c 	bl	11850 <fatfs_cache_get_next_cluster>
   11a1c:	e3500000 	cmp	r0, #0
   11a20:	1afffff0 	bne	119e8 <_write_sectors+0x7c>
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   11a24:	e3060150 	movw	r0, #24912	; 0x6150
   11a28:	e1a0100b 	mov	r1, r11
   11a2c:	e3420673 	movt	r0, #9843	; 0x2673
   11a30:	eb0014f8 	bl	16e18 <fatfs_find_next_cluster>
   11a34:	e1a0e000 	mov	lr, r0

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   11a38:	e3060150 	movw	r0, #24912	; 0x6150
   11a3c:	e1a02004 	mov	r2, r4
   11a40:	e1a01005 	mov	r1, r5
   11a44:	e1a0300e 	mov	r3, lr
   11a48:	e3420673 	movt	r0, #9843	; 0x2673

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   11a4c:	e58de00c 	str	lr, [sp, #12]

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   11a50:	ebffff88 	bl	11878 <fatfs_cache_set_next_cluster>
   11a54:	eaffffe3 	b	119e8 <_write_sectors+0x7c>
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
   11a58:	e37b0001 	cmn	r11, #1
   11a5c:	1a00000b 	bne	11a90 <_write_sectors+0x124>
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
   11a60:	e5d71000 	ldrb	r1, [r7]
   11a64:	e2410001 	sub	r0, r1, #1
   11a68:	e0800009 	add	r0, r0, r9
   11a6c:	eb001bb2 	bl	1893c <__aeabi_uidiv>
   11a70:	e1a02000 	mov	r2, r0
   11a74:	e3060150 	movw	r0, #24912	; 0x6150
   11a78:	e3420673 	movt	r0, #9843	; 0x2673
   11a7c:	e28d1008 	add	r1, sp, #8
   11a80:	eb0016ad 	bl	1753c <fatfs_add_free_space>
   11a84:	e3500000 	cmp	r0, #0
   11a88:	0a000016 	beq	11ae8 <_write_sectors+0x17c>
                return 0;

            Cluster = LastCluster;
   11a8c:	e59db008 	ldr	r11, [sp, #8]
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
   11a90:	e585b2ac 	str	r11, [r5, #684]	; 0x2ac
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
   11a94:	e58562a8 	str	r6, [r5, #680]	; 0x2a8
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
   11a98:	e3060150 	movw	r0, #24912	; 0x6150
   11a9c:	e1a0100b 	mov	r1, r11
   11aa0:	e3420673 	movt	r0, #9843	; 0x2673
   11aa4:	ebfff8ad 	bl	fd60 <fatfs_lba_of_cluster>
   11aa8:	e0801008 	add	r1, r0, r8

    if (fatfs_sector_write(&_fs, lba, buf, count))
   11aac:	e3060150 	movw	r0, #24912	; 0x6150
   11ab0:	e3420673 	movt	r0, #9843	; 0x2673
   11ab4:	e59d2004 	ldr	r2, [sp, #4]
   11ab8:	e1a0300a 	mov	r3, r10
   11abc:	ebfff8bd 	bl	fdb8 <fatfs_sector_write>
   11ac0:	e3500000 	cmp	r0, #0
   11ac4:	0a000007 	beq	11ae8 <_write_sectors+0x17c>
        return count;
    else
        return 0;
}
   11ac8:	e1a0000a 	mov	r0, r10
   11acc:	e28dd014 	add	sp, sp, #20
   11ad0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   11ad4:	e2843001 	add	r3, r4, #1
   11ad8:	e1530000 	cmp	r3, r0
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
   11adc:	0595b2ac 	ldreq	r11, [r5, #684]	; 0x2ac
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   11ae0:	1affffbb 	bne	119d4 <_write_sectors+0x68>
   11ae4:	eaffffbc 	b	119dc <_write_sectors+0x70>
        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
                return 0;
   11ae8:	e3a0a000 	mov	r10, #0
   11aec:	eafffff5 	b	11ac8 <_write_sectors+0x15c>

00011af0 <_read_sectors>:
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11af0:	e306c150 	movw	r12, #24912	; 0x6150
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   11af4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11af8:	e342c673 	movt	r12, #9843	; 0x2673
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   11afc:	e1a0a001 	mov	r10, r1
   11b00:	e1a05000 	mov	r5, r0
   11b04:	e24dd008 	sub	sp, sp, #8
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11b08:	e5dc4000 	ldrb	r4, [r12]
   11b0c:	e1a00001 	mov	r0, r1
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   11b10:	e1a08003 	mov	r8, r3
   11b14:	e1a09002 	mov	r9, r2
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11b18:	e1a01004 	mov	r1, r4
   11b1c:	eb001b86 	bl	1893c <__aeabi_uidiv>
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
   11b20:	e06aa094 	mls	r10, r4, r0, r10
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   11b24:	e1a06000 	mov	r6, r0
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
   11b28:	e08a3008 	add	r3, r10, r8
   11b2c:	e1540003 	cmp	r4, r3
        count = _fs.sectors_per_cluster - Sector;
   11b30:	306a8004 	rsbcc	r8, r10, r4

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   11b34:	e59542a8 	ldr	r4, [r5, #680]	; 0x2a8
   11b38:	e1540000 	cmp	r4, r0
   11b3c:	0a000030 	beq	11c04 <_read_sectors+0x114>
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   11b40:	e3500000 	cmp	r0, #0
   11b44:	1a000033 	bne	11c18 <_read_sectors+0x128>
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;
   11b48:	e5957004 	ldr	r7, [r5, #4]
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   11b4c:	e3a04000 	mov	r4, #0
   11b50:	ea000001 	b	11b5c <_read_sectors+0x6c>

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }

            Cluster = nextCluster;
   11b54:	e59d7004 	ldr	r7, [sp, #4]
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   11b58:	e2844001 	add	r4, r4, #1
   11b5c:	e1560004 	cmp	r6, r4
   11b60:	9a000014 	bls	11bb8 <_read_sectors+0xc8>
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   11b64:	e3060150 	movw	r0, #24912	; 0x6150
   11b68:	e1a02004 	mov	r2, r4
   11b6c:	e28d3004 	add	r3, sp, #4
   11b70:	e1a01005 	mov	r1, r5
   11b74:	e3420673 	movt	r0, #9843	; 0x2673
   11b78:	ebffff34 	bl	11850 <fatfs_cache_get_next_cluster>
   11b7c:	e3500000 	cmp	r0, #0
   11b80:	1afffff3 	bne	11b54 <_read_sectors+0x64>
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   11b84:	e3060150 	movw	r0, #24912	; 0x6150
   11b88:	e1a01007 	mov	r1, r7
   11b8c:	e3420673 	movt	r0, #9843	; 0x2673
   11b90:	eb0014a0 	bl	16e18 <fatfs_find_next_cluster>
   11b94:	e1a0c000 	mov	r12, r0

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   11b98:	e3060150 	movw	r0, #24912	; 0x6150
   11b9c:	e1a02004 	mov	r2, r4
   11ba0:	e1a01005 	mov	r1, r5
   11ba4:	e1a0300c 	mov	r3, r12
   11ba8:	e3420673 	movt	r0, #9843	; 0x2673

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   11bac:	e58dc004 	str	r12, [sp, #4]

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   11bb0:	ebffff30 	bl	11878 <fatfs_cache_set_next_cluster>
   11bb4:	eaffffe6 	b	11b54 <_read_sectors+0x64>

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
   11bb8:	e3770001 	cmn	r7, #1
   11bbc:	0a000013 	beq	11c10 <_read_sectors+0x120>
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
   11bc0:	e58572ac 	str	r7, [r5, #684]	; 0x2ac
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
   11bc4:	e58562a8 	str	r6, [r5, #680]	; 0x2a8
    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
   11bc8:	e3060150 	movw	r0, #24912	; 0x6150
   11bcc:	e1a01007 	mov	r1, r7
   11bd0:	e3420673 	movt	r0, #9843	; 0x2673
   11bd4:	ebfff861 	bl	fd60 <fatfs_lba_of_cluster>
   11bd8:	e080100a 	add	r1, r0, r10

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
   11bdc:	e3060150 	movw	r0, #24912	; 0x6150
   11be0:	e3420673 	movt	r0, #9843	; 0x2673
   11be4:	e1a02009 	mov	r2, r9
   11be8:	e1a03008 	mov	r3, r8
   11bec:	ebfff86a 	bl	fd9c <fatfs_sector_read>
   11bf0:	e3500000 	cmp	r0, #0
   11bf4:	0a000005 	beq	11c10 <_read_sectors+0x120>
        return count;
    else
        return 0;
}
   11bf8:	e1a00008 	mov	r0, r8
   11bfc:	e28dd008 	add	sp, sp, #8
   11c00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
    if ((Sector + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - Sector;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
        Cluster = file->last_fat_lookup.CurrentCluster;
   11c04:	e59572ac 	ldr	r7, [r5, #684]	; 0x2ac
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
   11c08:	e3770001 	cmn	r7, #1
   11c0c:	1affffed 	bne	11bc8 <_read_sectors+0xd8>
        return 0;
   11c10:	e3a08000 	mov	r8, #0
   11c14:	eafffff7 	b	11bf8 <_read_sectors+0x108>
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   11c18:	e2843001 	add	r3, r4, #1
   11c1c:	e1530000 	cmp	r3, r0
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
   11c20:	059572ac 	ldreq	r7, [r5, #684]	; 0x2ac
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   11c24:	1affffc7 	bne	11b48 <_read_sectors+0x58>
   11c28:	eaffffcb 	b	11b5c <_read_sectors+0x6c>

00011c2c <_open_file>:
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
   11c2c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
{
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   11c30:	e30850c8 	movw	r5, #32968	; 0x80c8
   11c34:	e3425675 	movt	r5, #9845	; 0x2675
   11c38:	e24ddf53 	sub	sp, sp, #332	; 0x14c
   11c3c:	e1a07000 	mov	r7, r0
   11c40:	e59581dc 	ldr	r8, [r5, #476]	; 0x1dc
   11c44:	e58d500c 	str	r5, [sp, #12]
    if (node)
   11c48:	e3580000 	cmp	r8, #0
   11c4c:	0a0000f7 	beq	12030 <_open_file+0x404>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   11c50:	e5983000 	ldr	r3, [r8]
        list->head = node->next;
   11c54:	e5982004 	ldr	r2, [r8, #4]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   11c58:	e3530000 	cmp	r3, #0
        list->head = node->next;
   11c5c:	059dc00c 	ldreq	r12, [sp, #12]
    else
        node->previous->next = node->next;
   11c60:	15832004 	strne	r2, [r3, #4]
   11c64:	15982004 	ldrne	r2, [r8, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   11c68:	058c21dc 	streq	r2, [r12, #476]	; 0x1dc
    else
        node->previous->next = node->next;

    if(!node->next)
   11c6c:	e3520000 	cmp	r2, #0
        list->tail = node->previous;
   11c70:	059d500c 	ldreq	r5, [sp, #12]
   11c74:	159dc00c 	ldrne	r12, [sp, #12]
    else
        node->next->previous = node->previous;
   11c78:	15823000 	strne	r3, [r2]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   11c7c:	e30820c8 	movw	r2, #32968	; 0x80c8
   11c80:	01a0c005 	moveq	r12, r5
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   11c84:	058531e0 	streq	r3, [r5, #480]	; 0x1e0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   11c88:	e59c31e8 	ldr	r3, [r12, #488]	; 0x1e8
   11c8c:	e3422675 	movt	r2, #9845	; 0x2675
   11c90:	e3530000 	cmp	r3, #0
   11c94:	0a0000eb 	beq	12048 <_open_file+0x41c>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   11c98:	e5931004 	ldr	r1, [r3, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   11c9c:	e5883000 	str	r3, [r8]
    new_node->next = node->next;
   11ca0:	e5881004 	str	r1, [r8, #4]
    if (!node->next)
   11ca4:	e5931004 	ldr	r1, [r3, #4]
   11ca8:	e3510000 	cmp	r1, #0
        list->tail = new_node;
   11cac:	058281e8 	streq	r8, [r2, #488]	; 0x1e8
    else
        node->next->previous = new_node;
   11cb0:	15818000 	strne	r8, [r1]
    node->next = new_node;
   11cb4:	e5838004 	str	r8, [r3, #4]

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
   11cb8:	e2485e4b 	sub	r5, r8, #1200	; 0x4b0
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
   11cbc:	e255400c 	subs	r4, r5, #12

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
   11cc0:	e58d5010 	str	r5, [sp, #16]
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
   11cc4:	0a0000d9 	beq	12030 <_open_file+0x404>
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   11cc8:	e3a06f41 	mov	r6, #260	; 0x104
   11ccc:	e2855008 	add	r5, r5, #8
   11cd0:	e3a01000 	mov	r1, #0
   11cd4:	e1a02006 	mov	r2, r6
    memset(file->filename, '\0', sizeof(file->filename));
   11cd8:	e248afe9 	sub	r10, r8, #932	; 0x3a4
    file = _allocate_file();
    if (!file)
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   11cdc:	e1a00005 	mov	r0, r5
   11ce0:	eb001e93 	bl	19734 <memset>
    memset(file->filename, '\0', sizeof(file->filename));
   11ce4:	e3a01000 	mov	r1, #0
   11ce8:	e1a02006 	mov	r2, r6
   11cec:	e1a0000a 	mov	r0, r10
   11cf0:	eb001e8f 	bl	19734 <memset>

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   11cf4:	e58d6000 	str	r6, [sp]
   11cf8:	e1a00007 	mov	r0, r7
   11cfc:	e1a01005 	mov	r1, r5
   11d00:	e1a02006 	mov	r2, r6
   11d04:	e1a0300a 	mov	r3, r10
   11d08:	eb0010df 	bl	1608c <fatfs_split_path>
   11d0c:	e3700001 	cmn	r0, #1
   11d10:	0a0000db 	beq	12084 <_open_file+0x458>
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   11d14:	e59dc00c 	ldr	r12, [sp, #12]
   11d18:	e59c61e4 	ldr	r6, [r12, #484]	; 0x1e4
   11d1c:	e3560000 	cmp	r6, #0
   11d20:	1a000003 	bne	11d34 <_open_file+0x108>
   11d24:	ea00002f 	b	11de8 <_open_file+0x1bc>
   11d28:	e5966004 	ldr	r6, [r6, #4]
   11d2c:	e3560000 	cmp	r6, #0
   11d30:	0a00002c 	beq	11de8 <_open_file+0x1bc>
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   11d34:	e2460e4b 	sub	r0, r6, #1200	; 0x4b0

        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   11d38:	e1a01005 	mov	r1, r5
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   11d3c:	e240300c 	sub	r3, r0, #12

        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   11d40:	e2800008 	add	r0, r0, #8
    fat_list_for_each(&_open_file_list, node)
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);

        // If not the current file
        if (openFile != file)
   11d44:	e1540003 	cmp	r4, r3
   11d48:	0afffff6 	beq	11d28 <_open_file+0xfc>
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   11d4c:	eb00113e 	bl	1624c <fatfs_compare_names>
   11d50:	e3500000 	cmp	r0, #0
   11d54:	0afffff3 	beq	11d28 <_open_file+0xfc>
   11d58:	e2460fe9 	sub	r0, r6, #932	; 0x3a4
   11d5c:	e1a0100a 	mov	r1, r10
   11d60:	eb001139 	bl	1624c <fatfs_compare_names>
   11d64:	e3500000 	cmp	r0, #0
   11d68:	0affffee 	beq	11d28 <_open_file+0xfc>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   11d6c:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   11d70:	e3530000 	cmp	r3, #0
   11d74:	0a0000d8 	beq	120dc <_open_file+0x4b0>
        list->head = node->next;
    else
        node->previous->next = node->next;
   11d78:	e59d5010 	ldr	r5, [sp, #16]
   11d7c:	e59524b4 	ldr	r2, [r5, #1204]	; 0x4b4
   11d80:	e5832004 	str	r2, [r3, #4]
   11d84:	e59524b4 	ldr	r2, [r5, #1204]	; 0x4b4

    if(!node->next)
   11d88:	e3520000 	cmp	r2, #0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   11d8c:	e30810c8 	movw	r1, #32968	; 0x80c8
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   11d90:	059dc00c 	ldreq	r12, [sp, #12]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   11d94:	e3421675 	movt	r1, #9845	; 0x2675
   11d98:	159d500c 	ldrne	r5, [sp, #12]
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   11d9c:	15823000 	strne	r3, [r2]
   11da0:	01a0500c 	moveq	r5, r12
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   11da4:	058c31e8 	streq	r3, [r12, #488]	; 0x1e8
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   11da8:	e59521e0 	ldr	r2, [r5, #480]	; 0x1e0
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   11dac:	e2843e4b 	add	r3, r4, #1200	; 0x4b0
   11db0:	e283300c 	add	r3, r3, #12
   11db4:	e3520000 	cmp	r2, #0
   11db8:	0a0000b9 	beq	120a4 <_open_file+0x478>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   11dbc:	e5920004 	ldr	r0, [r2, #4]
   11dc0:	e59dc010 	ldr	r12, [sp, #16]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   11dc4:	e58424bc 	str	r2, [r4, #1212]	; 0x4bc
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
        {
            _free_file(file);
            return NULL;
   11dc8:	e3a04000 	mov	r4, #0
    new_node->next = node->next;
   11dcc:	e58c04b4 	str	r0, [r12, #1204]	; 0x4b4
    if (!node->next)
   11dd0:	e5920004 	ldr	r0, [r2, #4]
   11dd4:	e3500000 	cmp	r0, #0
        list->tail = new_node;
   11dd8:	058131e0 	streq	r3, [r1, #480]	; 0x1e0
    else
        node->next->previous = new_node;
   11ddc:	15803000 	strne	r3, [r0]
    node->next = new_node;
   11de0:	e5823004 	str	r3, [r2, #4]
   11de4:	ea000062 	b	11f74 <_open_file+0x348>
        _free_file(file);
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0]==0)
   11de8:	e5d43014 	ldrb	r3, [r4, #20]
   11dec:	e3530000 	cmp	r3, #0
   11df0:	0a00002f 	beq	11eb4 <_open_file+0x288>
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   11df4:	e3060150 	movw	r0, #24912	; 0x6150
   11df8:	e3420673 	movt	r0, #9843	; 0x2673
   11dfc:	ebfff8e1 	bl	10188 <fatfs_get_root_cluster>
   11e00:	e1a09000 	mov	r9, r0

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   11e04:	e1a00005 	mov	r0, r5
   11e08:	eb001040 	bl	15f10 <fatfs_total_path_levels>

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   11e0c:	e3500000 	cmp	r0, #0
   11e10:	e58d0014 	str	r0, [sp, #20]
   11e14:	b28d7044 	addlt	r7, sp, #68	; 0x44
   11e18:	ba000088 	blt	12040 <_open_file+0x414>
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11e1c:	e30fcef2 	movw	r12, #65266	; 0xfef2
   11e20:	e30fbeec 	movw	r11, #65260	; 0xfeec
   11e24:	e34fcfff 	movt	r12, #65535	; 0xffff
   11e28:	e58da018 	str	r10, [sp, #24]
   11e2c:	e58d801c 	str	r8, [sp, #28]

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   11e30:	e3a06000 	mov	r6, #0
   11e34:	e28d7044 	add	r7, sp, #68	; 0x44
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11e38:	e34fbfff 	movt	r11, #65535	; 0xffff
   11e3c:	e59da014 	ldr	r10, [sp, #20]
   11e40:	e1a0800c 	mov	r8, r12
   11e44:	ea00000c 	b	11e7c <_open_file+0x250>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   11e48:	ebfff8d0 	bl	10190 <fatfs_get_file_entry>
   11e4c:	e3500000 	cmp	r0, #0
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   11e50:	e28d0020 	add	r0, sp, #32
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   11e54:	0affffc4 	beq	11d6c <_open_file+0x140>
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   11e58:	eb000dc2 	bl	15568 <fatfs_entry_is_dir>
   11e5c:	e3500000 	cmp	r0, #0
   11e60:	0affffc1 	beq	11d6c <_open_file+0x140>
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11e64:	e28d1f52 	add	r1, sp, #328	; 0x148

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   11e68:	e15a0006 	cmp	r10, r6
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11e6c:	e191c0bb 	ldrh	r12, [r1, r11]
   11e70:	e19130b8 	ldrh	r3, [r1, r8]
   11e74:	e083980c 	add	r9, r3, r12, lsl #16

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   11e78:	ba00006e 	blt	12038 <_open_file+0x40c>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   11e7c:	e1a01006 	mov	r1, r6
   11e80:	e1a02007 	mov	r2, r7
   11e84:	e3a03f41 	mov	r3, #260	; 0x104
   11e88:	e1a00005 	mov	r0, r5
   11e8c:	eb001047 	bl	15fb0 <fatfs_get_substring>
   11e90:	e3700001 	cmn	r0, #1
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   11e94:	e3060150 	movw	r0, #24912	; 0x6150

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   11e98:	e2866001 	add	r6, r6, #1
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   11e9c:	e1a01009 	mov	r1, r9
   11ea0:	e1a02007 	mov	r2, r7
   11ea4:	e28d3020 	add	r3, sp, #32
   11ea8:	e3420673 	movt	r0, #9843	; 0x2673
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   11eac:	1affffe5 	bne	11e48 <_open_file+0x21c>
   11eb0:	eaffffad 	b	11d6c <_open_file+0x140>
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0]==0)
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   11eb4:	e3060150 	movw	r0, #24912	; 0x6150
   11eb8:	e28d7044 	add	r7, sp, #68	; 0x44
   11ebc:	e3420673 	movt	r0, #9843	; 0x2673
   11ec0:	ebfff8b0 	bl	10188 <fatfs_get_root_cluster>
   11ec4:	e1a09000 	mov	r9, r0
   11ec8:	e50804bc 	str	r0, [r8, #-1212]	; 0xfffffb44
            return NULL;
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
   11ecc:	e3060150 	movw	r0, #24912	; 0x6150
   11ed0:	e1a01009 	mov	r1, r9
   11ed4:	e3420673 	movt	r0, #9843	; 0x2673
   11ed8:	e1a0200a 	mov	r2, r10
   11edc:	e1a03007 	mov	r3, r7
   11ee0:	ebfff8aa 	bl	10190 <fatfs_get_file_entry>
   11ee4:	e3500000 	cmp	r0, #0
   11ee8:	0a000024 	beq	11f80 <_open_file+0x354>
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
   11eec:	e1a00007 	mov	r0, r7
   11ef0:	eb000d9f 	bl	15574 <fatfs_entry_is_file>
   11ef4:	e3500000 	cmp	r0, #0
   11ef8:	0a000020 	beq	11f80 <_open_file+0x354>
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   11efc:	e8b70003 	ldm	r7!, {r0, r1}
   11f00:	e284cf87 	add	r12, r4, #540	; 0x21c
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
   11f04:	e3a02000 	mov	r2, #0
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
   11f08:	e3e03000 	mvn	r3, #0
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   11f0c:	e584021c 	str	r0, [r4, #540]	; 0x21c

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

            fatfs_cache_init(&_fs, file);
   11f10:	e3060150 	movw	r0, #24912	; 0x6150
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   11f14:	e5841220 	str	r1, [r4, #544]	; 0x220

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

            fatfs_cache_init(&_fs, file);
   11f18:	e3420673 	movt	r0, #9843	; 0x2673
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   11f1c:	e1d750b0 	ldrh	r5, [r7]

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

            fatfs_cache_init(&_fs, file);
   11f20:	e1a01004 	mov	r1, r4
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   11f24:	e5d7e002 	ldrb	lr, [r7, #2]
   11f28:	e1cc50b8 	strh	r5, [r12, #8]
   11f2c:	e5c4e226 	strb	lr, [r4, #550]	; 0x226
            file->filelength = FAT_HTONL(sfEntry.FileSize);
   11f30:	e59dc060 	ldr	r12, [sp, #96]	; 0x60
            file->bytenum = 0;
   11f34:	e5842008 	str	r2, [r4, #8]
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
   11f38:	e59d5010 	ldr	r5, [sp, #16]
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
   11f3c:	e584c00c 	str	r12, [r4, #12]
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11f40:	e1dde5b8 	ldrh	lr, [sp, #88]	; 0x58
   11f44:	e1ddc5be 	ldrh	r12, [sp, #94]	; 0x5e
            file->file_data_address = 0xFFFFFFFF;
            file->file_data_dirty = 0;
   11f48:	e58424b4 	str	r2, [r4, #1204]	; 0x4b4
            file->filelength_changed = 0;
   11f4c:	e5842010 	str	r2, [r4, #16]
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
   11f50:	e58534a4 	str	r3, [r5, #1188]	; 0x4a4
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11f54:	e08c280e 	add	r2, r12, lr, lsl #16
            file->file_data_address = 0xFFFFFFFF;
            file->file_data_dirty = 0;
            file->filelength_changed = 0;

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   11f58:	e58432a8 	str	r3, [r4, #680]	; 0x2a8
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   11f5c:	e58432ac 	str	r3, [r4, #684]	; 0x2ac
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   11f60:	e5842004 	str	r2, [r4, #4]

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

            fatfs_cache_init(&_fs, file);
   11f64:	ebfffe15 	bl	117c0 <fatfs_cache_init>

            fatfs_fat_purge(&_fs);
   11f68:	e3060150 	movw	r0, #24912	; 0x6150
   11f6c:	e3420673 	movt	r0, #9843	; 0x2673
   11f70:	eb001381 	bl	16d7c <fatfs_fat_purge>
            return file;
        }

    _free_file(file);
    return NULL;
}
   11f74:	e1a00004 	mov	r0, r4
   11f78:	e28ddf53 	add	sp, sp, #332	; 0x14c
   11f7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   11f80:	e59dc010 	ldr	r12, [sp, #16]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   11f84:	e30810c8 	movw	r1, #32968	; 0x80c8
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   11f88:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   11f8c:	e3421675 	movt	r1, #9845	; 0x2675
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   11f90:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   11f94:	e3530000 	cmp	r3, #0
        list->head = node->next;
   11f98:	059d500c 	ldreq	r5, [sp, #12]
    else
        node->previous->next = node->next;
   11f9c:	15832004 	strne	r2, [r3, #4]
   11fa0:	159c24b4 	ldrne	r2, [r12, #1204]	; 0x4b4
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   11fa4:	058521e4 	streq	r2, [r5, #484]	; 0x1e4
    else
        node->previous->next = node->next;

    if(!node->next)
   11fa8:	e3520000 	cmp	r2, #0
        list->tail = node->previous;
   11fac:	059d500c 	ldreq	r5, [sp, #12]
   11fb0:	159dc00c 	ldrne	r12, [sp, #12]
    else
        node->next->previous = node->previous;
   11fb4:	15823000 	strne	r3, [r2]
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   11fb8:	e2842e4b 	add	r2, r4, #1200	; 0x4b0
   11fbc:	01a0c005 	moveq	r12, r5
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   11fc0:	058531e8 	streq	r3, [r5, #488]	; 0x1e8
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   11fc4:	e59c31e0 	ldr	r3, [r12, #480]	; 0x1e0
   11fc8:	e282200c 	add	r2, r2, #12
   11fcc:	e3530000 	cmp	r3, #0
   11fd0:	0a00000a 	beq	12000 <_open_file+0x3d4>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   11fd4:	e5930004 	ldr	r0, [r3, #4]
   11fd8:	e59d5010 	ldr	r5, [sp, #16]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   11fdc:	e58434bc 	str	r3, [r4, #1212]	; 0x4bc

            return file;
        }

    _free_file(file);
    return NULL;
   11fe0:	e3a04000 	mov	r4, #0
    new_node->next = node->next;
   11fe4:	e58504b4 	str	r0, [r5, #1204]	; 0x4b4
    if (!node->next)
   11fe8:	e5930004 	ldr	r0, [r3, #4]
   11fec:	e3500000 	cmp	r0, #0
        list->tail = new_node;
   11ff0:	058121e0 	streq	r2, [r1, #480]	; 0x1e0
    else
        node->next->previous = new_node;
   11ff4:	15802000 	strne	r2, [r0]
    node->next = new_node;
   11ff8:	e5832004 	str	r2, [r3, #4]
   11ffc:	eaffffdc 	b	11f74 <_open_file+0x348>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12000:	e59131dc 	ldr	r3, [r1, #476]	; 0x1dc
   12004:	e3530000 	cmp	r3, #0
   12008:	0a000036 	beq	120e8 <_open_file+0x4bc>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1200c:	e5930000 	ldr	r0, [r3]
    new_node->next = node;
   12010:	e59dc010 	ldr	r12, [sp, #16]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12014:	e58404bc 	str	r0, [r4, #1212]	; 0x4bc
    new_node->next = node;
    if (!node->previous)
   12018:	e5930000 	ldr	r0, [r3]
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
    new_node->next = node;
   1201c:	e58c34b4 	str	r3, [r12, #1204]	; 0x4b4
    if (!node->previous)
   12020:	e3500000 	cmp	r0, #0
        list->head = new_node;
   12024:	058121dc 	streq	r2, [r1, #476]	; 0x1dc
    else
        node->previous->next = new_node;
   12028:	15802004 	strne	r2, [r0, #4]
    node->previous = new_node;
   1202c:	e5832000 	str	r2, [r3]
   12030:	e3a04000 	mov	r4, #0
   12034:	eaffffce 	b	11f74 <_open_file+0x348>
   12038:	e59da018 	ldr	r10, [sp, #24]
   1203c:	e59d801c 	ldr	r8, [sp, #28]
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   12040:	e50894bc 	str	r9, [r8, #-1212]	; 0xfffffb44
   12044:	eaffffa0 	b	11ecc <_open_file+0x2a0>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12048:	e59231e4 	ldr	r3, [r2, #484]	; 0x1e4
   1204c:	e3530000 	cmp	r3, #0
    {
        list->head = node;
        list->tail = node;
   12050:	058281e8 	streq	r8, [r2, #488]	; 0x1e8
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   12054:	058281e4 	streq	r8, [r2, #484]	; 0x1e4
        list->tail = node;
        node->previous = 0;
        node->next = 0;
   12058:	05883004 	streq	r3, [r8, #4]

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   1205c:	05883000 	streq	r3, [r8]
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12060:	0affff14 	beq	11cb8 <_open_file+0x8c>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12064:	e5931000 	ldr	r1, [r3]
   12068:	e888000a 	stm	r8, {r1, r3}
    new_node->next = node;
    if (!node->previous)
   1206c:	e5931000 	ldr	r1, [r3]
   12070:	e3510000 	cmp	r1, #0
        list->head = new_node;
   12074:	058281e4 	streq	r8, [r2, #484]	; 0x1e4
    else
        node->previous->next = new_node;
   12078:	15818004 	strne	r8, [r1, #4]
    node->previous = new_node;
   1207c:	e5838000 	str	r8, [r3]
   12080:	eaffff0c 	b	11cb8 <_open_file+0x8c>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12084:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
        list->head = node->next;
   12088:	e59d5010 	ldr	r5, [sp, #16]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1208c:	e3530000 	cmp	r3, #0
        list->head = node->next;
   12090:	e59524b4 	ldr	r2, [r5, #1204]	; 0x4b4
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12094:	1affff39 	bne	11d80 <_open_file+0x154>
        list->head = node->next;
   12098:	e59dc00c 	ldr	r12, [sp, #12]
   1209c:	e58c21e4 	str	r2, [r12, #484]	; 0x1e4
   120a0:	eaffff38 	b	11d88 <_open_file+0x15c>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   120a4:	e59121dc 	ldr	r2, [r1, #476]	; 0x1dc
   120a8:	e3520000 	cmp	r2, #0
   120ac:	0a000014 	beq	12104 <_open_file+0x4d8>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   120b0:	e5920000 	ldr	r0, [r2]
    new_node->next = node;
   120b4:	e59d5010 	ldr	r5, [sp, #16]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   120b8:	e58404bc 	str	r0, [r4, #1212]	; 0x4bc
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
        {
            _free_file(file);
            return NULL;
   120bc:	e3a04000 	mov	r4, #0
    new_node->next = node;
   120c0:	e58524b4 	str	r2, [r5, #1204]	; 0x4b4
    if (!node->previous)
   120c4:	e5920000 	ldr	r0, [r2]
   120c8:	e3500000 	cmp	r0, #0
        list->head = new_node;
   120cc:	058131dc 	streq	r3, [r1, #476]	; 0x1dc
    else
        node->previous->next = new_node;
   120d0:	15803004 	strne	r3, [r0, #4]
    node->previous = new_node;
   120d4:	e5823000 	str	r3, [r2]
   120d8:	eaffffa5 	b	11f74 <_open_file+0x348>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   120dc:	e59d5010 	ldr	r5, [sp, #16]
   120e0:	e59524b4 	ldr	r2, [r5, #1204]	; 0x4b4
   120e4:	eaffffeb 	b	12098 <_open_file+0x46c>
    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
        node->next = 0;
   120e8:	e59d5010 	ldr	r5, [sp, #16]

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   120ec:	e58434bc 	str	r3, [r4, #1212]	; 0x4bc

            return file;
        }

    _free_file(file);
    return NULL;
   120f0:	e1a04003 	mov	r4, r3
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   120f4:	e58121dc 	str	r2, [r1, #476]	; 0x1dc
        list->tail = node;
   120f8:	e58121e0 	str	r2, [r1, #480]	; 0x1e0
        node->previous = 0;
        node->next = 0;
   120fc:	e58534b4 	str	r3, [r5, #1204]	; 0x4b4
   12100:	eaffff9b 	b	11f74 <_open_file+0x348>
   12104:	e59dc010 	ldr	r12, [sp, #16]

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   12108:	e58424bc 	str	r2, [r4, #1212]	; 0x4bc
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
        {
            _free_file(file);
            return NULL;
   1210c:	e1a04002 	mov	r4, r2
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   12110:	e58131dc 	str	r3, [r1, #476]	; 0x1dc
        list->tail = node;
   12114:	e58131e0 	str	r3, [r1, #480]	; 0x1e0
        node->previous = 0;
        node->next = 0;
   12118:	e58c24b4 	str	r2, [r12, #1204]	; 0x4b4
   1211c:	eaffff94 	b	11f74 <_open_file+0x348>

00012120 <_create_file>:
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;

    // No write access?
    if (!_fs.disk_io.write_media)
   12120:	e3063150 	movw	r3, #24912	; 0x6150
//-----------------------------------------------------------------------------
// _create_file: Create a new file
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static FL_FILE* _create_file(const char *filename)
{
   12124:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;

    // No write access?
    if (!_fs.disk_io.write_media)
   12128:	e3423673 	movt	r3, #9843	; 0x2673
//-----------------------------------------------------------------------------
// _create_file: Create a new file
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static FL_FILE* _create_file(const char *filename)
{
   1212c:	e24ddf55 	sub	sp, sp, #340	; 0x154
   12130:	e1a08000 	mov	r8, r0
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;

    // No write access?
    if (!_fs.disk_io.write_media)
   12134:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   12138:	e3530000 	cmp	r3, #0
   1213c:	0a000066 	beq	122dc <_create_file+0x1bc>
{
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   12140:	e308c0c8 	movw	r12, #32968	; 0x80c8
   12144:	e342c675 	movt	r12, #9845	; 0x2675
   12148:	e59ca1dc 	ldr	r10, [r12, #476]	; 0x1dc
   1214c:	e58dc014 	str	r12, [sp, #20]
    if (node)
   12150:	e35a0000 	cmp	r10, #0
   12154:	0a000060 	beq	122dc <_create_file+0x1bc>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12158:	e59a3000 	ldr	r3, [r10]
        list->head = node->next;
   1215c:	e59a2004 	ldr	r2, [r10, #4]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12160:	e3530000 	cmp	r3, #0
        list->head = node->next;
    else
        node->previous->next = node->next;
   12164:	15832004 	strne	r2, [r3, #4]
   12168:	159a2004 	ldrne	r2, [r10, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   1216c:	058c21dc 	streq	r2, [r12, #476]	; 0x1dc
    else
        node->previous->next = node->next;

    if(!node->next)
   12170:	e3520000 	cmp	r2, #0
        list->tail = node->previous;
   12174:	059dc014 	ldreq	r12, [sp, #20]
   12178:	159dc014 	ldrne	r12, [sp, #20]
    else
        node->next->previous = node->previous;
   1217c:	15823000 	strne	r3, [r2]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12180:	e30820c8 	movw	r2, #32968	; 0x80c8
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   12184:	058c31e0 	streq	r3, [r12, #480]	; 0x1e0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12188:	e3422675 	movt	r2, #9845	; 0x2675
   1218c:	e59c31e8 	ldr	r3, [r12, #488]	; 0x1e8
   12190:	e3530000 	cmp	r3, #0
   12194:	0a0000f7 	beq	12578 <_create_file+0x458>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12198:	e5931004 	ldr	r1, [r3, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1219c:	e58a3000 	str	r3, [r10]
    new_node->next = node->next;
   121a0:	e58a1004 	str	r1, [r10, #4]
    if (!node->next)
   121a4:	e5931004 	ldr	r1, [r3, #4]
   121a8:	e3510000 	cmp	r1, #0
        list->tail = new_node;
   121ac:	0582a1e8 	streq	r10, [r2, #488]	; 0x1e8
    else
        node->next->previous = new_node;
   121b0:	1581a000 	strne	r10, [r1]
    node->next = new_node;
   121b4:	e583a004 	str	r10, [r3, #4]

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
   121b8:	e24ace4b 	sub	r12, r10, #1200	; 0x4b0
    if (!_fs.disk_io.write_media)
        return NULL;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
   121bc:	e25c400c 	subs	r4, r12, #12

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
   121c0:	e58dc018 	str	r12, [sp, #24]
    if (!_fs.disk_io.write_media)
        return NULL;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
   121c4:	0a000044 	beq	122dc <_create_file+0x1bc>
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   121c8:	e28c6008 	add	r6, r12, #8
   121cc:	e3a07f41 	mov	r7, #260	; 0x104
   121d0:	e3a01000 	mov	r1, #0
   121d4:	e1a02007 	mov	r2, r7
    memset(file->filename, '\0', sizeof(file->filename));
   121d8:	e24a5fe9 	sub	r5, r10, #932	; 0x3a4
    file = _allocate_file();
    if (!file)
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   121dc:	e1a00006 	mov	r0, r6
   121e0:	eb001d53 	bl	19734 <memset>
    memset(file->filename, '\0', sizeof(file->filename));
   121e4:	e3a01000 	mov	r1, #0
   121e8:	e1a02007 	mov	r2, r7
   121ec:	e1a00005 	mov	r0, r5
   121f0:	eb001d4f 	bl	19734 <memset>

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   121f4:	e58d7000 	str	r7, [sp]
   121f8:	e1a00008 	mov	r0, r8
   121fc:	e1a01006 	mov	r1, r6
   12200:	e1a02007 	mov	r2, r7
   12204:	e1a03005 	mov	r3, r5
   12208:	eb000f9f 	bl	1608c <fatfs_split_path>
   1220c:	e3700001 	cmn	r0, #1
   12210:	0a0000cb 	beq	12544 <_create_file+0x424>
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   12214:	e59dc014 	ldr	r12, [sp, #20]
   12218:	e59c71e4 	ldr	r7, [r12, #484]	; 0x1e4
   1221c:	e3570000 	cmp	r7, #0
   12220:	1a000003 	bne	12234 <_create_file+0x114>
   12224:	ea00002e 	b	122e4 <_create_file+0x1c4>
   12228:	e5977004 	ldr	r7, [r7, #4]
   1222c:	e3570000 	cmp	r7, #0
   12230:	0a00002b 	beq	122e4 <_create_file+0x1c4>
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   12234:	e2470e4b 	sub	r0, r7, #1200	; 0x4b0

        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   12238:	e1a01006 	mov	r1, r6
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   1223c:	e240300c 	sub	r3, r0, #12

        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   12240:	e2800008 	add	r0, r0, #8
    fat_list_for_each(&_open_file_list, node)
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);

        // If not the current file
        if (openFile != file)
   12244:	e1540003 	cmp	r4, r3
   12248:	0afffff6 	beq	12228 <_create_file+0x108>
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   1224c:	eb000ffe 	bl	1624c <fatfs_compare_names>
   12250:	e3500000 	cmp	r0, #0
   12254:	0afffff3 	beq	12228 <_create_file+0x108>
   12258:	e2470fe9 	sub	r0, r7, #932	; 0x3a4
   1225c:	e1a01005 	mov	r1, r5
   12260:	eb000ff9 	bl	1624c <fatfs_compare_names>
   12264:	e3500000 	cmp	r0, #0
   12268:	0affffee 	beq	12228 <_create_file+0x108>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1226c:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   12270:	e3530000 	cmp	r3, #0
   12274:	0a0000ce 	beq	125b4 <_create_file+0x494>
        list->head = node->next;
    else
        node->previous->next = node->next;
   12278:	e59dc018 	ldr	r12, [sp, #24]
   1227c:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
   12280:	e5832004 	str	r2, [r3, #4]
   12284:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4

    if(!node->next)
   12288:	e3520000 	cmp	r2, #0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1228c:	e30810c8 	movw	r1, #32968	; 0x80c8
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   12290:	059dc014 	ldreq	r12, [sp, #20]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12294:	e3421675 	movt	r1, #9845	; 0x2675
   12298:	159dc014 	ldrne	r12, [sp, #20]
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1229c:	15823000 	strne	r3, [r2]
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   122a0:	058c31e8 	streq	r3, [r12, #488]	; 0x1e8
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   122a4:	e2843e4b 	add	r3, r4, #1200	; 0x4b0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   122a8:	e59c21e0 	ldr	r2, [r12, #480]	; 0x1e0
   122ac:	e283300c 	add	r3, r3, #12
   122b0:	e3520000 	cmp	r2, #0
   122b4:	0a0000e9 	beq	12660 <_create_file+0x540>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   122b8:	e5920004 	ldr	r0, [r2, #4]
   122bc:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   122c0:	e58424bc 	str	r2, [r4, #1212]	; 0x4bc
    new_node->next = node->next;
   122c4:	e58c04b4 	str	r0, [r12, #1204]	; 0x4b4
    if (!node->next)
   122c8:	e5920004 	ldr	r0, [r2, #4]
   122cc:	e3500000 	cmp	r0, #0
        list->tail = new_node;
   122d0:	058131e0 	streq	r3, [r1, #480]	; 0x1e0
    else
        node->next->previous = new_node;
   122d4:	15803000 	strne	r3, [r0]
    node->next = new_node;
   122d8:	e5823004 	str	r3, [r2, #4]
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);

        _free_file(file);
        return NULL;
   122dc:	e3a04000 	mov	r4, #0
   122e0:	ea000088 	b	12508 <_create_file+0x3e8>
        _free_file(file);
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   122e4:	e5d43014 	ldrb	r3, [r4, #20]
   122e8:	e3530000 	cmp	r3, #0
   122ec:	1a000036 	bne	123cc <_create_file+0x2ac>
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   122f0:	e3060150 	movw	r0, #24912	; 0x6150
   122f4:	e28d804c 	add	r8, sp, #76	; 0x4c
   122f8:	e3420673 	movt	r0, #9843	; 0x2673
   122fc:	ebfff7a1 	bl	10188 <fatfs_get_root_cluster>
   12300:	e1a09000 	mov	r9, r0
   12304:	e50a04bc 	str	r0, [r10, #-1212]	; 0xfffffb44
            return NULL;
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   12308:	e3060150 	movw	r0, #24912	; 0x6150
   1230c:	e1a01009 	mov	r1, r9
   12310:	e3420673 	movt	r0, #9843	; 0x2673
   12314:	e1a02005 	mov	r2, r5
   12318:	e1a03008 	mov	r3, r8
   1231c:	ebfff79b 	bl	10190 <fatfs_get_file_entry>
   12320:	e3500001 	cmp	r0, #1
   12324:	0a0000a7 	beq	125c8 <_create_file+0x4a8>
    {
        _free_file(file);
        return NULL;
    }

    file->startcluster = 0;
   12328:	e1a02004 	mov	r2, r4

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1232c:	e3a01001 	mov	r1, #1
    {
        _free_file(file);
        return NULL;
    }

    file->startcluster = 0;
   12330:	e3a06000 	mov	r6, #0

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   12334:	e3060150 	movw	r0, #24912	; 0x6150
    {
        _free_file(file);
        return NULL;
    }

    file->startcluster = 0;
   12338:	e5a26004 	str	r6, [r2, #4]!

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1233c:	e3420673 	movt	r0, #9843	; 0x2673
   12340:	e1a03001 	mov	r3, r1
   12344:	eb0014a4 	bl	175dc <fatfs_allocate_free_space>
   12348:	e1500006 	cmp	r0, r6
   1234c:	12847f87 	addne	r7, r4, #540	; 0x21c
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
    }
    while (tailNum < 9999);
   12350:	1302870f 	movwne	r8, #9999	; 0x270f
    }

    file->startcluster = 0;

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   12354:	1a000011 	bne	123a0 <_create_file+0x280>
   12358:	ea0000b8 	b	12640 <_create_file+0x520>
        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1235c:	e8b30003 	ldm	r3!, {r0, r1}
   12360:	e5870000 	str	r0, [r7]
   12364:	e5871004 	str	r1, [r7, #4]
   12368:	e1d320b0 	ldrh	r2, [r3]
   1236c:	e5d33002 	ldrb	r3, [r3, #2]
   12370:	e1c720b8 	strh	r2, [r7, #8]
   12374:	e5c7300a 	strb	r3, [r7, #10]

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   12378:	e3060150 	movw	r0, #24912	; 0x6150
   1237c:	e5941000 	ldr	r1, [r4]
   12380:	e3420673 	movt	r0, #9843	; 0x2673
   12384:	e1a02007 	mov	r2, r7
   12388:	ebfff7fb 	bl	1037c <fatfs_sfn_exists>
   1238c:	e3500000 	cmp	r0, #0
            break;

        tailNum++;
   12390:	e2866001 	add	r6, r6, #1
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   12394:	0a00003f 	beq	12498 <_create_file+0x378>
            break;

        tailNum++;
    }
    while (tailNum < 9999);
   12398:	e1560008 	cmp	r6, r8
   1239c:	0a00005c 	beq	12514 <_create_file+0x3f4>
    // Generate a short filename & tail
    tailNum = 0;
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   123a0:	e1a01005 	mov	r1, r5
   123a4:	e28d0028 	add	r0, sp, #40	; 0x28
   123a8:	eb000db5 	bl	15a84 <fatfs_lfn_create_sfn>

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   123ac:	e3560000 	cmp	r6, #0
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   123b0:	e28d3028 	add	r3, sp, #40	; 0x28
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   123b4:	0affffe8 	beq	1235c <_create_file+0x23c>
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   123b8:	e1a00007 	mov	r0, r7
   123bc:	e1a01003 	mov	r1, r3
   123c0:	e1a02006 	mov	r2, r6
   123c4:	eb000e0e 	bl	15c04 <fatfs_lfn_generate_tail>
   123c8:	eaffffea 	b	12378 <_create_file+0x258>
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   123cc:	e3060150 	movw	r0, #24912	; 0x6150
   123d0:	e3420673 	movt	r0, #9843	; 0x2673
   123d4:	ebfff76b 	bl	10188 <fatfs_get_root_cluster>
   123d8:	e1a09000 	mov	r9, r0

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   123dc:	e1a00006 	mov	r0, r6
   123e0:	eb000eca 	bl	15f10 <fatfs_total_path_levels>

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   123e4:	e3500000 	cmp	r0, #0
   123e8:	e58d001c 	str	r0, [sp, #28]
   123ec:	b28d804c 	addlt	r8, sp, #76	; 0x4c
   123f0:	ba00005e 	blt	12570 <_create_file+0x450>
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   123f4:	e30fcef2 	movw	r12, #65266	; 0xfef2
   123f8:	e30fbeec 	movw	r11, #65260	; 0xfeec
   123fc:	e34fcfff 	movt	r12, #65535	; 0xffff
   12400:	e58d5020 	str	r5, [sp, #32]
   12404:	e58da024 	str	r10, [sp, #36]	; 0x24

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   12408:	e3a07000 	mov	r7, #0
   1240c:	e28d804c 	add	r8, sp, #76	; 0x4c
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   12410:	e34fbfff 	movt	r11, #65535	; 0xffff
   12414:	e59d501c 	ldr	r5, [sp, #28]
   12418:	e1a0a00c 	mov	r10, r12
   1241c:	ea00000c 	b	12454 <_create_file+0x334>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   12420:	ebfff75a 	bl	10190 <fatfs_get_file_entry>
   12424:	e3500000 	cmp	r0, #0
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   12428:	e28d0028 	add	r0, sp, #40	; 0x28
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1242c:	0affff8e 	beq	1226c <_create_file+0x14c>
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   12430:	eb000c4c 	bl	15568 <fatfs_entry_is_dir>
   12434:	e3500000 	cmp	r0, #0
   12438:	0affff8b 	beq	1226c <_create_file+0x14c>
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1243c:	e28d1e15 	add	r1, sp, #336	; 0x150

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   12440:	e1550007 	cmp	r5, r7
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   12444:	e191c0bb 	ldrh	r12, [r1, r11]
   12448:	e19130ba 	ldrh	r3, [r1, r10]
   1244c:	e083980c 	add	r9, r3, r12, lsl #16

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   12450:	ba000044 	blt	12568 <_create_file+0x448>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   12454:	e1a01007 	mov	r1, r7
   12458:	e1a02008 	mov	r2, r8
   1245c:	e3a03f41 	mov	r3, #260	; 0x104
   12460:	e1a00006 	mov	r0, r6
   12464:	eb000ed1 	bl	15fb0 <fatfs_get_substring>
   12468:	e3700001 	cmn	r0, #1
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1246c:	e3060150 	movw	r0, #24912	; 0x6150

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   12470:	e2877001 	add	r7, r7, #1
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   12474:	e1a01009 	mov	r1, r9
   12478:	e1a02008 	mov	r2, r8
   1247c:	e28d3028 	add	r3, sp, #40	; 0x28
   12480:	e3420673 	movt	r0, #9843	; 0x2673
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   12484:	1affffe5 	bne	12420 <_create_file+0x300>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12488:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   1248c:	e3530000 	cmp	r3, #0
   12490:	1affff78 	bne	12278 <_create_file+0x158>
   12494:	ea000046 	b	125b4 <_create_file+0x494>
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
   12498:	e5943004 	ldr	r3, [r4, #4]
   1249c:	e1a09000 	mov	r9, r0
   124a0:	e3060150 	movw	r0, #24912	; 0x6150
   124a4:	e51a14bc 	ldr	r1, [r10, #-1212]	; 0xfffffb44
   124a8:	e3420673 	movt	r0, #9843	; 0x2673
   124ac:	e88d0208 	stm	sp, {r3, r9}
   124b0:	e1a02005 	mov	r2, r5
   124b4:	e58d9008 	str	r9, [sp, #8]
   124b8:	e1a03007 	mov	r3, r7
   124bc:	eb001495 	bl	17718 <fatfs_add_file_entry>
   124c0:	e3500000 	cmp	r0, #0
   124c4:	0a00001a 	beq	12534 <_create_file+0x414>
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
   124c8:	e59dc018 	ldr	r12, [sp, #24]
   124cc:	e3e03000 	mvn	r3, #0

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_cache_init(&_fs, file);
   124d0:	e3060150 	movw	r0, #24912	; 0x6150
        _free_file(file);
        return NULL;
    }

    // General
    file->filelength = 0;
   124d4:	e584900c 	str	r9, [r4, #12]

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_cache_init(&_fs, file);
   124d8:	e1a01004 	mov	r1, r4
        return NULL;
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
   124dc:	e5849008 	str	r9, [r4, #8]

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_cache_init(&_fs, file);
   124e0:	e3420673 	movt	r0, #9843	; 0x2673
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
   124e4:	e58c34a4 	str	r3, [r12, #1188]	; 0x4a4
    file->file_data_dirty = 0;
   124e8:	e58494b4 	str	r9, [r4, #1204]	; 0x4b4
    file->filelength_changed = 0;
   124ec:	e5849010 	str	r9, [r4, #16]

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   124f0:	e58432a8 	str	r3, [r4, #680]	; 0x2a8
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   124f4:	e58432ac 	str	r3, [r4, #684]	; 0x2ac

    fatfs_cache_init(&_fs, file);
   124f8:	ebfffcb0 	bl	117c0 <fatfs_cache_init>

    fatfs_fat_purge(&_fs);
   124fc:	e3060150 	movw	r0, #24912	; 0x6150
   12500:	e3420673 	movt	r0, #9843	; 0x2673
   12504:	eb00121c 	bl	16d7c <fatfs_fat_purge>

    return file;
}
   12508:	e1a00004 	mov	r0, r4
   1250c:	e28ddf55 	add	sp, sp, #340	; 0x154
   12510:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   12514:	e3060150 	movw	r0, #24912	; 0x6150
   12518:	e5941004 	ldr	r1, [r4, #4]
   1251c:	e3420673 	movt	r0, #9843	; 0x2673
   12520:	eb001300 	bl	17128 <fatfs_free_cluster_chain>
   12524:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   12528:	e3530000 	cmp	r3, #0
   1252c:	1affff51 	bne	12278 <_create_file+0x158>
   12530:	ea00001f 	b	125b4 <_create_file+0x494>

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   12534:	e3060150 	movw	r0, #24912	; 0x6150
   12538:	e5941004 	ldr	r1, [r4, #4]
   1253c:	e3420673 	movt	r0, #9843	; 0x2673
   12540:	eb0012f8 	bl	17128 <fatfs_free_cluster_chain>
   12544:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
        list->head = node->next;
   12548:	e59dc018 	ldr	r12, [sp, #24]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1254c:	e3530000 	cmp	r3, #0
        list->head = node->next;
   12550:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
   12554:	059dc014 	ldreq	r12, [sp, #20]
    else
        node->previous->next = node->next;
   12558:	15832004 	strne	r2, [r3, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   1255c:	058c21e4 	streq	r2, [r12, #484]	; 0x1e4
   12560:	159c24b4 	ldrne	r2, [r12, #1204]	; 0x4b4
   12564:	eaffff47 	b	12288 <_create_file+0x168>
   12568:	e59d5020 	ldr	r5, [sp, #32]
   1256c:	e59da024 	ldr	r10, [sp, #36]	; 0x24
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   12570:	e50a94bc 	str	r9, [r10, #-1212]	; 0xfffffb44
   12574:	eaffff63 	b	12308 <_create_file+0x1e8>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12578:	e59231e4 	ldr	r3, [r2, #484]	; 0x1e4
   1257c:	e3530000 	cmp	r3, #0
    {
        list->head = node;
        list->tail = node;
   12580:	0582a1e8 	streq	r10, [r2, #488]	; 0x1e8
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   12584:	0582a1e4 	streq	r10, [r2, #484]	; 0x1e4
        list->tail = node;
        node->previous = 0;
        node->next = 0;
   12588:	058a3004 	streq	r3, [r10, #4]

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   1258c:	058a3000 	streq	r3, [r10]
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12590:	0affff08 	beq	121b8 <_create_file+0x98>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12594:	e5931000 	ldr	r1, [r3]
   12598:	e88a000a 	stm	r10, {r1, r3}
    new_node->next = node;
    if (!node->previous)
   1259c:	e5931000 	ldr	r1, [r3]
   125a0:	e3510000 	cmp	r1, #0
        list->head = new_node;
   125a4:	0582a1e4 	streq	r10, [r2, #484]	; 0x1e4
    else
        node->previous->next = new_node;
   125a8:	1581a004 	strne	r10, [r1, #4]
    node->previous = new_node;
   125ac:	e583a000 	str	r10, [r3]
   125b0:	eaffff00 	b	121b8 <_create_file+0x98>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   125b4:	e59dc018 	ldr	r12, [sp, #24]
   125b8:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
   125bc:	e59dc014 	ldr	r12, [sp, #20]
   125c0:	e58c21e4 	str	r2, [r12, #484]	; 0x1e4
   125c4:	eaffff2f 	b	12288 <_create_file+0x168>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   125c8:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
        list->head = node->next;
   125cc:	e59dc018 	ldr	r12, [sp, #24]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   125d0:	e3530000 	cmp	r3, #0
        list->head = node->next;
   125d4:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   125d8:	0a00001d 	beq	12654 <_create_file+0x534>
        list->head = node->next;
    else
        node->previous->next = node->next;
   125dc:	e5832004 	str	r2, [r3, #4]
   125e0:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4

    if(!node->next)
   125e4:	e3520000 	cmp	r2, #0
        list->tail = node->previous;
   125e8:	059dc014 	ldreq	r12, [sp, #20]
   125ec:	159dc014 	ldrne	r12, [sp, #20]
    else
        node->next->previous = node->previous;
   125f0:	15823000 	strne	r3, [r2]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   125f4:	e30820c8 	movw	r2, #32968	; 0x80c8
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   125f8:	058c31e8 	streq	r3, [r12, #488]	; 0x1e8
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   125fc:	e2843e4b 	add	r3, r4, #1200	; 0x4b0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12600:	e59c11e0 	ldr	r1, [r12, #480]	; 0x1e0
   12604:	e283300c 	add	r3, r3, #12
   12608:	e3422675 	movt	r2, #9845	; 0x2675
   1260c:	e3510000 	cmp	r1, #0
   12610:	0a000020 	beq	12698 <_create_file+0x578>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12614:	e5910004 	ldr	r0, [r1, #4]
   12618:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1261c:	e58414bc 	str	r1, [r4, #1212]	; 0x4bc

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
    {
        _free_file(file);
        return NULL;
   12620:	e3a04000 	mov	r4, #0
    new_node->next = node->next;
   12624:	e58c04b4 	str	r0, [r12, #1204]	; 0x4b4
    if (!node->next)
   12628:	e5910004 	ldr	r0, [r1, #4]
   1262c:	e3500000 	cmp	r0, #0
        list->tail = new_node;
   12630:	058231e0 	streq	r3, [r2, #480]	; 0x1e0
    else
        node->next->previous = new_node;
   12634:	15803000 	strne	r3, [r0]
    node->next = new_node;
   12638:	e5813004 	str	r3, [r1, #4]
   1263c:	eaffffb1 	b	12508 <_create_file+0x3e8>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12640:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
        list->head = node->next;
   12644:	e59dc018 	ldr	r12, [sp, #24]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12648:	e1530006 	cmp	r3, r6
        list->head = node->next;
   1264c:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12650:	1affffe1 	bne	125dc <_create_file+0x4bc>
        list->head = node->next;
   12654:	e59dc014 	ldr	r12, [sp, #20]
   12658:	e58c21e4 	str	r2, [r12, #484]	; 0x1e4
   1265c:	eaffffe0 	b	125e4 <_create_file+0x4c4>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12660:	e59121dc 	ldr	r2, [r1, #476]	; 0x1dc
   12664:	e3520000 	cmp	r2, #0
   12668:	0a000018 	beq	126d0 <_create_file+0x5b0>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1266c:	e5920000 	ldr	r0, [r2]
    new_node->next = node;
   12670:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12674:	e58404bc 	str	r0, [r4, #1212]	; 0x4bc
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);

        _free_file(file);
        return NULL;
   12678:	e3a04000 	mov	r4, #0
    new_node->next = node;
   1267c:	e58c24b4 	str	r2, [r12, #1204]	; 0x4b4
    if (!node->previous)
   12680:	e5920000 	ldr	r0, [r2]
   12684:	e3500000 	cmp	r0, #0
        list->head = new_node;
   12688:	058131dc 	streq	r3, [r1, #476]	; 0x1dc
    else
        node->previous->next = new_node;
   1268c:	15803004 	strne	r3, [r0, #4]
    node->previous = new_node;
   12690:	e5823000 	str	r3, [r2]
   12694:	eaffff9b 	b	12508 <_create_file+0x3e8>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12698:	e59211dc 	ldr	r1, [r2, #476]	; 0x1dc
   1269c:	e3510000 	cmp	r1, #0
   126a0:	0a000011 	beq	126ec <_create_file+0x5cc>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   126a4:	e5910000 	ldr	r0, [r1]
    new_node->next = node;
   126a8:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   126ac:	e58404bc 	str	r0, [r4, #1212]	; 0x4bc

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
    {
        _free_file(file);
        return NULL;
   126b0:	e3a04000 	mov	r4, #0
    new_node->next = node;
   126b4:	e58c14b4 	str	r1, [r12, #1204]	; 0x4b4
    if (!node->previous)
   126b8:	e5910000 	ldr	r0, [r1]
   126bc:	e3500000 	cmp	r0, #0
        list->head = new_node;
   126c0:	058231dc 	streq	r3, [r2, #476]	; 0x1dc
    else
        node->previous->next = new_node;
   126c4:	15803004 	strne	r3, [r0, #4]
    node->previous = new_node;
   126c8:	e5813000 	str	r3, [r1]
   126cc:	eaffff8d 	b	12508 <_create_file+0x3e8>
    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
        node->next = 0;
   126d0:	e59dc018 	ldr	r12, [sp, #24]

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   126d4:	e58424bc 	str	r2, [r4, #1212]	; 0x4bc
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);

        _free_file(file);
        return NULL;
   126d8:	e1a04002 	mov	r4, r2
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   126dc:	e58131dc 	str	r3, [r1, #476]	; 0x1dc
        list->tail = node;
   126e0:	e58131e0 	str	r3, [r1, #480]	; 0x1e0
        node->previous = 0;
        node->next = 0;
   126e4:	e58c24b4 	str	r2, [r12, #1204]	; 0x4b4
   126e8:	eaffff86 	b	12508 <_create_file+0x3e8>
   126ec:	e59dc018 	ldr	r12, [sp, #24]

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   126f0:	e58414bc 	str	r1, [r4, #1212]	; 0x4bc

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
    {
        _free_file(file);
        return NULL;
   126f4:	e1a04001 	mov	r4, r1
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   126f8:	e58231dc 	str	r3, [r2, #476]	; 0x1dc
        list->tail = node;
   126fc:	e58231e0 	str	r3, [r2, #480]	; 0x1e0
        node->previous = 0;
        node->next = 0;
   12700:	e58c14b4 	str	r1, [r12, #1204]	; 0x4b4
   12704:	eaffff7f 	b	12508 <_create_file+0x3e8>

00012708 <_create_directory>:
//-----------------------------------------------------------------------------
// _create_directory: Cycle through path string and create the end directory
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static int _create_directory(char *path)
{
   12708:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
{
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1270c:	e308a0c8 	movw	r10, #32968	; 0x80c8
   12710:	e342a675 	movt	r10, #9845	; 0x2675
   12714:	e24ddf57 	sub	sp, sp, #348	; 0x15c
   12718:	e1a09000 	mov	r9, r0
   1271c:	e59a71dc 	ldr	r7, [r10, #476]	; 0x1dc
    if (node)
   12720:	e3570000 	cmp	r7, #0
   12724:	0a0000f2 	beq	12af4 <_create_directory+0x3ec>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12728:	e5973000 	ldr	r3, [r7]
        list->head = node->next;
   1272c:	e5972004 	ldr	r2, [r7, #4]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12730:	e3530000 	cmp	r3, #0
        list->head = node->next;
    else
        node->previous->next = node->next;
   12734:	15832004 	strne	r2, [r3, #4]
   12738:	15972004 	ldrne	r2, [r7, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   1273c:	058a21dc 	streq	r2, [r10, #476]	; 0x1dc
    else
        node->previous->next = node->next;

    if(!node->next)
   12740:	e3520000 	cmp	r2, #0
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   12744:	15823000 	strne	r3, [r2]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12748:	e30820c8 	movw	r2, #32968	; 0x80c8
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   1274c:	058a31e0 	streq	r3, [r10, #480]	; 0x1e0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12750:	e3422675 	movt	r2, #9845	; 0x2675
   12754:	e59a31e8 	ldr	r3, [r10, #488]	; 0x1e8
   12758:	e3530000 	cmp	r3, #0
   1275c:	0a00010d 	beq	12b98 <_create_directory+0x490>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12760:	e5931004 	ldr	r1, [r3, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12764:	e5873000 	str	r3, [r7]
    new_node->next = node->next;
   12768:	e5871004 	str	r1, [r7, #4]
    if (!node->next)
   1276c:	e5931004 	ldr	r1, [r3, #4]
   12770:	e3510000 	cmp	r1, #0
        list->tail = new_node;
   12774:	058271e8 	streq	r7, [r2, #488]	; 0x1e8
    else
        node->next->previous = new_node;
   12778:	15817000 	strne	r7, [r1]
    node->next = new_node;
   1277c:	e5837004 	str	r7, [r3, #4]

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
   12780:	e247ce4b 	sub	r12, r7, #1200	; 0x4b0
    int tailNum = 0;
    int i;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
   12784:	e25c400c 	subs	r4, r12, #12

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
   12788:	e58dc018 	str	r12, [sp, #24]
    int tailNum = 0;
    int i;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
   1278c:	0a0000d8 	beq	12af4 <_create_directory+0x3ec>
        return 0;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   12790:	e28c5008 	add	r5, r12, #8
   12794:	e3a06f41 	mov	r6, #260	; 0x104
   12798:	e3a01000 	mov	r1, #0
   1279c:	e1a02006 	mov	r2, r6
    memset(file->filename, '\0', sizeof(file->filename));
   127a0:	e2478fe9 	sub	r8, r7, #932	; 0x3a4
    file = _allocate_file();
    if (!file)
        return 0;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   127a4:	e1a00005 	mov	r0, r5
   127a8:	eb001be1 	bl	19734 <memset>
    memset(file->filename, '\0', sizeof(file->filename));
   127ac:	e3a01000 	mov	r1, #0
   127b0:	e1a02006 	mov	r2, r6
   127b4:	e1a00008 	mov	r0, r8
   127b8:	eb001bdd 	bl	19734 <memset>

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   127bc:	e58d6000 	str	r6, [sp]
   127c0:	e1a00009 	mov	r0, r9
   127c4:	e1a01005 	mov	r1, r5
   127c8:	e1a02006 	mov	r2, r6
   127cc:	e1a03008 	mov	r3, r8
   127d0:	eb000e2d 	bl	1608c <fatfs_split_path>
   127d4:	e3700001 	cmn	r0, #1
   127d8:	0a00004c 	beq	12910 <_create_directory+0x208>
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   127dc:	e59a61e4 	ldr	r6, [r10, #484]	; 0x1e4
   127e0:	e3560000 	cmp	r6, #0
   127e4:	1a000003 	bne	127f8 <_create_directory+0xf0>
   127e8:	ea000018 	b	12850 <_create_directory+0x148>
   127ec:	e5966004 	ldr	r6, [r6, #4]
   127f0:	e3560000 	cmp	r6, #0
   127f4:	0a000015 	beq	12850 <_create_directory+0x148>
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   127f8:	e2460e4b 	sub	r0, r6, #1200	; 0x4b0

        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   127fc:	e1a01005 	mov	r1, r5
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   12800:	e240300c 	sub	r3, r0, #12

        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   12804:	e2800008 	add	r0, r0, #8
    fat_list_for_each(&_open_file_list, node)
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);

        // If not the current file
        if (openFile != file)
   12808:	e1540003 	cmp	r4, r3
   1280c:	0afffff6 	beq	127ec <_create_directory+0xe4>
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   12810:	eb000e8d 	bl	1624c <fatfs_compare_names>
   12814:	e3500000 	cmp	r0, #0
   12818:	0afffff3 	beq	127ec <_create_directory+0xe4>
   1281c:	e2460fe9 	sub	r0, r6, #932	; 0x3a4
   12820:	e1a01008 	mov	r1, r8
   12824:	eb000e88 	bl	1624c <fatfs_compare_names>
   12828:	e3500000 	cmp	r0, #0
   1282c:	0affffee 	beq	127ec <_create_directory+0xe4>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12830:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   12834:	e3530000 	cmp	r3, #0
   12838:	0a000148 	beq	12d60 <_create_directory+0x658>
        list->head = node->next;
    else
        node->previous->next = node->next;
   1283c:	e59dc018 	ldr	r12, [sp, #24]
   12840:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
   12844:	e5832004 	str	r2, [r3, #4]
   12848:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
   1284c:	ea000036 	b	1292c <_create_directory+0x224>
        _free_file(file);
        return 0;
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   12850:	e5d43014 	ldrb	r3, [r4, #20]
   12854:	e3530000 	cmp	r3, #0
   12858:	1a000049 	bne	12984 <_create_directory+0x27c>
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1285c:	e3060150 	movw	r0, #24912	; 0x6150
   12860:	e28d9054 	add	r9, sp, #84	; 0x54
   12864:	e3420673 	movt	r0, #9843	; 0x2673
   12868:	ebfff646 	bl	10188 <fatfs_get_root_cluster>
   1286c:	e1a0b000 	mov	r11, r0
   12870:	e50704bc 	str	r0, [r7, #-1212]	; 0xfffffb44
            return 0;
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   12874:	e3066150 	movw	r6, #24912	; 0x6150
   12878:	e1a0100b 	mov	r1, r11
   1287c:	e3426673 	movt	r6, #9843	; 0x2673
   12880:	e1a02008 	mov	r2, r8
   12884:	e1a00006 	mov	r0, r6
   12888:	e1a03009 	mov	r3, r9
   1288c:	ebfff63f 	bl	10190 <fatfs_get_file_entry>
   12890:	e3500001 	cmp	r0, #1
   12894:	0a00001d 	beq	12910 <_create_directory+0x208>
    {
        _free_file(file);
        return 0;
    }

    file->startcluster = 0;
   12898:	e1a02004 	mov	r2, r4

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1289c:	e3a01001 	mov	r1, #1
    {
        _free_file(file);
        return 0;
    }

    file->startcluster = 0;
   128a0:	e3a05000 	mov	r5, #0

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   128a4:	e1a00006 	mov	r0, r6
    {
        _free_file(file);
        return 0;
    }

    file->startcluster = 0;
   128a8:	e5a25004 	str	r5, [r2, #4]!

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   128ac:	e1a03001 	mov	r3, r1
   128b0:	eb001349 	bl	175dc <fatfs_allocate_free_space>
   128b4:	e1500005 	cmp	r0, r5
   128b8:	0a00008f 	beq	12afc <_create_directory+0x3f4>
        _free_file(file);
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   128bc:	e2849e2b 	add	r9, r4, #688	; 0x2b0
   128c0:	e1a01005 	mov	r1, r5
   128c4:	e1a00009 	mov	r0, r9
   128c8:	e3a02c02 	mov	r2, #512	; 0x200
   128cc:	eb001b98 	bl	19734 <memset>
    for (i=0;i<_fs.sectors_per_cluster;i++)
   128d0:	e5d63000 	ldrb	r3, [r6]
   128d4:	e3530000 	cmp	r3, #0
   128d8:	1a000003 	bne	128ec <_create_directory+0x1e4>
   128dc:	ea00008d 	b	12b18 <_create_directory+0x410>
   128e0:	e5d62000 	ldrb	r2, [r6]
   128e4:	e1520005 	cmp	r2, r5
   128e8:	da00008a 	ble	12b18 <_create_directory+0x410>
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
   128ec:	e3060150 	movw	r0, #24912	; 0x6150
   128f0:	e1a02005 	mov	r2, r5
   128f4:	e3420673 	movt	r0, #9843	; 0x2673
   128f8:	e5941004 	ldr	r1, [r4, #4]
   128fc:	e1a03009 	mov	r3, r9
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
   12900:	e2855001 	add	r5, r5, #1
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
   12904:	ebfff5be 	bl	10004 <fatfs_write_sector>
   12908:	e3500000 	cmp	r0, #0
   1290c:	1afffff3 	bne	128e0 <_create_directory+0x1d8>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12910:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
        list->head = node->next;
   12914:	e59dc018 	ldr	r12, [sp, #24]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12918:	e3530000 	cmp	r3, #0
        list->head = node->next;
   1291c:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12920:	0a00007a 	beq	12b10 <_create_directory+0x408>
        list->head = node->next;
    else
        node->previous->next = node->next;
   12924:	e5832004 	str	r2, [r3, #4]
   12928:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4

    if(!node->next)
   1292c:	e3520000 	cmp	r2, #0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12930:	e30810c8 	movw	r1, #32968	; 0x80c8
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   12934:	15823000 	strne	r3, [r2]
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   12938:	e2842e4b 	add	r2, r4, #1200	; 0x4b0
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   1293c:	058a31e8 	streq	r3, [r10, #488]	; 0x1e8
   12940:	e282200c 	add	r2, r2, #12
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12944:	e59a31e0 	ldr	r3, [r10, #480]	; 0x1e0
   12948:	e3421675 	movt	r1, #9845	; 0x2675
   1294c:	e3530000 	cmp	r3, #0
   12950:	0a00005b 	beq	12ac4 <_create_directory+0x3bc>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12954:	e5930004 	ldr	r0, [r3, #4]
   12958:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1295c:	e58434bc 	str	r3, [r4, #1212]	; 0x4bc
    new_node->next = node->next;
   12960:	e58c04b4 	str	r0, [r12, #1204]	; 0x4b4
    if (!node->next)
   12964:	e5930004 	ldr	r0, [r3, #4]
   12968:	e3500000 	cmp	r0, #0
        list->tail = new_node;
    else
        node->next->previous = new_node;
   1296c:	15802000 	strne	r2, [r0]
    for (i=0;i<_fs.sectors_per_cluster;i++)
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
        {
            _free_file(file);
            return 0;
   12970:	e3a00000 	mov	r0, #0
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   12974:	058121e0 	streq	r2, [r1, #480]	; 0x1e0
    else
        node->next->previous = new_node;
    node->next = new_node;
   12978:	e5832004 	str	r2, [r3, #4]

    fatfs_fat_purge(&_fs);

    _free_file(file);
    return 1;
}
   1297c:	e28ddf57 	add	sp, sp, #348	; 0x15c
   12980:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   12984:	e3060150 	movw	r0, #24912	; 0x6150
   12988:	e3420673 	movt	r0, #9843	; 0x2673
   1298c:	ebfff5fd 	bl	10188 <fatfs_get_root_cluster>
   12990:	e1a0b000 	mov	r11, r0

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   12994:	e1a00005 	mov	r0, r5
   12998:	eb000d5c 	bl	15f10 <fatfs_total_path_levels>

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1299c:	e3500000 	cmp	r0, #0
   129a0:	e58d0020 	str	r0, [sp, #32]
   129a4:	b28d9054 	addlt	r9, sp, #84	; 0x54
   129a8:	ba0000c5 	blt	12cc4 <_create_directory+0x5bc>
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   129ac:	e30f1eec 	movw	r1, #65260	; 0xfeec
   129b0:	e30fcef2 	movw	r12, #65266	; 0xfef2
   129b4:	e34f1fff 	movt	r1, #65535	; 0xffff
   129b8:	e34fcfff 	movt	r12, #65535	; 0xffff
   129bc:	e58d8028 	str	r8, [sp, #40]	; 0x28

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   129c0:	e3a06000 	mov	r6, #0
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   129c4:	e58d702c 	str	r7, [sp, #44]	; 0x2c
   129c8:	e28d9054 	add	r9, sp, #84	; 0x54
   129cc:	e58d4024 	str	r4, [sp, #36]	; 0x24
   129d0:	e1a08001 	mov	r8, r1
   129d4:	e1a0400b 	mov	r4, r11
   129d8:	e58d101c 	str	r1, [sp, #28]
   129dc:	e59d7020 	ldr	r7, [sp, #32]
   129e0:	e1a0b00c 	mov	r11, r12
   129e4:	ea00000c 	b	12a1c <_create_directory+0x314>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   129e8:	ebfff5e8 	bl	10190 <fatfs_get_file_entry>
   129ec:	e3500000 	cmp	r0, #0
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   129f0:	e28d0030 	add	r0, sp, #48	; 0x30
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   129f4:	0a000015 	beq	12a50 <_create_directory+0x348>
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   129f8:	eb000ada 	bl	15568 <fatfs_entry_is_dir>
   129fc:	e3500000 	cmp	r0, #0
   12a00:	0a000012 	beq	12a50 <_create_directory+0x348>
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   12a04:	e28d2f56 	add	r2, sp, #344	; 0x158

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   12a08:	e1570006 	cmp	r7, r6
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   12a0c:	e192c0b8 	ldrh	r12, [r2, r8]
   12a10:	e19230bb 	ldrh	r3, [r2, r11]
   12a14:	e083480c 	add	r4, r3, r12, lsl #16

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   12a18:	ba0000a5 	blt	12cb4 <_create_directory+0x5ac>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   12a1c:	e1a01006 	mov	r1, r6
   12a20:	e1a02009 	mov	r2, r9
   12a24:	e3a03f41 	mov	r3, #260	; 0x104
   12a28:	e1a00005 	mov	r0, r5
   12a2c:	eb000d5f 	bl	15fb0 <fatfs_get_substring>
   12a30:	e3700001 	cmn	r0, #1
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   12a34:	e3060150 	movw	r0, #24912	; 0x6150

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   12a38:	e2866001 	add	r6, r6, #1
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   12a3c:	e1a01004 	mov	r1, r4
   12a40:	e1a02009 	mov	r2, r9
   12a44:	e28d3030 	add	r3, sp, #48	; 0x30
   12a48:	e3420673 	movt	r0, #9843	; 0x2673
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   12a4c:	1affffe5 	bne	129e8 <_create_directory+0x2e0>
   12a50:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12a54:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   12a58:	e3530000 	cmp	r3, #0
   12a5c:	0a0000bb 	beq	12d50 <_create_directory+0x648>
        list->head = node->next;
    else
        node->previous->next = node->next;
   12a60:	e59dc018 	ldr	r12, [sp, #24]
   12a64:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
   12a68:	e5832004 	str	r2, [r3, #4]
   12a6c:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4

    if(!node->next)
   12a70:	e3520000 	cmp	r2, #0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12a74:	e30810c8 	movw	r1, #32968	; 0x80c8
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   12a78:	15823000 	strne	r3, [r2]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12a7c:	e3421675 	movt	r1, #9845	; 0x2675
   12a80:	e59a21e0 	ldr	r2, [r10, #480]	; 0x1e0
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   12a84:	058a31e8 	streq	r3, [r10, #488]	; 0x1e8
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   12a88:	e2843e4b 	add	r3, r4, #1200	; 0x4b0
   12a8c:	e283300c 	add	r3, r3, #12
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12a90:	e3520000 	cmp	r2, #0
   12a94:	0a0000b5 	beq	12d70 <_create_directory+0x668>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12a98:	e5920004 	ldr	r0, [r2, #4]
   12a9c:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12aa0:	e58424bc 	str	r2, [r4, #1212]	; 0x4bc
    new_node->next = node->next;
   12aa4:	e58c04b4 	str	r0, [r12, #1204]	; 0x4b4
    if (!node->next)
   12aa8:	e5920004 	ldr	r0, [r2, #4]
   12aac:	e3500000 	cmp	r0, #0
        list->tail = new_node;
    else
        node->next->previous = new_node;
   12ab0:	15803000 	strne	r3, [r0]
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);

        _free_file(file);
        return 0;
   12ab4:	e3a00000 	mov	r0, #0
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   12ab8:	058131e0 	streq	r3, [r1, #480]	; 0x1e0
    else
        node->next->previous = new_node;
    node->next = new_node;
   12abc:	e5823004 	str	r3, [r2, #4]
   12ac0:	eaffffad 	b	1297c <_create_directory+0x274>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12ac4:	e59131dc 	ldr	r3, [r1, #476]	; 0x1dc
   12ac8:	e3530000 	cmp	r3, #0
   12acc:	0a0000b5 	beq	12da8 <_create_directory+0x6a0>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12ad0:	e5930000 	ldr	r0, [r3]
    new_node->next = node;
   12ad4:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12ad8:	e58404bc 	str	r0, [r4, #1212]	; 0x4bc
    new_node->next = node;
   12adc:	e58c34b4 	str	r3, [r12, #1204]	; 0x4b4
    if (!node->previous)
   12ae0:	e5930000 	ldr	r0, [r3]
   12ae4:	e3500000 	cmp	r0, #0
        list->head = new_node;
   12ae8:	058121dc 	streq	r2, [r1, #476]	; 0x1dc
    else
        node->previous->next = new_node;
   12aec:	15802004 	strne	r2, [r0, #4]
    node->previous = new_node;
   12af0:	e5832000 	str	r2, [r3]

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
    {
        _free_file(file);
        return 0;
   12af4:	e3a00000 	mov	r0, #0
   12af8:	eaffff9f 	b	1297c <_create_directory+0x274>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12afc:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
        list->head = node->next;
   12b00:	e59dc018 	ldr	r12, [sp, #24]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12b04:	e1530005 	cmp	r3, r5
        list->head = node->next;
   12b08:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12b0c:	1affff84 	bne	12924 <_create_directory+0x21c>
        list->head = node->next;
   12b10:	e58a21e4 	str	r2, [r10, #484]	; 0x1e4
   12b14:	eaffff84 	b	1292c <_create_directory+0x224>
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
   12b18:	e3a05000 	mov	r5, #0
   12b1c:	e2846f87 	add	r6, r4, #540	; 0x21c
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
    }
    while (tailNum < 9999);
   12b20:	e302970f 	movw	r9, #9999	; 0x270f
   12b24:	ea000010 	b	12b6c <_create_directory+0x464>
        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   12b28:	e8b30003 	ldm	r3!, {r0, r1}
   12b2c:	e5860000 	str	r0, [r6]
   12b30:	e5861004 	str	r1, [r6, #4]
   12b34:	e1d320b0 	ldrh	r2, [r3]
   12b38:	e5d33002 	ldrb	r3, [r3, #2]
   12b3c:	e1c620b8 	strh	r2, [r6, #8]
   12b40:	e5c6300a 	strb	r3, [r6, #10]

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   12b44:	e3060150 	movw	r0, #24912	; 0x6150
   12b48:	e5941000 	ldr	r1, [r4]
   12b4c:	e3420673 	movt	r0, #9843	; 0x2673
   12b50:	e1a02006 	mov	r2, r6
   12b54:	ebfff608 	bl	1037c <fatfs_sfn_exists>
   12b58:	e3500000 	cmp	r0, #0
            break;

        tailNum++;
   12b5c:	e2855001 	add	r5, r5, #1
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   12b60:	0a00001b 	beq	12bd4 <_create_directory+0x4cc>
            break;

        tailNum++;
    }
    while (tailNum < 9999);
   12b64:	e1550009 	cmp	r5, r9
   12b68:	0a000071 	beq	12d34 <_create_directory+0x62c>
    // Generate a short filename & tail
    tailNum = 0;
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   12b6c:	e1a01008 	mov	r1, r8
   12b70:	e28d0030 	add	r0, sp, #48	; 0x30
   12b74:	eb000bc2 	bl	15a84 <fatfs_lfn_create_sfn>

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   12b78:	e3550000 	cmp	r5, #0
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   12b7c:	e28d3030 	add	r3, sp, #48	; 0x30
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   12b80:	0affffe8 	beq	12b28 <_create_directory+0x420>
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   12b84:	e1a00006 	mov	r0, r6
   12b88:	e1a01003 	mov	r1, r3
   12b8c:	e1a02005 	mov	r2, r5
   12b90:	eb000c1b 	bl	15c04 <fatfs_lfn_generate_tail>
   12b94:	eaffffea 	b	12b44 <_create_directory+0x43c>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12b98:	e59231e4 	ldr	r3, [r2, #484]	; 0x1e4
   12b9c:	e3530000 	cmp	r3, #0
    {
        list->head = node;
        list->tail = node;
   12ba0:	058271e8 	streq	r7, [r2, #488]	; 0x1e8
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   12ba4:	058271e4 	streq	r7, [r2, #484]	; 0x1e4
        list->tail = node;
        node->previous = 0;
        node->next = 0;
   12ba8:	05873004 	streq	r3, [r7, #4]

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   12bac:	05873000 	streq	r3, [r7]
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12bb0:	0afffef2 	beq	12780 <_create_directory+0x78>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12bb4:	e5931000 	ldr	r1, [r3]
   12bb8:	e887000a 	stm	r7, {r1, r3}
    new_node->next = node;
    if (!node->previous)
   12bbc:	e5931000 	ldr	r1, [r3]
   12bc0:	e3510000 	cmp	r1, #0
        list->head = new_node;
   12bc4:	058271e4 	streq	r7, [r2, #484]	; 0x1e4
    else
        node->previous->next = new_node;
   12bc8:	15817004 	strne	r7, [r1, #4]
    node->previous = new_node;
   12bcc:	e5837000 	str	r7, [r3]
   12bd0:	eafffeea 	b	12780 <_create_directory+0x78>
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
   12bd4:	e5943004 	ldr	r3, [r4, #4]
   12bd8:	e1a0c000 	mov	r12, r0
   12bdc:	e3a02001 	mov	r2, #1
   12be0:	e3060150 	movw	r0, #24912	; 0x6150
   12be4:	e51714bc 	ldr	r1, [r7, #-1212]	; 0xfffffb44
   12be8:	e3420673 	movt	r0, #9843	; 0x2673
   12bec:	e58dc004 	str	r12, [sp, #4]
   12bf0:	e58d2008 	str	r2, [sp, #8]
   12bf4:	e1a02008 	mov	r2, r8
   12bf8:	e58d3000 	str	r3, [sp]
   12bfc:	e1a03006 	mov	r3, r6
   12c00:	e58dc014 	str	r12, [sp, #20]
   12c04:	eb0012c3 	bl	17718 <fatfs_add_file_entry>
   12c08:	e3500000 	cmp	r0, #0
   12c0c:	e59dc014 	ldr	r12, [sp, #20]
   12c10:	0a00003b 	beq	12d04 <_create_directory+0x5fc>
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
   12c14:	e59d1018 	ldr	r1, [sp, #24]
   12c18:	e3e03000 	mvn	r3, #0

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_fat_purge(&_fs);
   12c1c:	e3060150 	movw	r0, #24912	; 0x6150
        _free_file(file);
        return 0;
    }

    // General
    file->filelength = 0;
   12c20:	e584c00c 	str	r12, [r4, #12]
    file->bytenum = 0;
   12c24:	e584c008 	str	r12, [r4, #8]

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_fat_purge(&_fs);
   12c28:	e3420673 	movt	r0, #9843	; 0x2673
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
   12c2c:	e58134a4 	str	r3, [r1, #1188]	; 0x4a4
    file->file_data_dirty = 0;
   12c30:	e584c4b4 	str	r12, [r4, #1204]	; 0x4b4
    file->filelength_changed = 0;
   12c34:	e584c010 	str	r12, [r4, #16]

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   12c38:	e58432a8 	str	r3, [r4, #680]	; 0x2a8
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   12c3c:	e58432ac 	str	r3, [r4, #684]	; 0x2ac

    fatfs_fat_purge(&_fs);
   12c40:	eb00104d 	bl	16d7c <fatfs_fat_purge>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   12c44:	e59dc018 	ldr	r12, [sp, #24]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12c48:	e30810c8 	movw	r1, #32968	; 0x80c8
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12c4c:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12c50:	e3421675 	movt	r1, #9845	; 0x2675
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   12c54:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12c58:	e3530000 	cmp	r3, #0
        list->head = node->next;
    else
        node->previous->next = node->next;
   12c5c:	15832004 	strne	r2, [r3, #4]
   12c60:	159c24b4 	ldrne	r2, [r12, #1204]	; 0x4b4
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   12c64:	058a21e4 	streq	r2, [r10, #484]	; 0x1e4
    else
        node->previous->next = node->next;

    if(!node->next)
   12c68:	e3520000 	cmp	r2, #0
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   12c6c:	15823000 	strne	r3, [r2]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12c70:	e59a21e0 	ldr	r2, [r10, #480]	; 0x1e0
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   12c74:	058a31e8 	streq	r3, [r10, #488]	; 0x1e8
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   12c78:	e2843e4b 	add	r3, r4, #1200	; 0x4b0
   12c7c:	e283300c 	add	r3, r3, #12
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12c80:	e3520000 	cmp	r2, #0
   12c84:	0a000010 	beq	12ccc <_create_directory+0x5c4>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12c88:	e5920004 	ldr	r0, [r2, #4]
   12c8c:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12c90:	e58424bc 	str	r2, [r4, #1212]	; 0x4bc
    new_node->next = node->next;
   12c94:	e58c04b4 	str	r0, [r12, #1204]	; 0x4b4
    if (!node->next)
   12c98:	e5920004 	ldr	r0, [r2, #4]
   12c9c:	e3500000 	cmp	r0, #0
        list->tail = new_node;
   12ca0:	058131e0 	streq	r3, [r1, #480]	; 0x1e0
    else
        node->next->previous = new_node;
   12ca4:	15803000 	strne	r3, [r0]
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_fat_purge(&_fs);

    _free_file(file);
    return 1;
   12ca8:	e3a00001 	mov	r0, #1
    node->next = new_node;
   12cac:	e5823004 	str	r3, [r2, #4]
   12cb0:	eaffff31 	b	1297c <_create_directory+0x274>
   12cb4:	e1a0b004 	mov	r11, r4
   12cb8:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
   12cbc:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
   12cc0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   12cc4:	e507b4bc 	str	r11, [r7, #-1212]	; 0xfffffb44
   12cc8:	eafffee9 	b	12874 <_create_directory+0x16c>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12ccc:	e59121dc 	ldr	r2, [r1, #476]	; 0x1dc
   12cd0:	e3520000 	cmp	r2, #0
   12cd4:	0a00003a 	beq	12dc4 <_create_directory+0x6bc>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12cd8:	e5920000 	ldr	r0, [r2]
    new_node->next = node;
   12cdc:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12ce0:	e58404bc 	str	r0, [r4, #1212]	; 0x4bc
    new_node->next = node;
    if (!node->previous)
   12ce4:	e5920000 	ldr	r0, [r2]
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
    new_node->next = node;
   12ce8:	e58c24b4 	str	r2, [r12, #1204]	; 0x4b4
    if (!node->previous)
   12cec:	e3500000 	cmp	r0, #0
        list->head = new_node;
   12cf0:	058131dc 	streq	r3, [r1, #476]	; 0x1dc
    else
        node->previous->next = new_node;
   12cf4:	15803004 	strne	r3, [r0, #4]
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_fat_purge(&_fs);

    _free_file(file);
    return 1;
   12cf8:	e3a00001 	mov	r0, #1
    node->previous = new_node;
   12cfc:	e5823000 	str	r3, [r2]
   12d00:	eaffff1d 	b	1297c <_create_directory+0x274>

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   12d04:	e3060150 	movw	r0, #24912	; 0x6150
   12d08:	e5941004 	ldr	r1, [r4, #4]
   12d0c:	e3420673 	movt	r0, #9843	; 0x2673
   12d10:	eb001104 	bl	17128 <fatfs_free_cluster_chain>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   12d14:	e59dc018 	ldr	r12, [sp, #24]
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12d18:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
        list->head = node->next;
   12d1c:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12d20:	e3530000 	cmp	r3, #0
        list->head = node->next;
    else
        node->previous->next = node->next;
   12d24:	15832004 	strne	r2, [r3, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   12d28:	058a21e4 	streq	r2, [r10, #484]	; 0x1e4
   12d2c:	159c24b4 	ldrne	r2, [r12, #1204]	; 0x4b4
   12d30:	eaffff4e 	b	12a70 <_create_directory+0x368>

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   12d34:	e3060150 	movw	r0, #24912	; 0x6150
   12d38:	e5941004 	ldr	r1, [r4, #4]
   12d3c:	e3420673 	movt	r0, #9843	; 0x2673
   12d40:	eb0010f8 	bl	17128 <fatfs_free_cluster_chain>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12d44:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   12d48:	e3530000 	cmp	r3, #0
   12d4c:	1affff43 	bne	12a60 <_create_directory+0x358>
        list->head = node->next;
   12d50:	e59dc018 	ldr	r12, [sp, #24]
   12d54:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
   12d58:	e58a21e4 	str	r2, [r10, #484]	; 0x1e4
   12d5c:	eaffff43 	b	12a70 <_create_directory+0x368>
   12d60:	e59dc018 	ldr	r12, [sp, #24]
   12d64:	e59c24b4 	ldr	r2, [r12, #1204]	; 0x4b4
   12d68:	e58a21e4 	str	r2, [r10, #484]	; 0x1e4
   12d6c:	eafffeee 	b	1292c <_create_directory+0x224>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12d70:	e59121dc 	ldr	r2, [r1, #476]	; 0x1dc
   12d74:	e3520000 	cmp	r2, #0
   12d78:	0a000018 	beq	12de0 <_create_directory+0x6d8>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12d7c:	e5920000 	ldr	r0, [r2]
    new_node->next = node;
   12d80:	e59dc018 	ldr	r12, [sp, #24]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12d84:	e58404bc 	str	r0, [r4, #1212]	; 0x4bc
    new_node->next = node;
   12d88:	e58c24b4 	str	r2, [r12, #1204]	; 0x4b4
    if (!node->previous)
   12d8c:	e5920000 	ldr	r0, [r2]
   12d90:	e3500000 	cmp	r0, #0
        list->head = new_node;
    else
        node->previous->next = new_node;
   12d94:	15803004 	strne	r3, [r0, #4]
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);

        _free_file(file);
        return 0;
   12d98:	e3a00000 	mov	r0, #0
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
    new_node->next = node;
    if (!node->previous)
        list->head = new_node;
   12d9c:	058131dc 	streq	r3, [r1, #476]	; 0x1dc
    else
        node->previous->next = new_node;
    node->previous = new_node;
   12da0:	e5823000 	str	r3, [r2]
   12da4:	eafffef4 	b	1297c <_create_directory+0x274>
    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
        node->next = 0;
   12da8:	e59dc018 	ldr	r12, [sp, #24]
    for (i=0;i<_fs.sectors_per_cluster;i++)
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
        {
            _free_file(file);
            return 0;
   12dac:	e1a00003 	mov	r0, r3
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   12db0:	e58121dc 	str	r2, [r1, #476]	; 0x1dc
        list->tail = node;
   12db4:	e58121e0 	str	r2, [r1, #480]	; 0x1e0
        node->previous = 0;
   12db8:	e58434bc 	str	r3, [r4, #1212]	; 0x4bc
        node->next = 0;
   12dbc:	e58c34b4 	str	r3, [r12, #1204]	; 0x4b4
   12dc0:	eafffeed 	b	1297c <_create_directory+0x274>
   12dc4:	e59dc018 	ldr	r12, [sp, #24]
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_fat_purge(&_fs);

    _free_file(file);
    return 1;
   12dc8:	e3a00001 	mov	r0, #1
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   12dcc:	e58131dc 	str	r3, [r1, #476]	; 0x1dc
        list->tail = node;
   12dd0:	e58131e0 	str	r3, [r1, #480]	; 0x1e0
        node->previous = 0;
   12dd4:	e58424bc 	str	r2, [r4, #1212]	; 0x4bc
        node->next = 0;
   12dd8:	e58c24b4 	str	r2, [r12, #1204]	; 0x4b4
   12ddc:	eafffee6 	b	1297c <_create_directory+0x274>
   12de0:	e59dc018 	ldr	r12, [sp, #24]
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);

        _free_file(file);
        return 0;
   12de4:	e1a00002 	mov	r0, r2
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   12de8:	e58131dc 	str	r3, [r1, #476]	; 0x1dc
        list->tail = node;
   12dec:	e58131e0 	str	r3, [r1, #480]	; 0x1e0
        node->previous = 0;
   12df0:	e58424bc 	str	r2, [r4, #1212]	; 0x4bc
        node->next = 0;
   12df4:	e58c24b4 	str	r2, [r12, #1204]	; 0x4b4
   12df8:	eafffedf 	b	1297c <_create_directory+0x274>

00012dfc <fl_init>:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12dfc:	e30830c8 	movw	r3, #32968	; 0x80c8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12e00:	e3a0c000 	mov	r12, #0
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12e04:	e3423675 	movt	r3, #9845	; 0x2675
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   12e08:	e15c000c 	cmp	r12, r12

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   12e0c:	e1a02003 	mov	r2, r3

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void fl_init(void)
{
   12e10:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12e14:	e1a01003 	mov	r1, r3

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   12e18:	e5a2c6a8 	str	r12, [r2, #1704]!	; 0x6a8
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12e1c:	e1a0000c 	mov	r0, r12
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   12e20:	02810eb6 	addeq	r0, r1, #2912	; 0xb60
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12e24:	e583c1e8 	str	r12, [r3, #488]	; 0x1e8
    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   12e28:	11a00002 	movne	r0, r2
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12e2c:	e583c1e4 	str	r12, [r3, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   12e30:	0280000c 	addeq	r0, r0, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12e34:	e5832b6c 	str	r2, [r3, #2924]	; 0xb6c
    fat_list_init(&_free_file_list);
    fat_list_init(&_open_file_list);

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   12e38:	e1a04002 	mov	r4, r2
    new_node->next = node->next;
   12e3c:	e583cb70 	str	r12, [r3, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   12e40:	12833eb6 	addne	r3, r3, #2912	; 0xb60
   12e44:	1283300c 	addne	r3, r3, #12
   12e48:	158c3000 	strne	r3, [r12]

    _filelib_init = 1;
   12e4c:	e3a03001 	mov	r3, #1
   12e50:	e5813b74 	str	r3, [r1, #2932]	; 0xb74
    node->next = new_node;
   12e54:	e59f3010 	ldr	r3, [pc, #16]	; 12e6c <fl_init+0x70>
   12e58:	e58121dc 	str	r2, [r1, #476]	; 0x1dc
   12e5c:	e5823004 	str	r3, [r2, #4]
   12e60:	e58101e0 	str	r0, [r1, #480]	; 0x1e0
}
   12e64:	e8bd0010 	ldmfd	sp!, {r4}
   12e68:	e12fff1e 	bx	lr
   12e6c:	26758c34 	.word	0x26758c34

00012e70 <fl_attach_locks>:
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
    _fs.fl_lock = lock;
   12e70:	e3063150 	movw	r3, #24912	; 0x6150
   12e74:	e3423673 	movt	r3, #9843	; 0x2673
   12e78:	e5830038 	str	r0, [r3, #56]	; 0x38
    _fs.fl_unlock = unlock;
   12e7c:	e583103c 	str	r1, [r3, #60]	; 0x3c
   12e80:	e12fff1e 	bx	lr

00012e84 <fl_attach_media>:
}
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
   12e84:	e92d4038 	push	{r3, r4, r5, lr}
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   12e88:	e30840c8 	movw	r4, #32968	; 0x80c8
   12e8c:	e3424675 	movt	r4, #9845	; 0x2675
}
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
   12e90:	e1a02000 	mov	r2, r0
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   12e94:	e5943b74 	ldr	r3, [r4, #2932]	; 0xb74
   12e98:	e3530000 	cmp	r3, #0
   12e9c:	0a00000b 	beq	12ed0 <fl_attach_media+0x4c>

    _fs.disk_io.read_media = rd;
   12ea0:	e3063150 	movw	r3, #24912	; 0x6150
   12ea4:	e3423673 	movt	r3, #9843	; 0x2673
    _fs.disk_io.write_media = wr;

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   12ea8:	e1a00003 	mov	r0, r3
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();

    _fs.disk_io.read_media = rd;
   12eac:	e5832030 	str	r2, [r3, #48]	; 0x30
    _fs.disk_io.write_media = wr;
   12eb0:	e5831034 	str	r1, [r3, #52]	; 0x34

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   12eb4:	ebfff2e2 	bl	fa44 <fatfs_init>
   12eb8:	e2505000 	subs	r5, r0, #0
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
        return res;
    }

    _filelib_valid = 1;
   12ebc:	03a03001 	moveq	r3, #1
   12ec0:	05843b78 	streq	r3, [r4, #2936]	; 0xb78

    _fs.disk_io.read_media = rd;
    _fs.disk_io.write_media = wr;

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   12ec4:	1a000015 	bne	12f20 <fl_attach_media+0x9c>
        return res;
    }

    _filelib_valid = 1;
    return FAT_INIT_OK;
}
   12ec8:	e1a00005 	mov	r0, r5
   12ecc:	e8bd8038 	pop	{r3, r4, r5, pc}

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   12ed0:	e1a00004 	mov	r0, r4
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12ed4:	e58431e8 	str	r3, [r4, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   12ed8:	e5a036a8 	str	r3, [r0, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12edc:	e1a0c003 	mov	r12, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12ee0:	e58431e4 	str	r3, [r4, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   12ee4:	0284eeb6 	addeq	lr, r4, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12ee8:	e5843b70 	str	r3, [r4, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   12eec:	12843eb6 	addne	r3, r4, #2912	; 0xb60
   12ef0:	1283300c 	addne	r3, r3, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12ef4:	e5840b6c 	str	r0, [r4, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   12ef8:	158c3000 	strne	r3, [r12]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   12efc:	e3a03001 	mov	r3, #1
   12f00:	e5843b74 	str	r3, [r4, #2932]	; 0xb74
   12f04:	11a0e000 	movne	lr, r0
    node->next = new_node;
   12f08:	e59f3028 	ldr	r3, [pc, #40]	; 12f38 <fl_attach_media+0xb4>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   12f0c:	028ee00c 	addeq	lr, lr, #12
   12f10:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   12f14:	e5803004 	str	r3, [r0, #4]
   12f18:	e584e1e0 	str	lr, [r4, #480]	; 0x1e0
   12f1c:	eaffffdf 	b	12ea0 <fl_attach_media+0x1c>
    _fs.disk_io.write_media = wr;

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
   12f20:	e3020758 	movw	r0, #10072	; 0x2758
   12f24:	e1a01005 	mov	r1, r5
   12f28:	e3400002 	movt	r0, #2
   12f2c:	ebffb548 	bl	454 <print_debug>
        return res;
    }

    _filelib_valid = 1;
    return FAT_INIT_OK;
}
   12f30:	e1a00005 	mov	r0, r5
   12f34:	e8bd8038 	pop	{r3, r4, r5, pc}
   12f38:	26758c34 	.word	0x26758c34

00012f3c <fl_shutdown>:
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
void fl_shutdown(void)
{
    // If first call to library, initialise
    CHECK_FL_INIT();
   12f3c:	e30830c8 	movw	r3, #32968	; 0x80c8
}
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
void fl_shutdown(void)
{
   12f40:	e92d4010 	push	{r4, lr}
    // If first call to library, initialise
    CHECK_FL_INIT();
   12f44:	e3423675 	movt	r3, #9845	; 0x2675
   12f48:	e5932b74 	ldr	r2, [r3, #2932]	; 0xb74
   12f4c:	e3520000 	cmp	r2, #0
   12f50:	0a00000d 	beq	12f8c <fl_shutdown+0x50>

    FL_LOCK(&_fs);
   12f54:	e3064150 	movw	r4, #24912	; 0x6150
   12f58:	e3424673 	movt	r4, #9843	; 0x2673
   12f5c:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   12f60:	e3530000 	cmp	r3, #0
   12f64:	0a000000 	beq	12f6c <fl_shutdown+0x30>
   12f68:	e12fff33 	blx	r3
    fatfs_fat_purge(&_fs);
   12f6c:	e3060150 	movw	r0, #24912	; 0x6150
   12f70:	e3420673 	movt	r0, #9843	; 0x2673
   12f74:	eb000f80 	bl	16d7c <fatfs_fat_purge>
    FL_UNLOCK(&_fs);
   12f78:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   12f7c:	e3530000 	cmp	r3, #0
   12f80:	08bd8010 	popeq	{r4, pc}
   12f84:	e12fff33 	blx	r3
   12f88:	e8bd8010 	pop	{r4, pc}

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   12f8c:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12f90:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   12f94:	e5a126a8 	str	r2, [r1, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12f98:	e1a00002 	mov	r0, r2
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12f9c:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   12fa0:	0283ceb6 	addeq	r12, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   12fa4:	e5832b70 	str	r2, [r3, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   12fa8:	12832eb6 	addne	r2, r3, #2912	; 0xb60
   12fac:	1282200c 	addne	r2, r2, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12fb0:	e5831b6c 	str	r1, [r3, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   12fb4:	15802000 	strne	r2, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   12fb8:	e3a02001 	mov	r2, #1
   12fbc:	e5832b74 	str	r2, [r3, #2932]	; 0xb74
   12fc0:	11a0c001 	movne	r12, r1
    node->next = new_node;
   12fc4:	e59f2010 	ldr	r2, [pc, #16]	; 12fdc <fl_shutdown+0xa0>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   12fc8:	028cc00c 	addeq	r12, r12, #12
   12fcc:	e58311dc 	str	r1, [r3, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   12fd0:	e5812004 	str	r2, [r1, #4]
   12fd4:	e583c1e0 	str	r12, [r3, #480]	; 0x1e0
   12fd8:	eaffffdd 	b	12f54 <fl_shutdown+0x18>
   12fdc:	26758c34 	.word	0x26758c34

00012fe0 <fl_fopen>:
    int i;
    FL_FILE* file;
    uint8 flags = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
   12fe0:	e30830c8 	movw	r3, #32968	; 0x80c8
}
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
   12fe4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    int i;
    FL_FILE* file;
    uint8 flags = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
   12fe8:	e3423675 	movt	r3, #9845	; 0x2675
}
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
   12fec:	e1a06000 	mov	r6, r0
   12ff0:	e1a05001 	mov	r5, r1
    int i;
    FL_FILE* file;
    uint8 flags = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
   12ff4:	e5932b74 	ldr	r2, [r3, #2932]	; 0xb74
   12ff8:	e3520000 	cmp	r2, #0
   12ffc:	0a00008e 	beq	1323c <fl_fopen+0x25c>

    if (!_filelib_valid)
   13000:	e5937b78 	ldr	r7, [r3, #2936]	; 0xb78
   13004:	e3570000 	cmp	r7, #0
   13008:	0a00007d 	beq	13204 <fl_fopen+0x224>
        return NULL;

    if (!path || !mode)
   1300c:	e3560000 	cmp	r6, #0
   13010:	13550000 	cmpne	r5, #0
   13014:	13a04000 	movne	r4, #0
   13018:	03a04001 	moveq	r4, #1
   1301c:	0a0000a0 	beq	132a4 <fl_fopen+0x2c4>
    FL_UNLOCK(&_fs);
}
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
   13020:	e1a00005 	mov	r0, r5
   13024:	eb001a0f 	bl	19868 <strlen>
   13028:	e1a03004 	mov	r3, r4
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1302c:	e1530000 	cmp	r3, r0
   13030:	aa000060 	bge	131b8 <fl_fopen+0x1d8>
    {
        switch (mode[i])
   13034:	e7d52003 	ldrb	r2, [r5, r3]
   13038:	e242202b 	sub	r2, r2, #43	; 0x2b
   1303c:	e352004c 	cmp	r2, #76	; 0x4c
   13040:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   13044:	ea000058 	b	131ac <fl_fopen+0x1cc>
   13048:	0001317c 	.word	0x0001317c
   1304c:	000131ac 	.word	0x000131ac
   13050:	000131ac 	.word	0x000131ac
   13054:	000131ac 	.word	0x000131ac
   13058:	000131ac 	.word	0x000131ac
   1305c:	000131ac 	.word	0x000131ac
   13060:	000131ac 	.word	0x000131ac
   13064:	000131ac 	.word	0x000131ac
   13068:	000131ac 	.word	0x000131ac
   1306c:	000131ac 	.word	0x000131ac
   13070:	000131ac 	.word	0x000131ac
   13074:	000131ac 	.word	0x000131ac
   13078:	000131ac 	.word	0x000131ac
   1307c:	000131ac 	.word	0x000131ac
   13080:	000131ac 	.word	0x000131ac
   13084:	000131ac 	.word	0x000131ac
   13088:	000131ac 	.word	0x000131ac
   1308c:	000131ac 	.word	0x000131ac
   13090:	000131ac 	.word	0x000131ac
   13094:	000131ac 	.word	0x000131ac
   13098:	000131ac 	.word	0x000131ac
   1309c:	000131ac 	.word	0x000131ac
   130a0:	00013230 	.word	0x00013230
   130a4:	00013224 	.word	0x00013224
   130a8:	000131ac 	.word	0x000131ac
   130ac:	000131ac 	.word	0x000131ac
   130b0:	000131ac 	.word	0x000131ac
   130b4:	000131ac 	.word	0x000131ac
   130b8:	000131ac 	.word	0x000131ac
   130bc:	000131ac 	.word	0x000131ac
   130c0:	000131ac 	.word	0x000131ac
   130c4:	000131ac 	.word	0x000131ac
   130c8:	000131ac 	.word	0x000131ac
   130cc:	000131ac 	.word	0x000131ac
   130d0:	000131ac 	.word	0x000131ac
   130d4:	000131ac 	.word	0x000131ac
   130d8:	000131ac 	.word	0x000131ac
   130dc:	000131ac 	.word	0x000131ac
   130e0:	000131ac 	.word	0x000131ac
   130e4:	00013218 	.word	0x00013218
   130e8:	000131ac 	.word	0x000131ac
   130ec:	000131ac 	.word	0x000131ac
   130f0:	000131ac 	.word	0x000131ac
   130f4:	000131ac 	.word	0x000131ac
   130f8:	0001320c 	.word	0x0001320c
   130fc:	000131ac 	.word	0x000131ac
   13100:	000131ac 	.word	0x000131ac
   13104:	000131ac 	.word	0x000131ac
   13108:	000131ac 	.word	0x000131ac
   1310c:	000131ac 	.word	0x000131ac
   13110:	000131ac 	.word	0x000131ac
   13114:	000131ac 	.word	0x000131ac
   13118:	000131ac 	.word	0x000131ac
   1311c:	000131ac 	.word	0x000131ac
   13120:	00013230 	.word	0x00013230
   13124:	00013224 	.word	0x00013224
   13128:	000131ac 	.word	0x000131ac
   1312c:	000131ac 	.word	0x000131ac
   13130:	000131ac 	.word	0x000131ac
   13134:	000131ac 	.word	0x000131ac
   13138:	000131ac 	.word	0x000131ac
   1313c:	000131ac 	.word	0x000131ac
   13140:	000131ac 	.word	0x000131ac
   13144:	000131ac 	.word	0x000131ac
   13148:	000131ac 	.word	0x000131ac
   1314c:	000131ac 	.word	0x000131ac
   13150:	000131ac 	.word	0x000131ac
   13154:	000131ac 	.word	0x000131ac
   13158:	000131ac 	.word	0x000131ac
   1315c:	000131ac 	.word	0x000131ac
   13160:	000131ac 	.word	0x000131ac
   13164:	00013218 	.word	0x00013218
   13168:	000131ac 	.word	0x000131ac
   1316c:	000131ac 	.word	0x000131ac
   13170:	000131ac 	.word	0x000131ac
   13174:	000131ac 	.word	0x000131ac
   13178:	0001320c 	.word	0x0001320c
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
   1317c:	e3140001 	tst	r4, #1
                flags |= FILE_WRITE;
   13180:	13844002 	orrne	r4, r4, #2
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
   13184:	1a000008 	bne	131ac <fl_fopen+0x1cc>
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
   13188:	e2042002 	and	r2, r4, #2
   1318c:	e6ef2072 	uxtb	r2, r2
   13190:	e3520000 	cmp	r2, #0
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
   13194:	13844031 	orrne	r4, r4, #49	; 0x31
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
   13198:	1a000003 	bne	131ac <fl_fopen+0x1cc>
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
   1319c:	e2042004 	and	r2, r4, #4
   131a0:	e6ef2072 	uxtb	r2, r2
   131a4:	e3520000 	cmp	r2, #0
            {
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
   131a8:	13844027 	orrne	r4, r4, #39	; 0x27
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   131ac:	e2833001 	add	r3, r3, #1
   131b0:	e1530000 	cmp	r3, r0
   131b4:	baffff9e 	blt	13034 <fl_fopen+0x54>
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
   131b8:	e3065150 	movw	r5, #24912	; 0x6150
   131bc:	e3425673 	movt	r5, #9843	; 0x2673
   131c0:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   131c4:	e3530000 	cmp	r3, #0
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);

    FL_LOCK(&_fs);
   131c8:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
   131cc:	020440d9 	andeq	r4, r4, #217	; 0xd9

    FL_LOCK(&_fs);
   131d0:	e3530000 	cmp	r3, #0
   131d4:	0a000000 	beq	131dc <fl_fopen+0x1fc>
   131d8:	e12fff33 	blx	r3

    // Read
    if (flags & FILE_READ)
   131dc:	e2148001 	ands	r8, r4, #1
   131e0:	1a000029 	bne	1328c <fl_fopen+0x2ac>
        file = _open_file(path);

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
   131e4:	e2047020 	and	r7, r4, #32
   131e8:	e6ef7077 	uxtb	r7, r7
   131ec:	e3570000 	cmp	r7, #0
   131f0:	1a00002d 	bne	132ac <fl_fopen+0x2cc>
                file = _open_file(path);

    if (file)
        file->flags = flags;

    FL_UNLOCK(&_fs);
   131f4:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   131f8:	e3530000 	cmp	r3, #0
   131fc:	0a000000 	beq	13204 <fl_fopen+0x224>
   13200:	e12fff33 	blx	r3
    return file;
}
   13204:	e1a00007 	mov	r0, r7
   13208:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            break;
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
            flags |= FILE_ERASE;
            flags |= FILE_CREATE;
   1320c:	e3844032 	orr	r4, r4, #50	; 0x32
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   13210:	e2833001 	add	r3, r3, #1
   13214:	eaffffe5 	b	131b0 <fl_fopen+0x1d0>
    {
        switch (mode[i])
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
   13218:	e3844001 	orr	r4, r4, #1
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1321c:	e2833001 	add	r3, r3, #1
   13220:	eaffffe2 	b	131b0 <fl_fopen+0x1d0>
                flags |= FILE_CREATE;
            }
            break;
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
   13224:	e3844008 	orr	r4, r4, #8
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   13228:	e2833001 	add	r3, r3, #1
   1322c:	eaffffdf 	b	131b0 <fl_fopen+0x1d0>
            break;
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
   13230:	e3844026 	orr	r4, r4, #38	; 0x26
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   13234:	e2833001 	add	r3, r3, #1
   13238:	eaffffdc 	b	131b0 <fl_fopen+0x1d0>

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   1323c:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13240:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13244:	e5a126a8 	str	r2, [r1, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13248:	e1a00002 	mov	r0, r2
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1324c:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13250:	0283ceb6 	addeq	r12, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13254:	e5832b70 	str	r2, [r3, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13258:	12832eb6 	addne	r2, r3, #2912	; 0xb60
   1325c:	1282200c 	addne	r2, r2, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13260:	e5831b6c 	str	r1, [r3, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13264:	15802000 	strne	r2, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   13268:	e3a02001 	mov	r2, #1
   1326c:	e5832b74 	str	r2, [r3, #2932]	; 0xb74
   13270:	11a0c001 	movne	r12, r1
    node->next = new_node;
   13274:	e59f206c 	ldr	r2, [pc, #108]	; 132e8 <fl_fopen+0x308>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13278:	028cc00c 	addeq	r12, r12, #12
   1327c:	e58311dc 	str	r1, [r3, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   13280:	e5812004 	str	r2, [r1, #4]
   13284:	e583c1e0 	str	r12, [r3, #480]	; 0x1e0
   13288:	eaffff5c 	b	13000 <fl_fopen+0x20>

    FL_LOCK(&_fs);

    // Read
    if (flags & FILE_READ)
        file = _open_file(path);
   1328c:	e1a00006 	mov	r0, r6
   13290:	ebfffa65 	bl	11c2c <_open_file>

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
   13294:	e2507000 	subs	r7, r0, #0
   13298:	0affffd1 	beq	131e4 <fl_fopen+0x204>
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
                file = _open_file(path);

    if (file)
        file->flags = flags;
   1329c:	e5c744b8 	strb	r4, [r7, #1208]	; 0x4b8
   132a0:	eaffffd3 	b	131f4 <fl_fopen+0x214>

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!_filelib_valid)
        return NULL;
   132a4:	e3a07000 	mov	r7, #0
   132a8:	eaffffd5 	b	13204 <fl_fopen+0x224>
        file = _open_file(path);

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
        file = _create_file(path);
   132ac:	e1a00006 	mov	r0, r6
   132b0:	ebfffb9a 	bl	12120 <_create_file>
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
   132b4:	e3580000 	cmp	r8, #0
        file = _open_file(path);

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
        file = _create_file(path);
   132b8:	e1a07000 	mov	r7, r0
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
   132bc:	1a000006 	bne	132dc <fl_fopen+0x2fc>
        if ((flags & FILE_CREATE) && !file)
   132c0:	e3500000 	cmp	r0, #0
   132c4:	1afffff4 	bne	1329c <fl_fopen+0x2bc>
            if (flags & (FILE_WRITE | FILE_APPEND))
   132c8:	e3140006 	tst	r4, #6
   132cc:	0affffc8 	beq	131f4 <fl_fopen+0x214>
                file = _open_file(path);
   132d0:	e1a00006 	mov	r0, r6
   132d4:	ebfffa54 	bl	11c2c <_open_file>
   132d8:	e1a07000 	mov	r7, r0

    if (file)
   132dc:	e3570000 	cmp	r7, #0
   132e0:	1affffed 	bne	1329c <fl_fopen+0x2bc>
   132e4:	eaffffc2 	b	131f4 <fl_fopen+0x214>
   132e8:	26758c34 	.word	0x26758c34

000132ec <fl_fflush>:
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
   132ec:	e92d4038 	push	{r3, r4, r5, lr}
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
   132f0:	e30830c8 	movw	r3, #32968	; 0x80c8
   132f4:	e3423675 	movt	r3, #9845	; 0x2675
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
   132f8:	e1a05000 	mov	r5, r0
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
   132fc:	e5932b74 	ldr	r2, [r3, #2932]	; 0xb74
   13300:	e3520000 	cmp	r2, #0
   13304:	0a000010 	beq	1334c <fl_fflush+0x60>

    if (file)
   13308:	e3550000 	cmp	r5, #0
   1330c:	0a00000c 	beq	13344 <fl_fflush+0x58>
    {
        FL_LOCK(&_fs);
   13310:	e3064150 	movw	r4, #24912	; 0x6150
   13314:	e3424673 	movt	r4, #9843	; 0x2673
   13318:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   1331c:	e3530000 	cmp	r3, #0
   13320:	0a000000 	beq	13328 <fl_fflush+0x3c>
   13324:	e12fff33 	blx	r3

        // If some write data still in buffer
        if (file->file_data_dirty)
   13328:	e59534b4 	ldr	r3, [r5, #1204]	; 0x4b4
   1332c:	e3530000 	cmp	r3, #0
   13330:	1a00001a 	bne	133a0 <fl_fflush+0xb4>
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
                file->file_data_dirty = 0;
        }

        FL_UNLOCK(&_fs);
   13334:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   13338:	e3530000 	cmp	r3, #0
   1333c:	0a000000 	beq	13344 <fl_fflush+0x58>
   13340:	e12fff33 	blx	r3
    }
#endif
    return 0;
}
   13344:	e3a00000 	mov	r0, #0
   13348:	e8bd8038 	pop	{r3, r4, r5, pc}

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   1334c:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13350:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13354:	e5a126a8 	str	r2, [r1, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13358:	e1a00002 	mov	r0, r2
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1335c:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13360:	0283ceb6 	addeq	r12, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13364:	e5832b70 	str	r2, [r3, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13368:	12832eb6 	addne	r2, r3, #2912	; 0xb60
   1336c:	1282200c 	addne	r2, r2, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13370:	e5831b6c 	str	r1, [r3, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13374:	15802000 	strne	r2, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   13378:	e3a02001 	mov	r2, #1
   1337c:	e5832b74 	str	r2, [r3, #2932]	; 0xb74
   13380:	11a0c001 	movne	r12, r1
    node->next = new_node;
   13384:	e59f2038 	ldr	r2, [pc, #56]	; 133c4 <fl_fflush+0xd8>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13388:	028cc00c 	addeq	r12, r12, #12
    fat_list_init(&_free_file_list);
    fat_list_init(&_open_file_list);

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   1338c:	e1a04001 	mov	r4, r1
   13390:	e58311dc 	str	r1, [r3, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   13394:	e5812004 	str	r2, [r1, #4]
   13398:	e583c1e0 	str	r12, [r3, #480]	; 0x1e0
   1339c:	eaffffd9 	b	13308 <fl_fflush+0x1c>

        // If some write data still in buffer
        if (file->file_data_dirty)
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   133a0:	e3a03001 	mov	r3, #1
   133a4:	e1a00005 	mov	r0, r5
   133a8:	e59514b0 	ldr	r1, [r5, #1200]	; 0x4b0
   133ac:	e2852e2b 	add	r2, r5, #688	; 0x2b0
   133b0:	ebfff96d 	bl	1196c <_write_sectors>
   133b4:	e3500000 	cmp	r0, #0
                file->file_data_dirty = 0;
   133b8:	13a03000 	movne	r3, #0
   133bc:	158534b4 	strne	r3, [r5, #1204]	; 0x4b4
   133c0:	eaffffdb 	b	13334 <fl_fflush+0x48>
   133c4:	26758c34 	.word	0x26758c34

000133c8 <fl_fclose>:
}
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
   133c8:	e92d4070 	push	{r4, r5, r6, lr}
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
   133cc:	e30850c8 	movw	r5, #32968	; 0x80c8
   133d0:	e3425675 	movt	r5, #9845	; 0x2675
}
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
   133d4:	e1a04000 	mov	r4, r0
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
   133d8:	e5953b74 	ldr	r3, [r5, #2932]	; 0xb74
   133dc:	e3530000 	cmp	r3, #0
   133e0:	0a000056 	beq	13540 <fl_fclose+0x178>

    if (file)
   133e4:	e3540000 	cmp	r4, #0
   133e8:	08bd8070 	popeq	{r4, r5, r6, pc}
    {
        FL_LOCK(&_fs);
   133ec:	e3066150 	movw	r6, #24912	; 0x6150
   133f0:	e3426673 	movt	r6, #9843	; 0x2673
   133f4:	e5963038 	ldr	r3, [r6, #56]	; 0x38
   133f8:	e3530000 	cmp	r3, #0
   133fc:	0a000009 	beq	13428 <fl_fclose+0x60>
   13400:	e12fff33 	blx	r3
{
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
   13404:	e5952b74 	ldr	r2, [r5, #2932]	; 0xb74
   13408:	e30830c8 	movw	r3, #32968	; 0x80c8
   1340c:	e3423675 	movt	r3, #9845	; 0x2675
   13410:	e3520000 	cmp	r2, #0
   13414:	0a000035 	beq	134f0 <fl_fclose+0x128>

    if (file)
    {
        FL_LOCK(&_fs);
   13418:	e5963038 	ldr	r3, [r6, #56]	; 0x38
   1341c:	e3530000 	cmp	r3, #0
   13420:	0a000000 	beq	13428 <fl_fclose+0x60>
   13424:	e12fff33 	blx	r3

        // If some write data still in buffer
        if (file->file_data_dirty)
   13428:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4
   1342c:	e3530000 	cmp	r3, #0
   13430:	1a00005f 	bne	135b4 <fl_fclose+0x1ec>
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
                file->file_data_dirty = 0;
        }

        FL_UNLOCK(&_fs);
   13434:	e596303c 	ldr	r3, [r6, #60]	; 0x3c
   13438:	e3530000 	cmp	r3, #0
   1343c:	0a000000 	beq	13444 <fl_fclose+0x7c>
   13440:	e12fff33 	blx	r3

        // Flush un-written data to file
        fl_fflush(f);

        // File size changed?
        if (file->filelength_changed)
   13444:	e5943010 	ldr	r3, [r4, #16]
   13448:	e3530000 	cmp	r3, #0
   1344c:	1a000051 	bne	13598 <fl_fclose+0x1d0>
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   13450:	e59424bc 	ldr	r2, [r4, #1212]	; 0x4bc
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
#endif
            file->filelength_changed = 0;
        }

        file->bytenum = 0;
   13454:	e3a03000 	mov	r3, #0
        file->filelength = 0;
        file->startcluster = 0;
   13458:	e5843004 	str	r3, [r4, #4]
        file->file_data_address = 0xFFFFFFFF;
   1345c:	e3e01000 	mvn	r1, #0
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
#endif
            file->filelength_changed = 0;
        }

        file->bytenum = 0;
   13460:	e5843008 	str	r3, [r4, #8]
   13464:	e1520003 	cmp	r2, r3
        file->filelength = 0;
   13468:	e584300c 	str	r3, [r4, #12]
        file->startcluster = 0;
        file->file_data_address = 0xFFFFFFFF;
        file->file_data_dirty = 0;
   1346c:	e58434b4 	str	r3, [r4, #1204]	; 0x4b4
        file->filelength_changed = 0;
   13470:	e5843010 	str	r3, [r4, #16]
        list->head = node->next;
   13474:	e59434c0 	ldr	r3, [r4, #1216]	; 0x4c0
        }

        file->bytenum = 0;
        file->filelength = 0;
        file->startcluster = 0;
        file->file_data_address = 0xFFFFFFFF;
   13478:	e58414b0 	str	r1, [r4, #1200]	; 0x4b0
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1347c:	e30810c8 	movw	r1, #32968	; 0x80c8
   13480:	e3421675 	movt	r1, #9845	; 0x2675
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
    else
        node->previous->next = node->next;
   13484:	15823004 	strne	r3, [r2, #4]
   13488:	159434c0 	ldrne	r3, [r4, #1216]	; 0x4c0
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
   1348c:	058531e4 	streq	r3, [r5, #484]	; 0x1e4
    else
        node->previous->next = node->next;

    if(!node->next)
   13490:	e3530000 	cmp	r3, #0
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   13494:	15832000 	strne	r2, [r3]
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   13498:	e59531e0 	ldr	r3, [r5, #480]	; 0x1e0
        list->head = node->next;
    else
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
   1349c:	058521e8 	streq	r2, [r5, #488]	; 0x1e8
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   134a0:	e2842e4b 	add	r2, r4, #1200	; 0x4b0
   134a4:	e282200c 	add	r2, r2, #12
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   134a8:	e3530000 	cmp	r3, #0
   134ac:	0a000049 	beq	135d8 <fl_fclose+0x210>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   134b0:	e5930004 	ldr	r0, [r3, #4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   134b4:	e58434bc 	str	r3, [r4, #1212]	; 0x4bc
    new_node->next = node->next;
   134b8:	e58404c0 	str	r0, [r4, #1216]	; 0x4c0
    if (!node->next)
   134bc:	e5930004 	ldr	r0, [r3, #4]
   134c0:	e3500000 	cmp	r0, #0
        list->tail = new_node;
   134c4:	058121e0 	streq	r2, [r1, #480]	; 0x1e0
    else
        node->next->previous = new_node;
   134c8:	15802000 	strne	r2, [r0]
    node->next = new_node;
   134cc:	e5832004 	str	r2, [r3, #4]
        file->filelength_changed = 0;

        // Free file handle
        _free_file(file);

        fatfs_fat_purge(&_fs);
   134d0:	e3060150 	movw	r0, #24912	; 0x6150
   134d4:	e3420673 	movt	r0, #9843	; 0x2673
   134d8:	eb000e27 	bl	16d7c <fatfs_fat_purge>

        FL_UNLOCK(&_fs);
   134dc:	e596303c 	ldr	r3, [r6, #60]	; 0x3c
   134e0:	e3530000 	cmp	r3, #0
   134e4:	08bd8070 	popeq	{r4, r5, r6, pc}
   134e8:	e12fff33 	blx	r3
   134ec:	e8bd8070 	pop	{r4, r5, r6, pc}

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   134f0:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   134f4:	e58321e8 	str	r2, [r3, #488]	; 0x1e8
   134f8:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   134fc:	12833eb6 	addne	r3, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13500:	e1a00002 	mov	r0, r2
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13504:	1283300c 	addne	r3, r3, #12

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13508:	e5a126a8 	str	r2, [r1, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   1350c:	e5852b70 	str	r2, [r5, #2928]	; 0xb70
    if (!node->next)
   13510:	02832eb6 	addeq	r2, r3, #2912	; 0xb60
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13514:	e5851b6c 	str	r1, [r5, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13518:	11a02001 	movne	r2, r1
   1351c:	15803000 	strne	r3, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   13520:	e3a03001 	mov	r3, #1
   13524:	e5853b74 	str	r3, [r5, #2932]	; 0xb74
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13528:	0282200c 	addeq	r2, r2, #12
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   1352c:	e59f30e4 	ldr	r3, [pc, #228]	; 13618 <fl_fclose+0x250>
   13530:	e58511dc 	str	r1, [r5, #476]	; 0x1dc
   13534:	e5813004 	str	r3, [r1, #4]
   13538:	e58521e0 	str	r2, [r5, #480]	; 0x1e0
   1353c:	eaffffb5 	b	13418 <fl_fclose+0x50>

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13540:	e1a02005 	mov	r2, r5
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13544:	e58531e8 	str	r3, [r5, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13548:	e5a236a8 	str	r3, [r2, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   1354c:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13550:	e58531e4 	str	r3, [r5, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13554:	02850eb6 	addeq	r0, r5, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13558:	e5853b70 	str	r3, [r5, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   1355c:	12853eb6 	addne	r3, r5, #2912	; 0xb60
   13560:	1283300c 	addne	r3, r3, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13564:	e5852b6c 	str	r2, [r5, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13568:	15813000 	strne	r3, [r1]
   1356c:	e3a03001 	mov	r3, #1
   13570:	e5853b74 	str	r3, [r5, #2932]	; 0xb74
   13574:	11a00002 	movne	r0, r2
    node->next = new_node;
   13578:	e59f3098 	ldr	r3, [pc, #152]	; 13618 <fl_fclose+0x250>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   1357c:	0280000c 	addeq	r0, r0, #12
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (file)
   13580:	e3540000 	cmp	r4, #0
   13584:	e58521dc 	str	r2, [r5, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   13588:	e5823004 	str	r3, [r2, #4]
   1358c:	e58501e0 	str	r0, [r5, #480]	; 0x1e0
   13590:	1affff95 	bne	133ec <fl_fclose+0x24>
   13594:	e8bd8070 	pop	{r4, r5, r6, pc}
        // File size changed?
        if (file->filelength_changed)
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
   13598:	e1a02004 	mov	r2, r4
   1359c:	e3060150 	movw	r0, #24912	; 0x6150
   135a0:	e492121c 	ldr	r1, [r2], #540	; 0x21c
   135a4:	e3420673 	movt	r0, #9843	; 0x2673
   135a8:	e594300c 	ldr	r3, [r4, #12]
   135ac:	ebfff4f7 	bl	10990 <fatfs_update_file_length>
   135b0:	eaffffa6 	b	13450 <fl_fclose+0x88>

        // If some write data still in buffer
        if (file->file_data_dirty)
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   135b4:	e3a03001 	mov	r3, #1
   135b8:	e1a00004 	mov	r0, r4
   135bc:	e59414b0 	ldr	r1, [r4, #1200]	; 0x4b0
   135c0:	e2842e2b 	add	r2, r4, #688	; 0x2b0
   135c4:	ebfff8e8 	bl	1196c <_write_sectors>
   135c8:	e3500000 	cmp	r0, #0
                file->file_data_dirty = 0;
   135cc:	13a03000 	movne	r3, #0
   135d0:	158434b4 	strne	r3, [r4, #1204]	; 0x4b4
   135d4:	eaffff96 	b	13434 <fl_fclose+0x6c>
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   135d8:	e59131dc 	ldr	r3, [r1, #476]	; 0x1dc
   135dc:	e3530000 	cmp	r3, #0
    {
        list->head = node;
   135e0:	058121dc 	streq	r2, [r1, #476]	; 0x1dc
        list->tail = node;
   135e4:	058121e0 	streq	r2, [r1, #480]	; 0x1e0
        node->previous = 0;
   135e8:	058434bc 	streq	r3, [r4, #1212]	; 0x4bc
        node->next = 0;
   135ec:	058434c0 	streq	r3, [r4, #1216]	; 0x4c0
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   135f0:	0affffb6 	beq	134d0 <fl_fclose+0x108>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   135f4:	e5930000 	ldr	r0, [r3]
    new_node->next = node;
   135f8:	e58434c0 	str	r3, [r4, #1216]	; 0x4c0
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   135fc:	e58404bc 	str	r0, [r4, #1212]	; 0x4bc
    new_node->next = node;
    if (!node->previous)
   13600:	e5930000 	ldr	r0, [r3]
   13604:	e3500000 	cmp	r0, #0
        list->head = new_node;
   13608:	058121dc 	streq	r2, [r1, #476]	; 0x1dc
    else
        node->previous->next = new_node;
   1360c:	15802004 	strne	r2, [r0, #4]
    node->previous = new_node;
   13610:	e5832000 	str	r2, [r3]
   13614:	eaffffad 	b	134d0 <fl_fclose+0x108>
   13618:	26758c34 	.word	0x26758c34

0001361c <fl_fread>:
    int bytesRead = 0;

    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialize
    CHECK_FL_INIT();
   1361c:	e308c0c8 	movw	r12, #32968	; 0x80c8
}
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
   13620:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    int bytesRead = 0;

    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialize
    CHECK_FL_INIT();
   13624:	e342c675 	movt	r12, #9845	; 0x2675
}
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
   13628:	e1a04003 	mov	r4, r3
   1362c:	e24dd00c 	sub	sp, sp, #12
   13630:	e1a09000 	mov	r9, r0
    int bytesRead = 0;

    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialize
    CHECK_FL_INIT();
   13634:	e59c3b74 	ldr	r3, [r12, #2932]	; 0xb74
int fl_fread(void * buffer, int size, int length, void *f )
{
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
   13638:	e00a0192 	mul	r10, r2, r1
    int bytesRead = 0;

    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialize
    CHECK_FL_INIT();
   1363c:	e58dc004 	str	r12, [sp, #4]
   13640:	e3530000 	cmp	r3, #0
   13644:	0a00007c 	beq	1383c <fl_fread+0x220>

    if (buffer==NULL || file==NULL)
   13648:	e3590000 	cmp	r9, #0
   1364c:	13540000 	cmpne	r4, #0
   13650:	0a000092 	beq	138a0 <fl_fread+0x284>
        return -1;

    // No read permissions
    if (!(file->flags & FILE_READ))
   13654:	e5d434b8 	ldrb	r3, [r4, #1208]	; 0x4b8
   13658:	e3130001 	tst	r3, #1
   1365c:	0a00008f 	beq	138a0 <fl_fread+0x284>
        return -1;

    // Nothing to be done
    if (!count)
   13660:	e35a0000 	cmp	r10, #0
        return 0;
   13664:	01a0500a 	moveq	r5, r10
    // No read permissions
    if (!(file->flags & FILE_READ))
        return -1;

    // Nothing to be done
    if (!count)
   13668:	0a000058 	beq	137d0 <fl_fread+0x1b4>
        return 0;

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
   1366c:	e5946008 	ldr	r6, [r4, #8]
   13670:	e594300c 	ldr	r3, [r4, #12]
   13674:	e1560003 	cmp	r6, r3
   13678:	2a000088 	bcs	138a0 <fl_fread+0x284>
        return -1;

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
   1367c:	e08a2006 	add	r2, r10, r6

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   13680:	e1a08b86 	lsl	r8, r6, #23
    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
        return -1;

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
   13684:	e1530002 	cmp	r3, r2
        count = file->filelength - file->bytenum;
   13688:	3066a003 	rsbcc	r10, r6, r3

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1368c:	e1a08ba8 	lsr	r8, r8, #23

    while (bytesRead < count)
   13690:	e35a0000 	cmp	r10, #0
    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
        count = file->filelength - file->bytenum;

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   13694:	e1a064a6 	lsr	r6, r6, #9

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   13698:	da00004b 	ble	137cc <fl_fread+0x1b0>
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   1369c:	e3580000 	cmp	r8, #0
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   136a0:	e3a05000 	mov	r5, #0
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   136a4:	1a000040 	bne	137ac <fl_fread+0x190>
   136a8:	e065300a 	rsb	r3, r5, r10
   136ac:	e3530c02 	cmp	r3, #512	; 0x200
   136b0:	ba00003d 	blt	137ac <fl_fread+0x190>
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
   136b4:	e1a00004 	mov	r0, r4
   136b8:	e1a01006 	mov	r1, r6
   136bc:	e0892005 	add	r2, r9, r5
   136c0:	e1a034c3 	asr	r3, r3, #9
   136c4:	ebfff909 	bl	11af0 <_read_sectors>
            if (sectorsRead)
   136c8:	e3500000 	cmp	r0, #0
   136cc:	0a00003f 	beq	137d0 <fl_fread+0x1b4>
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
   136d0:	e1a0b480 	lsl	r11, r0, #9

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
   136d4:	e0866000 	add	r6, r6, r0
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
            if (sectorsRead)
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
   136d8:	e1a0700b 	mov	r7, r11

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
   136dc:	ea000028 	b	13784 <fl_fread+0x168>
{
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
   136e0:	e59dc004 	ldr	r12, [sp, #4]
   136e4:	e30820c8 	movw	r2, #32968	; 0x80c8
   136e8:	e3422675 	movt	r2, #9845	; 0x2675
   136ec:	e59c1b74 	ldr	r1, [r12, #2932]	; 0xb74
   136f0:	e3510000 	cmp	r1, #0
   136f4:	0a000038 	beq	137dc <fl_fread+0x1c0>

    if (file)
    {
        FL_LOCK(&_fs);
   136f8:	e3067150 	movw	r7, #24912	; 0x6150
   136fc:	e3427673 	movt	r7, #9843	; 0x2673
   13700:	e5972038 	ldr	r2, [r7, #56]	; 0x38
   13704:	e3520000 	cmp	r2, #0
   13708:	0a000001 	beq	13714 <fl_fread+0xf8>
   1370c:	e12fff32 	blx	r2
   13710:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4

        // If some write data still in buffer
        if (file->file_data_dirty)
   13714:	e3530000 	cmp	r3, #0
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   13718:	e284be2b 	add	r11, r4, #688	; 0x2b0
    if (file)
    {
        FL_LOCK(&_fs);

        // If some write data still in buffer
        if (file->file_data_dirty)
   1371c:	1a00003d 	bne	13818 <fl_fread+0x1fc>
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
                file->file_data_dirty = 0;
        }

        FL_UNLOCK(&_fs);
   13720:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
   13724:	e3530000 	cmp	r3, #0
   13728:	0a000000 	beq	13730 <fl_fread+0x114>
   1372c:	e12fff33 	blx	r3
                // Flush un-written data to file
                if (file->file_data_dirty)
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
   13730:	e1a00004 	mov	r0, r4
   13734:	e1a01006 	mov	r1, r6
   13738:	e1a0200b 	mov	r2, r11
   1373c:	e3a03001 	mov	r3, #1
   13740:	ebfff8ea 	bl	11af0 <_read_sectors>
   13744:	e3500000 	cmp	r0, #0
   13748:	0a000020 	beq	137d0 <fl_fread+0x1b4>
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
                file->file_data_dirty = 0;
   1374c:	e3a03000 	mov	r3, #0
                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
   13750:	e58464b0 	str	r6, [r4, #1200]	; 0x4b0
                file->file_data_dirty = 0;
   13754:	e58434b4 	str	r3, [r4, #1204]	; 0x4b4
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   13758:	e2687c02 	rsb	r7, r8, #512	; 0x200

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
   1375c:	e065300a 	rsb	r3, r5, r10
   13760:	e1570003 	cmp	r7, r3
   13764:	a1a07003 	movge	r7, r3
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
   13768:	e2881e2b 	add	r1, r8, #688	; 0x2b0
   1376c:	e0890005 	add	r0, r9, r5
   13770:	e0841001 	add	r1, r4, r1
   13774:	e1a02007 	mov	r2, r7
   13778:	e1a0b007 	mov	r11, r7

            // Move onto next sector and reset copy offset
            sector++;
   1377c:	e2866001 	add	r6, r6, #1
            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
   13780:	eb001768 	bl	19528 <memcpy>

        // Increase total read count
        bytesRead += copyCount;

        // Increment file pointer
        file->bytenum += copyCount;
   13784:	e5942008 	ldr	r2, [r4, #8]
            sector++;
            offset = 0;
        }

        // Increase total read count
        bytesRead += copyCount;
   13788:	e0855007 	add	r5, r5, r7
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   1378c:	e15a0005 	cmp	r10, r5
   13790:	e3a08000 	mov	r8, #0

        // Increase total read count
        bytesRead += copyCount;

        // Increment file pointer
        file->bytenum += copyCount;
   13794:	e082300b 	add	r3, r2, r11
   13798:	e5843008 	str	r3, [r4, #8]
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   1379c:	da00000b 	ble	137d0 <fl_fread+0x1b4>
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   137a0:	e065300a 	rsb	r3, r5, r10
   137a4:	e3530c02 	cmp	r3, #512	; 0x200
   137a8:	aaffffc1 	bge	136b4 <fl_fread+0x98>
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
   137ac:	e59434b0 	ldr	r3, [r4, #1200]	; 0x4b0
   137b0:	e1530006 	cmp	r3, r6
   137b4:	0affffe7 	beq	13758 <fl_fread+0x13c>
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   137b8:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4
   137bc:	e3530000 	cmp	r3, #0
   137c0:	0284be2b 	addeq	r11, r4, #688	; 0x2b0
   137c4:	0affffd9 	beq	13730 <fl_fread+0x114>
   137c8:	eaffffc4 	b	136e0 <fl_fread+0xc4>
    if (!(file->flags & FILE_READ))
        return -1;

    // Nothing to be done
    if (!count)
        return 0;
   137cc:	e3a05000 	mov	r5, #0
        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
}
   137d0:	e1a00005 	mov	r0, r5
   137d4:	e28dd00c 	add	sp, sp, #12
   137d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   137dc:	e282ce6a 	add	r12, r2, #1696	; 0x6a0
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   137e0:	e2820eb6 	add	r0, r2, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   137e4:	e28cc008 	add	r12, r12, #8
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   137e8:	e280000c 	add	r0, r0, #12
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   137ec:	e58211e8 	str	r1, [r2, #488]	; 0x1e8
   137f0:	e58211e4 	str	r1, [r2, #484]	; 0x1e4

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   137f4:	e58216a8 	str	r1, [r2, #1704]	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   137f8:	e5821b70 	str	r1, [r2, #2928]	; 0xb70

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   137fc:	e3a01001 	mov	r1, #1
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   13800:	e582c1dc 	str	r12, [r2, #476]	; 0x1dc
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13804:	e582cb6c 	str	r12, [r2, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   13808:	e58201e0 	str	r0, [r2, #480]	; 0x1e0
    else
        node->next->previous = new_node;
    node->next = new_node;
   1380c:	e58206ac 	str	r0, [r2, #1708]	; 0x6ac
   13810:	e5821b74 	str	r1, [r2, #2932]	; 0xb74
   13814:	eaffffb7 	b	136f8 <fl_fread+0xdc>

        // If some write data still in buffer
        if (file->file_data_dirty)
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   13818:	e3a03001 	mov	r3, #1
   1381c:	e1a00004 	mov	r0, r4
   13820:	e59414b0 	ldr	r1, [r4, #1200]	; 0x4b0
   13824:	e1a0200b 	mov	r2, r11
   13828:	ebfff84f 	bl	1196c <_write_sectors>
   1382c:	e3500000 	cmp	r0, #0
                file->file_data_dirty = 0;
   13830:	13a03000 	movne	r3, #0
   13834:	158434b4 	strne	r3, [r4, #1204]	; 0x4b4
   13838:	eaffffb8 	b	13720 <fl_fread+0x104>
   1383c:	e1a0000c 	mov	r0, r12

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13840:	e1a0200c 	mov	r2, r12
   13844:	e5a236a8 	str	r3, [r2, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13848:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1384c:	e58031e4 	str	r3, [r0, #484]	; 0x1e4
   13850:	01a01000 	moveq	r1, r0
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13854:	e5803b70 	str	r3, [r0, #2928]	; 0xb70
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13858:	e58c31e8 	str	r3, [r12, #488]	; 0x1e8
    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   1385c:	12803eb6 	addne	r3, r0, #2912	; 0xb60
   13860:	1283300c 	addne	r3, r3, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13864:	e5802b6c 	str	r2, [r0, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13868:	15813000 	strne	r3, [r1]
   1386c:	01a03001 	moveq	r3, r1
   13870:	159d3004 	ldrne	r3, [sp, #4]
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13874:	02810eb6 	addeq	r0, r1, #2912	; 0xb60

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   13878:	e59dc004 	ldr	r12, [sp, #4]
        list->tail = new_node;
    else
        node->next->previous = new_node;
   1387c:	11a00002 	movne	r0, r2
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13880:	0280000c 	addeq	r0, r0, #12
   13884:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
   13888:	e3a03001 	mov	r3, #1
   1388c:	e58c3b74 	str	r3, [r12, #2932]	; 0xb74
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   13890:	e59f3010 	ldr	r3, [pc, #16]	; 138a8 <fl_fread+0x28c>
   13894:	e5823004 	str	r3, [r2, #4]
   13898:	e58c01e0 	str	r0, [r12, #480]	; 0x1e0
   1389c:	eaffff69 	b	13648 <fl_fread+0x2c>

    // If first call to library, initialize
    CHECK_FL_INIT();

    if (buffer==NULL || file==NULL)
        return -1;
   138a0:	e3e05000 	mvn	r5, #0
   138a4:	eaffffc9 	b	137d0 <fl_fread+0x1b4>
   138a8:	26758c34 	.word	0x26758c34

000138ac <fl_fgetc>:
}
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
   138ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   138b0:	e24dd00c 	sub	sp, sp, #12
   138b4:	e1a03000 	mov	r3, r0
    int res;
    uint8 data = 0;

    res = fl_fread(&data, 1, 1, f);
   138b8:	e3a01001 	mov	r1, #1
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
    int res;
    uint8 data = 0;
   138bc:	e28d0008 	add	r0, sp, #8
   138c0:	e3a02000 	mov	r2, #0
   138c4:	e5602008 	strb	r2, [r0, #-8]!

    res = fl_fread(&data, 1, 1, f);
   138c8:	e1a02001 	mov	r2, r1
   138cc:	e1a0000d 	mov	r0, sp
   138d0:	ebffff51 	bl	1361c <fl_fread>
    if (res == 1)
   138d4:	e3500001 	cmp	r0, #1
        return (int)data;
   138d8:	05dd0000 	ldrbeq	r0, [sp]
    else
        return res;
}
   138dc:	e28dd00c 	add	sp, sp, #12
   138e0:	e8bd8000 	ldmfd	sp!, {pc}

000138e4 <fl_fgets>:
char *fl_fgets(char *s, int n, void *f)
{
    int idx = 0;

    // Space for null terminator?
    if (n > 0)
   138e4:	e3510000 	cmp	r1, #0
}
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
   138e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   138ec:	e1a05000 	mov	r5, r0
   138f0:	e24dd008 	sub	sp, sp, #8
   138f4:	e1a06002 	mov	r6, r2
    int idx = 0;

    // Space for null terminator?
    if (n > 0)
   138f8:	da00001f 	ble	1397c <fl_fgets+0x98>
   138fc:	e3a04000 	mov	r4, #0
   13900:	e2417001 	sub	r7, r1, #1
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
    int res;
    uint8 data = 0;
   13904:	e1a08004 	mov	r8, r4
   13908:	ea000005 	b	13924 <fl_fgets+0x40>
        while (idx < (n-1))
        {
            int ch = fl_fgetc(f);

            // EOF / Error?
            if (ch < 0)
   1390c:	e3500000 	cmp	r0, #0
   13910:	ba000017 	blt	13974 <fl_fgets+0x90>

            // Store character read from stream
            s[idx++] = (char)ch;

            // End of line?
            if (ch == '\n')
   13914:	e350000a 	cmp	r0, #10
            // EOF / Error?
            if (ch < 0)
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
   13918:	e7c50004 	strb	r0, [r5, r4]
   1391c:	e2844001 	add	r4, r4, #1

            // End of line?
            if (ch == '\n')
   13920:	0a00000e 	beq	13960 <fl_fgets+0x7c>

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   13924:	e1540007 	cmp	r4, r7
int fl_fgetc(void *f)
{
    int res;
    uint8 data = 0;

    res = fl_fread(&data, 1, 1, f);
   13928:	e3a01001 	mov	r1, #1
   1392c:	e1a0000d 	mov	r0, sp
   13930:	e1a02001 	mov	r2, r1
   13934:	e1a03006 	mov	r3, r6

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   13938:	0a00000d 	beq	13974 <fl_fgets+0x90>
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
    int res;
    uint8 data = 0;
   1393c:	e5cd8000 	strb	r8, [sp]

    res = fl_fread(&data, 1, 1, f);
   13940:	ebffff35 	bl	1361c <fl_fread>
    if (res == 1)
   13944:	e3500001 	cmp	r0, #1
   13948:	1affffef 	bne	1390c <fl_fgets+0x28>
        return (int)data;
   1394c:	e5dd0000 	ldrb	r0, [sp]

            // Store character read from stream
            s[idx++] = (char)ch;

            // End of line?
            if (ch == '\n')
   13950:	e350000a 	cmp	r0, #10
            // EOF / Error?
            if (ch < 0)
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
   13954:	e7c50004 	strb	r0, [r5, r4]
   13958:	e2844001 	add	r4, r4, #1

            // End of line?
            if (ch == '\n')
   1395c:	1afffff0 	bne	13924 <fl_fgets+0x40>
                break;
        }

        if (idx > 0)
            s[idx] = '\0';
   13960:	e3a03000 	mov	r3, #0
   13964:	e7c53004 	strb	r3, [r5, r4]
    }

    return (idx > 0) ? s : 0;
}
   13968:	e1a00005 	mov	r0, r5
   1396c:	e28dd008 	add	sp, sp, #8
   13970:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            // End of line?
            if (ch == '\n')
                break;
        }

        if (idx > 0)
   13974:	e3540000 	cmp	r4, #0
   13978:	1afffff8 	bne	13960 <fl_fgets+0x7c>
            s[idx] = '\0';
    }

    return (idx > 0) ? s : 0;
   1397c:	e3a05000 	mov	r5, #0
   13980:	eafffff8 	b	13968 <fl_fgets+0x84>

00013984 <fl_fseek>:
{
    FL_FILE *file = (FL_FILE *)f;
    int res = -1;

    // If first call to library, initialise
    CHECK_FL_INIT();
   13984:	e30830c8 	movw	r3, #32968	; 0x80c8
}
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
   13988:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    FL_FILE *file = (FL_FILE *)f;
    int res = -1;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1398c:	e3423675 	movt	r3, #9845	; 0x2675
}
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
   13990:	e1a07001 	mov	r7, r1
   13994:	e1a04000 	mov	r4, r0
   13998:	e1a06002 	mov	r6, r2
    FL_FILE *file = (FL_FILE *)f;
    int res = -1;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1399c:	e5931b74 	ldr	r1, [r3, #2932]	; 0xb74
   139a0:	e3510000 	cmp	r1, #0
   139a4:	0a000029 	beq	13a50 <fl_fseek+0xcc>

    if (!file)
   139a8:	e3540000 	cmp	r4, #0
   139ac:	0a000047 	beq	13ad0 <fl_fseek+0x14c>
        return -1;

    if (origin == SEEK_END && offset != 0)
   139b0:	e2563002 	subs	r3, r6, #2
   139b4:	e2738000 	rsbs	r8, r3, #0
   139b8:	e0b88003 	adcs	r8, r8, r3
   139bc:	e3570000 	cmp	r7, #0
   139c0:	03a03000 	moveq	r3, #0
   139c4:	12083001 	andne	r3, r8, #1
   139c8:	e3530000 	cmp	r3, #0
   139cc:	1a00003f 	bne	13ad0 <fl_fseek+0x14c>
        return -1;

    FL_LOCK(&_fs);
   139d0:	e3065150 	movw	r5, #24912	; 0x6150
   139d4:	e3425673 	movt	r5, #9843	; 0x2673
   139d8:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   139dc:	e3530000 	cmp	r3, #0
   139e0:	0a000000 	beq	139e8 <fl_fseek+0x64>
   139e4:	e12fff33 	blx	r3

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
    file->file_data_dirty = 0;

    if (origin == SEEK_SET)
   139e8:	e3560000 	cmp	r6, #0
        return -1;

    FL_LOCK(&_fs);

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
   139ec:	e3e00000 	mvn	r0, #0
    file->file_data_dirty = 0;
   139f0:	e3a03000 	mov	r3, #0
        return -1;

    FL_LOCK(&_fs);

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
   139f4:	e58404b0 	str	r0, [r4, #1200]	; 0x4b0
    file->file_data_dirty = 0;
   139f8:	e58434b4 	str	r3, [r4, #1204]	; 0x4b4

    if (origin == SEEK_SET)
   139fc:	0a00000c 	beq	13a34 <fl_fseek+0xb0>
        if (file->bytenum > file->filelength)
            file->bytenum = file->filelength;

        res = 0;
    }
    else if (origin == SEEK_CUR)
   13a00:	e3560001 	cmp	r6, #1
   13a04:	0a000026 	beq	13aa4 <fl_fseek+0x120>
                file->bytenum-= offset;
        }

        res = 0;
    }
    else if (origin == SEEK_END)
   13a08:	e3580000 	cmp	r8, #0
    {
        file->bytenum = file->filelength;
   13a0c:	1594200c 	ldrne	r2, [r4, #12]
        res = 0;
   13a10:	11a06003 	movne	r6, r3
    }
    else
        res = -1;
   13a14:	01a06000 	moveq	r6, r0

        res = 0;
    }
    else if (origin == SEEK_END)
    {
        file->bytenum = file->filelength;
   13a18:	15842008 	strne	r2, [r4, #8]
        res = 0;
    }
    else
        res = -1;

    FL_UNLOCK(&_fs);
   13a1c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   13a20:	e3530000 	cmp	r3, #0
   13a24:	0a000000 	beq	13a2c <fl_fseek+0xa8>
   13a28:	e12fff33 	blx	r3

    return res;
}
   13a2c:	e1a00006 	mov	r0, r6
   13a30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

    if (origin == SEEK_SET)
    {
        file->bytenum = (uint32)offset;

        if (file->bytenum > file->filelength)
   13a34:	e594300c 	ldr	r3, [r4, #12]
    file->file_data_address = 0xFFFFFFFF;
    file->file_data_dirty = 0;

    if (origin == SEEK_SET)
    {
        file->bytenum = (uint32)offset;
   13a38:	e5847008 	str	r7, [r4, #8]

        if (file->bytenum > file->filelength)
   13a3c:	e1570003 	cmp	r7, r3
            file->bytenum = file->filelength;
   13a40:	85843008 	strhi	r3, [r4, #8]

    if (origin == SEEK_SET)
    {
        file->bytenum = (uint32)offset;

        if (file->bytenum > file->filelength)
   13a44:	8afffff4 	bhi	13a1c <fl_fseek+0x98>
            file->bytenum = file->filelength;

        res = 0;
   13a48:	e3a06000 	mov	r6, #0
   13a4c:	eafffff2 	b	13a1c <fl_fseek+0x98>

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13a50:	e1a02003 	mov	r2, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13a54:	e58311e8 	str	r1, [r3, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13a58:	e5a216a8 	str	r1, [r2, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13a5c:	e1a00001 	mov	r0, r1
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13a60:	e58311e4 	str	r1, [r3, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13a64:	0283ceb6 	addeq	r12, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13a68:	e5831b70 	str	r1, [r3, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13a6c:	12831eb6 	addne	r1, r3, #2912	; 0xb60
   13a70:	1281100c 	addne	r1, r1, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13a74:	e5832b6c 	str	r2, [r3, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13a78:	15801000 	strne	r1, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   13a7c:	e3a01001 	mov	r1, #1
   13a80:	e5831b74 	str	r1, [r3, #2932]	; 0xb74
   13a84:	11a0c002 	movne	r12, r2
    node->next = new_node;
   13a88:	e59f106c 	ldr	r1, [pc, #108]	; 13afc <fl_fseek+0x178>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13a8c:	028cc00c 	addeq	r12, r12, #12
    fat_list_init(&_free_file_list);
    fat_list_init(&_open_file_list);

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   13a90:	e1a05002 	mov	r5, r2
   13a94:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   13a98:	e5821004 	str	r1, [r2, #4]
   13a9c:	e583c1e0 	str	r12, [r3, #480]	; 0x1e0
   13aa0:	eaffffc0 	b	139a8 <fl_fseek+0x24>
        res = 0;
    }
    else if (origin == SEEK_CUR)
    {
        // Positive shift
        if (offset >= 0)
   13aa4:	e3570000 	cmp	r7, #0
   13aa8:	ba00000a 	blt	13ad8 <fl_fseek+0x154>
        {
            file->bytenum += offset;
   13aac:	e5941008 	ldr	r1, [r4, #8]

            if (file->bytenum > file->filelength)
   13ab0:	e594200c 	ldr	r2, [r4, #12]
    else if (origin == SEEK_CUR)
    {
        // Positive shift
        if (offset >= 0)
        {
            file->bytenum += offset;
   13ab4:	e0877001 	add	r7, r7, r1

            if (file->bytenum > file->filelength)
   13ab8:	e1570002 	cmp	r7, r2
    else if (origin == SEEK_CUR)
    {
        // Positive shift
        if (offset >= 0)
        {
            file->bytenum += offset;
   13abc:	e5847008 	str	r7, [r4, #8]
                file->bytenum = 0;
            else
                file->bytenum-= offset;
        }

        res = 0;
   13ac0:	81a06003 	movhi	r6, r3
        if (offset >= 0)
        {
            file->bytenum += offset;

            if (file->bytenum > file->filelength)
                file->bytenum = file->filelength;
   13ac4:	85842008 	strhi	r2, [r4, #8]
        // Positive shift
        if (offset >= 0)
        {
            file->bytenum += offset;

            if (file->bytenum > file->filelength)
   13ac8:	8affffd3 	bhi	13a1c <fl_fseek+0x98>
   13acc:	eaffffdd 	b	13a48 <fl_fseek+0xc4>

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!file)
        return -1;
   13ad0:	e3e06000 	mvn	r6, #0
   13ad4:	eaffffd4 	b	13a2c <fl_fseek+0xa8>
        {
            // Make shift positive
            offset = -offset;

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
   13ad8:	e5942008 	ldr	r2, [r4, #8]
        }
        // Negative shift
        else
        {
            // Make shift positive
            offset = -offset;
   13adc:	e2677000 	rsb	r7, r7, #0

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
   13ae0:	e1570002 	cmp	r7, r2
                file->bytenum = 0;
            else
                file->bytenum-= offset;
   13ae4:	90677002 	rsbls	r7, r7, r2
            // Make shift positive
            offset = -offset;

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
                file->bytenum = 0;
   13ae8:	85843008 	strhi	r3, [r4, #8]
            else
                file->bytenum-= offset;
        }

        res = 0;
   13aec:	81a06003 	movhi	r6, r3
   13af0:	91a06003 	movls	r6, r3

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
                file->bytenum = 0;
            else
                file->bytenum-= offset;
   13af4:	95847008 	strls	r7, [r4, #8]
   13af8:	eaffffc7 	b	13a1c <fl_fseek+0x98>
   13afc:	26758c34 	.word	0x26758c34

00013b00 <fl_fgetpos>:
}
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
   13b00:	e92d4070 	push	{r4, r5, r6, lr}
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
   13b04:	e2505000 	subs	r5, r0, #0
}
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
   13b08:	e1a06001 	mov	r6, r1
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
   13b0c:	0a00000d 	beq	13b48 <fl_fgetpos+0x48>
        return -1;

    FL_LOCK(&_fs);
   13b10:	e3064150 	movw	r4, #24912	; 0x6150
   13b14:	e3424673 	movt	r4, #9843	; 0x2673
   13b18:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   13b1c:	e3530000 	cmp	r3, #0
   13b20:	0a000000 	beq	13b28 <fl_fgetpos+0x28>
   13b24:	e12fff33 	blx	r3

    // Get position
    *position = file->bytenum;

    FL_UNLOCK(&_fs);
   13b28:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
        return -1;

    FL_LOCK(&_fs);

    // Get position
    *position = file->bytenum;
   13b2c:	e5952008 	ldr	r2, [r5, #8]

    FL_UNLOCK(&_fs);
   13b30:	e3530000 	cmp	r3, #0
        return -1;

    FL_LOCK(&_fs);

    // Get position
    *position = file->bytenum;
   13b34:	e5862000 	str	r2, [r6]

    FL_UNLOCK(&_fs);
   13b38:	0a000000 	beq	13b40 <fl_fgetpos+0x40>
   13b3c:	e12fff33 	blx	r3

    return 0;
   13b40:	e3a00000 	mov	r0, #0
   13b44:	e8bd8070 	pop	{r4, r5, r6, pc}
int fl_fgetpos(void *f , uint32 * position)
{
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
        return -1;
   13b48:	e3e00000 	mvn	r0, #0
   13b4c:	e8bd8070 	pop	{r4, r5, r6, pc}

00013b50 <fl_ftell>:
}
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
   13b50:	e92d4038 	push	{r3, r4, r5, lr}
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
   13b54:	e2505000 	subs	r5, r0, #0
   13b58:	0a00000c 	beq	13b90 <fl_ftell+0x40>
        return -1;

    FL_LOCK(&_fs);
   13b5c:	e3064150 	movw	r4, #24912	; 0x6150
   13b60:	e3424673 	movt	r4, #9843	; 0x2673
   13b64:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   13b68:	e3530000 	cmp	r3, #0
   13b6c:	0a000000 	beq	13b74 <fl_ftell+0x24>
   13b70:	e12fff33 	blx	r3

    // Get position
    *position = file->bytenum;

    FL_UNLOCK(&_fs);
   13b74:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
        return -1;

    FL_LOCK(&_fs);

    // Get position
    *position = file->bytenum;
   13b78:	e5955008 	ldr	r5, [r5, #8]

    FL_UNLOCK(&_fs);
   13b7c:	e3530000 	cmp	r3, #0
   13b80:	0a000002 	beq	13b90 <fl_ftell+0x40>
   13b84:	e12fff33 	blx	r3
   13b88:	e1a00005 	mov	r0, r5
   13b8c:	e8bd8038 	pop	{r3, r4, r5, pc}
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
   13b90:	e1a00005 	mov	r0, r5
    uint32 pos = 0;

    fl_fgetpos(f, &pos);

    return (long)pos;
}
   13b94:	e8bd8038 	pop	{r3, r4, r5, pc}

00013b98 <fl_feof>:
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
   13b98:	e92d4038 	push	{r3, r4, r5, lr}
    FL_FILE *file = (FL_FILE *)f;
    int res;

    if (!file)
   13b9c:	e2505000 	subs	r5, r0, #0
   13ba0:	0a000010 	beq	13be8 <fl_feof+0x50>
        return -1;

    FL_LOCK(&_fs);
   13ba4:	e3064150 	movw	r4, #24912	; 0x6150
   13ba8:	e3424673 	movt	r4, #9843	; 0x2673
   13bac:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   13bb0:	e3530000 	cmp	r3, #0
   13bb4:	0a000000 	beq	13bbc <fl_feof+0x24>
   13bb8:	e12fff33 	blx	r3

    if (file->bytenum == file->filelength)
   13bbc:	e5951008 	ldr	r1, [r5, #8]
   13bc0:	e595200c 	ldr	r2, [r5, #12]
        res = EOF;
    else
        res = 0;

    FL_UNLOCK(&_fs);
   13bc4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
        return -1;

    FL_LOCK(&_fs);

    if (file->bytenum == file->filelength)
        res = EOF;
   13bc8:	e1510002 	cmp	r1, r2
   13bcc:	13a04000 	movne	r4, #0
   13bd0:	03e04000 	mvneq	r4, #0
    else
        res = 0;

    FL_UNLOCK(&_fs);
   13bd4:	e3530000 	cmp	r3, #0
   13bd8:	0a000000 	beq	13be0 <fl_feof+0x48>
   13bdc:	e12fff33 	blx	r3

    return res;
}
   13be0:	e1a00004 	mov	r0, r4
   13be4:	e8bd8038 	pop	{r3, r4, r5, pc}
{
    FL_FILE *file = (FL_FILE *)f;
    int res;

    if (!file)
        return -1;
   13be8:	e3e04000 	mvn	r4, #0
   13bec:	eafffffb 	b	13be0 <fl_feof+0x48>

00013bf0 <fl_fwrite>:
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   13bf0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    uint8 *buffer = (uint8 *)data;
    uint32 bytesWritten = 0;
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   13bf4:	e308b0c8 	movw	r11, #32968	; 0x80c8
   13bf8:	e342b675 	movt	r11, #9845	; 0x2675
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   13bfc:	e1a09000 	mov	r9, r0
   13c00:	e24dd00c 	sub	sp, sp, #12
   13c04:	e1a05001 	mov	r5, r1
    uint8 *buffer = (uint8 *)data;
    uint32 bytesWritten = 0;
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   13c08:	e59b0b74 	ldr	r0, [r11, #2932]	; 0xb74
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   13c0c:	e1a0a002 	mov	r10, r2
   13c10:	e1a04003 	mov	r4, r3
    uint8 *buffer = (uint8 *)data;
    uint32 bytesWritten = 0;
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   13c14:	e3500000 	cmp	r0, #0
   13c18:	0a0000bb 	beq	13f0c <fl_fwrite+0x31c>

    if (!file)
   13c1c:	e3540000 	cmp	r4, #0
   13c20:	0a000071 	beq	13dec <fl_fwrite+0x1fc>
        return -1;

    FL_LOCK(&_fs);
   13c24:	e3061150 	movw	r1, #24912	; 0x6150
   13c28:	e3421673 	movt	r1, #9843	; 0x2673
   13c2c:	e5913038 	ldr	r3, [r1, #56]	; 0x38
   13c30:	e58d1004 	str	r1, [sp, #4]
   13c34:	e3530000 	cmp	r3, #0
   13c38:	0a000000 	beq	13c40 <fl_fwrite+0x50>
   13c3c:	e12fff33 	blx	r3

    // No write permissions
    if (!(file->flags & FILE_WRITE))
   13c40:	e5d434b8 	ldrb	r3, [r4, #1208]	; 0x4b8
   13c44:	e2030002 	and	r0, r3, #2
   13c48:	e6ef0070 	uxtb	r0, r0
   13c4c:	e3500000 	cmp	r0, #0
   13c50:	0a000060 	beq	13dd8 <fl_fwrite+0x1e8>
        FL_UNLOCK(&_fs);
        return -1;
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
   13c54:	e2033004 	and	r3, r3, #4
int fl_fwrite(const void * data, int size, int count, void *f )
{
    FL_FILE *file = (FL_FILE *)f;
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
   13c58:	e00a059a 	mul	r10, r10, r5
        FL_UNLOCK(&_fs);
        return -1;
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
   13c5c:	e6ef3073 	uxtb	r3, r3
   13c60:	e3530000 	cmp	r3, #0
        file->bytenum = file->filelength;
   13c64:	1594000c 	ldrne	r0, [r4, #12]
   13c68:	05940008 	ldreq	r0, [r4, #8]
   13c6c:	15840008 	strne	r0, [r4, #8]
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   13c70:	e35a0000 	cmp	r10, #0

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   13c74:	e1a08b80 	lsl	r8, r0, #23
    if (file->flags & FILE_APPEND)
        file->bytenum = file->filelength;
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   13c78:	e1a064a0 	lsr	r6, r0, #9

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   13c7c:	e1a08ba8 	lsr	r8, r8, #23

    while (bytesWritten < length)
   13c80:	0a000049 	beq	13dac <fl_fwrite+0x1bc>
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   13c84:	e3580000 	cmp	r8, #0
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   13c88:	e3a05000 	mov	r5, #0
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   13c8c:	1a00005a 	bne	13dfc <fl_fwrite+0x20c>
   13c90:	ea00001a 	b	13d00 <fl_fwrite+0x110>
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
   13c94:	e59434b0 	ldr	r3, [r4, #1200]	; 0x4b0
   13c98:	e3730001 	cmn	r3, #1
   13c9c:	0a000006 	beq	13cbc <fl_fwrite+0xcc>
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   13ca0:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4
   13ca4:	e3530000 	cmp	r3, #0
   13ca8:	1a00006c 	bne	13e60 <fl_fwrite+0x270>
                    fl_fflush(file);

                file->file_data_address = 0xFFFFFFFF;
   13cac:	e3e03000 	mvn	r3, #0
   13cb0:	e58434b0 	str	r3, [r4, #1200]	; 0x4b0
                file->file_data_dirty = 0;
   13cb4:	e3a03000 	mov	r3, #0
   13cb8:	e58434b4 	str	r3, [r4, #1204]	; 0x4b4
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
   13cbc:	e0892005 	add	r2, r9, r5
   13cc0:	e1a01006 	mov	r1, r6
   13cc4:	e1a034a7 	lsr	r3, r7, #9
   13cc8:	e1a00004 	mov	r0, r4
   13ccc:	ebfff726 	bl	1196c <_write_sectors>

            // Increase total read count
            bytesWritten += copyCount;

            // Increment file pointer
            file->bytenum += copyCount;
   13cd0:	e5943008 	ldr	r3, [r4, #8]
                file->file_data_dirty = 0;
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
   13cd4:	e1a02480 	lsl	r2, r0, #9

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
            offset = 0;

            if (!sectorsWrote)
   13cd8:	e3500000 	cmp	r0, #0

            // Increment file pointer
            file->bytenum += copyCount;

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
   13cdc:	e0866000 	add	r6, r6, r0
            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;

            // Increase total read count
            bytesWritten += copyCount;
   13ce0:	e0855002 	add	r5, r5, r2

            // Increment file pointer
            file->bytenum += copyCount;
   13ce4:	e0820003 	add	r0, r2, r3
   13ce8:	e1a03000 	mov	r3, r0
   13cec:	e5840008 	str	r0, [r4, #8]

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
            offset = 0;

            if (!sectorsWrote)
   13cf0:	0a00002d 	beq	13dac <fl_fwrite+0x1bc>
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   13cf4:	e15a0005 	cmp	r10, r5
   13cf8:	e3a08000 	mov	r8, #0
   13cfc:	9a000029 	bls	13da8 <fl_fwrite+0x1b8>
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   13d00:	e065700a 	rsb	r7, r5, r10
   13d04:	e3570c02 	cmp	r7, #512	; 0x200
   13d08:	2affffe1 	bcs	13c94 <fl_fwrite+0xa4>
            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
                copyCount = (length - bytesWritten);

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
   13d0c:	e59434b0 	ldr	r3, [r4, #1200]	; 0x4b0
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   13d10:	e2682c02 	rsb	r2, r8, #512	; 0x200
   13d14:	e1570002 	cmp	r7, r2
   13d18:	21a07002 	movcs	r7, r2
            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
                copyCount = (length - bytesWritten);

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
   13d1c:	e1530006 	cmp	r3, r6
   13d20:	0a000011 	beq	13d6c <fl_fwrite+0x17c>
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   13d24:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4
   13d28:	e3530000 	cmp	r3, #0
   13d2c:	1a000034 	bne	13e04 <fl_fwrite+0x214>
                    fl_fflush(file);

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
   13d30:	e3570c02 	cmp	r7, #512	; 0x200
   13d34:	0a000009 	beq	13d60 <fl_fwrite+0x170>
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
   13d38:	e284ce2b 	add	r12, r4, #688	; 0x2b0
   13d3c:	e1a01006 	mov	r1, r6
   13d40:	e1a0200c 	mov	r2, r12
   13d44:	e1a00004 	mov	r0, r4
   13d48:	e3a03001 	mov	r3, #1
   13d4c:	e58dc000 	str	r12, [sp]
   13d50:	ebfff766 	bl	11af0 <_read_sectors>
   13d54:	e2501000 	subs	r1, r0, #0
   13d58:	e59dc000 	ldr	r12, [sp]
   13d5c:	0a00003b 	beq	13e50 <fl_fwrite+0x260>
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
                }

                file->file_data_address = sector;
                file->file_data_dirty = 0;
   13d60:	e3a03000 	mov	r3, #0
                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
                }

                file->file_data_address = sector;
   13d64:	e58464b0 	str	r6, [r4, #1200]	; 0x4b0
                file->file_data_dirty = 0;
   13d68:	e58434b4 	str	r3, [r4, #1204]	; 0x4b4
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
   13d6c:	e2880e2b 	add	r0, r8, #688	; 0x2b0
   13d70:	e0891005 	add	r1, r9, r5
   13d74:	e1a02007 	mov	r2, r7
   13d78:	e0840000 	add	r0, r4, r0
   13d7c:	eb0015e9 	bl	19528 <memcpy>

            // Increase total read count
            bytesWritten += copyCount;

            // Increment file pointer
            file->bytenum += copyCount;
   13d80:	e5943008 	ldr	r3, [r4, #8]

            // Mark buffer as dirty
            file->file_data_dirty = 1;

            // Increase total read count
            bytesWritten += copyCount;
   13d84:	e0855007 	add	r5, r5, r7
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   13d88:	e15a0005 	cmp	r10, r5

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);

            // Mark buffer as dirty
            file->file_data_dirty = 1;
   13d8c:	e3a02001 	mov	r2, #1

            // Increment file pointer
            file->bytenum += copyCount;

            // Move onto next sector and reset copy offset
            sector++;
   13d90:	e2866001 	add	r6, r6, #1

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);

            // Mark buffer as dirty
            file->file_data_dirty = 1;
   13d94:	e58424b4 	str	r2, [r4, #1204]	; 0x4b4

            // Increase total read count
            bytesWritten += copyCount;

            // Increment file pointer
            file->bytenum += copyCount;
   13d98:	e0833007 	add	r3, r3, r7
   13d9c:	e3a08000 	mov	r8, #0
   13da0:	e5843008 	str	r3, [r4, #8]
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   13da4:	8affffd5 	bhi	13d00 <fl_fwrite+0x110>
   13da8:	e1a00003 	mov	r0, r3
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
   13dac:	e594300c 	ldr	r3, [r4, #12]
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
#endif

    FL_UNLOCK(&_fs);
   13db0:	e59d1004 	ldr	r1, [sp, #4]
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
   13db4:	e1530000 	cmp	r3, r0
        // Increase file size to new point
        file->filelength = file->bytenum;

        // We are changing the file length and this
        // will need to be writen back at some point
        file->filelength_changed = 1;
   13db8:	33a03001 	movcc	r3, #1

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
   13dbc:	3584000c 	strcc	r0, [r4, #12]

        // We are changing the file length and this
        // will need to be writen back at some point
        file->filelength_changed = 1;
   13dc0:	35843010 	strcc	r3, [r4, #16]
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
#endif

    FL_UNLOCK(&_fs);
   13dc4:	e591303c 	ldr	r3, [r1, #60]	; 0x3c
   13dc8:	e3530000 	cmp	r3, #0
   13dcc:	0a000007 	beq	13df0 <fl_fwrite+0x200>
   13dd0:	e12fff33 	blx	r3
   13dd4:	ea000005 	b	13df0 <fl_fwrite+0x200>
    FL_LOCK(&_fs);

    // No write permissions
    if (!(file->flags & FILE_WRITE))
    {
        FL_UNLOCK(&_fs);
   13dd8:	e59d2004 	ldr	r2, [sp, #4]
   13ddc:	e592303c 	ldr	r3, [r2, #60]	; 0x3c
   13de0:	e3530000 	cmp	r3, #0
   13de4:	0a000000 	beq	13dec <fl_fwrite+0x1fc>
   13de8:	e12fff33 	blx	r3
        return -1;
   13dec:	e3e0a000 	mvn	r10, #0
#endif

    FL_UNLOCK(&_fs);

    return (size*count);
}
   13df0:	e1a0000a 	mov	r0, r10
   13df4:	e28dd00c 	add	sp, sp, #12
   13df8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
   13dfc:	e1a0700a 	mov	r7, r10
   13e00:	eaffffc1 	b	13d0c <fl_fwrite+0x11c>
{
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
   13e04:	e59b1b74 	ldr	r1, [r11, #2932]	; 0xb74
   13e08:	e30820c8 	movw	r2, #32968	; 0x80c8
   13e0c:	e3422675 	movt	r2, #9845	; 0x2675
   13e10:	e3510000 	cmp	r1, #0
   13e14:	0a000024 	beq	13eac <fl_fwrite+0x2bc>

    if (file)
    {
        FL_LOCK(&_fs);
   13e18:	e59d1004 	ldr	r1, [sp, #4]
   13e1c:	e5912038 	ldr	r2, [r1, #56]	; 0x38
   13e20:	e3520000 	cmp	r2, #0
   13e24:	0a000001 	beq	13e30 <fl_fwrite+0x240>
   13e28:	e12fff32 	blx	r2
   13e2c:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4

        // If some write data still in buffer
        if (file->file_data_dirty)
   13e30:	e3530000 	cmp	r3, #0
   13e34:	1a00002b 	bne	13ee8 <fl_fwrite+0x2f8>
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
                file->file_data_dirty = 0;
        }

        FL_UNLOCK(&_fs);
   13e38:	e59d2004 	ldr	r2, [sp, #4]
   13e3c:	e592303c 	ldr	r3, [r2, #60]	; 0x3c
   13e40:	e3530000 	cmp	r3, #0
   13e44:	0affffb9 	beq	13d30 <fl_fwrite+0x140>
   13e48:	e12fff33 	blx	r3
   13e4c:	eaffffb7 	b	13d30 <fl_fwrite+0x140>
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   13e50:	e1a0000c 	mov	r0, r12
   13e54:	e3a02c02 	mov	r2, #512	; 0x200
   13e58:	eb001635 	bl	19734 <memset>
   13e5c:	eaffffbf 	b	13d60 <fl_fwrite+0x170>
{
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
   13e60:	e59b1b74 	ldr	r1, [r11, #2932]	; 0xb74
   13e64:	e30820c8 	movw	r2, #32968	; 0x80c8
   13e68:	e3422675 	movt	r2, #9845	; 0x2675
   13e6c:	e3510000 	cmp	r1, #0
   13e70:	0a000039 	beq	13f5c <fl_fwrite+0x36c>

    if (file)
    {
        FL_LOCK(&_fs);
   13e74:	e59d1004 	ldr	r1, [sp, #4]
   13e78:	e5912038 	ldr	r2, [r1, #56]	; 0x38
   13e7c:	e3520000 	cmp	r2, #0
   13e80:	0a000001 	beq	13e8c <fl_fwrite+0x29c>
   13e84:	e12fff32 	blx	r2
   13e88:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4

        // If some write data still in buffer
        if (file->file_data_dirty)
   13e8c:	e3530000 	cmp	r3, #0
   13e90:	1a000040 	bne	13f98 <fl_fwrite+0x3a8>
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
                file->file_data_dirty = 0;
        }

        FL_UNLOCK(&_fs);
   13e94:	e59d2004 	ldr	r2, [sp, #4]
   13e98:	e592303c 	ldr	r3, [r2, #60]	; 0x3c
   13e9c:	e3530000 	cmp	r3, #0
   13ea0:	0affff81 	beq	13cac <fl_fwrite+0xbc>
   13ea4:	e12fff33 	blx	r3
   13ea8:	eaffff7f 	b	13cac <fl_fwrite+0xbc>
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   13eac:	e282ce6a 	add	r12, r2, #1696	; 0x6a0
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   13eb0:	e2820eb6 	add	r0, r2, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   13eb4:	e28cc008 	add	r12, r12, #8
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   13eb8:	e280000c 	add	r0, r0, #12
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13ebc:	e58211e8 	str	r1, [r2, #488]	; 0x1e8
   13ec0:	e58211e4 	str	r1, [r2, #484]	; 0x1e4

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13ec4:	e58216a8 	str	r1, [r2, #1704]	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13ec8:	e5821b70 	str	r1, [r2, #2928]	; 0xb70

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   13ecc:	e3a01001 	mov	r1, #1
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   13ed0:	e582c1dc 	str	r12, [r2, #476]	; 0x1dc
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13ed4:	e582cb6c 	str	r12, [r2, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   13ed8:	e58201e0 	str	r0, [r2, #480]	; 0x1e0
    else
        node->next->previous = new_node;
    node->next = new_node;
   13edc:	e58206ac 	str	r0, [r2, #1708]	; 0x6ac
   13ee0:	e5821b74 	str	r1, [r2, #2932]	; 0xb74
   13ee4:	eaffffcb 	b	13e18 <fl_fwrite+0x228>

        // If some write data still in buffer
        if (file->file_data_dirty)
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   13ee8:	e3a03001 	mov	r3, #1
   13eec:	e1a00004 	mov	r0, r4
   13ef0:	e59414b0 	ldr	r1, [r4, #1200]	; 0x4b0
   13ef4:	e2842e2b 	add	r2, r4, #688	; 0x2b0
   13ef8:	ebfff69b 	bl	1196c <_write_sectors>
   13efc:	e3500000 	cmp	r0, #0
                file->file_data_dirty = 0;
   13f00:	13a03000 	movne	r3, #0
   13f04:	158434b4 	strne	r3, [r4, #1204]	; 0x4b4
   13f08:	eaffffca 	b	13e38 <fl_fwrite+0x248>
    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13f0c:	128b1eb6 	addne	r1, r11, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13f10:	e1a02000 	mov	r2, r0

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13f14:	e1a0300b 	mov	r3, r11
    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13f18:	1281100c 	addne	r1, r1, #12

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   13f1c:	e5a306a8 	str	r0, [r3, #1704]!	; 0x6a8
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13f20:	e58b01e8 	str	r0, [r11, #488]	; 0x1e8
   13f24:	e58b01e4 	str	r0, [r11, #484]	; 0x1e4
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13f28:	e58b3b6c 	str	r3, [r11, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13f2c:	15821000 	strne	r1, [r2]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   13f30:	e3a02001 	mov	r2, #1
   13f34:	e58b2b74 	str	r2, [r11, #2932]	; 0xb74
    node->next = new_node;
   13f38:	e59f207c 	ldr	r2, [pc, #124]	; 13fbc <fl_fwrite+0x3cc>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   13f3c:	e58b0b70 	str	r0, [r11, #2928]	; 0xb70
    if (!node->next)
   13f40:	028b0eb6 	addeq	r0, r11, #2912	; 0xb60
        list->tail = new_node;
    else
        node->next->previous = new_node;
   13f44:	11a00003 	movne	r0, r3
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   13f48:	0280000c 	addeq	r0, r0, #12
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   13f4c:	e5832004 	str	r2, [r3, #4]
   13f50:	e58b31dc 	str	r3, [r11, #476]	; 0x1dc
   13f54:	e58b01e0 	str	r0, [r11, #480]	; 0x1e0
   13f58:	eaffff2f 	b	13c1c <fl_fwrite+0x2c>
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   13f5c:	e2821eb6 	add	r1, r2, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   13f60:	e2820e6a 	add	r0, r2, #1696	; 0x6a0
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   13f64:	e281100c 	add	r1, r1, #12
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   13f68:	e2800008 	add	r0, r0, #8
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   13f6c:	e58211e0 	str	r1, [r2, #480]	; 0x1e0
    else
        node->next->previous = new_node;
    node->next = new_node;
   13f70:	e58216ac 	str	r1, [r2, #1708]	; 0x6ac
   13f74:	e3a01001 	mov	r1, #1
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   13f78:	e58281e8 	str	r8, [r2, #488]	; 0x1e8
   13f7c:	e58281e4 	str	r8, [r2, #484]	; 0x1e4
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   13f80:	e58201dc 	str	r0, [r2, #476]	; 0x1dc
        list->tail = node;
        node->previous = 0;
   13f84:	e58286a8 	str	r8, [r2, #1704]	; 0x6a8
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   13f88:	e5820b6c 	str	r0, [r2, #2924]	; 0xb6c
    new_node->next = node->next;
   13f8c:	e5828b70 	str	r8, [r2, #2928]	; 0xb70
   13f90:	e5821b74 	str	r1, [r2, #2932]	; 0xb74
   13f94:	eaffffb6 	b	13e74 <fl_fwrite+0x284>

        // If some write data still in buffer
        if (file->file_data_dirty)
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   13f98:	e3a03001 	mov	r3, #1
   13f9c:	e1a00004 	mov	r0, r4
   13fa0:	e59414b0 	ldr	r1, [r4, #1200]	; 0x4b0
   13fa4:	e2842e2b 	add	r2, r4, #688	; 0x2b0
   13fa8:	ebfff66f 	bl	1196c <_write_sectors>
   13fac:	e3500000 	cmp	r0, #0
                file->file_data_dirty = 0;
   13fb0:	13a03000 	movne	r3, #0
   13fb4:	158434b4 	strne	r3, [r4, #1204]	; 0x4b4
   13fb8:	eaffffb5 	b	13e94 <fl_fwrite+0x2a4>
   13fbc:	26758c34 	.word	0x26758c34

00013fc0 <fl_fputc>:
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
   13fc0:	e92d4010 	push	{r4, lr}
   13fc4:	e24dd008 	sub	sp, sp, #8
   13fc8:	e1a04000 	mov	r4, r0
   13fcc:	e1a03001 	mov	r3, r1
    uint8 data = (uint8)c;
   13fd0:	e28d0008 	add	r0, sp, #8
    int res;

    res = fl_fwrite(&data, 1, 1, f);
   13fd4:	e3a01001 	mov	r1, #1
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
    uint8 data = (uint8)c;
   13fd8:	e5604008 	strb	r4, [r0, #-8]!
    int res;

    res = fl_fwrite(&data, 1, 1, f);
   13fdc:	e1a02001 	mov	r2, r1
   13fe0:	e1a0000d 	mov	r0, sp
   13fe4:	ebffff01 	bl	13bf0 <fl_fwrite>
    if (res == 1)
        return c;
    else
        return res;
}
   13fe8:	e3500001 	cmp	r0, #1
   13fec:	01a00004 	moveq	r0, r4
   13ff0:	e28dd008 	add	sp, sp, #8
   13ff4:	e8bd8010 	pop	{r4, pc}

00013ff8 <fl_fputs>:
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
   13ff8:	e92d4070 	push	{r4, r5, r6, lr}
   13ffc:	e1a04001 	mov	r4, r1
   14000:	e1a05000 	mov	r5, r0
    int len = (int)strlen(str);
   14004:	eb001617 	bl	19868 <strlen>
    int res = fl_fwrite(str, 1, len, f);
   14008:	e3a01001 	mov	r1, #1
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
    int len = (int)strlen(str);
   1400c:	e1a02000 	mov	r2, r0
    int res = fl_fwrite(str, 1, len, f);
   14010:	e1a03004 	mov	r3, r4
   14014:	e1a00005 	mov	r0, r5

    if (res == len)
        return len;
    else
        return res;
}
   14018:	e8bd4070 	pop	{r4, r5, r6, lr}
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
    int len = (int)strlen(str);
    int res = fl_fwrite(str, 1, len, f);
   1401c:	eafffef3 	b	13bf0 <fl_fwrite>

00014020 <fl_remove>:
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
   14020:	e92d4070 	push	{r4, r5, r6, lr}
    FL_FILE* file;
    int res = -1;

    FL_LOCK(&_fs);
   14024:	e3064150 	movw	r4, #24912	; 0x6150
   14028:	e3424673 	movt	r4, #9843	; 0x2673
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
   1402c:	e1a05000 	mov	r5, r0
    FL_FILE* file;
    int res = -1;

    FL_LOCK(&_fs);
   14030:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   14034:	e3530000 	cmp	r3, #0
   14038:	0a000000 	beq	14040 <fl_remove+0x20>
   1403c:	e12fff33 	blx	r3

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
   14040:	e302178c 	movw	r1, #10124	; 0x278c
   14044:	e1a00005 	mov	r0, r5
   14048:	e3401002 	movt	r1, #2
   1404c:	ebfffbe3 	bl	12fe0 <fl_fopen>
    if (file)
   14050:	e2505000 	subs	r5, r0, #0
   14054:	0a000015 	beq	140b0 <fl_remove+0x90>
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
   14058:	e3060150 	movw	r0, #24912	; 0x6150
   1405c:	e5951004 	ldr	r1, [r5, #4]
   14060:	e3420673 	movt	r0, #9843	; 0x2673
   14064:	eb000c2f 	bl	17128 <fatfs_free_cluster_chain>
   14068:	e3500000 	cmp	r0, #0
   1406c:	0a00000f 	beq	140b0 <fl_remove+0x90>
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
   14070:	e1a02005 	mov	r2, r5
   14074:	e3060150 	movw	r0, #24912	; 0x6150
   14078:	e492121c 	ldr	r1, [r2], #540	; 0x21c
   1407c:	e3420673 	movt	r0, #9843	; 0x2673
   14080:	ebfff3c6 	bl	10fa0 <fatfs_mark_file_deleted>
   14084:	e3500000 	cmp	r0, #0
   14088:	0a000008 	beq	140b0 <fl_remove+0x90>
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
   1408c:	e1a00005 	mov	r0, r5

                res = 0;
   14090:	e3a06000 	mov	r6, #0
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
   14094:	ebfffccb 	bl	133c8 <fl_fclose>
                res = 0;
            }
        }
    }

    FL_UNLOCK(&_fs);
   14098:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1409c:	e3530000 	cmp	r3, #0
   140a0:	0a000000 	beq	140a8 <fl_remove+0x88>
   140a4:	e12fff33 	blx	r3

    return res;
}
   140a8:	e1a00006 	mov	r0, r6
   140ac:	e8bd8070 	pop	{r4, r5, r6, pc}
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
    FL_FILE* file;
    int res = -1;
   140b0:	e3e06000 	mvn	r6, #0
   140b4:	eafffff7 	b	14098 <fl_remove+0x78>

000140b8 <fl_createdirectory>:
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
   140b8:	e92d4038 	push	{r3, r4, r5, lr}
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   140bc:	e30830c8 	movw	r3, #32968	; 0x80c8
   140c0:	e3423675 	movt	r3, #9845	; 0x2675
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
   140c4:	e1a05000 	mov	r5, r0
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   140c8:	e5932b74 	ldr	r2, [r3, #2932]	; 0xb74
   140cc:	e3520000 	cmp	r2, #0
   140d0:	0a00000e 	beq	14110 <fl_createdirectory+0x58>

    FL_LOCK(&_fs);
   140d4:	e3064150 	movw	r4, #24912	; 0x6150
   140d8:	e3424673 	movt	r4, #9843	; 0x2673
   140dc:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   140e0:	e3530000 	cmp	r3, #0
   140e4:	0a000000 	beq	140ec <fl_createdirectory+0x34>
   140e8:	e12fff33 	blx	r3
    res =_create_directory((char*)path);
   140ec:	e1a00005 	mov	r0, r5
   140f0:	ebfff984 	bl	12708 <_create_directory>
    FL_UNLOCK(&_fs);
   140f4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c

    // If first call to library, initialise
    CHECK_FL_INIT();

    FL_LOCK(&_fs);
    res =_create_directory((char*)path);
   140f8:	e1a05000 	mov	r5, r0
    FL_UNLOCK(&_fs);
   140fc:	e3530000 	cmp	r3, #0
   14100:	0a000000 	beq	14108 <fl_createdirectory+0x50>
   14104:	e12fff33 	blx	r3

    return res;
}
   14108:	e1a00005 	mov	r0, r5
   1410c:	e8bd8038 	pop	{r3, r4, r5, pc}

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   14110:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   14114:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   14118:	e5a126a8 	str	r2, [r1, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   1411c:	e1a00002 	mov	r0, r2
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   14120:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   14124:	0283ceb6 	addeq	r12, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   14128:	e5832b70 	str	r2, [r3, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   1412c:	12832eb6 	addne	r2, r3, #2912	; 0xb60
   14130:	1282200c 	addne	r2, r2, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   14134:	e5831b6c 	str	r1, [r3, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   14138:	15802000 	strne	r2, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   1413c:	e3a02001 	mov	r2, #1
   14140:	e5832b74 	str	r2, [r3, #2932]	; 0xb74
   14144:	11a0c001 	movne	r12, r1
    node->next = new_node;
   14148:	e59f2010 	ldr	r2, [pc, #16]	; 14160 <fl_createdirectory+0xa8>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   1414c:	028cc00c 	addeq	r12, r12, #12
   14150:	e58311dc 	str	r1, [r3, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   14154:	e5812004 	str	r2, [r1, #4]
   14158:	e583c1e0 	str	r12, [r3, #480]	; 0x1e0
   1415c:	eaffffdc 	b	140d4 <fl_createdirectory+0x1c>
   14160:	26758c34 	.word	0x26758c34

00014164 <fl_listdirectory>:
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
   14164:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14168:	e30880c8 	movw	r8, #32968	; 0x80c8
   1416c:	e3428675 	movt	r8, #9845	; 0x2675
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
   14170:	e24ddf53 	sub	sp, sp, #332	; 0x14c
   14174:	e1a0a000 	mov	r10, r0
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14178:	e5983b74 	ldr	r3, [r8, #2932]	; 0xb74
   1417c:	e3530000 	cmp	r3, #0
   14180:	0a000083 	beq	14394 <fl_listdirectory+0x230>

    FL_LOCK(&_fs);
   14184:	e3066150 	movw	r6, #24912	; 0x6150
   14188:	e3426673 	movt	r6, #9843	; 0x2673
   1418c:	e5963038 	ldr	r3, [r6, #56]	; 0x38
   14190:	e3530000 	cmp	r3, #0
   14194:	0a000000 	beq	1419c <fl_listdirectory+0x38>
   14198:	e12fff33 	blx	r3

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
   1419c:	e3020790 	movw	r0, #10128	; 0x2790
   141a0:	e1a0100a 	mov	r1, r10
   141a4:	e3400002 	movt	r0, #2
   141a8:	ebffb0a9 	bl	454 <print_debug>
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;

    // If first call to library, initialise
    CHECK_FL_INIT();
   141ac:	e5982b74 	ldr	r2, [r8, #2932]	; 0xb74
   141b0:	e30830c8 	movw	r3, #32968	; 0x80c8
   141b4:	e3423675 	movt	r3, #9845	; 0x2675
   141b8:	e3520000 	cmp	r2, #0
   141bc:	0a000090 	beq	14404 <fl_listdirectory+0x2a0>

    FL_LOCK(&_fs);
   141c0:	e5963038 	ldr	r3, [r6, #56]	; 0x38
   141c4:	e3530000 	cmp	r3, #0
   141c8:	0a000000 	beq	141d0 <fl_listdirectory+0x6c>
   141cc:	e12fff33 	blx	r3

    levels = fatfs_total_path_levels((char*)path) + 1;
   141d0:	e1a0000a 	mov	r0, r10
   141d4:	eb00074d 	bl	15f10 <fatfs_total_path_levels>

    // If path is in the root dir
    if (levels == 0)
   141d8:	e3700001 	cmn	r0, #1
        cluster = fatfs_get_root_cluster(&_fs);
   141dc:	e3060150 	movw	r0, #24912	; 0x6150
   141e0:	e3420673 	movt	r0, #9843	; 0x2673
    FL_LOCK(&_fs);

    levels = fatfs_total_path_levels((char*)path) + 1;

    // If path is in the root dir
    if (levels == 0)
   141e4:	0a00007e 	beq	143e4 <fl_listdirectory+0x280>
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   141e8:	ebffefe6 	bl	10188 <fatfs_get_root_cluster>
   141ec:	e1a07000 	mov	r7, r0

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   141f0:	e1a0000a 	mov	r0, r10
   141f4:	eb000745 	bl	15f10 <fatfs_total_path_levels>

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   141f8:	e3500000 	cmp	r0, #0
   141fc:	e58d0004 	str	r0, [sp, #4]
   14200:	ba000079 	blt	143ec <fl_listdirectory+0x288>
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   14204:	e30fbee4 	movw	r11, #65252	; 0xfee4
   14208:	e30f9eea 	movw	r9, #65258	; 0xfeea

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1420c:	e3a05000 	mov	r5, #0
   14210:	e28d4038 	add	r4, sp, #56	; 0x38
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   14214:	e34fbfff 	movt	r11, #65535	; 0xffff
   14218:	e34f9fff 	movt	r9, #65535	; 0xffff
   1421c:	ea00000d 	b	14258 <fl_listdirectory+0xf4>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   14220:	ebffefda 	bl	10190 <fatfs_get_file_entry>
   14224:	e3500000 	cmp	r0, #0
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   14228:	e28d0018 	add	r0, sp, #24
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1422c:	0a000016 	beq	1428c <fl_listdirectory+0x128>
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   14230:	eb0004cc 	bl	15568 <fatfs_entry_is_dir>
   14234:	e3500000 	cmp	r0, #0
   14238:	0a000013 	beq	1428c <fl_listdirectory+0x128>

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1423c:	e59d3004 	ldr	r3, [sp, #4]
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   14240:	e28d2f52 	add	r2, sp, #328	; 0x148
   14244:	e19270bb 	ldrh	r7, [r2, r11]

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   14248:	e1530005 	cmp	r3, r5
        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1424c:	e19230b9 	ldrh	r3, [r2, r9]
   14250:	e0837807 	add	r7, r3, r7, lsl #16

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   14254:	ba000064 	blt	143ec <fl_listdirectory+0x288>
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   14258:	e1a01005 	mov	r1, r5
   1425c:	e1a02004 	mov	r2, r4
   14260:	e3a03f41 	mov	r3, #260	; 0x104
   14264:	e1a0000a 	mov	r0, r10
   14268:	eb000750 	bl	15fb0 <fatfs_get_substring>
   1426c:	e3700001 	cmn	r0, #1
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   14270:	e3060150 	movw	r0, #24912	; 0x6150

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   14274:	e2855001 	add	r5, r5, #1
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   14278:	e1a01007 	mov	r1, r7
   1427c:	e1a02004 	mov	r2, r4
   14280:	e28d3018 	add	r3, sp, #24
   14284:	e3420673 	movt	r0, #9843	; 0x2673
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   14288:	1affffe4 	bne	14220 <fl_listdirectory+0xbc>
   1428c:	e3e07000 	mvn	r7, #0
        res = _open_directory((char*)path, &cluster);

    if (res)
        fatfs_list_directory_start(&_fs, dir, cluster);

    FL_UNLOCK(&_fs);
   14290:	e596303c 	ldr	r3, [r6, #60]	; 0x3c
   14294:	e3530000 	cmp	r3, #0
   14298:	0a000000 	beq	142a0 <fl_listdirectory+0x13c>
   1429c:	e12fff33 	blx	r3

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   142a0:	e3770001 	cmn	r7, #1
   142a4:	0a000034 	beq	1437c <fl_listdirectory+0x218>
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
    int res = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
   142a8:	e30850c8 	movw	r5, #32968	; 0x80c8
   142ac:	e28d4038 	add	r4, sp, #56	; 0x38
   142b0:	e3425675 	movt	r5, #9845	; 0x2675
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   142b4:	e285ae6a 	add	r10, r5, #1696	; 0x6a0
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   142b8:	e2857eb6 	add	r7, r5, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   142bc:	e28aa008 	add	r10, r10, #8
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   142c0:	e287700c 	add	r7, r7, #12
   142c4:	e5983b74 	ldr	r3, [r8, #2932]	; 0xb74
   142c8:	e3530000 	cmp	r3, #0
   142cc:	0a000019 	beq	14338 <fl_listdirectory+0x1d4>

    FL_LOCK(&_fs);
   142d0:	e5963038 	ldr	r3, [r6, #56]	; 0x38
   142d4:	e3530000 	cmp	r3, #0
   142d8:	0a000000 	beq	142e0 <fl_listdirectory+0x17c>
   142dc:	e12fff33 	blx	r3

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   142e0:	e3060150 	movw	r0, #24912	; 0x6150
   142e4:	e28d100c 	add	r1, sp, #12
   142e8:	e3420673 	movt	r0, #9843	; 0x2673
   142ec:	e1a02004 	mov	r2, r4
   142f0:	ebfff4b2 	bl	115c0 <fatfs_list_directory_next>

    FL_UNLOCK(&_fs);
   142f4:	e596303c 	ldr	r3, [r6, #60]	; 0x3c
    // If first call to library, initialise
    CHECK_FL_INIT();

    FL_LOCK(&_fs);

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   142f8:	e1a09000 	mov	r9, r0

    FL_UNLOCK(&_fs);
   142fc:	e3530000 	cmp	r3, #0
   14300:	0a000000 	beq	14308 <fl_listdirectory+0x1a4>
   14304:	e12fff33 	blx	r3

    return res ? 0 : -1;
   14308:	e3590000 	cmp	r9, #0
   1430c:	0a00001a 	beq	1437c <fl_listdirectory+0x218>
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", d,mn,y,h,m));
#endif

            if (dirent.is_dir)
   14310:	e5dd313c 	ldrb	r3, [sp, #316]	; 0x13c
   14314:	e3530000 	cmp	r3, #0
   14318:	0a000011 	beq	14364 <fl_listdirectory+0x200>
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
   1431c:	e30207a4 	movw	r0, #10148	; 0x27a4
   14320:	e1a01004 	mov	r1, r4
   14324:	e3400002 	movt	r0, #2
   14328:	ebffb049 	bl	454 <print_debug>
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
    int res = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1432c:	e5983b74 	ldr	r3, [r8, #2932]	; 0xb74
   14330:	e3530000 	cmp	r3, #0
   14334:	1affffe5 	bne	142d0 <fl_listdirectory+0x16c>
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   14338:	e58531e8 	str	r3, [r5, #488]	; 0x1e8
   1433c:	e58531e4 	str	r3, [r5, #484]	; 0x1e4

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   14340:	e58536a8 	str	r3, [r5, #1704]	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   14344:	e5853b70 	str	r3, [r5, #2928]	; 0xb70

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   14348:	e3a03001 	mov	r3, #1
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
   1434c:	e585a1dc 	str	r10, [r5, #476]	; 0x1dc
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   14350:	e585ab6c 	str	r10, [r5, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
   14354:	e58571e0 	str	r7, [r5, #480]	; 0x1e0
    else
        node->next->previous = new_node;
    node->next = new_node;
   14358:	e58576ac 	str	r7, [r5, #1708]	; 0x6ac
   1435c:	e5853b74 	str	r3, [r5, #2932]	; 0xb74
   14360:	eaffffda 	b	142d0 <fl_listdirectory+0x16c>
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
   14364:	e30207b0 	movw	r0, #10160	; 0x27b0
   14368:	e1a01004 	mov	r1, r4
   1436c:	e59d2144 	ldr	r2, [sp, #324]	; 0x144
   14370:	e3400002 	movt	r0, #2
   14374:	ebffb036 	bl	454 <print_debug>
   14378:	eaffffd1 	b	142c4 <fl_listdirectory+0x160>
        }

        fl_closedir(&dirstat);
    }

    FL_UNLOCK(&_fs);
   1437c:	e596303c 	ldr	r3, [r6, #60]	; 0x3c
   14380:	e3530000 	cmp	r3, #0
   14384:	0a000000 	beq	1438c <fl_listdirectory+0x228>
   14388:	e12fff33 	blx	r3
}
   1438c:	e28ddf53 	add	sp, sp, #332	; 0x14c
   14390:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   14394:	e1a02008 	mov	r2, r8
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   14398:	e58831e8 	str	r3, [r8, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   1439c:	e5a236a8 	str	r3, [r2, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   143a0:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   143a4:	e58831e4 	str	r3, [r8, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   143a8:	02880eb6 	addeq	r0, r8, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   143ac:	e5883b70 	str	r3, [r8, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   143b0:	12883eb6 	addne	r3, r8, #2912	; 0xb60
   143b4:	1283300c 	addne	r3, r3, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   143b8:	e5882b6c 	str	r2, [r8, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   143bc:	15813000 	strne	r3, [r1]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   143c0:	e3a03001 	mov	r3, #1
   143c4:	e5883b74 	str	r3, [r8, #2932]	; 0xb74
   143c8:	11a00002 	movne	r0, r2
    node->next = new_node;
   143cc:	e59f3080 	ldr	r3, [pc, #128]	; 14454 <fl_listdirectory+0x2f0>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   143d0:	0280000c 	addeq	r0, r0, #12
   143d4:	e58821dc 	str	r2, [r8, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   143d8:	e5823004 	str	r3, [r2, #4]
   143dc:	e58801e0 	str	r0, [r8, #480]	; 0x1e0
   143e0:	eaffff67 	b	14184 <fl_listdirectory+0x20>

    levels = fatfs_total_path_levels((char*)path) + 1;

    // If path is in the root dir
    if (levels == 0)
        cluster = fatfs_get_root_cluster(&_fs);
   143e4:	ebffef67 	bl	10188 <fatfs_get_root_cluster>
   143e8:	e1a07000 	mov	r7, r0
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);

    if (res)
        fatfs_list_directory_start(&_fs, dir, cluster);
   143ec:	e3060150 	movw	r0, #24912	; 0x6150
   143f0:	e28d100c 	add	r1, sp, #12
   143f4:	e3420673 	movt	r0, #9843	; 0x2673
   143f8:	e1a02007 	mov	r2, r7
   143fc:	ebfff46a 	bl	115ac <fatfs_list_directory_start>
   14400:	eaffffa2 	b	14290 <fl_listdirectory+0x12c>

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   14404:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   14408:	e58321e8 	str	r2, [r3, #488]	; 0x1e8
   1440c:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   14410:	12833eb6 	addne	r3, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   14414:	e1a00002 	mov	r0, r2
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   14418:	1283300c 	addne	r3, r3, #12

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   1441c:	e5a126a8 	str	r2, [r1, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   14420:	e5882b70 	str	r2, [r8, #2928]	; 0xb70
    if (!node->next)
   14424:	02832eb6 	addeq	r2, r3, #2912	; 0xb60
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   14428:	e5881b6c 	str	r1, [r8, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   1442c:	11a02001 	movne	r2, r1
   14430:	15803000 	strne	r3, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   14434:	e3a03001 	mov	r3, #1
   14438:	e5883b74 	str	r3, [r8, #2932]	; 0xb74
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   1443c:	0282200c 	addeq	r2, r2, #12
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   14440:	e59f300c 	ldr	r3, [pc, #12]	; 14454 <fl_listdirectory+0x2f0>
   14444:	e58811dc 	str	r1, [r8, #476]	; 0x1dc
   14448:	e5813004 	str	r3, [r1, #4]
   1444c:	e58821e0 	str	r2, [r8, #480]	; 0x1e0
   14450:	eaffff5a 	b	141c0 <fl_listdirectory+0x5c>
   14454:	26758c34 	.word	0x26758c34

00014458 <fl_opendir>:
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14458:	e30830c8 	movw	r3, #32968	; 0x80c8
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   1445c:	e92d4070 	push	{r4, r5, r6, lr}
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14460:	e3423675 	movt	r3, #9845	; 0x2675
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   14464:	e24dd008 	sub	sp, sp, #8
   14468:	e1a06001 	mov	r6, r1
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;
   1446c:	e3e01000 	mvn	r1, #0

    // If first call to library, initialise
    CHECK_FL_INIT();
   14470:	e5932b74 	ldr	r2, [r3, #2932]	; 0xb74
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   14474:	e1a05000 	mov	r5, r0
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;
   14478:	e58d1004 	str	r1, [sp, #4]

    // If first call to library, initialise
    CHECK_FL_INIT();
   1447c:	e3520000 	cmp	r2, #0
   14480:	0a000018 	beq	144e8 <fl_opendir+0x90>

    FL_LOCK(&_fs);
   14484:	e3064150 	movw	r4, #24912	; 0x6150
   14488:	e3424673 	movt	r4, #9843	; 0x2673
   1448c:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   14490:	e3530000 	cmp	r3, #0
   14494:	0a000000 	beq	1449c <fl_opendir+0x44>
   14498:	e12fff33 	blx	r3

    levels = fatfs_total_path_levels((char*)path) + 1;
   1449c:	e1a00005 	mov	r0, r5
   144a0:	eb00069a 	bl	15f10 <fatfs_total_path_levels>

    // If path is in the root dir
    if (levels == 0)
   144a4:	e3700001 	cmn	r0, #1
   144a8:	0a000022 	beq	14538 <fl_opendir+0xe0>
        cluster = fatfs_get_root_cluster(&_fs);
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
   144ac:	e1a00005 	mov	r0, r5
   144b0:	e28d1004 	add	r1, sp, #4
   144b4:	ebfff4fa 	bl	118a4 <_open_directory>

    if (res)
   144b8:	e3500000 	cmp	r0, #0
   144bc:	1a000027 	bne	14560 <fl_opendir+0x108>
        fatfs_list_directory_start(&_fs, dir, cluster);

    FL_UNLOCK(&_fs);
   144c0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   144c4:	e3530000 	cmp	r3, #0
   144c8:	0a000000 	beq	144d0 <fl_opendir+0x78>
   144cc:	e12fff33 	blx	r3

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   144d0:	e59d0004 	ldr	r0, [sp, #4]
}
   144d4:	e3700001 	cmn	r0, #1
   144d8:	11a00006 	movne	r0, r6
   144dc:	03a00000 	moveq	r0, #0
   144e0:	e28dd008 	add	sp, sp, #8
   144e4:	e8bd8070 	pop	{r4, r5, r6, pc}

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   144e8:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   144ec:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   144f0:	e5a126a8 	str	r2, [r1, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   144f4:	e1a00002 	mov	r0, r2
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   144f8:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   144fc:	0283ceb6 	addeq	r12, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   14500:	e5832b70 	str	r2, [r3, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   14504:	12832eb6 	addne	r2, r3, #2912	; 0xb60
   14508:	1282200c 	addne	r2, r2, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1450c:	e5831b6c 	str	r1, [r3, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   14510:	15802000 	strne	r2, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   14514:	e3a02001 	mov	r2, #1
   14518:	e5832b74 	str	r2, [r3, #2932]	; 0xb74
   1451c:	11a0c001 	movne	r12, r1
    node->next = new_node;
   14520:	e59f2040 	ldr	r2, [pc, #64]	; 14568 <fl_opendir+0x110>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   14524:	028cc00c 	addeq	r12, r12, #12
   14528:	e58311dc 	str	r1, [r3, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   1452c:	e5812004 	str	r2, [r1, #4]
   14530:	e583c1e0 	str	r12, [r3, #480]	; 0x1e0
   14534:	eaffffd2 	b	14484 <fl_opendir+0x2c>

    levels = fatfs_total_path_levels((char*)path) + 1;

    // If path is in the root dir
    if (levels == 0)
        cluster = fatfs_get_root_cluster(&_fs);
   14538:	e3060150 	movw	r0, #24912	; 0x6150
   1453c:	e3420673 	movt	r0, #9843	; 0x2673
   14540:	ebffef10 	bl	10188 <fatfs_get_root_cluster>
   14544:	e1a02000 	mov	r2, r0
   14548:	e58d0004 	str	r0, [sp, #4]
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);

    if (res)
        fatfs_list_directory_start(&_fs, dir, cluster);
   1454c:	e3060150 	movw	r0, #24912	; 0x6150
   14550:	e1a01006 	mov	r1, r6
   14554:	e3420673 	movt	r0, #9843	; 0x2673
   14558:	ebfff413 	bl	115ac <fatfs_list_directory_start>
   1455c:	eaffffd7 	b	144c0 <fl_opendir+0x68>
   14560:	e59d2004 	ldr	r2, [sp, #4]
   14564:	eafffff8 	b	1454c <fl_opendir+0xf4>
   14568:	26758c34 	.word	0x26758c34

0001456c <fl_readdir>:
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
    int res = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1456c:	e30830c8 	movw	r3, #32968	; 0x80c8
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
   14570:	e92d4070 	push	{r4, r5, r6, lr}
    int res = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14574:	e3423675 	movt	r3, #9845	; 0x2675
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
   14578:	e1a06000 	mov	r6, r0
   1457c:	e1a05001 	mov	r5, r1
    int res = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14580:	e593cb74 	ldr	r12, [r3, #2932]	; 0xb74
   14584:	e35c0000 	cmp	r12, #0
   14588:	0a000013 	beq	145dc <fl_readdir+0x70>

    FL_LOCK(&_fs);
   1458c:	e3064150 	movw	r4, #24912	; 0x6150
   14590:	e3424673 	movt	r4, #9843	; 0x2673
   14594:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   14598:	e3530000 	cmp	r3, #0
   1459c:	0a000000 	beq	145a4 <fl_readdir+0x38>
   145a0:	e12fff33 	blx	r3

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   145a4:	e3060150 	movw	r0, #24912	; 0x6150
   145a8:	e1a02005 	mov	r2, r5
   145ac:	e1a01006 	mov	r1, r6
   145b0:	e3420673 	movt	r0, #9843	; 0x2673
   145b4:	ebfff401 	bl	115c0 <fatfs_list_directory_next>

    FL_UNLOCK(&_fs);
   145b8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    // If first call to library, initialise
    CHECK_FL_INIT();

    FL_LOCK(&_fs);

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   145bc:	e1a05000 	mov	r5, r0

    FL_UNLOCK(&_fs);
   145c0:	e3530000 	cmp	r3, #0
   145c4:	0a000000 	beq	145cc <fl_readdir+0x60>
   145c8:	e12fff33 	blx	r3

    return res ? 0 : -1;
   145cc:	e3550000 	cmp	r5, #0
}
   145d0:	03e00000 	mvneq	r0, #0
   145d4:	13a00000 	movne	r0, #0
   145d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   145dc:	12830eb6 	addne	r0, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   145e0:	e1a0100c 	mov	r1, r12

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   145e4:	e1a02003 	mov	r2, r3
    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   145e8:	1280000c 	addne	r0, r0, #12

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   145ec:	e5a2c6a8 	str	r12, [r2, #1704]!	; 0x6a8
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   145f0:	e583c1e8 	str	r12, [r3, #488]	; 0x1e8
   145f4:	e583c1e4 	str	r12, [r3, #484]	; 0x1e4
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   145f8:	e5832b6c 	str	r2, [r3, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   145fc:	15810000 	strne	r0, [r1]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   14600:	e3a01001 	mov	r1, #1
   14604:	e5831b74 	str	r1, [r3, #2932]	; 0xb74
    node->next = new_node;
   14608:	e59f101c 	ldr	r1, [pc, #28]	; 1462c <fl_readdir+0xc0>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   1460c:	e583cb70 	str	r12, [r3, #2928]	; 0xb70
    if (!node->next)
   14610:	0283ceb6 	addeq	r12, r3, #2912	; 0xb60
        list->tail = new_node;
    else
        node->next->previous = new_node;
   14614:	11a0c002 	movne	r12, r2
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   14618:	028cc00c 	addeq	r12, r12, #12
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   1461c:	e5821004 	str	r1, [r2, #4]
   14620:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
   14624:	e583c1e0 	str	r12, [r3, #480]	; 0x1e0
   14628:	eaffffd7 	b	1458c <fl_readdir+0x20>
   1462c:	26758c34 	.word	0x26758c34

00014630 <fl_closedir>:
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
    // Not used
    return 0;
}
   14630:	e3a00000 	mov	r0, #0
   14634:	e12fff1e 	bx	lr

00014638 <fl_is_dir>:
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14638:	e30830c8 	movw	r3, #32968	; 0x80c8
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   1463c:	e92d4030 	push	{r4, r5, lr}
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14640:	e3423675 	movt	r3, #9845	; 0x2675
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   14644:	e24dd014 	sub	sp, sp, #20
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;
   14648:	e3e01000 	mvn	r1, #0
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   1464c:	e1a05000 	mov	r5, r0
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;

    // If first call to library, initialise
    CHECK_FL_INIT();
   14650:	e5932b74 	ldr	r2, [r3, #2932]	; 0xb74
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;
   14654:	e58d1000 	str	r1, [sp]

    // If first call to library, initialise
    CHECK_FL_INIT();
   14658:	e3520000 	cmp	r2, #0
   1465c:	0a000017 	beq	146c0 <fl_is_dir+0x88>

    FL_LOCK(&_fs);
   14660:	e3064150 	movw	r4, #24912	; 0x6150
   14664:	e3424673 	movt	r4, #9843	; 0x2673
   14668:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   1466c:	e3530000 	cmp	r3, #0
   14670:	0a000000 	beq	14678 <fl_is_dir+0x40>
   14674:	e12fff33 	blx	r3

    levels = fatfs_total_path_levels((char*)path) + 1;
   14678:	e1a00005 	mov	r0, r5
   1467c:	eb000623 	bl	15f10 <fatfs_total_path_levels>

    // If path is in the root dir
    if (levels == 0)
   14680:	e3700001 	cmn	r0, #1
   14684:	0a000021 	beq	14710 <fl_is_dir+0xd8>
        cluster = fatfs_get_root_cluster(&_fs);
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
   14688:	e1a00005 	mov	r0, r5
   1468c:	e1a0100d 	mov	r1, sp
   14690:	ebfff483 	bl	118a4 <_open_directory>

    if (res)
   14694:	e3500000 	cmp	r0, #0
   14698:	1a000026 	bne	14738 <fl_is_dir+0x100>
        fatfs_list_directory_start(&_fs, dir, cluster);

    FL_UNLOCK(&_fs);
   1469c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   146a0:	e3530000 	cmp	r3, #0
   146a4:	0a000000 	beq	146ac <fl_is_dir+0x74>
   146a8:	e12fff33 	blx	r3

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   146ac:	e59d0000 	ldr	r0, [sp]
        res = 1;
        fl_closedir(&dir);
    }

    return res;
}
   146b0:	e2900001 	adds	r0, r0, #1
   146b4:	13a00001 	movne	r0, #1
   146b8:	e28dd014 	add	sp, sp, #20
   146bc:	e8bd8030 	pop	{r4, r5, pc}

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   146c0:	e1a01003 	mov	r1, r3
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   146c4:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
   146c8:	e5a126a8 	str	r2, [r1, #1704]!	; 0x6a8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   146cc:	e1a00002 	mov	r0, r2
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   146d0:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   146d4:	0283ceb6 	addeq	r12, r3, #2912	; 0xb60
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
   146d8:	e5832b70 	str	r2, [r3, #2928]	; 0xb70
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   146dc:	12832eb6 	addne	r2, r3, #2912	; 0xb60
   146e0:	1282200c 	addne	r2, r2, #12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   146e4:	e5831b6c 	str	r1, [r3, #2924]	; 0xb6c
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
   146e8:	15802000 	strne	r2, [r0]

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
   146ec:	e3a02001 	mov	r2, #1
   146f0:	e5832b74 	str	r2, [r3, #2932]	; 0xb74
   146f4:	11a0c001 	movne	r12, r1
    node->next = new_node;
   146f8:	e59f2040 	ldr	r2, [pc, #64]	; 14740 <fl_is_dir+0x108>
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
   146fc:	028cc00c 	addeq	r12, r12, #12
   14700:	e58311dc 	str	r1, [r3, #476]	; 0x1dc
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
   14704:	e5812004 	str	r2, [r1, #4]
   14708:	e583c1e0 	str	r12, [r3, #480]	; 0x1e0
   1470c:	eaffffd3 	b	14660 <fl_is_dir+0x28>

    levels = fatfs_total_path_levels((char*)path) + 1;

    // If path is in the root dir
    if (levels == 0)
        cluster = fatfs_get_root_cluster(&_fs);
   14710:	e3060150 	movw	r0, #24912	; 0x6150
   14714:	e3420673 	movt	r0, #9843	; 0x2673
   14718:	ebffee9a 	bl	10188 <fatfs_get_root_cluster>
   1471c:	e1a02000 	mov	r2, r0
   14720:	e58d0000 	str	r0, [sp]
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);

    if (res)
        fatfs_list_directory_start(&_fs, dir, cluster);
   14724:	e3060150 	movw	r0, #24912	; 0x6150
   14728:	e28d1004 	add	r1, sp, #4
   1472c:	e3420673 	movt	r0, #9843	; 0x2673
   14730:	ebfff39d 	bl	115ac <fatfs_list_directory_start>
   14734:	eaffffd8 	b	1469c <fl_is_dir+0x64>
   14738:	e59d2000 	ldr	r2, [sp]
   1473c:	eafffff8 	b	14724 <fl_is_dir+0xec>
   14740:	26758c34 	.word	0x26758c34

00014744 <fl_format>:
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
   14744:	e1a03000 	mov	r3, r0
    return fatfs_format(&_fs, volume_sectors, name);
   14748:	e3060150 	movw	r0, #24912	; 0x6150
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
   1474c:	e1a02001 	mov	r2, r1
    return fatfs_format(&_fs, volume_sectors, name);
   14750:	e3420673 	movt	r0, #9843	; 0x2673
   14754:	e1a01003 	mov	r1, r3
   14758:	ea00029d 	b	151d4 <fatfs_format>

0001475c <fatfs_format_fat16>:
}
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1475c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   14760:	e3a03d81 	mov	r3, #8256	; 0x2040
   14764:	e3e08000 	mvn	r8, #0
    fs->currentsector.dirty = 0;
   14768:	e3a05000 	mov	r5, #0
}
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1476c:	e1a04000 	mov	r4, r0
   14770:	e1a06001 	mov	r6, r1
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   14774:	e7808003 	str	r8, [r0, r3]
    fs->currentsector.dirty = 0;
   14778:	e2833004 	add	r3, r3, #4
   1477c:	e7805003 	str	r5, [r0, r3]
}
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   14780:	e1a07002 	mov	r7, r2
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fs->currentsector.dirty = 0;

    fs->next_free_cluster = 0; // Invalid
   14784:	e5805024 	str	r5, [r0, #36]	; 0x24

    fatfs_fat_init(fs);
   14788:	eb000846 	bl	168a8 <fatfs_fat_init>

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1478c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   14790:	e1530005 	cmp	r3, r5
   14794:	0a00011d 	beq	14c10 <fatfs_format_fat16+0x4b4>
   14798:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1479c:	e1530005 	cmp	r3, r5
   147a0:	0a00011a 	beq	14c10 <fatfs_format_fat16+0x4b4>
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   147a4:	e2848040 	add	r8, r4, #64	; 0x40
   147a8:	e1a01005 	mov	r1, r5
   147ac:	e3a02c02 	mov	r2, #512	; 0x200
    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
   147b0:	e5c4502d 	strb	r5, [r4, #45]	; 0x2d

    // Not valid for FAT16
    fs->fs_info_sector = 0;
   147b4:	e1c451b8 	strh	r5, [r4, #24]
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   147b8:	e1a00008 	mov	r0, r8
    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;

    // Not valid for FAT16
    fs->fs_info_sector = 0;
    fs->rootdir_first_cluster = 0;
   147bc:	e5845008 	str	r5, [r4, #8]

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   147c0:	e584501c 	str	r5, [r4, #28]
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   147c4:	eb0013da 	bl	19734 <memset>
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   147c8:	e3023b74 	movw	r3, #11124	; 0x2b74

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   147cc:	e3e01014 	mvn	r1, #20
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   147d0:	e3403002 	movt	r3, #2
    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
   147d4:	e3a02053 	mov	r2, #83	; 0x53
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   147d8:	e5d3c004 	ldrb	r12, [r3, #4]

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   147dc:	e5c41040 	strb	r1, [r4, #64]	; 0x40
    fs->currentsector.sector[1] = 0x3C;
   147e0:	e3a0103c 	mov	r1, #60	; 0x3c
   147e4:	e5c41041 	strb	r1, [r4, #65]	; 0x41
    fs->currentsector.sector[2] = 0x90;
   147e8:	e3e0106f 	mvn	r1, #111	; 0x6f
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
   147ec:	e5c42044 	strb	r2, [r4, #68]	; 0x44
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   147f0:	e15c0005 	cmp	r12, r5
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
    fs->currentsector.sector[6] = 0x4F;
    fs->currentsector.sector[7] = 0x53;
   147f4:	e5c42047 	strb	r2, [r4, #71]	; 0x47
    fs->currentsector.sector[8] = 0x35;
   147f8:	e3a02035 	mov	r2, #53	; 0x35
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
   147fc:	e5c41042 	strb	r1, [r4, #66]	; 0x42
    fs->currentsector.sector[3] = 0x4D;
   14800:	e3a0104d 	mov	r1, #77	; 0x4d
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
    fs->currentsector.sector[6] = 0x4F;
    fs->currentsector.sector[7] = 0x53;
    fs->currentsector.sector[8] = 0x35;
   14804:	e5c42048 	strb	r2, [r4, #72]	; 0x48
    fs->currentsector.sector[9] = 0x2E;
   14808:	e3a0202e 	mov	r2, #46	; 0x2e

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
   1480c:	e5c41043 	strb	r1, [r4, #67]	; 0x43
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
   14810:	e3a01044 	mov	r1, #68	; 0x44
    fs->currentsector.sector[6] = 0x4F;
    fs->currentsector.sector[7] = 0x53;
    fs->currentsector.sector[8] = 0x35;
    fs->currentsector.sector[9] = 0x2E;
   14814:	e5c42049 	strb	r2, [r4, #73]	; 0x49
    fs->currentsector.sector[10] = 0x30;
   14818:	e3a02030 	mov	r2, #48	; 0x30
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
   1481c:	e5c41045 	strb	r1, [r4, #69]	; 0x45
    fs->currentsector.sector[6] = 0x4F;
   14820:	e3a0104f 	mov	r1, #79	; 0x4f
    fs->currentsector.sector[7] = 0x53;
    fs->currentsector.sector[8] = 0x35;
    fs->currentsector.sector[9] = 0x2E;
    fs->currentsector.sector[10] = 0x30;
   14824:	e5c4204a 	strb	r2, [r4, #74]	; 0x4a

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   14828:	e3a02002 	mov	r2, #2
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
    fs->currentsector.sector[6] = 0x4F;
   1482c:	e5c41046 	strb	r1, [r4, #70]	; 0x46
    fs->currentsector.sector[8] = 0x35;
    fs->currentsector.sector[9] = 0x2E;
    fs->currentsector.sector[10] = 0x30;

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
   14830:	e5c4504b 	strb	r5, [r4, #75]	; 0x4b
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   14834:	e5c4204c 	strb	r2, [r4, #76]	; 0x4c
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   14838:	0a000009 	beq	14864 <fatfs_format_fat16+0x108>
            if (sectors <= _cluster_size_table16[i].sectors)
   1483c:	e5932000 	ldr	r2, [r3]
   14840:	e1560002 	cmp	r6, r2
   14844:	8a000003 	bhi	14858 <fatfs_format_fat16+0xfc>
   14848:	ea000009 	b	14874 <fatfs_format_fat16+0x118>
   1484c:	e5b35008 	ldr	r5, [r3, #8]!
   14850:	e1560005 	cmp	r6, r5
   14854:	9a000006 	bls	14874 <fatfs_format_fat16+0x118>
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   14858:	e5d3c00c 	ldrb	r12, [r3, #12]
   1485c:	e35c0000 	cmp	r12, #0
   14860:	1afffff9 	bne	1484c <fatfs_format_fat16+0xf0>
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   14864:	e3a03000 	mov	r3, #0
   14868:	e5c43000 	strb	r3, [r4]

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;
   1486c:	e3a00000 	mov	r0, #0
   14870:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
    // Reserved Sectors
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   14874:	e3a0e008 	mov	lr, #8
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;

    // Number of FATS
    fs->num_of_fats = 2;
   14878:	e3a03002 	mov	r3, #2
    fs->currentsector.sector[16] = fs->num_of_fats;

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
    {
        fs->root_entry_count = 512;
   1487c:	e3a02c02 	mov	r2, #512	; 0x200
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   14880:	e3a05000 	mov	r5, #0
    fs->currentsector.sector[16] = fs->num_of_fats;

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
    {
        fs->root_entry_count = 512;
   14884:	e7df281e 	bfi	r2, lr, #16, #16
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;

    // Number of FATS
    fs->num_of_fats = 2;
   14888:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
    fs->currentsector.sector[16] = fs->num_of_fats;
   1488c:	e5c43050 	strb	r3, [r4, #80]	; 0x50

    // FAT16 BS Details
    if (!is_fat32)
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   14890:	e1a0100c 	mov	r1, r12
    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
    {
        fs->root_entry_count = 512;
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
   14894:	e5c43052 	strb	r3, [r4, #82]	; 0x52
    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
    fs->currentsector.sector[20] = 0x00;

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   14898:	e3e03007 	mvn	r3, #7
    // Reserved Sectors
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   1489c:	e5c4e04e 	strb	lr, [r4, #78]	; 0x4e

    // FAT16 BS Details
    if (!is_fat32)
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   148a0:	e1a00006 	mov	r0, r6
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   148a4:	e5c4c000 	strb	r12, [r4]
        // Heads
        fs->currentsector.sector[26] = 0x00;
        fs->currentsector.sector[27] = 0x00;

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
   148a8:	e3a0a020 	mov	r10, #32
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
    if (!fs->sectors_per_cluster)
        return 0; // Invalid disk size

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
   148ac:	e5c4c04d 	strb	r12, [r4, #77]	; 0x4d
    fs->currentsector.sector[16] = fs->num_of_fats;

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
    {
        fs->root_entry_count = 512;
   148b0:	e5842028 	str	r2, [r4, #40]	; 0x28
    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
    fs->currentsector.sector[20] = 0x00;

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   148b4:	e5c43055 	strb	r3, [r4, #85]	; 0x55
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   148b8:	e5c4504f 	strb	r5, [r4, #79]	; 0x4f

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
    {
        fs->root_entry_count = 512;
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
   148bc:	e5c45051 	strb	r5, [r4, #81]	; 0x51
        fs->currentsector.sector[17] = 0;
        fs->currentsector.sector[18] = 0;
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
   148c0:	e5c45053 	strb	r5, [r4, #83]	; 0x53
    fs->currentsector.sector[20] = 0x00;
   148c4:	e5c45054 	strb	r5, [r4, #84]	; 0x54

    // FAT16 BS Details
    if (!is_fat32)
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   148c8:	eb00101b 	bl	1893c <__aeabi_uidiv>
   148cc:	e2800001 	add	r0, r0, #1
        fs->currentsector.sector[30] = 0x00;
        fs->currentsector.sector[31] = 0x00;

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   148d0:	e1a0c426 	lsr	r12, r6, #8
    // FAT16 BS Details
    if (!is_fat32)
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   148d4:	e1a03420 	lsr	r3, r0, #8
        fs->currentsector.sector[31] = 0x00;

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   148d8:	e1a01826 	lsr	r1, r6, #16
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   148dc:	e1a02c26 	lsr	r2, r6, #24
        fs->currentsector.sector[30] = 0x00;
        fs->currentsector.sector[31] = 0x00;

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   148e0:	e5c4c061 	strb	r12, [r4, #97]	; 0x61
    // FAT16 BS Details
    if (!is_fat32)
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   148e4:	e2833001 	add	r3, r3, #1
        fs->currentsector.sector[31] = 0x00;

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   148e8:	e5c41062 	strb	r1, [r4, #98]	; 0x62
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
   148ec:	e1a00423 	lsr	r0, r3, #8
    // FAT16 BS Details
    if (!is_fat32)
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   148f0:	e5843020 	str	r3, [r4, #32]
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
   148f4:	e5c43056 	strb	r3, [r4, #86]	; 0x56

        // Reserved
        fs->currentsector.sector[37] = 0x00;

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
   148f8:	e3a03029 	mov	r3, #41	; 0x29
   148fc:	e5c43066 	strb	r3, [r4, #102]	; 0x66

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
   14900:	e3a03012 	mov	r3, #18
   14904:	e5c43067 	strb	r3, [r4, #103]	; 0x67
        fs->currentsector.sector[40] = 0x34;
   14908:	e3a03034 	mov	r3, #52	; 0x34
   1490c:	e5c43068 	strb	r3, [r4, #104]	; 0x68
        fs->currentsector.sector[41] = 0x56;
   14910:	e3a03056 	mov	r3, #86	; 0x56
   14914:	e5c43069 	strb	r3, [r4, #105]	; 0x69
        fs->currentsector.sector[42] = 0x78;
   14918:	e3a03078 	mov	r3, #120	; 0x78
   1491c:	e5c4306a 	strb	r3, [r4, #106]	; 0x6a

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   14920:	e5c42063 	strb	r2, [r4, #99]	; 0x63
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
   14924:	e5c40057 	strb	r0, [r4, #87]	; 0x57
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14928:	e1a00007 	mov	r0, r7
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
   1492c:	e5c45058 	strb	r5, [r4, #88]	; 0x58
        fs->currentsector.sector[25] = 0x00;
   14930:	e5c45059 	strb	r5, [r4, #89]	; 0x59

        // Heads
        fs->currentsector.sector[26] = 0x00;
   14934:	e5c4505a 	strb	r5, [r4, #90]	; 0x5a
        fs->currentsector.sector[27] = 0x00;
   14938:	e5c4505b 	strb	r5, [r4, #91]	; 0x5b

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
   1493c:	e5c4a05c 	strb	r10, [r4, #92]	; 0x5c
        fs->currentsector.sector[29] = 0x00;
   14940:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
        fs->currentsector.sector[30] = 0x00;
   14944:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
        fs->currentsector.sector[31] = 0x00;
   14948:	e5c4505f 	strb	r5, [r4, #95]	; 0x5f

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1494c:	e5c46060 	strb	r6, [r4, #96]	; 0x60
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);

        // Drive number
        fs->currentsector.sector[36] = 0x00;
   14950:	e5c45064 	strb	r5, [r4, #100]	; 0x64

        // Reserved
        fs->currentsector.sector[37] = 0x00;
   14954:	e5c45065 	strb	r5, [r4, #101]	; 0x65
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14958:	eb0013c2 	bl	19868 <strlen>
   1495c:	e1500005 	cmp	r0, r5
   14960:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   14964:	c5d73000 	ldrbgt	r3, [r7]
            else
                fs->currentsector.sector[i+43] = ' ';
   14968:	d5c4a06b 	strble	r10, [r4, #107]	; 0x6b

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   1496c:	c5c4306b 	strbgt	r3, [r4, #107]	; 0x6b
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14970:	eb0013bc 	bl	19868 <strlen>
   14974:	e3500001 	cmp	r0, #1
   14978:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   1497c:	c5d73001 	ldrbgt	r3, [r7, #1]
            else
                fs->currentsector.sector[i+43] = ' ';
   14980:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   14984:	e5c4306c 	strb	r3, [r4, #108]	; 0x6c
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14988:	eb0013b6 	bl	19868 <strlen>
   1498c:	e3500002 	cmp	r0, #2
   14990:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   14994:	c5d73002 	ldrbgt	r3, [r7, #2]
            else
                fs->currentsector.sector[i+43] = ' ';
   14998:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   1499c:	e5c4306d 	strb	r3, [r4, #109]	; 0x6d
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   149a0:	eb0013b0 	bl	19868 <strlen>
   149a4:	e3500003 	cmp	r0, #3
   149a8:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   149ac:	c5d73003 	ldrbgt	r3, [r7, #3]
            else
                fs->currentsector.sector[i+43] = ' ';
   149b0:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   149b4:	e5c4306e 	strb	r3, [r4, #110]	; 0x6e
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   149b8:	eb0013aa 	bl	19868 <strlen>
   149bc:	e3500004 	cmp	r0, #4
   149c0:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   149c4:	c5d73004 	ldrbgt	r3, [r7, #4]
            else
                fs->currentsector.sector[i+43] = ' ';
   149c8:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   149cc:	e5c4306f 	strb	r3, [r4, #111]	; 0x6f
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   149d0:	eb0013a4 	bl	19868 <strlen>
   149d4:	e3500005 	cmp	r0, #5
   149d8:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   149dc:	c5d73005 	ldrbgt	r3, [r7, #5]
            else
                fs->currentsector.sector[i+43] = ' ';
   149e0:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   149e4:	e5c43070 	strb	r3, [r4, #112]	; 0x70
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   149e8:	eb00139e 	bl	19868 <strlen>
   149ec:	e3500006 	cmp	r0, #6
   149f0:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   149f4:	c5d73006 	ldrbgt	r3, [r7, #6]
            else
                fs->currentsector.sector[i+43] = ' ';
   149f8:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   149fc:	e5c43071 	strb	r3, [r4, #113]	; 0x71
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14a00:	eb001398 	bl	19868 <strlen>
   14a04:	e3500007 	cmp	r0, #7
   14a08:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   14a0c:	c5d73007 	ldrbgt	r3, [r7, #7]
            else
                fs->currentsector.sector[i+43] = ' ';
   14a10:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   14a14:	e5c43072 	strb	r3, [r4, #114]	; 0x72
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14a18:	eb001392 	bl	19868 <strlen>
   14a1c:	e3500008 	cmp	r0, #8
   14a20:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   14a24:	c5d73008 	ldrbgt	r3, [r7, #8]
            else
                fs->currentsector.sector[i+43] = ' ';
   14a28:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   14a2c:	e5c43073 	strb	r3, [r4, #115]	; 0x73
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14a30:	eb00138c 	bl	19868 <strlen>
   14a34:	e3500009 	cmp	r0, #9
   14a38:	e1a00007 	mov	r0, r7
                fs->currentsector.sector[i+43] = name[i];
   14a3c:	c5d73009 	ldrbgt	r3, [r7, #9]
            else
                fs->currentsector.sector[i+43] = ' ';
   14a40:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
   14a44:	e5c43074 	strb	r3, [r4, #116]	; 0x74
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14a48:	eb001386 	bl	19868 <strlen>
   14a4c:	e350000a 	cmp	r0, #10
   14a50:	da00006b 	ble	14c04 <fatfs_format_fat16+0x4a8>
                fs->currentsector.sector[i+43] = name[i];
   14a54:	e5d7300a 	ldrb	r3, [r7, #10]
   14a58:	e5c43075 	strb	r3, [r4, #117]	; 0x75
        fs->currentsector.sector[54] = 'F';
        fs->currentsector.sector[55] = 'A';
        fs->currentsector.sector[56] = 'T';
        fs->currentsector.sector[57] = '1';
        fs->currentsector.sector[58] = '6';
        fs->currentsector.sector[59] = ' ';
   14a5c:	e3a03020 	mov	r3, #32
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
   14a60:	e3a02046 	mov	r2, #70	; 0x46
   14a64:	e5c42076 	strb	r2, [r4, #118]	; 0x76
        fs->currentsector.sector[55] = 'A';
        fs->currentsector.sector[56] = 'T';
        fs->currentsector.sector[57] = '1';
   14a68:	e3a0c031 	mov	r12, #49	; 0x31
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
        fs->currentsector.sector[55] = 'A';
   14a6c:	e3a02041 	mov	r2, #65	; 0x41
        fs->currentsector.sector[56] = 'T';
        fs->currentsector.sector[57] = '1';
        fs->currentsector.sector[58] = '6';
        fs->currentsector.sector[59] = ' ';
   14a70:	e5c4307b 	strb	r3, [r4, #123]	; 0x7b
        fs->currentsector.sector[60] = ' ';
   14a74:	e5c4307c 	strb	r3, [r4, #124]	; 0x7c
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   14a78:	e3a00000 	mov	r0, #0
        fs->currentsector.sector[56] = 'T';
        fs->currentsector.sector[57] = '1';
        fs->currentsector.sector[58] = '6';
        fs->currentsector.sector[59] = ' ';
        fs->currentsector.sector[60] = ' ';
        fs->currentsector.sector[61] = ' ';
   14a7c:	e5c4307d 	strb	r3, [r4, #125]	; 0x7d

        // Signature
        fs->currentsector.sector[510] = 0x55;
   14a80:	e3a03055 	mov	r3, #85	; 0x55
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
        fs->currentsector.sector[55] = 'A';
   14a84:	e5c42077 	strb	r2, [r4, #119]	; 0x77
        fs->currentsector.sector[56] = 'T';
   14a88:	e3a02054 	mov	r2, #84	; 0x54
        fs->currentsector.sector[57] = '1';
   14a8c:	e5c4c079 	strb	r12, [r4, #121]	; 0x79
        fs->currentsector.sector[58] = '6';
   14a90:	e3a0c036 	mov	r12, #54	; 0x36
        fs->currentsector.sector[59] = ' ';
        fs->currentsector.sector[60] = ' ';
        fs->currentsector.sector[61] = ' ';

        // Signature
        fs->currentsector.sector[510] = 0x55;
   14a94:	e5c4323e 	strb	r3, [r4, #574]	; 0x23e
        fs->currentsector.sector[511] = 0xAA;
   14a98:	e3e03055 	mvn	r3, #85	; 0x55
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
        fs->currentsector.sector[55] = 'A';
        fs->currentsector.sector[56] = 'T';
   14a9c:	e5c42078 	strb	r2, [r4, #120]	; 0x78
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   14aa0:	e1a01008 	mov	r1, r8
        fs->currentsector.sector[60] = ' ';
        fs->currentsector.sector[61] = ' ';

        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
   14aa4:	e5c4323f 	strb	r3, [r4, #575]	; 0x23f
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   14aa8:	e3a02001 	mov	r2, #1
        // File sys type
        fs->currentsector.sector[54] = 'F';
        fs->currentsector.sector[55] = 'A';
        fs->currentsector.sector[56] = 'T';
        fs->currentsector.sector[57] = '1';
        fs->currentsector.sector[58] = '6';
   14aac:	e5c4c07a 	strb	r12, [r4, #122]	; 0x7a
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   14ab0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   14ab4:	e12fff33 	blx	r3
   14ab8:	e3500000 	cmp	r0, #0
   14abc:	0affff6a 	beq	1486c <fatfs_format_fat16+0x110>
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   14ac0:	e1d432b8 	ldrh	r3, [r4, #40]	; 0x28
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14ac4:	e3a01000 	mov	r1, #0
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   14ac8:	e5d4c02c 	ldrb	r12, [r4, #44]	; 0x2c
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14acc:	e3a02c02 	mov	r2, #512	; 0x200
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   14ad0:	e5946020 	ldr	r6, [r4, #32]
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14ad4:	e1a00008 	mov	r0, r8
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   14ad8:	e1d452ba 	ldrh	r5, [r4, #42]	; 0x2a
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   14adc:	e1a03283 	lsl	r3, r3, #5

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   14ae0:	e594e01c 	ldr	lr, [r4, #28]
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   14ae4:	e00c0c96 	mul	r12, r6, r12
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   14ae8:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   14aec:	e2833003 	add	r3, r3, #3

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   14af0:	e085e00e 	add	lr, r5, lr
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   14af4:	e1a034c3 	asr	r3, r3, #9

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   14af8:	e584e014 	str	lr, [r4, #20]
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   14afc:	e08c5005 	add	r5, r12, r5

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   14b00:	e08ec00c 	add	r12, lr, r12
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   14b04:	e5843010 	str	r3, [r4, #16]

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   14b08:	e584c004 	str	r12, [r4, #4]
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   14b0c:	e584500c 	str	r5, [r4, #12]
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14b10:	eb001307 	bl	19734 <memset>

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
   14b14:	e3e03000 	mvn	r3, #0
   14b18:	e3e02007 	mvn	r2, #7
   14b1c:	e5c42040 	strb	r2, [r4, #64]	; 0x40
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   14b20:	e1a01008 	mov	r1, r8
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
   14b24:	e5c43041 	strb	r3, [r4, #65]	; 0x41
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   14b28:	e3a02001 	mov	r2, #1

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
   14b2c:	e5c43042 	strb	r3, [r4, #66]	; 0x42
   14b30:	e5c43043 	strb	r3, [r4, #67]	; 0x43
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   14b34:	e5940014 	ldr	r0, [r4, #20]
   14b38:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   14b3c:	e12fff33 	blx	r3
   14b40:	e3500000 	cmp	r0, #0
   14b44:	0affff48 	beq	1486c <fatfs_format_fat16+0x110>
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14b48:	e3a02c02 	mov	r2, #512	; 0x200
   14b4c:	e1a00008 	mov	r0, r8
   14b50:	e3a01000 	mov	r1, #0
   14b54:	eb0012f6 	bl	19734 <memset>
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   14b58:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   14b5c:	e5942020 	ldr	r2, [r4, #32]
   14b60:	e0030392 	mul	r3, r2, r3
   14b64:	e3530001 	cmp	r3, #1
   14b68:	9a00000e 	bls	14ba8 <fatfs_format_fat16+0x44c>
   14b6c:	e3a05001 	mov	r5, #1
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   14b70:	e5940014 	ldr	r0, [r4, #20]
   14b74:	e3a02001 	mov	r2, #1
   14b78:	e1a01008 	mov	r1, r8
   14b7c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   14b80:	e0850000 	add	r0, r5, r0
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   14b84:	e0855002 	add	r5, r5, r2
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   14b88:	e12fff33 	blx	r3
   14b8c:	e3500000 	cmp	r0, #0
   14b90:	0affff35 	beq	1486c <fatfs_format_fat16+0x110>
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   14b94:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   14b98:	e5942020 	ldr	r2, [r4, #32]
   14b9c:	e0030392 	mul	r3, r2, r3
   14ba0:	e1550003 	cmp	r5, r3
   14ba4:	3afffff1 	bcc	14b70 <fatfs_format_fat16+0x414>
    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   14ba8:	e594600c 	ldr	r6, [r4, #12]
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14bac:	e1a00008 	mov	r0, r8
    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   14bb0:	e594301c 	ldr	r3, [r4, #28]
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14bb4:	e3a01000 	mov	r1, #0
    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   14bb8:	e5947010 	ldr	r7, [r4, #16]
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14bbc:	e3a02c02 	mov	r2, #512	; 0x200
    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   14bc0:	e0866003 	add	r6, r6, r3
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14bc4:	eb0012da 	bl	19734 <memset>

    for (i=0;i<count;i++)
   14bc8:	e3570000 	cmp	r7, #0
   14bcc:	c3a05000 	movgt	r5, #0
   14bd0:	da000009 	ble	14bfc <fatfs_format_fat16+0x4a0>
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   14bd4:	e0850006 	add	r0, r5, r6
   14bd8:	e3a02001 	mov	r2, #1
   14bdc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   14be0:	e1a01008 	mov	r1, r8
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   14be4:	e0855002 	add	r5, r5, r2
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   14be8:	e12fff33 	blx	r3
   14bec:	e3500000 	cmp	r0, #0
   14bf0:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   14bf4:	e1570005 	cmp	r7, r5
   14bf8:	1afffff5 	bne	14bd4 <fatfs_format_fat16+0x478>

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
        return 0;

    return 1;
   14bfc:	e3a00001 	mov	r0, #1
   14c00:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+43] = name[i];
            else
                fs->currentsector.sector[i+43] = ' ';
   14c04:	e3a03020 	mov	r3, #32
   14c08:	e5c43075 	strb	r3, [r4, #117]	; 0x75
   14c0c:	eaffff92 	b	14a5c <fatfs_format_fat16+0x300>

    fatfs_fat_init(fs);

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   14c10:	e1a00008 	mov	r0, r8
   14c14:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00014c18 <fatfs_format_fat32>:
}
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   14c18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   14c1c:	e3a03d81 	mov	r3, #8256	; 0x2040
   14c20:	e3e07000 	mvn	r7, #0
    fs->currentsector.dirty = 0;
   14c24:	e3a05000 	mov	r5, #0
}
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   14c28:	e1a04000 	mov	r4, r0
   14c2c:	e24dd00c 	sub	sp, sp, #12
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   14c30:	e7807003 	str	r7, [r0, r3]
    fs->currentsector.dirty = 0;
   14c34:	e2833004 	add	r3, r3, #4
   14c38:	e7805003 	str	r5, [r0, r3]
}
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   14c3c:	e1a08001 	mov	r8, r1
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fs->currentsector.dirty = 0;

    fs->next_free_cluster = 0; // Invalid
   14c40:	e5805024 	str	r5, [r0, #36]	; 0x24
}
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   14c44:	e1a06002 	mov	r6, r2
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fs->currentsector.dirty = 0;

    fs->next_free_cluster = 0; // Invalid

    fatfs_fat_init(fs);
   14c48:	eb000716 	bl	168a8 <fatfs_fat_init>

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   14c4c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   14c50:	e1530005 	cmp	r3, r5
   14c54:	0a00015c 	beq	151cc <fatfs_format_fat32+0x5b4>
   14c58:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   14c5c:	e1530005 	cmp	r3, r5
   14c60:	0a000159 	beq	151cc <fatfs_format_fat32+0x5b4>
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
   14c64:	e3a03001 	mov	r3, #1

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
    fs->rootdir_first_cluster = 2;
   14c68:	e3a0a002 	mov	r10, #2
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14c6c:	e2847040 	add	r7, r4, #64	; 0x40
    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
   14c70:	e5c4302d 	strb	r3, [r4, #45]	; 0x2d

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
   14c74:	e1c431b8 	strh	r3, [r4, #24]
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14c78:	e1a01005 	mov	r1, r5
   14c7c:	e3a02c02 	mov	r2, #512	; 0x200
   14c80:	e1a00007 	mov	r0, r7
    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
    fs->rootdir_first_cluster = 2;
   14c84:	e584a008 	str	r10, [r4, #8]

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   14c88:	e584501c 	str	r5, [r4, #28]
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14c8c:	eb0012a8 	bl	19734 <memset>
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   14c90:	e3023b74 	movw	r3, #11124	; 0x2b74

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   14c94:	e3e00014 	mvn	r0, #20
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   14c98:	e3403002 	movt	r3, #2

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   14c9c:	e5c40040 	strb	r0, [r4, #64]	; 0x40
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   14ca0:	e5d32044 	ldrb	r2, [r3, #68]	; 0x44
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
   14ca4:	e3a0003c 	mov	r0, #60	; 0x3c
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
   14ca8:	e3a01053 	mov	r1, #83	; 0x53
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
   14cac:	e5c40041 	strb	r0, [r4, #65]	; 0x41
    fs->currentsector.sector[2] = 0x90;
   14cb0:	e3e0006f 	mvn	r0, #111	; 0x6f
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
   14cb4:	e5c41044 	strb	r1, [r4, #68]	; 0x44
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
   14cb8:	e5c40042 	strb	r0, [r4, #66]	; 0x42
    fs->currentsector.sector[3] = 0x4D;
   14cbc:	e3a0004d 	mov	r0, #77	; 0x4d
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
    fs->currentsector.sector[6] = 0x4F;
    fs->currentsector.sector[7] = 0x53;
   14cc0:	e5c41047 	strb	r1, [r4, #71]	; 0x47
    fs->currentsector.sector[8] = 0x35;
   14cc4:	e3a01035 	mov	r1, #53	; 0x35

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
   14cc8:	e5c40043 	strb	r0, [r4, #67]	; 0x43
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   14ccc:	e1520005 	cmp	r2, r5
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
   14cd0:	e3a00044 	mov	r0, #68	; 0x44
    fs->currentsector.sector[6] = 0x4F;
    fs->currentsector.sector[7] = 0x53;
    fs->currentsector.sector[8] = 0x35;
   14cd4:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    fs->currentsector.sector[9] = 0x2E;
   14cd8:	e3a0102e 	mov	r1, #46	; 0x2e
    fs->currentsector.sector[0] = 0xEB;
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
   14cdc:	e5c40045 	strb	r0, [r4, #69]	; 0x45
    fs->currentsector.sector[6] = 0x4F;
    fs->currentsector.sector[7] = 0x53;
    fs->currentsector.sector[8] = 0x35;
    fs->currentsector.sector[9] = 0x2E;
   14ce0:	e5c41049 	strb	r1, [r4, #73]	; 0x49
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
    fs->currentsector.sector[6] = 0x4F;
   14ce4:	e3a0004f 	mov	r0, #79	; 0x4f
    fs->currentsector.sector[7] = 0x53;
    fs->currentsector.sector[8] = 0x35;
    fs->currentsector.sector[9] = 0x2E;
    fs->currentsector.sector[10] = 0x30;
   14ce8:	e3a01030 	mov	r1, #48	; 0x30
    fs->currentsector.sector[1] = 0x3C;
    fs->currentsector.sector[2] = 0x90;
    fs->currentsector.sector[3] = 0x4D;
    fs->currentsector.sector[4] = 0x53;
    fs->currentsector.sector[5] = 0x44;
    fs->currentsector.sector[6] = 0x4F;
   14cec:	e5c40046 	strb	r0, [r4, #70]	; 0x46
    fs->currentsector.sector[7] = 0x53;
    fs->currentsector.sector[8] = 0x35;
    fs->currentsector.sector[9] = 0x2E;
    fs->currentsector.sector[10] = 0x30;
   14cf0:	e5c4104a 	strb	r1, [r4, #74]	; 0x4a

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
   14cf4:	e5c4504b 	strb	r5, [r4, #75]	; 0x4b
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   14cf8:	e5c4a04c 	strb	r10, [r4, #76]	; 0x4c
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   14cfc:	0a00000a 	beq	14d2c <fatfs_format_fat32+0x114>
            if (sectors <= _cluster_size_table32[i].sectors)
   14d00:	e5931040 	ldr	r1, [r3, #64]	; 0x40
   14d04:	e1580001 	cmp	r8, r1
   14d08:	9a00000c 	bls	14d40 <fatfs_format_fat32+0x128>
   14d0c:	e2833040 	add	r3, r3, #64	; 0x40
   14d10:	ea000002 	b	14d20 <fatfs_format_fat32+0x108>
   14d14:	e5b31008 	ldr	r1, [r3, #8]!
   14d18:	e1580001 	cmp	r8, r1
   14d1c:	9a000007 	bls	14d40 <fatfs_format_fat32+0x128>
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   14d20:	e5d3200c 	ldrb	r2, [r3, #12]
   14d24:	e3520000 	cmp	r2, #0
   14d28:	1afffff9 	bne	14d14 <fatfs_format_fat32+0xfc>
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   14d2c:	e3a03000 	mov	r3, #0
   14d30:	e5c43000 	strb	r3, [r4]

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
        return 0;
   14d34:	e3a00000 	mov	r0, #0
    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
        return 0;

    return 1;
}
   14d38:	e28dd00c 	add	sp, sp, #12
   14d3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;

    // Number of FATS
    fs->num_of_fats = 2;
   14d40:	e3a03002 	mov	r3, #2
        fs->currentsector.sector[31] = 0x00;

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   14d44:	e1a0e828 	lsr	lr, r8, #16
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;

    // Number of FATS
    fs->num_of_fats = 2;
   14d48:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   14d4c:	e1a0cc28 	lsr	r12, r8, #24
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;

    // Number of FATS
    fs->num_of_fats = 2;
    fs->currentsector.sector[16] = fs->num_of_fats;
   14d50:	e5c43050 	strb	r3, [r4, #80]	; 0x50
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
    }
    else
    {
        fs->root_entry_count = 0;
   14d54:	e3a03602 	mov	r3, #2097152	; 0x200000
   14d58:	e5843028 	str	r3, [r4, #40]	; 0x28
    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
    fs->currentsector.sector[20] = 0x00;

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   14d5c:	e3e03007 	mvn	r3, #7
        fs->currentsector.sector[30] = 0x00;
        fs->currentsector.sector[31] = 0x00;

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   14d60:	e1a0a428 	lsr	r10, r8, #8
    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
    fs->currentsector.sector[20] = 0x00;

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   14d64:	e5c43055 	strb	r3, [r4, #85]	; 0x55
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
        fs->currentsector.sector[23] = 0;

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
   14d68:	e3a0303f 	mov	r3, #63	; 0x3f
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   14d6c:	e5c42000 	strb	r2, [r4]
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   14d70:	e3a05000 	mov	r5, #0
    // Reserved Sectors
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   14d74:	e3a09020 	mov	r9, #32
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
        fs->currentsector.sector[23] = 0;

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
   14d78:	e5c43058 	strb	r3, [r4, #88]	; 0x58
        fs->currentsector.sector[25] = 0x00;

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
   14d7c:	e3e03000 	mvn	r3, #0
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   14d80:	e1a01002 	mov	r1, r2
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
    if (!fs->sectors_per_cluster)
        return 0; // Invalid disk size

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
   14d84:	e5c4204d 	strb	r2, [r4, #77]	; 0x4d
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   14d88:	e1a00008 	mov	r0, r8
        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
        fs->currentsector.sector[25] = 0x00;

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
   14d8c:	e5c4305a 	strb	r3, [r4, #90]	; 0x5a
        fs->currentsector.sector[29] = 0x00;
        fs->currentsector.sector[30] = 0x00;
        fs->currentsector.sector[31] = 0x00;

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   14d90:	e5c48060 	strb	r8, [r4, #96]	; 0x60
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   14d94:	e5c4a061 	strb	r10, [r4, #97]	; 0x61
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   14d98:	e5c4e062 	strb	lr, [r4, #98]	; 0x62
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   14d9c:	e5c4c063 	strb	r12, [r4, #99]	; 0x63
    // Reserved Sectors
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   14da0:	e5c4904e 	strb	r9, [r4, #78]	; 0x4e
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   14da4:	e5c4504f 	strb	r5, [r4, #79]	; 0x4f
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
    }
    else
    {
        fs->root_entry_count = 0;
        fs->currentsector.sector[17] = 0;
   14da8:	e5c45051 	strb	r5, [r4, #81]	; 0x51
        fs->currentsector.sector[18] = 0;
   14dac:	e5c45052 	strb	r5, [r4, #82]	; 0x52
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
   14db0:	e5c45053 	strb	r5, [r4, #83]	; 0x53
    fs->currentsector.sector[20] = 0x00;
   14db4:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
   14db8:	e5c45056 	strb	r5, [r4, #86]	; 0x56
        fs->currentsector.sector[23] = 0;
   14dbc:	e5c45057 	strb	r5, [r4, #87]	; 0x57

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
        fs->currentsector.sector[25] = 0x00;
   14dc0:	e5c45059 	strb	r5, [r4, #89]	; 0x59

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
        fs->currentsector.sector[27] = 0x00;
   14dc4:	e5c4505b 	strb	r5, [r4, #91]	; 0x5b

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
   14dc8:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
        fs->currentsector.sector[29] = 0x00;
   14dcc:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
        fs->currentsector.sector[30] = 0x00;
   14dd0:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
        fs->currentsector.sector[31] = 0x00;
   14dd4:	e5c4505f 	strb	r5, [r4, #95]	; 0x5f
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   14dd8:	eb000ed7 	bl	1893c <__aeabi_uidiv>
   14ddc:	e2800001 	add	r0, r0, #1
        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
        fs->currentsector.sector[43] = 0;

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
   14de0:	e5942008 	ldr	r2, [r4, #8]
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   14de4:	e1a033a0 	lsr	r3, r0, #7
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
   14de8:	e1d411b8 	ldrh	r1, [r4, #24]
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
   14dec:	e5c45068 	strb	r5, [r4, #104]	; 0x68
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   14df0:	e2833001 	add	r3, r3, #1
        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
        fs->currentsector.sector[43] = 0;

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
   14df4:	e5c4206c 	strb	r2, [r4, #108]	; 0x6c

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   14df8:	e1a0cc23 	lsr	r12, r3, #24
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
   14dfc:	e1a00823 	lsr	r0, r3, #16
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
   14e00:	e1a0b423 	lsr	r11, r3, #8
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   14e04:	e5843020 	str	r3, [r4, #32]

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   14e08:	e58dc004 	str	r12, [sp, #4]
        fs->currentsector.sector[42] = 0;
        fs->currentsector.sector[43] = 0;

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
   14e0c:	e1a0a422 	lsr	r10, r2, #8

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
   14e10:	e5c43064 	strb	r3, [r4, #100]	; 0x64
        fs->currentsector.sector[43] = 0;

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
   14e14:	e1a08822 	lsr	r8, r2, #16

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   14e18:	e59d3004 	ldr	r3, [sp, #4]

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
   14e1c:	e1a0ec22 	lsr	lr, r2, #24

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
   14e20:	e1a0c421 	lsr	r12, r1, #8
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
   14e24:	e5c41070 	strb	r1, [r4, #112]	; 0x70

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
   14e28:	e5c4e06f 	strb	lr, [r4, #111]	; 0x6f

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   14e2c:	e5c43067 	strb	r3, [r4, #103]	; 0x67
        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
   14e30:	e3a03006 	mov	r3, #6
   14e34:	e5c43072 	strb	r3, [r4, #114]	; 0x72

        // Drive number
        fs->currentsector.sector[64] = 0x00;

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
   14e38:	e3a03029 	mov	r3, #41	; 0x29
   14e3c:	e5c43082 	strb	r3, [r4, #130]	; 0x82

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
   14e40:	e3a03012 	mov	r3, #18
   14e44:	e5c43083 	strb	r3, [r4, #131]	; 0x83
        fs->currentsector.sector[68] = 0x34;
   14e48:	e3a03034 	mov	r3, #52	; 0x34
   14e4c:	e5c43084 	strb	r3, [r4, #132]	; 0x84
        fs->currentsector.sector[69] = 0x56;
   14e50:	e3a03056 	mov	r3, #86	; 0x56
   14e54:	e5c43085 	strb	r3, [r4, #133]	; 0x85
        fs->currentsector.sector[70] = 0x78;
   14e58:	e3a03078 	mov	r3, #120	; 0x78
   14e5c:	e5c43086 	strb	r3, [r4, #134]	; 0x86
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
   14e60:	e5c4c071 	strb	r12, [r4, #113]	; 0x71
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
   14e64:	e5c40066 	strb	r0, [r4, #102]	; 0x66
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14e68:	e1a00006 	mov	r0, r6
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
   14e6c:	e5c4b065 	strb	r11, [r4, #101]	; 0x65
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
        fs->currentsector.sector[41] = 0;
   14e70:	e5c45069 	strb	r5, [r4, #105]	; 0x69

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
   14e74:	e5c4506a 	strb	r5, [r4, #106]	; 0x6a
        fs->currentsector.sector[43] = 0;
   14e78:	e5c4506b 	strb	r5, [r4, #107]	; 0x6b

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
   14e7c:	e5c4a06d 	strb	r10, [r4, #109]	; 0x6d
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
   14e80:	e5c4806e 	strb	r8, [r4, #110]	; 0x6e
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
        fs->currentsector.sector[51] = 0;
   14e84:	e5c45073 	strb	r5, [r4, #115]	; 0x73

        // Drive number
        fs->currentsector.sector[64] = 0x00;
   14e88:	e5c45080 	strb	r5, [r4, #128]	; 0x80
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14e8c:	eb001275 	bl	19868 <strlen>
   14e90:	e1500005 	cmp	r0, r5
   14e94:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14e98:	c5d63000 	ldrbgt	r3, [r6]
            else
                fs->currentsector.sector[i+71] = ' ';
   14e9c:	d5c49087 	strble	r9, [r4, #135]	; 0x87

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14ea0:	c5c43087 	strbgt	r3, [r4, #135]	; 0x87
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14ea4:	eb00126f 	bl	19868 <strlen>
   14ea8:	e3500001 	cmp	r0, #1
   14eac:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14eb0:	c5d63001 	ldrbgt	r3, [r6, #1]
            else
                fs->currentsector.sector[i+71] = ' ';
   14eb4:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14eb8:	e5c43088 	strb	r3, [r4, #136]	; 0x88
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14ebc:	eb001269 	bl	19868 <strlen>
   14ec0:	e3500002 	cmp	r0, #2
   14ec4:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14ec8:	c5d63002 	ldrbgt	r3, [r6, #2]
            else
                fs->currentsector.sector[i+71] = ' ';
   14ecc:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14ed0:	e5c43089 	strb	r3, [r4, #137]	; 0x89
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14ed4:	eb001263 	bl	19868 <strlen>
   14ed8:	e3500003 	cmp	r0, #3
   14edc:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14ee0:	c5d63003 	ldrbgt	r3, [r6, #3]
            else
                fs->currentsector.sector[i+71] = ' ';
   14ee4:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14ee8:	e5c4308a 	strb	r3, [r4, #138]	; 0x8a
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14eec:	eb00125d 	bl	19868 <strlen>
   14ef0:	e3500004 	cmp	r0, #4
   14ef4:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14ef8:	c5d63004 	ldrbgt	r3, [r6, #4]
            else
                fs->currentsector.sector[i+71] = ' ';
   14efc:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14f00:	e5c4308b 	strb	r3, [r4, #139]	; 0x8b
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14f04:	eb001257 	bl	19868 <strlen>
   14f08:	e3500005 	cmp	r0, #5
   14f0c:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14f10:	c5d63005 	ldrbgt	r3, [r6, #5]
            else
                fs->currentsector.sector[i+71] = ' ';
   14f14:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14f18:	e5c4308c 	strb	r3, [r4, #140]	; 0x8c
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14f1c:	eb001251 	bl	19868 <strlen>
   14f20:	e3500006 	cmp	r0, #6
   14f24:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14f28:	c5d63006 	ldrbgt	r3, [r6, #6]
            else
                fs->currentsector.sector[i+71] = ' ';
   14f2c:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14f30:	e5c4308d 	strb	r3, [r4, #141]	; 0x8d
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14f34:	eb00124b 	bl	19868 <strlen>
   14f38:	e3500007 	cmp	r0, #7
   14f3c:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14f40:	c5d63007 	ldrbgt	r3, [r6, #7]
            else
                fs->currentsector.sector[i+71] = ' ';
   14f44:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14f48:	e5c4308e 	strb	r3, [r4, #142]	; 0x8e
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14f4c:	eb001245 	bl	19868 <strlen>
   14f50:	e3500008 	cmp	r0, #8
   14f54:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14f58:	c5d63008 	ldrbgt	r3, [r6, #8]
            else
                fs->currentsector.sector[i+71] = ' ';
   14f5c:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14f60:	e5c4308f 	strb	r3, [r4, #143]	; 0x8f
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14f64:	eb00123f 	bl	19868 <strlen>
   14f68:	e3500009 	cmp	r0, #9
   14f6c:	e1a00006 	mov	r0, r6
                fs->currentsector.sector[i+71] = name[i];
   14f70:	c5d63009 	ldrbgt	r3, [r6, #9]
            else
                fs->currentsector.sector[i+71] = ' ';
   14f74:	d3a03020 	movle	r3, #32

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
   14f78:	e5c43090 	strb	r3, [r4, #144]	; 0x90
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
   14f7c:	eb001239 	bl	19868 <strlen>
   14f80:	e350000a 	cmp	r0, #10
   14f84:	da00008d 	ble	151c0 <fatfs_format_fat32+0x5a8>
                fs->currentsector.sector[i+71] = name[i];
   14f88:	e5d6300a 	ldrb	r3, [r6, #10]
   14f8c:	e5c43091 	strb	r3, [r4, #145]	; 0x91
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
   14f90:	e3a02046 	mov	r2, #70	; 0x46
        fs->currentsector.sector[83] = 'A';
        fs->currentsector.sector[84] = 'T';
        fs->currentsector.sector[85] = '3';
   14f94:	e3a0c033 	mov	r12, #51	; 0x33
        fs->currentsector.sector[86] = '2';
        fs->currentsector.sector[87] = ' ';
   14f98:	e3a03020 	mov	r3, #32
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
   14f9c:	e5c42092 	strb	r2, [r4, #146]	; 0x92
        fs->currentsector.sector[83] = 'A';
        fs->currentsector.sector[84] = 'T';
        fs->currentsector.sector[85] = '3';
   14fa0:	e5c4c095 	strb	r12, [r4, #149]	; 0x95
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
        fs->currentsector.sector[83] = 'A';
        fs->currentsector.sector[84] = 'T';
   14fa4:	e3a02054 	mov	r2, #84	; 0x54
        fs->currentsector.sector[85] = '3';
        fs->currentsector.sector[86] = '2';
   14fa8:	e3a0c032 	mov	r12, #50	; 0x32
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
        fs->currentsector.sector[83] = 'A';
   14fac:	e3a06041 	mov	r6, #65	; 0x41
        fs->currentsector.sector[87] = ' ';
        fs->currentsector.sector[88] = ' ';
        fs->currentsector.sector[89] = ' ';

        // Signature
        fs->currentsector.sector[510] = 0x55;
   14fb0:	e3a0a055 	mov	r10, #85	; 0x55
        fs->currentsector.sector[511] = 0xAA;
   14fb4:	e3e08055 	mvn	r8, #85	; 0x55
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
        fs->currentsector.sector[83] = 'A';
        fs->currentsector.sector[84] = 'T';
   14fb8:	e5c42094 	strb	r2, [r4, #148]	; 0x94
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   14fbc:	e3a00000 	mov	r0, #0
        fs->currentsector.sector[82] = 'F';
        fs->currentsector.sector[83] = 'A';
        fs->currentsector.sector[84] = 'T';
        fs->currentsector.sector[85] = '3';
        fs->currentsector.sector[86] = '2';
        fs->currentsector.sector[87] = ' ';
   14fc0:	e5c43097 	strb	r3, [r4, #151]	; 0x97
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   14fc4:	e1a01007 	mov	r1, r7
        fs->currentsector.sector[83] = 'A';
        fs->currentsector.sector[84] = 'T';
        fs->currentsector.sector[85] = '3';
        fs->currentsector.sector[86] = '2';
        fs->currentsector.sector[87] = ' ';
        fs->currentsector.sector[88] = ' ';
   14fc8:	e5c43098 	strb	r3, [r4, #152]	; 0x98
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   14fcc:	e3a02001 	mov	r2, #1
        fs->currentsector.sector[84] = 'T';
        fs->currentsector.sector[85] = '3';
        fs->currentsector.sector[86] = '2';
        fs->currentsector.sector[87] = ' ';
        fs->currentsector.sector[88] = ' ';
        fs->currentsector.sector[89] = ' ';
   14fd0:	e5c43099 	strb	r3, [r4, #153]	; 0x99
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
        fs->currentsector.sector[83] = 'A';
   14fd4:	e5c46093 	strb	r6, [r4, #147]	; 0x93
        fs->currentsector.sector[84] = 'T';
        fs->currentsector.sector[85] = '3';
        fs->currentsector.sector[86] = '2';
   14fd8:	e5c4c096 	strb	r12, [r4, #150]	; 0x96
        fs->currentsector.sector[87] = ' ';
        fs->currentsector.sector[88] = ' ';
        fs->currentsector.sector[89] = ' ';

        // Signature
        fs->currentsector.sector[510] = 0x55;
   14fdc:	e5c4a23e 	strb	r10, [r4, #574]	; 0x23e
        fs->currentsector.sector[511] = 0xAA;
   14fe0:	e5c4823f 	strb	r8, [r4, #575]	; 0x23f
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   14fe4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   14fe8:	e12fff33 	blx	r3
   14fec:	e3500000 	cmp	r0, #0
   14ff0:	0affff4f 	beq	14d34 <fatfs_format_fat32+0x11c>
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
        return 0;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   14ff4:	e1d492ba 	ldrh	r9, [r4, #42]	; 0x2a
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   14ff8:	e3a01000 	mov	r1, #0

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   14ffc:	e5d4c02c 	ldrb	r12, [r4, #44]	; 0x2c
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   15000:	e3a02c02 	mov	r2, #512	; 0x200

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   15004:	e594e020 	ldr	lr, [r4, #32]
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   15008:	e1a00007 	mov	r0, r7
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
        return 0;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1500c:	e594301c 	ldr	r3, [r4, #28]
    fs->currentsector.sector[485] = 0x72;
    fs->currentsector.sector[486] = 0x41;
    fs->currentsector.sector[487] = 0x61;

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
   15010:	e3e05000 	mvn	r5, #0
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
        return 0;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   15014:	e0893003 	add	r3, r9, r3

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
   15018:	e1d491b8 	ldrh	r9, [r4, #24]
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
        return 0;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1501c:	e5843014 	str	r3, [r4, #20]

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   15020:	e0233c9e 	mla	r3, lr, r12, r3
   15024:	e5843004 	str	r3, [r4, #4]
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   15028:	eb0011c1 	bl	19734 <memset>

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
   1502c:	e3a02052 	mov	r2, #82	; 0x52
    fs->currentsector.sector[1] = 0x52;
    fs->currentsector.sector[2] = 0x61;
   15030:	e3a03061 	mov	r3, #97	; 0x61
    fs->currentsector.sector[3] = 0x41;

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
   15034:	e3a0c072 	mov	r12, #114	; 0x72
{
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
   15038:	e5c42040 	strb	r2, [r4, #64]	; 0x40
    fs->currentsector.sector[1] = 0x52;
   1503c:	e5c42041 	strb	r2, [r4, #65]	; 0x41

    // Signature
    fs->currentsector.sector[510] = 0x55;
    fs->currentsector.sector[511] = 0xAA;

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   15040:	e1a00009 	mov	r0, r9
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
    fs->currentsector.sector[1] = 0x52;
    fs->currentsector.sector[2] = 0x61;
   15044:	e5c43042 	strb	r3, [r4, #66]	; 0x42

    // Signature
    fs->currentsector.sector[510] = 0x55;
    fs->currentsector.sector[511] = 0xAA;

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   15048:	e1a01007 	mov	r1, r7

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
    fs->currentsector.sector[485] = 0x72;
    fs->currentsector.sector[486] = 0x41;
    fs->currentsector.sector[487] = 0x61;
   1504c:	e5c43227 	strb	r3, [r4, #551]	; 0x227

    // Signature
    fs->currentsector.sector[510] = 0x55;
    fs->currentsector.sector[511] = 0xAA;

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   15050:	e3a02001 	mov	r2, #1

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
    fs->currentsector.sector[1] = 0x52;
    fs->currentsector.sector[2] = 0x61;
    fs->currentsector.sector[3] = 0x41;
   15054:	e5c46043 	strb	r6, [r4, #67]	; 0x43

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
   15058:	e5c4c224 	strb	r12, [r4, #548]	; 0x224
    fs->currentsector.sector[485] = 0x72;
   1505c:	e5c4c225 	strb	r12, [r4, #549]	; 0x225
    fs->currentsector.sector[486] = 0x41;
   15060:	e5c46226 	strb	r6, [r4, #550]	; 0x226
    fs->currentsector.sector[487] = 0x61;

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
   15064:	e5c45228 	strb	r5, [r4, #552]	; 0x228
    fs->currentsector.sector[489] = 0xFF;
   15068:	e5c45229 	strb	r5, [r4, #553]	; 0x229
    fs->currentsector.sector[490] = 0xFF;
   1506c:	e5c4522a 	strb	r5, [r4, #554]	; 0x22a
    fs->currentsector.sector[491] = 0xFF;
   15070:	e5c4522b 	strb	r5, [r4, #555]	; 0x22b

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
   15074:	e5c4522c 	strb	r5, [r4, #556]	; 0x22c
    fs->currentsector.sector[493] = 0xFF;
   15078:	e5c4522d 	strb	r5, [r4, #557]	; 0x22d
    fs->currentsector.sector[494] = 0xFF;
   1507c:	e5c4522e 	strb	r5, [r4, #558]	; 0x22e
    fs->currentsector.sector[495] = 0xFF;
   15080:	e5c4522f 	strb	r5, [r4, #559]	; 0x22f

    // Signature
    fs->currentsector.sector[510] = 0x55;
   15084:	e5c4a23e 	strb	r10, [r4, #574]	; 0x23e
    fs->currentsector.sector[511] = 0xAA;
   15088:	e5c4823f 	strb	r8, [r4, #575]	; 0x23f

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   1508c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   15090:	e12fff33 	blx	r3
   15094:	e3500000 	cmp	r0, #0
   15098:	0affff25 	beq	14d34 <fatfs_format_fat32+0x11c>
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1509c:	e3a01000 	mov	r1, #0
   150a0:	e3a02c02 	mov	r2, #512	; 0x200
   150a4:	e1a00007 	mov	r0, r7
   150a8:	eb0011a1 	bl	19734 <memset>
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   150ac:	e3a0300f 	mov	r3, #15
   150b0:	e3e02007 	mvn	r2, #7
   150b4:	e5c42040 	strb	r2, [r4, #64]	; 0x40
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   150b8:	e1a01007 	mov	r1, r7
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   150bc:	e5c43043 	strb	r3, [r4, #67]	; 0x43
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   150c0:	e3a02001 	mov	r2, #1
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
   150c4:	e5c4304b 	strb	r3, [r4, #75]	; 0x4b
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   150c8:	e5c45041 	strb	r5, [r4, #65]	; 0x41
   150cc:	e5c45042 	strb	r5, [r4, #66]	; 0x42
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
   150d0:	e5c45044 	strb	r5, [r4, #68]	; 0x44
   150d4:	e5c45045 	strb	r5, [r4, #69]	; 0x45
   150d8:	e5c45046 	strb	r5, [r4, #70]	; 0x46
   150dc:	e5c45047 	strb	r5, [r4, #71]	; 0x47
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
   150e0:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   150e4:	e5c45049 	strb	r5, [r4, #73]	; 0x49
   150e8:	e5c4504a 	strb	r5, [r4, #74]	; 0x4a
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   150ec:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   150f0:	e5940014 	ldr	r0, [r4, #20]
   150f4:	e12fff33 	blx	r3
   150f8:	e3500000 	cmp	r0, #0
   150fc:	0affff0c 	beq	14d34 <fatfs_format_fat32+0x11c>
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   15100:	e3a02c02 	mov	r2, #512	; 0x200
   15104:	e1a00007 	mov	r0, r7
   15108:	e3a01000 	mov	r1, #0
   1510c:	eb001188 	bl	19734 <memset>
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   15110:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   15114:	e5942020 	ldr	r2, [r4, #32]
   15118:	e0030392 	mul	r3, r2, r3
   1511c:	e3530001 	cmp	r3, #1
   15120:	9a00000e 	bls	15160 <fatfs_format_fat32+0x548>
   15124:	e3a05001 	mov	r5, #1
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   15128:	e5940014 	ldr	r0, [r4, #20]
   1512c:	e3a02001 	mov	r2, #1
   15130:	e1a01007 	mov	r1, r7
   15134:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   15138:	e0850000 	add	r0, r5, r0
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1513c:	e0855002 	add	r5, r5, r2
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   15140:	e12fff33 	blx	r3
   15144:	e3500000 	cmp	r0, #0
   15148:	0afffef9 	beq	14d34 <fatfs_format_fat32+0x11c>
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1514c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   15150:	e5942020 	ldr	r2, [r4, #32]
   15154:	e0030392 	mul	r3, r2, r3
   15158:	e1550003 	cmp	r5, r3
   1515c:	3afffff1 	bcc	15128 <fatfs_format_fat32+0x510>
    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
   15160:	e5941008 	ldr	r1, [r4, #8]
   15164:	e1a00004 	mov	r0, r4
   15168:	ebffeafc 	bl	fd60 <fatfs_lba_of_cluster>
   1516c:	e5d46000 	ldrb	r6, [r4]
   15170:	e1a08000 	mov	r8, r0
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   15174:	e3a01000 	mov	r1, #0
   15178:	e1a00007 	mov	r0, r7
   1517c:	e3a02c02 	mov	r2, #512	; 0x200
   15180:	eb00116b 	bl	19734 <memset>

    for (i=0;i<count;i++)
   15184:	e3560000 	cmp	r6, #0
   15188:	13a05000 	movne	r5, #0
   1518c:	0a000009 	beq	151b8 <fatfs_format_fat32+0x5a0>
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   15190:	e0850008 	add	r0, r5, r8
   15194:	e3a02001 	mov	r2, #1
   15198:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1519c:	e1a01007 	mov	r1, r7
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   151a0:	e0855002 	add	r5, r5, r2
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   151a4:	e12fff33 	blx	r3
   151a8:	e3500000 	cmp	r0, #0
   151ac:	0afffee0 	beq	14d34 <fatfs_format_fat32+0x11c>
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   151b0:	e1560005 	cmp	r6, r5
   151b4:	cafffff5 	bgt	15190 <fatfs_format_fat32+0x578>

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
        return 0;

    return 1;
   151b8:	e3a00001 	mov	r0, #1
   151bc:	eafffedd 	b	14d38 <fatfs_format_fat32+0x120>
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
                fs->currentsector.sector[i+71] = name[i];
            else
                fs->currentsector.sector[i+71] = ' ';
   151c0:	e3a03020 	mov	r3, #32
   151c4:	e5c43091 	strb	r3, [r4, #145]	; 0x91
   151c8:	eaffff70 	b	14f90 <fatfs_format_fat32+0x378>

    fatfs_fat_init(fs);

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   151cc:	e1a00007 	mov	r0, r7
   151d0:	eafffed8 	b	14d38 <fatfs_format_fat32+0x120>

000151d4 <fatfs_format>:
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
   151d4:	e3510501 	cmp	r1, #4194304	; 0x400000
   151d8:	9a000000 	bls	151e0 <fatfs_format+0xc>
        return fatfs_format_fat16(fs, volume_sectors, name);
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
   151dc:	eafffe8d 	b	14c18 <fatfs_format_fat32>
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
        return fatfs_format_fat16(fs, volume_sectors, name);
   151e0:	eafffd5d 	b	1475c <fatfs_format_fat16>

000151e4 <fatfs_lfn_cache_init>:
    lfn->no_of_strings = 0;

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
   151e4:	e3510000 	cmp	r1, #0
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
    int i = 0;

    lfn->no_of_strings = 0;
   151e8:	e3a01000 	mov	r1, #0
   151ec:	e5c01105 	strb	r1, [r0, #261]	; 0x105

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
   151f0:	012fff1e 	bxeq	lr
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
   151f4:	e1a02001 	mov	r2, r1
   151f8:	e0813081 	add	r3, r1, r1, lsl #1
   151fc:	e0813103 	add	r3, r1, r3, lsl #2

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   15200:	e2811001 	add	r1, r1, #1
   15204:	e3510014 	cmp	r1, #20
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
   15208:	e080c003 	add	r12, r0, r3
   1520c:	e7c02003 	strb	r2, [r0, r3]
   15210:	e28c3002 	add	r3, r12, #2
   15214:	e5cc2001 	strb	r2, [r12, #1]
   15218:	e4c32001 	strb	r2, [r3], #1
   1521c:	e4c32001 	strb	r2, [r3], #1
   15220:	e4c32001 	strb	r2, [r3], #1
   15224:	e4c32001 	strb	r2, [r3], #1
   15228:	e4c32001 	strb	r2, [r3], #1
   1522c:	e4c32001 	strb	r2, [r3], #1
   15230:	e4c32001 	strb	r2, [r3], #1
   15234:	e4c32001 	strb	r2, [r3], #1
   15238:	e4c32001 	strb	r2, [r3], #1
   1523c:	e4c32001 	strb	r2, [r3], #1
   15240:	e5c32000 	strb	r2, [r3]

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   15244:	1affffeb 	bne	151f8 <fatfs_lfn_cache_init+0x14>
   15248:	e12fff1e 	bx	lr

0001524c <fatfs_lfn_cache_entry>:
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
   1524c:	e92d0030 	push	{r4, r5}
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
   15250:	e5d13000 	ldrb	r3, [r1]
   15254:	e203301f 	and	r3, r3, #31

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
   15258:	e3530014 	cmp	r3, #20
   1525c:	8a00007b 	bhi	15450 <fatfs_lfn_cache_entry+0x204>
        return ;

    // This is an error condition
    if (LFNIndex == 0)
   15260:	e3530000 	cmp	r3, #0
   15264:	0a000079 	beq	15450 <fatfs_lfn_cache_entry+0x204>
        return ;

    if (lfn->no_of_strings == 0)
   15268:	e5d02105 	ldrb	r2, [r0, #261]	; 0x105
   1526c:	e3520000 	cmp	r2, #0
        lfn->no_of_strings = LFNIndex;
   15270:	05c03105 	strbeq	r3, [r0, #261]	; 0x105

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
   15274:	e2433001 	sub	r3, r3, #1
   15278:	e1a02083 	lsl	r2, r3, #1
   1527c:	e5d1c001 	ldrb	r12, [r1, #1]
   15280:	e0824003 	add	r4, r2, r3
   15284:	e0834104 	add	r4, r3, r4, lsl #2
   15288:	e7c0c004 	strb	r12, [r0, r4]
   1528c:	e080c004 	add	r12, r0, r4
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
   15290:	e5d15003 	ldrb	r5, [r1, #3]
   15294:	e5cc5001 	strb	r5, [r12, #1]
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
   15298:	e5d15005 	ldrb	r5, [r1, #5]
   1529c:	e5cc5002 	strb	r5, [r12, #2]
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
   152a0:	e5d15007 	ldrb	r5, [r1, #7]
   152a4:	e5cc5003 	strb	r5, [r12, #3]
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
   152a8:	e5d15009 	ldrb	r5, [r1, #9]
   152ac:	e5cc5004 	strb	r5, [r12, #4]
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
   152b0:	e5d1500e 	ldrb	r5, [r1, #14]
   152b4:	e5cc5005 	strb	r5, [r12, #5]
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
   152b8:	e5d15010 	ldrb	r5, [r1, #16]
   152bc:	e5cc5006 	strb	r5, [r12, #6]
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
   152c0:	e5d15012 	ldrb	r5, [r1, #18]
   152c4:	e5cc5007 	strb	r5, [r12, #7]
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
   152c8:	e5d15014 	ldrb	r5, [r1, #20]
   152cc:	e5cc5008 	strb	r5, [r12, #8]
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
   152d0:	e5d15016 	ldrb	r5, [r1, #22]
   152d4:	e5cc5009 	strb	r5, [r12, #9]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
   152d8:	e5d15018 	ldrb	r5, [r1, #24]
   152dc:	e5cc500a 	strb	r5, [r12, #10]
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
   152e0:	e5d1501c 	ldrb	r5, [r1, #28]
   152e4:	e5cc500b 	strb	r5, [r12, #11]
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
   152e8:	e5d1101e 	ldrb	r1, [r1, #30]
   152ec:	e5cc100c 	strb	r1, [r12, #12]

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   152f0:	e7d01004 	ldrb	r1, [r0, r4]
   152f4:	e35100ff 	cmp	r1, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   152f8:	03a01020 	moveq	r1, #32
   152fc:	07c01004 	strbeq	r1, [r0, r4]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   15300:	e0821003 	add	r1, r2, r3
   15304:	e0831101 	add	r1, r3, r1, lsl #2
   15308:	e0801001 	add	r1, r0, r1
   1530c:	e5d1c001 	ldrb	r12, [r1, #1]
   15310:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   15314:	03a0c020 	moveq	r12, #32
   15318:	05c1c001 	strbeq	r12, [r1, #1]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   1531c:	e0821003 	add	r1, r2, r3
   15320:	e0831101 	add	r1, r3, r1, lsl #2
   15324:	e0801001 	add	r1, r0, r1
   15328:	e5d1c002 	ldrb	r12, [r1, #2]
   1532c:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   15330:	03a0c020 	moveq	r12, #32
   15334:	05c1c002 	strbeq	r12, [r1, #2]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   15338:	e0821003 	add	r1, r2, r3
   1533c:	e0831101 	add	r1, r3, r1, lsl #2
   15340:	e0801001 	add	r1, r0, r1
   15344:	e5d1c003 	ldrb	r12, [r1, #3]
   15348:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   1534c:	03a0c020 	moveq	r12, #32
   15350:	05c1c003 	strbeq	r12, [r1, #3]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   15354:	e0821003 	add	r1, r2, r3
   15358:	e0831101 	add	r1, r3, r1, lsl #2
   1535c:	e0801001 	add	r1, r0, r1
   15360:	e5d1c004 	ldrb	r12, [r1, #4]
   15364:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   15368:	03a0c020 	moveq	r12, #32
   1536c:	05c1c004 	strbeq	r12, [r1, #4]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   15370:	e0821003 	add	r1, r2, r3
   15374:	e0831101 	add	r1, r3, r1, lsl #2
   15378:	e0801001 	add	r1, r0, r1
   1537c:	e5d1c005 	ldrb	r12, [r1, #5]
   15380:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   15384:	03a0c020 	moveq	r12, #32
   15388:	05c1c005 	strbeq	r12, [r1, #5]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   1538c:	e0821003 	add	r1, r2, r3
   15390:	e0831101 	add	r1, r3, r1, lsl #2
   15394:	e0801001 	add	r1, r0, r1
   15398:	e5d1c006 	ldrb	r12, [r1, #6]
   1539c:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   153a0:	03a0c020 	moveq	r12, #32
   153a4:	05c1c006 	strbeq	r12, [r1, #6]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   153a8:	e0821003 	add	r1, r2, r3
   153ac:	e0831101 	add	r1, r3, r1, lsl #2
   153b0:	e0801001 	add	r1, r0, r1
   153b4:	e5d1c007 	ldrb	r12, [r1, #7]
   153b8:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   153bc:	03a0c020 	moveq	r12, #32
   153c0:	05c1c007 	strbeq	r12, [r1, #7]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   153c4:	e0821003 	add	r1, r2, r3
   153c8:	e0831101 	add	r1, r3, r1, lsl #2
   153cc:	e0801001 	add	r1, r0, r1
   153d0:	e5d1c008 	ldrb	r12, [r1, #8]
   153d4:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   153d8:	03a0c020 	moveq	r12, #32
   153dc:	05c1c008 	strbeq	r12, [r1, #8]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   153e0:	e0821003 	add	r1, r2, r3
   153e4:	e0831101 	add	r1, r3, r1, lsl #2
   153e8:	e0801001 	add	r1, r0, r1
   153ec:	e5d1c009 	ldrb	r12, [r1, #9]
   153f0:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   153f4:	03a0c020 	moveq	r12, #32
   153f8:	05c1c009 	strbeq	r12, [r1, #9]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   153fc:	e0821003 	add	r1, r2, r3
   15400:	e0831101 	add	r1, r3, r1, lsl #2
   15404:	e0801001 	add	r1, r0, r1
   15408:	e5d1c00a 	ldrb	r12, [r1, #10]
   1540c:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   15410:	03a0c020 	moveq	r12, #32
   15414:	05c1c00a 	strbeq	r12, [r1, #10]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   15418:	e0821003 	add	r1, r2, r3
   1541c:	e0831101 	add	r1, r3, r1, lsl #2
   15420:	e0822003 	add	r2, r2, r3
   15424:	e0833102 	add	r3, r3, r2, lsl #2
   15428:	e0801001 	add	r1, r0, r1
   1542c:	e5d1c00b 	ldrb	r12, [r1, #11]
   15430:	e0800003 	add	r0, r0, r3
   15434:	e35c00ff 	cmp	r12, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   15438:	03a0c020 	moveq	r12, #32
   1543c:	05c1c00b 	strbeq	r12, [r1, #11]
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
   15440:	e5d0300c 	ldrb	r3, [r0, #12]
   15444:	e35300ff 	cmp	r3, #255	; 0xff
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   15448:	03a03020 	moveq	r3, #32
   1544c:	05c0300c 	strbeq	r3, [r0, #12]
}
   15450:	e8bd0030 	pop	{r4, r5}
   15454:	e12fff1e 	bx	lr

00015458 <fatfs_lfn_cache_get>:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
   15458:	e5d03105 	ldrb	r3, [r0, #261]	; 0x105
   1545c:	e3530014 	cmp	r3, #20
   15460:	0a000006 	beq	15480 <fatfs_lfn_cache_get+0x28>
        lfn->Null = '\0';
    else if (lfn->no_of_strings)
   15464:	e3530000 	cmp	r3, #0
        lfn->String[lfn->no_of_strings][0] = '\0';
   15468:	10832083 	addne	r2, r3, r3, lsl #1
    else
        lfn->String[0][0] = '\0';
   1546c:	05c03000 	strbeq	r3, [r0]
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
        lfn->Null = '\0';
    else if (lfn->no_of_strings)
        lfn->String[lfn->no_of_strings][0] = '\0';
   15470:	10833102 	addne	r3, r3, r2, lsl #2
   15474:	13a02000 	movne	r2, #0
   15478:	17c02003 	strbne	r2, [r0, r3]
    else
        lfn->String[0][0] = '\0';

    return (char*)&lfn->String[0][0];
}
   1547c:	e12fff1e 	bx	lr
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
        lfn->Null = '\0';
   15480:	e3a03000 	mov	r3, #0
   15484:	e5c03104 	strb	r3, [r0, #260]	; 0x104
   15488:	e12fff1e 	bx	lr

0001548c <fatfs_entry_lfn_text>:
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
   1548c:	e5d0000b 	ldrb	r0, [r0, #11]
   15490:	e200000f 	and	r0, r0, #15
        return 1;
    else
        return 0;
}
   15494:	e250300f 	subs	r3, r0, #15
   15498:	e2730000 	rsbs	r0, r3, #0
   1549c:	e0b00003 	adcs	r0, r0, r3
   154a0:	e12fff1e 	bx	lr

000154a4 <fatfs_entry_lfn_invalid>:
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   154a4:	e5d03000 	ldrb	r3, [r0]
   154a8:	e3530000 	cmp	r3, #0
   154ac:	135300e5 	cmpne	r3, #229	; 0xe5
   154b0:	0a000006 	beq	154d0 <fatfs_entry_lfn_invalid+0x2c>
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   154b4:	e5d0300b 	ldrb	r3, [r0, #11]
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
   154b8:	e3530008 	cmp	r3, #8
   154bc:	0a000003 	beq	154d0 <fatfs_entry_lfn_invalid+0x2c>
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   154c0:	e3130006 	tst	r3, #6
   154c4:	03a00000 	moveq	r0, #0
   154c8:	13a00001 	movne	r0, #1
   154cc:	e12fff1e 	bx	lr
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
   154d0:	e3a00001 	mov	r0, #1
    else
        return 0;
}
   154d4:	e12fff1e 	bx	lr

000154d8 <fatfs_entry_lfn_exists>:
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   154d8:	e5d1300b 	ldrb	r3, [r1, #11]
   154dc:	e353000f 	cmp	r3, #15
   154e0:	0a00000c 	beq	15518 <fatfs_entry_lfn_exists+0x40>
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   154e4:	e5d12000 	ldrb	r2, [r1]
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   154e8:	e3520000 	cmp	r2, #0
   154ec:	0a00000b 	beq	15520 <fatfs_entry_lfn_exists+0x48>
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   154f0:	e35200e5 	cmp	r2, #229	; 0xe5
   154f4:	0a000007 	beq	15518 <fatfs_entry_lfn_exists+0x40>
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   154f8:	e3530008 	cmp	r3, #8
   154fc:	0a000005 	beq	15518 <fatfs_entry_lfn_exists+0x40>
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   15500:	e3130006 	tst	r3, #6
   15504:	1a000003 	bne	15518 <fatfs_entry_lfn_exists+0x40>
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   15508:	e5d00105 	ldrb	r0, [r0, #261]	; 0x105
   1550c:	e2900000 	adds	r0, r0, #0
   15510:	13a00001 	movne	r0, #1
   15514:	e12fff1e 	bx	lr
         (lfn->no_of_strings) )
        return 1;
    else
        return 0;
   15518:	e3a00000 	mov	r0, #0
}
   1551c:	e12fff1e 	bx	lr
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
        return 1;
    else
        return 0;
   15520:	e1a00002 	mov	r0, r2
   15524:	e12fff1e 	bx	lr

00015528 <fatfs_entry_sfn_only>:
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   15528:	e5d0300b 	ldrb	r3, [r0, #11]
   1552c:	e353000f 	cmp	r3, #15
   15530:	0a00000a 	beq	15560 <fatfs_entry_sfn_only+0x38>
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   15534:	e5d00000 	ldrb	r0, [r0]
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   15538:	e3500000 	cmp	r0, #0
   1553c:	012fff1e 	bxeq	lr
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   15540:	e35000e5 	cmp	r0, #229	; 0xe5
   15544:	0a000005 	beq	15560 <fatfs_entry_sfn_only+0x38>
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   15548:	e3530008 	cmp	r3, #8
   1554c:	0a000003 	beq	15560 <fatfs_entry_sfn_only+0x38>
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   15550:	e3130006 	tst	r3, #6
   15554:	13a00000 	movne	r0, #0
   15558:	03a00001 	moveq	r0, #1
   1555c:	e12fff1e 	bx	lr
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
    else
        return 0;
   15560:	e3a00000 	mov	r0, #0
}
   15564:	e12fff1e 	bx	lr

00015568 <fatfs_entry_is_dir>:
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
    if (entry->Attr & FILE_TYPE_DIR)
   15568:	e5d0000b 	ldrb	r0, [r0, #11]
        return 1;
    else
        return 0;
}
   1556c:	e7e00250 	ubfx	r0, r0, #4, #1
   15570:	e12fff1e 	bx	lr

00015574 <fatfs_entry_is_file>:
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
    if (entry->Attr & FILE_TYPE_FILE)
   15574:	e5d0000b 	ldrb	r0, [r0, #11]
        return 1;
    else
        return 0;
}
   15578:	e7e002d0 	ubfx	r0, r0, #5, #1
   1557c:	e12fff1e 	bx	lr

00015580 <fatfs_lfn_entries_required>:
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
   15580:	e92d4008 	push	{r3, lr}
    int length = (int)strlen(filename);
   15584:	eb0010b7 	bl	19868 <strlen>

    if (length)
   15588:	e3500000 	cmp	r0, #0
   1558c:	08bd8008 	popeq	{r3, pc}
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
   15590:	e30e3c4f 	movw	r3, #60495	; 0xec4f
   15594:	e280000c 	add	r0, r0, #12
   15598:	e3443ec4 	movt	r3, #20164	; 0x4ec4
   1559c:	e1a02fc0 	asr	r2, r0, #31
   155a0:	e0c01093 	smull	r1, r0, r3, r0
   155a4:	e0620140 	rsb	r0, r2, r0, asr #2
    else
        return 0;
}
   155a8:	e8bd8008 	pop	{r3, pc}

000155ac <fatfs_filename_to_lfn>:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   155ac:	e302c7c0 	movw	r12, #10176	; 0x27c0
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   155b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   155b4:	e340c002 	movt	r12, #2
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   155b8:	e1a04001 	mov	r4, r1
   155bc:	e1a08002 	mov	r8, r2
   155c0:	e1a07000 	mov	r7, r0
   155c4:	e1a0a003 	mov	r10, r3
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   155c8:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   155cc:	e24dd038 	sub	sp, sp, #56	; 0x38
    // 13 characters entries
    int length = (int)strlen(filename);
    int entriesRequired = fatfs_lfn_entries_required(filename);

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
   155d0:	e0886088 	add	r6, r8, r8, lsl #1
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   155d4:	e28de004 	add	lr, sp, #4
    // 13 characters entries
    int length = (int)strlen(filename);
    int entriesRequired = fatfs_lfn_entries_required(filename);

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
   155d8:	e0886106 	add	r6, r8, r6, lsl #2
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   155dc:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   155e0:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
   155e4:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   155e8:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
   155ec:	e59cc000 	ldr	r12, [r12]
   155f0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}

    // 13 characters entries
    int length = (int)strlen(filename);
   155f4:	e1a00007 	mov	r0, r7
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   155f8:	e58ec000 	str	r12, [lr]

    // 13 characters entries
    int length = (int)strlen(filename);
   155fc:	eb001099 	bl	19868 <strlen>
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
   15600:	e2505000 	subs	r5, r0, #0
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
   15604:	130e3c4f 	movwne	r3, #60495	; 0xec4f
   15608:	1285200c 	addne	r2, r5, #12
   1560c:	13443ec4 	movtne	r3, #20164	; 0x4ec4
   15610:	11e01002 	mvnne	r1, r2
   15614:	10c30293 	smullne	r0, r3, r3, r2
   15618:	11a01fa1 	lsrne	r1, r1, #31
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
   1561c:	03e09000 	mvneq	r9, #0

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
   15620:	e1a00004 	mov	r0, r4
   15624:	e3a02020 	mov	r2, #32
   15628:	10619143 	rsbne	r9, r1, r3, asr #2
   1562c:	e3a01000 	mov	r1, #0
   15630:	eb00103f 	bl	19734 <memset>

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
   15634:	e1580009 	cmp	r8, r9
   15638:	e2888001 	add	r8, r8, #1
   1563c:	03888040 	orreq	r8, r8, #64	; 0x40
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15640:	e1550006 	cmp	r5, r6

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));

    // LFN flag
    buffer[11] = 0x0F;
   15644:	e3a0300f 	mov	r3, #15

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
   15648:	e5c48000 	strb	r8, [r4]

    // LFN flag
    buffer[11] = 0x0F;
   1564c:	e5c4300b 	strb	r3, [r4, #11]

    // Checksum of short filename
    buffer[13] = sfnChk;
   15650:	e5c4a00d 	strb	r10, [r4, #13]

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15654:	ca000088 	bgt	1587c <fatfs_filename_to_lfn+0x2d0>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15658:	059d3004 	ldreq	r3, [sp, #4]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1565c:	11a03004 	movne	r3, r4
   15660:	159d1004 	ldrne	r1, [sp, #4]
   15664:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15668:	03a02000 	moveq	r2, #0
   1566c:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15670:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   15674:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15678:	e2863001 	add	r3, r6, #1
   1567c:	e1550003 	cmp	r5, r3
   15680:	ca000083 	bgt	15894 <fatfs_filename_to_lfn+0x2e8>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15684:	059d3008 	ldreq	r3, [sp, #8]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15688:	11a03004 	movne	r3, r4
   1568c:	159d1008 	ldrne	r1, [sp, #8]
   15690:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15694:	03a02000 	moveq	r2, #0
   15698:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1569c:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   156a0:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   156a4:	e2863002 	add	r3, r6, #2
   156a8:	e1550003 	cmp	r5, r3
   156ac:	ca00007e 	bgt	158ac <fatfs_filename_to_lfn+0x300>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   156b0:	059d300c 	ldreq	r3, [sp, #12]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   156b4:	11a03004 	movne	r3, r4
   156b8:	159d100c 	ldrne	r1, [sp, #12]
   156bc:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   156c0:	03a02000 	moveq	r2, #0
   156c4:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   156c8:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   156cc:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   156d0:	e2863003 	add	r3, r6, #3
   156d4:	e1550003 	cmp	r5, r3
   156d8:	ca000079 	bgt	158c4 <fatfs_filename_to_lfn+0x318>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   156dc:	059d3010 	ldreq	r3, [sp, #16]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   156e0:	11a03004 	movne	r3, r4
   156e4:	159d1010 	ldrne	r1, [sp, #16]
   156e8:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   156ec:	03a02000 	moveq	r2, #0
   156f0:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   156f4:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   156f8:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   156fc:	e2863004 	add	r3, r6, #4
   15700:	e1550003 	cmp	r5, r3
   15704:	ca000074 	bgt	158dc <fatfs_filename_to_lfn+0x330>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15708:	059d3014 	ldreq	r3, [sp, #20]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1570c:	11a03004 	movne	r3, r4
   15710:	159d1014 	ldrne	r1, [sp, #20]
   15714:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15718:	03a02000 	moveq	r2, #0
   1571c:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15720:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   15724:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15728:	e2863005 	add	r3, r6, #5
   1572c:	e1550003 	cmp	r5, r3
   15730:	ca00006f 	bgt	158f4 <fatfs_filename_to_lfn+0x348>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15734:	059d3018 	ldreq	r3, [sp, #24]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15738:	11a03004 	movne	r3, r4
   1573c:	159d1018 	ldrne	r1, [sp, #24]
   15740:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15744:	03a02000 	moveq	r2, #0
   15748:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1574c:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   15750:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15754:	e2863006 	add	r3, r6, #6
   15758:	e1550003 	cmp	r5, r3
   1575c:	ca00006a 	bgt	1590c <fatfs_filename_to_lfn+0x360>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15760:	059d301c 	ldreq	r3, [sp, #28]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15764:	11a03004 	movne	r3, r4
   15768:	159d101c 	ldrne	r1, [sp, #28]
   1576c:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15770:	03a02000 	moveq	r2, #0
   15774:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15778:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   1577c:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15780:	e2863007 	add	r3, r6, #7
   15784:	e1550003 	cmp	r5, r3
   15788:	ca000065 	bgt	15924 <fatfs_filename_to_lfn+0x378>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   1578c:	059d3020 	ldreq	r3, [sp, #32]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15790:	11a03004 	movne	r3, r4
   15794:	159d1020 	ldrne	r1, [sp, #32]
   15798:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   1579c:	03a02000 	moveq	r2, #0
   157a0:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   157a4:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   157a8:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   157ac:	e2863008 	add	r3, r6, #8
   157b0:	e1550003 	cmp	r5, r3
   157b4:	ca000060 	bgt	1593c <fatfs_filename_to_lfn+0x390>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   157b8:	059d3024 	ldreq	r3, [sp, #36]	; 0x24
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   157bc:	11a03004 	movne	r3, r4
   157c0:	159d1024 	ldrne	r1, [sp, #36]	; 0x24
   157c4:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   157c8:	03a02000 	moveq	r2, #0
   157cc:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   157d0:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   157d4:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   157d8:	e2863009 	add	r3, r6, #9
   157dc:	e1550003 	cmp	r5, r3
   157e0:	ca00005b 	bgt	15954 <fatfs_filename_to_lfn+0x3a8>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   157e4:	059d3028 	ldreq	r3, [sp, #40]	; 0x28
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   157e8:	11a03004 	movne	r3, r4
   157ec:	159d1028 	ldrne	r1, [sp, #40]	; 0x28
   157f0:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   157f4:	03a02000 	moveq	r2, #0
   157f8:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   157fc:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   15800:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15804:	e286300a 	add	r3, r6, #10
   15808:	e1550003 	cmp	r5, r3
   1580c:	ca000056 	bgt	1596c <fatfs_filename_to_lfn+0x3c0>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15810:	059d302c 	ldreq	r3, [sp, #44]	; 0x2c
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15814:	11a03004 	movne	r3, r4
   15818:	159d102c 	ldrne	r1, [sp, #44]	; 0x2c
   1581c:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15820:	03a02000 	moveq	r2, #0
   15824:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15828:	17e32001 	strbne	r2, [r3, r1]!
            buffer[nameIndexes[i]+1] = 0xFF;
   1582c:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15830:	e286300b 	add	r3, r6, #11
   15834:	e1550003 	cmp	r5, r3
   15838:	ca000051 	bgt	15984 <fatfs_filename_to_lfn+0x3d8>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1583c:	159d1030 	ldrne	r1, [sp, #48]	; 0x30
   15840:	13e02000 	mvnne	r2, #0
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15844:	059d3030 	ldreq	r3, [sp, #48]	; 0x30
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15848:	11a03004 	movne	r3, r4
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   1584c:	03a02000 	moveq	r2, #0
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15850:	e286600c 	add	r6, r6, #12
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   15854:	17e32001 	strbne	r2, [r3, r1]!
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   15858:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
   1585c:	15c32001 	strbne	r2, [r3, #1]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15860:	e1550006 	cmp	r5, r6
   15864:	da00004c 	ble	1599c <fatfs_filename_to_lfn+0x3f0>
            buffer[nameIndexes[i]] = filename[start+i];
   15868:	e7d72006 	ldrb	r2, [r7, r6]
   1586c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   15870:	e7c42003 	strb	r2, [r4, r3]
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
   15874:	e28dd038 	add	sp, sp, #56	; 0x38
   15878:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
   1587c:	e59d3004 	ldr	r3, [sp, #4]
   15880:	e7d72006 	ldrb	r2, [r7, r6]
   15884:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15888:	e2863001 	add	r3, r6, #1
   1588c:	e1550003 	cmp	r5, r3
   15890:	daffff7b 	ble	15684 <fatfs_filename_to_lfn+0xd8>
            buffer[nameIndexes[i]] = filename[start+i];
   15894:	e7d72003 	ldrb	r2, [r7, r3]
   15898:	e59d3008 	ldr	r3, [sp, #8]
   1589c:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   158a0:	e2863002 	add	r3, r6, #2
   158a4:	e1550003 	cmp	r5, r3
   158a8:	daffff80 	ble	156b0 <fatfs_filename_to_lfn+0x104>
            buffer[nameIndexes[i]] = filename[start+i];
   158ac:	e7d72003 	ldrb	r2, [r7, r3]
   158b0:	e59d300c 	ldr	r3, [sp, #12]
   158b4:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   158b8:	e2863003 	add	r3, r6, #3
   158bc:	e1550003 	cmp	r5, r3
   158c0:	daffff85 	ble	156dc <fatfs_filename_to_lfn+0x130>
            buffer[nameIndexes[i]] = filename[start+i];
   158c4:	e7d72003 	ldrb	r2, [r7, r3]
   158c8:	e59d3010 	ldr	r3, [sp, #16]
   158cc:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   158d0:	e2863004 	add	r3, r6, #4
   158d4:	e1550003 	cmp	r5, r3
   158d8:	daffff8a 	ble	15708 <fatfs_filename_to_lfn+0x15c>
            buffer[nameIndexes[i]] = filename[start+i];
   158dc:	e7d72003 	ldrb	r2, [r7, r3]
   158e0:	e59d3014 	ldr	r3, [sp, #20]
   158e4:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   158e8:	e2863005 	add	r3, r6, #5
   158ec:	e1550003 	cmp	r5, r3
   158f0:	daffff8f 	ble	15734 <fatfs_filename_to_lfn+0x188>
            buffer[nameIndexes[i]] = filename[start+i];
   158f4:	e7d72003 	ldrb	r2, [r7, r3]
   158f8:	e59d3018 	ldr	r3, [sp, #24]
   158fc:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15900:	e2863006 	add	r3, r6, #6
   15904:	e1550003 	cmp	r5, r3
   15908:	daffff94 	ble	15760 <fatfs_filename_to_lfn+0x1b4>
            buffer[nameIndexes[i]] = filename[start+i];
   1590c:	e7d72003 	ldrb	r2, [r7, r3]
   15910:	e59d301c 	ldr	r3, [sp, #28]
   15914:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15918:	e2863007 	add	r3, r6, #7
   1591c:	e1550003 	cmp	r5, r3
   15920:	daffff99 	ble	1578c <fatfs_filename_to_lfn+0x1e0>
            buffer[nameIndexes[i]] = filename[start+i];
   15924:	e7d72003 	ldrb	r2, [r7, r3]
   15928:	e59d3020 	ldr	r3, [sp, #32]
   1592c:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15930:	e2863008 	add	r3, r6, #8
   15934:	e1550003 	cmp	r5, r3
   15938:	daffff9e 	ble	157b8 <fatfs_filename_to_lfn+0x20c>
            buffer[nameIndexes[i]] = filename[start+i];
   1593c:	e7d72003 	ldrb	r2, [r7, r3]
   15940:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   15944:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15948:	e2863009 	add	r3, r6, #9
   1594c:	e1550003 	cmp	r5, r3
   15950:	daffffa3 	ble	157e4 <fatfs_filename_to_lfn+0x238>
            buffer[nameIndexes[i]] = filename[start+i];
   15954:	e7d72003 	ldrb	r2, [r7, r3]
   15958:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1595c:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15960:	e286300a 	add	r3, r6, #10
   15964:	e1550003 	cmp	r5, r3
   15968:	daffffa8 	ble	15810 <fatfs_filename_to_lfn+0x264>
            buffer[nameIndexes[i]] = filename[start+i];
   1596c:	e7d72003 	ldrb	r2, [r7, r3]
   15970:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   15974:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15978:	e286300b 	add	r3, r6, #11
   1597c:	e1550003 	cmp	r5, r3
   15980:	daffffad 	ble	1583c <fatfs_filename_to_lfn+0x290>
            buffer[nameIndexes[i]] = filename[start+i];
   15984:	e7d72003 	ldrb	r2, [r7, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15988:	e286600c 	add	r6, r6, #12
            buffer[nameIndexes[i]] = filename[start+i];
   1598c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15990:	e1550006 	cmp	r5, r6
            buffer[nameIndexes[i]] = filename[start+i];
   15994:	e7c42003 	strb	r2, [r4, r3]
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
   15998:	caffffb2 	bgt	15868 <fatfs_filename_to_lfn+0x2bc>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   1599c:	059d3034 	ldreq	r3, [sp, #52]	; 0x34
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   159a0:	13e03000 	mvnne	r3, #0
   159a4:	159d2034 	ldrne	r2, [sp, #52]	; 0x34
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
   159a8:	03a02000 	moveq	r2, #0
   159ac:	07c42003 	strbeq	r2, [r4, r3]
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   159b0:	17e43002 	strbne	r3, [r4, r2]!
            buffer[nameIndexes[i]+1] = 0xFF;
   159b4:	15c43001 	strbne	r3, [r4, #1]
   159b8:	eaffffad 	b	15874 <fatfs_filename_to_lfn+0x2c8>

000159bc <fatfs_sfn_create_entry>:
#endif
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
   159bc:	e183c000 	orr	r12, r3, r0
{
   159c0:	e92d0030 	push	{r4, r5}
#endif
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
   159c4:	e31c0003 	tst	r12, #3
   159c8:	e2835004 	add	r5, r3, #4
   159cc:	e280c004 	add	r12, r0, #4
   159d0:	13a04000 	movne	r4, #0
   159d4:	03a04001 	moveq	r4, #1
   159d8:	e153000c 	cmp	r3, r12
   159dc:	31500005 	cmpcc	r0, r5
   159e0:	33a0c000 	movcc	r12, #0
   159e4:	23a0c001 	movcs	r12, #1
   159e8:	e014c00c 	ands	r12, r4, r12
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];
   159ec:	15904000 	ldrne	r4, [r0]
   159f0:	13a05003 	movne	r5, #3
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   159f4:	13a0c008 	movne	r12, #8
#endif
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
   159f8:	03a0500b 	moveq	r5, #11
   159fc:	e08c5005 	add	r5, r12, r5
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];
   15a00:	15834000 	strne	r4, [r3]
   15a04:	15904004 	ldrne	r4, [r0, #4]
   15a08:	15834004 	strne	r4, [r3, #4]
   15a0c:	e7d0400c 	ldrb	r4, [r0, r12]
   15a10:	e7c3400c 	strb	r4, [r3, r12]
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   15a14:	e28cc001 	add	r12, r12, #1
   15a18:	e15c0005 	cmp	r12, r5
   15a1c:	1afffffa 	bne	15a0c <fatfs_sfn_create_entry+0x50>
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
    entry->WrtDate[0] = 0x20;

    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
   15a20:	e59d5008 	ldr	r5, [sp, #8]
    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
   15a24:	e3a00000 	mov	r0, #0
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
    entry->CrtDate[1] = 0x00;
    entry->CrtDate[0] = 0x20;
   15a28:	e3a0c020 	mov	r12, #32
    else
        entry->Attr = FILE_TYPE_DIR;

    entry->NTRes = 0x00;

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
   15a2c:	e1a04822 	lsr	r4, r2, #16
    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
   15a30:	e5c3000d 	strb	r0, [r3, #13]
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
    entry->WrtDate[0] = 0x20;

    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
   15a34:	e1550000 	cmp	r5, r0
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
   15a38:	e5c3000e 	strb	r0, [r3, #14]
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
    entry->WrtDate[0] = 0x20;

    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
   15a3c:	13a05010 	movne	r5, #16
   15a40:	01a0500c 	moveq	r5, r12
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
   15a44:	e5c3000f 	strb	r0, [r3, #15]
    entry->CrtDate[1] = 0x00;
   15a48:	e5c30011 	strb	r0, [r3, #17]
    entry->CrtDate[0] = 0x20;
   15a4c:	e5c3c010 	strb	r12, [r3, #16]
    entry->LstAccDate[1] = 0x00;
   15a50:	e5c30013 	strb	r0, [r3, #19]
    entry->LstAccDate[0] = 0x20;
   15a54:	e5c3c012 	strb	r12, [r3, #18]
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
   15a58:	e5c30016 	strb	r0, [r3, #22]
   15a5c:	e5c30017 	strb	r0, [r3, #23]
    entry->WrtDate[1] = 0x00;
   15a60:	e5c30019 	strb	r0, [r3, #25]
    entry->WrtDate[0] = 0x20;
   15a64:	e5c3c018 	strb	r12, [r3, #24]
   15a68:	e5c3500b 	strb	r5, [r3, #11]
    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
    else
        entry->Attr = FILE_TYPE_DIR;

    entry->NTRes = 0x00;
   15a6c:	e5c3000c 	strb	r0, [r3, #12]

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
   15a70:	e1c341b4 	strh	r4, [r3, #20]
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
   15a74:	e1c321ba 	strh	r2, [r3, #26]
    entry->FileSize = FAT_HTONL(size);
   15a78:	e583101c 	str	r1, [r3, #28]
}
   15a7c:	e8bd0030 	pop	{r4, r5}
   15a80:	e12fff1e 	bx	lr

00015a84 <fatfs_lfn_create_sfn>:
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
   15a84:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15a88:	e1a04001 	mov	r4, r1
   15a8c:	e24dd00c 	sub	sp, sp, #12
   15a90:	e1a06000 	mov	r6, r0
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   15a94:	e1a00001 	mov	r0, r1
   15a98:	eb000f72 	bl	19868 <strlen>

    // Invalid to start with .
    if (filename[0]=='.')
   15a9c:	e5d43000 	ldrb	r3, [r4]
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   15aa0:	e1a05000 	mov	r5, r0

    // Invalid to start with .
    if (filename[0]=='.')
   15aa4:	e353002e 	cmp	r3, #46	; 0x2e
        return 0;
   15aa8:	03a00000 	moveq	r0, #0
    char ext[3];
    int pos;
    int len = (int)strlen(filename);

    // Invalid to start with .
    if (filename[0]=='.')
   15aac:	0a000050 	beq	15bf4 <fatfs_lfn_create_sfn+0x170>
        return 0;

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
   15ab0:	e3a01020 	mov	r1, #32
   15ab4:	e3a0200b 	mov	r2, #11
   15ab8:	e1a00006 	mov	r0, r6
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   15abc:	e1a07005 	mov	r7, r5

    // Invalid to start with .
    if (filename[0]=='.')
        return 0;

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
   15ac0:	eb000f1b 	bl	19734 <memset>
    memset(ext, ' ', 3);
   15ac4:	e1a0000d 	mov	r0, sp
   15ac8:	e3a01020 	mov	r1, #32
   15acc:	e3a02003 	mov	r2, #3
   15ad0:	eb000f17 	bl	19734 <memset>

    // Find dot seperator
    for (i = 0; i< len; i++)
   15ad4:	e3550000 	cmp	r5, #0
   15ad8:	da000034 	ble	15bb0 <fatfs_lfn_create_sfn+0x12c>
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
    int i;
    int dotPos = -1;
   15adc:	e3e02000 	mvn	r2, #0

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
   15ae0:	e3a03000 	mov	r3, #0
   15ae4:	e7d4c003 	ldrb	r12, [r4, r3]
   15ae8:	e35c002e 	cmp	r12, #46	; 0x2e
   15aec:	01a02003 	moveq	r2, r3
   15af0:	e2833001 	add	r3, r3, #1
   15af4:	e1550003 	cmp	r5, r3
   15af8:	e1a01002 	mov	r1, r2
   15afc:	1afffff8 	bne	15ae4 <fatfs_lfn_create_sfn+0x60>
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
   15b00:	e3720001 	cmn	r2, #1
   15b04:	0a000017 	beq	15b68 <fatfs_lfn_create_sfn+0xe4>
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   15b08:	e2823001 	add	r3, r2, #1
            if (i<len)
   15b0c:	e1550003 	cmp	r5, r3
                ext[i-(dotPos+1)] = filename[i];
   15b10:	c7d40003 	ldrbgt	r0, [r4, r3]
   15b14:	c28dc008 	addgt	r12, sp, #8
   15b18:	c08c3003 	addgt	r3, r12, r3
   15b1c:	c0622003 	rsbgt	r2, r2, r3

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   15b20:	e2813002 	add	r3, r1, #2
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];
   15b24:	c5420009 	strbgt	r0, [r2, #-9]
    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
            if (i<len)
   15b28:	e1550003 	cmp	r5, r3
                ext[i-(dotPos+1)] = filename[i];
   15b2c:	c7d42003 	ldrbgt	r2, [r4, r3]
   15b30:	c28d0008 	addgt	r0, sp, #8
   15b34:	c0803003 	addgt	r3, r0, r3
   15b38:	c0613003 	rsbgt	r3, r1, r3
   15b3c:	c5432009 	strbgt	r2, [r3, #-9]

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   15b40:	e2813003 	add	r3, r1, #3
            if (i<len)
   15b44:	e1550003 	cmp	r5, r3
                ext[i-(dotPos+1)] = filename[i];
   15b48:	c7d42003 	ldrbgt	r2, [r4, r3]
   15b4c:	c28dc008 	addgt	r12, sp, #8
   15b50:	c08c3003 	addgt	r3, r12, r3
   15b54:	c0613003 	rsbgt	r3, r1, r3
   15b58:	c5432009 	strbgt	r2, [r3, #-9]
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
   15b5c:	e3510000 	cmp	r1, #0
   15b60:	c1a07001 	movgt	r7, r1
   15b64:	da000011 	ble	15bb0 <fatfs_lfn_create_sfn+0x12c>
   15b68:	e1a01004 	mov	r1, r4
        // Shorten the length to the dot position
        len = dotPos;
    }

    // Add filename part
    pos = 0;
   15b6c:	e3a02000 	mov	r2, #0
#endif
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
   15b70:	e0840007 	add	r0, r4, r7
   15b74:	ea000001 	b	15b80 <fatfs_lfn_create_sfn+0xfc>
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
   15b78:	e1510000 	cmp	r1, r0
   15b7c:	0a00000b 	beq	15bb0 <fatfs_lfn_create_sfn+0x12c>
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
   15b80:	e4d13001 	ldrb	r3, [r1], #1
   15b84:	e353002e 	cmp	r3, #46	; 0x2e
   15b88:	13530020 	cmpne	r3, #32
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
   15b8c:	e243c061 	sub	r12, r3, #97	; 0x61

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
   15b90:	0a000004 	beq	15ba8 <fatfs_lfn_create_sfn+0x124>
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
   15b94:	e35c0019 	cmp	r12, #25
                sfn_output[pos++] = filename[i] - 'a' + 'A';
   15b98:	e2434020 	sub	r4, r3, #32
   15b9c:	97c64002 	strbls	r4, [r6, r2]
            else
                sfn_output[pos++] = filename[i];
   15ba0:	87c63002 	strbhi	r3, [r6, r2]
   15ba4:	e2822001 	add	r2, r2, #1
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
   15ba8:	e3520008 	cmp	r2, #8
   15bac:	1afffff1 	bne	15b78 <fatfs_lfn_create_sfn+0xf4>
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   15bb0:	e5dd3000 	ldrb	r3, [sp]
   15bb4:	e2432061 	sub	r2, r3, #97	; 0x61
   15bb8:	e3520019 	cmp	r2, #25
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   15bbc:	92433020 	subls	r3, r3, #32
   15bc0:	e5c63008 	strb	r3, [r6, #8]
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   15bc4:	e5dd3001 	ldrb	r3, [sp, #1]
   15bc8:	e2432061 	sub	r2, r3, #97	; 0x61
   15bcc:	e3520019 	cmp	r2, #25
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   15bd0:	92433020 	subls	r3, r3, #32
   15bd4:	e5c63009 	strb	r3, [r6, #9]
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   15bd8:	e5dd3002 	ldrb	r3, [sp, #2]
   15bdc:	e2432061 	sub	r2, r3, #97	; 0x61
   15be0:	e3520019 	cmp	r2, #25
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   15be4:	92433020 	subls	r3, r3, #32
   15be8:	95c6300a 	strbls	r3, [r6, #10]
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   15bec:	8a000002 	bhi	15bfc <fatfs_lfn_create_sfn+0x178>
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
   15bf0:	e3a00001 	mov	r0, #1
}
   15bf4:	e28dd00c 	add	sp, sp, #12
   15bf8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
   15bfc:	e5c6300a 	strb	r3, [r6, #10]
   15c00:	eafffffa 	b	15bf0 <fatfs_lfn_create_sfn+0x16c>

00015c04 <fatfs_lfn_generate_tail>:
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   15c04:	e308369f 	movw	r3, #34463	; 0x869f
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   15c08:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   15c0c:	e3403001 	movt	r3, #1
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   15c10:	e24dd064 	sub	sp, sp, #100	; 0x64
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   15c14:	e1520003 	cmp	r2, r3
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   15c18:	e1a0c002 	mov	r12, r2
   15c1c:	e58d0024 	str	r0, [sp, #36]	; 0x24
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
        return 0;
   15c20:	83a00000 	movhi	r0, #0
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   15c24:	e58d1028 	str	r1, [sp, #40]	; 0x28
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   15c28:	9a000001 	bls	15c34 <fatfs_lfn_generate_tail+0x30>
    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);

    return 1;
}
   15c2c:	e28dd064 	add	sp, sp, #100	; 0x64
   15c30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   15c34:	e30257f4 	movw	r5, #10228	; 0x27f4

    // Build string backwards
    cp = outbuf;
   15c38:	e28db040 	add	r11, sp, #64	; 0x40
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   15c3c:	e3405002 	movt	r5, #2

    // Build string backwards
    cp = outbuf;
    do
    {
        *cp++ = digits[(int)(num % 10)];
   15c40:	e30c4ccd 	movw	r4, #52429	; 0xcccd
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   15c44:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
   15c48:	e28d604c 	add	r6, sp, #76	; 0x4c
   15c4c:	e1a0e00b 	mov	lr, r11

    // Build string backwards
    cp = outbuf;
    do
    {
        *cp++ = digits[(int)(num % 10)];
   15c50:	e34c4ccc 	movt	r4, #52428	; 0xcccc

    if (tailNum > 99999)
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   15c54:	e3a07000 	mov	r7, #0
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";

    // Build string backwards
    cp = outbuf;
   15c58:	e58db000 	str	r11, [sp]

    if (tailNum > 99999)
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   15c5c:	e58d7030 	str	r7, [sp, #48]	; 0x30
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   15c60:	e5955000 	ldr	r5, [r5]
   15c64:	e8a6000f 	stmia	r6!, {r0, r1, r2, r3}
    if (tailNum > 99999)
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
    tail_str[0] = '~';
   15c68:	e3a0307e 	mov	r3, #126	; 0x7e

    if (tailNum > 99999)
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   15c6c:	e58d7034 	str	r7, [sp, #52]	; 0x34
   15c70:	e58d7038 	str	r7, [sp, #56]	; 0x38
    tail_str[0] = '~';
   15c74:	e5cd3030 	strb	r3, [sp, #48]	; 0x30
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   15c78:	e5c65000 	strb	r5, [r6]

    // Build string backwards
    cp = outbuf;
    do
    {
        *cp++ = digits[(int)(num % 10)];
   15c7c:	e0830c94 	umull	r0, r3, r4, r12
   15c80:	e28d1060 	add	r1, sp, #96	; 0x60
   15c84:	e1a0000e 	mov	r0, lr
   15c88:	e1a031a3 	lsr	r3, r3, #3
   15c8c:	e0832103 	add	r2, r3, r3, lsl #2
   15c90:	e04c2082 	sub	r2, r12, r2, lsl #1
    }
    while ((num /= 10) > 0);
   15c94:	e253c000 	subs	r12, r3, #0

    // Build string backwards
    cp = outbuf;
    do
    {
        *cp++ = digits[(int)(num % 10)];
   15c98:	e0813002 	add	r3, r1, r2
   15c9c:	e5533014 	ldrb	r3, [r3, #-20]	; 0xffffffec
   15ca0:	e4ce3001 	strb	r3, [lr], #1
    }
    while ((num /= 10) > 0);
   15ca4:	1afffff4 	bne	15c7c <fatfs_lfn_generate_tail+0x78>

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   15ca8:	e59db000 	ldr	r11, [sp]
    cp = outbuf;
    do
    {
        *cp++ = digits[(int)(num % 10)];
    }
    while ((num /= 10) > 0);
   15cac:	e58d002c 	str	r0, [sp, #44]	; 0x2c

    *cp-- = 0;
   15cb0:	e5cec000 	strb	r12, [lr]

    // Copy in forwards
    while (cp >= outbuf)
   15cb4:	e150000b 	cmp	r0, r11
   15cb8:	3a000092 	bcc	15f08 <fatfs_lfn_generate_tail+0x304>
// sfn_input = Input short filename, spaced format & in upper case
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
   15cbc:	e2403001 	sub	r3, r0, #1
   15cc0:	e28de05e 	add	lr, sp, #94	; 0x5e
   15cc4:	e153000e 	cmp	r3, lr
   15cc8:	e28d203f 	add	r2, sp, #63	; 0x3f
   15ccc:	93a03000 	movls	r3, #0
   15cd0:	83a03001 	movhi	r3, #1
   15cd4:	e3720020 	cmn	r2, #32
   15cd8:	e58de004 	str	lr, [sp, #4]
   15cdc:	83a03000 	movhi	r3, #0
   15ce0:	e3530000 	cmp	r3, #0
   15ce4:	0a000084 	beq	15efc <fatfs_lfn_generate_tail+0x2f8>
   15ce8:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
   15cec:	e28d0051 	add	r0, sp, #81	; 0x51
   15cf0:	e58d0014 	str	r0, [sp, #20]
   15cf4:	e2411020 	sub	r1, r1, #32
   15cf8:	e58d1018 	str	r1, [sp, #24]
   15cfc:	e59d1018 	ldr	r1, [sp, #24]
   15d00:	e59d0004 	ldr	r0, [sp, #4]
   15d04:	e59d2014 	ldr	r2, [sp, #20]
   15d08:	e2413001 	sub	r3, r1, #1

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
        *s++ = *cp--;
   15d0c:	e5d1e01f 	ldrb	lr, [r1, #31]
   15d10:	e1500003 	cmp	r0, r3
   15d14:	e5d1301e 	ldrb	r3, [r1, #30]
   15d18:	e5d1b020 	ldrb	r11, [r1, #32]
   15d1c:	e2820020 	add	r0, r2, #32
   15d20:	e58de008 	str	lr, [sp, #8]
   15d24:	f551f002 	pld	[r1, #-2]
   15d28:	e58d300c 	str	r3, [sp, #12]
   15d2c:	e2413020 	sub	r3, r1, #32
   15d30:	e58d3018 	str	r3, [sp, #24]
   15d34:	f5d2f002 	pld	[r2, #2]
   15d38:	e5d13012 	ldrb	r3, [r1, #18]
   15d3c:	e542b020 	strb	r11, [r2, #-32]	; 0xffffffe0
   15d40:	e59db008 	ldr	r11, [sp, #8]
   15d44:	e5d1e01d 	ldrb	lr, [r1, #29]
   15d48:	e58d301c 	str	r3, [sp, #28]
   15d4c:	e542b01f 	strb	r11, [r2, #-31]	; 0xffffffe1
   15d50:	e5d13011 	ldrb	r3, [r1, #17]
   15d54:	e59db00c 	ldr	r11, [sp, #12]
   15d58:	e58de010 	str	lr, [sp, #16]
   15d5c:	e58d3020 	str	r3, [sp, #32]
   15d60:	e542b01e 	strb	r11, [r2, #-30]	; 0xffffffe2
   15d64:	e5d13010 	ldrb	r3, [r1, #16]
   15d68:	e59db010 	ldr	r11, [sp, #16]
   15d6c:	e5d1901c 	ldrb	r9, [r1, #28]
   15d70:	e5d1a01b 	ldrb	r10, [r1, #27]
   15d74:	e5d1801a 	ldrb	r8, [r1, #26]
   15d78:	e5d17019 	ldrb	r7, [r1, #25]
   15d7c:	e5d16018 	ldrb	r6, [r1, #24]
   15d80:	e5d15017 	ldrb	r5, [r1, #23]
   15d84:	e5d14016 	ldrb	r4, [r1, #22]
   15d88:	e5d1e015 	ldrb	lr, [r1, #21]
   15d8c:	e5d1c014 	ldrb	r12, [r1, #20]
   15d90:	e58d0014 	str	r0, [sp, #20]
   15d94:	e5d10013 	ldrb	r0, [r1, #19]
   15d98:	e542b01d 	strb	r11, [r2, #-29]	; 0xffffffe3
   15d9c:	e5423010 	strb	r3, [r2, #-16]
   15da0:	e5d13006 	ldrb	r3, [r1, #6]
   15da4:	e542e015 	strb	lr, [r2, #-21]	; 0xffffffeb
   15da8:	e5420013 	strb	r0, [r2, #-19]	; 0xffffffed
   15dac:	e59de01c 	ldr	lr, [sp, #28]
   15db0:	e59d0020 	ldr	r0, [sp, #32]
   15db4:	e58d3008 	str	r3, [sp, #8]
   15db8:	e5d13003 	ldrb	r3, [r1, #3]
   15dbc:	e542e012 	strb	lr, [r2, #-18]	; 0xffffffee
   15dc0:	e5420011 	strb	r0, [r2, #-17]	; 0xffffffef
   15dc4:	e5d1e007 	ldrb	lr, [r1, #7]
   15dc8:	e5d10004 	ldrb	r0, [r1, #4]
   15dcc:	e5d1b00f 	ldrb	r11, [r1, #15]
   15dd0:	e58d300c 	str	r3, [sp, #12]
   15dd4:	e5d13002 	ldrb	r3, [r1, #2]
   15dd8:	e542901c 	strb	r9, [r2, #-28]	; 0xffffffe4
   15ddc:	e542a01b 	strb	r10, [r2, #-27]	; 0xffffffe5
   15de0:	e542801a 	strb	r8, [r2, #-26]	; 0xffffffe6
   15de4:	e5427019 	strb	r7, [r2, #-25]	; 0xffffffe7
   15de8:	e5426018 	strb	r6, [r2, #-24]	; 0xffffffe8
   15dec:	e5425017 	strb	r5, [r2, #-23]	; 0xffffffe9
   15df0:	e5424016 	strb	r4, [r2, #-22]	; 0xffffffea
   15df4:	e542c014 	strb	r12, [r2, #-20]	; 0xffffffec
   15df8:	e5d1900e 	ldrb	r9, [r1, #14]
   15dfc:	e5d1a00d 	ldrb	r10, [r1, #13]
   15e00:	e5d1800c 	ldrb	r8, [r1, #12]
   15e04:	e5d1700b 	ldrb	r7, [r1, #11]
   15e08:	e5d1600a 	ldrb	r6, [r1, #10]
   15e0c:	e5d15009 	ldrb	r5, [r1, #9]
   15e10:	e5d14008 	ldrb	r4, [r1, #8]
   15e14:	e5d1c005 	ldrb	r12, [r1, #5]
   15e18:	e58d3010 	str	r3, [sp, #16]
   15e1c:	e5d13001 	ldrb	r3, [r1, #1]
   15e20:	e542b00f 	strb	r11, [r2, #-15]
   15e24:	e542e007 	strb	lr, [r2, #-7]
   15e28:	e59db008 	ldr	r11, [sp, #8]
   15e2c:	e5420004 	strb	r0, [r2, #-4]
   15e30:	e59de00c 	ldr	lr, [sp, #12]
   15e34:	e59d0010 	ldr	r0, [sp, #16]
   15e38:	e542900e 	strb	r9, [r2, #-14]
   15e3c:	e542a00d 	strb	r10, [r2, #-13]
   15e40:	e542800c 	strb	r8, [r2, #-12]
   15e44:	e542700b 	strb	r7, [r2, #-11]
   15e48:	e542600a 	strb	r6, [r2, #-10]
   15e4c:	e5425009 	strb	r5, [r2, #-9]
   15e50:	e5424008 	strb	r4, [r2, #-8]
   15e54:	e542b006 	strb	r11, [r2, #-6]
   15e58:	e542c005 	strb	r12, [r2, #-5]
   15e5c:	e542e003 	strb	lr, [r2, #-3]
   15e60:	e5420002 	strb	r0, [r2, #-2]
   15e64:	e5423001 	strb	r3, [r2, #-1]
   15e68:	3affffa3 	bcc	15cfc <fatfs_lfn_generate_tail+0xf8>
   15e6c:	e1a00001 	mov	r0, r1
   15e70:	e1a0c002 	mov	r12, r2
   15e74:	e28d1031 	add	r1, sp, #49	; 0x31
   15e78:	e59db000 	ldr	r11, [sp]
   15e7c:	e1a03000 	mov	r3, r0
   15e80:	e4532001 	ldrb	r2, [r3], #-1
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   15e84:	e15b0003 	cmp	r11, r3
        *s++ = *cp--;
   15e88:	e4cc2001 	strb	r2, [r12], #1
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   15e8c:	9afffffb 	bls	15e80 <fatfs_lfn_generate_tail+0x27c>
// sfn_input = Input short filename, spaced format & in upper case
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
   15e90:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
   15e94:	e26bc001 	rsb	r12, r11, #1
   15e98:	e08ec00c 	add	r12, lr, r12
   15e9c:	e081c00c 	add	r12, r1, r12
    memset(tail_str, 0x00, sizeof(tail_str));
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   15ea0:	e59db028 	ldr	r11, [sp, #40]	; 0x28

    // Copy in forwards
    while (cp >= outbuf)
        *s++ = *cp--;

    *s = 0;
   15ea4:	e3a01000 	mov	r1, #0

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
   15ea8:	e28d0030 	add	r0, sp, #48	; 0x30
    memset(tail_str, 0x00, sizeof(tail_str));
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   15eac:	e59b2000 	ldr	r2, [r11]
   15eb0:	e59b3004 	ldr	r3, [r11, #4]
   15eb4:	e59db024 	ldr	r11, [sp, #36]	; 0x24

    // Copy in forwards
    while (cp >= outbuf)
        *s++ = *cp--;

    *s = 0;
   15eb8:	e5cc1000 	strb	r1, [r12]
    memset(tail_str, 0x00, sizeof(tail_str));
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   15ebc:	e58b2000 	str	r2, [r11]
   15ec0:	e58b3004 	str	r3, [r11, #4]
   15ec4:	e59db028 	ldr	r11, [sp, #40]	; 0x28
   15ec8:	e1db20b8 	ldrh	r2, [r11, #8]
   15ecc:	e5db300a 	ldrb	r3, [r11, #10]
   15ed0:	e59db024 	ldr	r11, [sp, #36]	; 0x24
   15ed4:	e1cb20b8 	strh	r2, [r11, #8]
   15ed8:	e5cb300a 	strb	r3, [r11, #10]

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
   15edc:	eb000e61 	bl	19868 <strlen>
   15ee0:	e1a02000 	mov	r2, r0
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
   15ee4:	e2600008 	rsb	r0, r0, #8
   15ee8:	e28d1030 	add	r1, sp, #48	; 0x30
   15eec:	e08b0000 	add	r0, r11, r0
   15ef0:	eb000d8c 	bl	19528 <memcpy>

    return 1;
   15ef4:	e3a00001 	mov	r0, #1
   15ef8:	eaffff4b 	b	15c2c <fatfs_lfn_generate_tail+0x28>
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);
   15efc:	e28d1031 	add	r1, sp, #49	; 0x31
   15f00:	e1a0c001 	mov	r12, r1
   15f04:	eaffffdb 	b	15e78 <fatfs_lfn_generate_tail+0x274>
   15f08:	e28dc031 	add	r12, sp, #49	; 0x31
   15f0c:	eaffffe3 	b	15ea0 <fatfs_lfn_generate_tail+0x29c>

00015f10 <fatfs_total_path_levels>:
int fatfs_total_path_levels(char *path)
{
    int levels = 0;
    char expectedchar;

    if (!path)
   15f10:	e3500000 	cmp	r0, #0
   15f14:	0a000023 	beq	15fa8 <fatfs_total_path_levels+0x98>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   15f18:	e5d0c000 	ldrb	r12, [r0]
   15f1c:	e35c002f 	cmp	r12, #47	; 0x2f
   15f20:	0a00001e 	beq	15fa0 <fatfs_total_path_levels+0x90>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
   15f24:	e5d02001 	ldrb	r2, [r0, #1]
   15f28:	e352003a 	cmp	r2, #58	; 0x3a
   15f2c:	0a000002 	beq	15f3c <fatfs_total_path_levels+0x2c>
   15f30:	e5d02002 	ldrb	r2, [r0, #2]
   15f34:	e352005c 	cmp	r2, #92	; 0x5c
   15f38:	1a00001a 	bne	15fa8 <fatfs_total_path_levels+0x98>
    {
        expectedchar = '\\';
        path += 3;
   15f3c:	e2803003 	add	r3, r0, #3
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
    {
        expectedchar = '\\';
   15f40:	e3a0c05c 	mov	r12, #92	; 0x5c
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   15f44:	e5d32000 	ldrb	r2, [r3]
   15f48:	e3520000 	cmp	r2, #0
   15f4c:	13a00000 	movne	r0, #0
   15f50:	0a000014 	beq	15fa8 <fatfs_total_path_levels+0x98>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   15f54:	e15c0002 	cmp	r12, r2
   15f58:	0a000008 	beq	15f80 <fatfs_total_path_levels+0x70>
// Acceptable input formats are:
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
   15f5c:	e2833001 	add	r3, r3, #1
   15f60:	ea000001 	b	15f6c <fatfs_total_path_levels+0x5c>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   15f64:	e15c0002 	cmp	r12, r2
   15f68:	0a000005 	beq	15f84 <fatfs_total_path_levels+0x74>
            path++;
   15f6c:	e1a01003 	mov	r1, r3

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
   15f70:	e4d32001 	ldrb	r2, [r3], #1
   15f74:	e3520000 	cmp	r2, #0
   15f78:	1afffff9 	bne	15f64 <fatfs_total_path_levels+0x54>
   15f7c:	e12fff1e 	bx	lr
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   15f80:	e1a01003 	mov	r1, r3
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   15f84:	e5d12001 	ldrb	r2, [r1, #1]
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   15f88:	e2813001 	add	r3, r1, #1
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   15f8c:	e2800001 	add	r0, r0, #1
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   15f90:	e3520000 	cmp	r2, #0
   15f94:	1affffee 	bne	15f54 <fatfs_total_path_levels+0x44>
   15f98:	e2400001 	sub	r0, r0, #1
   15f9c:	e12fff1e 	bx	lr
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
   15fa0:	e2803001 	add	r3, r0, #1
   15fa4:	eaffffe6 	b	15f44 <fatfs_total_path_levels+0x34>
{
    int levels = 0;
    char expectedchar;

    if (!path)
        return -1;
   15fa8:	e3e00000 	mvn	r0, #0
        levels++;
    }

    // Subtract the file itself
    return levels-1;
}
   15fac:	e12fff1e 	bx	lr

00015fb0 <fatfs_get_substring>:
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
   15fb0:	e3500000 	cmp	r0, #0
   15fb4:	13530000 	cmpne	r3, #0
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
   15fb8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
   15fbc:	e1a09003 	mov	r9, r3
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
   15fc0:	e1a08001 	mov	r8, r1
   15fc4:	e1a0a002 	mov	r10, r2
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
   15fc8:	da00002b 	ble	1607c <fatfs_get_substring+0xcc>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   15fcc:	e5d04000 	ldrb	r4, [r0]
   15fd0:	e354002f 	cmp	r4, #47	; 0x2f
    {
        expectedchar = '/';
        path++;
   15fd4:	02806001 	addeq	r6, r0, #1
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   15fd8:	0a000007 	beq	15ffc <fatfs_get_substring+0x4c>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
   15fdc:	e5d03001 	ldrb	r3, [r0, #1]
   15fe0:	e353003a 	cmp	r3, #58	; 0x3a
   15fe4:	0a000002 	beq	15ff4 <fatfs_get_substring+0x44>
   15fe8:	e5d03002 	ldrb	r3, [r0, #2]
   15fec:	e353005c 	cmp	r3, #92	; 0x5c
   15ff0:	1a000021 	bne	1607c <fatfs_get_substring+0xcc>
    {
        expectedchar = '\\';
        path += 3;
   15ff4:	e2806003 	add	r6, r0, #3
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
    {
        expectedchar = '\\';
   15ff8:	e3a0405c 	mov	r4, #92	; 0x5c
    }
    else
        return -1;

    // Get string length of path
    pathlen = (int)strlen (path);
   15ffc:	e1a00006 	mov	r0, r6
   16000:	eb000e18 	bl	19868 <strlen>

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   16004:	e3500000 	cmp	r0, #0
   16008:	da00001d 	ble	16084 <fatfs_get_substring+0xd4>
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
    int i;
    int pathlen=0;
    int levels=0;
    int copypnt=0;
   1600c:	e3a07000 	mov	r7, #0
   16010:	e1a0c006 	mov	r12, r6
// fatfs_get_substring: Get a substring from 'path' which contains the folder
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
   16014:	e0865000 	add	r5, r6, r0
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   16018:	e2499001 	sub	r9, r9, #1
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
    int i;
    int pathlen=0;
    int levels=0;
   1601c:	e1a06007 	mov	r6, r7

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
   16020:	e4dc0001 	ldrb	r0, [r12], #1
   16024:	e1500004 	cmp	r0, r4
   16028:	02866001 	addeq	r6, r6, #1
   1602c:	0a000001 	beq	16038 <fatfs_get_substring+0x88>

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   16030:	e1580006 	cmp	r8, r6
   16034:	0a000008 	beq	1605c <fatfs_get_substring+0xac>

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   16038:	e15c0005 	cmp	r12, r5
   1603c:	1afffff7 	bne	16020 <fatfs_get_substring+0x70>
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
   16040:	e3a03000 	mov	r3, #0
   16044:	e7ca3007 	strb	r3, [r10, r7]

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
   16048:	e5da3000 	ldrb	r3, [r10]
        return 0;    // OK
   1604c:	e3530000 	cmp	r3, #0
   16050:	03e00000 	mvneq	r0, #0
   16054:	13a00000 	movne	r0, #0
   16058:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   1605c:	e1590007 	cmp	r9, r7
            output[copypnt++] = *path;
   16060:	e1a06008 	mov	r6, r8
   16064:	c7ca0007 	strbgt	r0, [r10, r7]
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   16068:	d1a06008 	movle	r6, r8
            output[copypnt++] = *path;
   1606c:	c2877001 	addgt	r7, r7, #1

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   16070:	e15c0005 	cmp	r12, r5
   16074:	1affffe9 	bne	16020 <fatfs_get_substring+0x70>
   16078:	eafffff0 	b	16040 <fatfs_get_substring+0x90>
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
        return -1;
   1607c:	e3e00000 	mvn	r0, #0
   16080:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   16084:	e3a07000 	mov	r7, #0
   16088:	eaffffec 	b	16040 <fatfs_get_substring+0x90>

0001608c <fatfs_split_path>:
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
   1608c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
int fatfs_total_path_levels(char *path)
{
    int levels = 0;
    char expectedchar;

    if (!path)
   16090:	e2509000 	subs	r9, r0, #0
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
   16094:	e1a08001 	mov	r8, r1
   16098:	e1a0a002 	mov	r10, r2
   1609c:	e1a0b003 	mov	r11, r3
   160a0:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
int fatfs_total_path_levels(char *path)
{
    int levels = 0;
    char expectedchar;

    if (!path)
   160a4:	0a00005e 	beq	16224 <fatfs_split_path+0x198>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   160a8:	e5d93000 	ldrb	r3, [r9]
   160ac:	e353002f 	cmp	r3, #47	; 0x2f
   160b0:	0a000060 	beq	16238 <fatfs_split_path+0x1ac>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
   160b4:	e5d92001 	ldrb	r2, [r9, #1]
   160b8:	e352003a 	cmp	r2, #58	; 0x3a
   160bc:	0a000002 	beq	160cc <fatfs_split_path+0x40>
   160c0:	e5d92002 	ldrb	r2, [r9, #2]
   160c4:	e352005c 	cmp	r2, #92	; 0x5c
   160c8:	1a000055 	bne	16224 <fatfs_split_path+0x198>
    {
        expectedchar = '\\';
        path += 3;
   160cc:	e289c003 	add	r12, r9, #3
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
    {
        expectedchar = '\\';
   160d0:	e3a0605c 	mov	r6, #92	; 0x5c
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   160d4:	e5dc2000 	ldrb	r2, [r12]
   160d8:	e3520000 	cmp	r2, #0
   160dc:	13a01000 	movne	r1, #0
   160e0:	0a00004f 	beq	16224 <fatfs_split_path+0x198>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   160e4:	e1560002 	cmp	r6, r2
   160e8:	0a000040 	beq	161f0 <fatfs_split_path+0x164>
// fatfs_split_path: Full path contains the passed in string.
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
   160ec:	e28cc001 	add	r12, r12, #1
   160f0:	ea000001 	b	160fc <fatfs_split_path+0x70>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   160f4:	e1560004 	cmp	r6, r4
   160f8:	0a00003d 	beq	161f4 <fatfs_split_path+0x168>
            path++;
   160fc:	e1a0500c 	mov	r5, r12

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
   16100:	e4dc4001 	ldrb	r4, [r12], #1
   16104:	e3540000 	cmp	r4, #0
   16108:	1afffff9 	bne	160f4 <fatfs_split_path+0x68>
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   1610c:	e2811001 	add	r1, r1, #1
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
   16110:	e3570000 	cmp	r7, #0
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
   16114:	e2416001 	sub	r6, r1, #1
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
   16118:	da000041 	ble	16224 <fatfs_split_path+0x198>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1611c:	e353002f 	cmp	r3, #47	; 0x2f
    {
        expectedchar = '/';
        path++;
   16120:	02895001 	addeq	r5, r9, #1
    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
   16124:	01a04003 	moveq	r4, r3
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   16128:	0a000007 	beq	1614c <fatfs_split_path+0xc0>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
   1612c:	e5d93001 	ldrb	r3, [r9, #1]
   16130:	e353003a 	cmp	r3, #58	; 0x3a
   16134:	0a000002 	beq	16144 <fatfs_split_path+0xb8>
   16138:	e5d93002 	ldrb	r3, [r9, #2]
   1613c:	e353005c 	cmp	r3, #92	; 0x5c
   16140:	1a000037 	bne	16224 <fatfs_split_path+0x198>
    {
        expectedchar = '\\';
        path += 3;
   16144:	e2895003 	add	r5, r9, #3
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
    {
        expectedchar = '\\';
   16148:	e3a0405c 	mov	r4, #92	; 0x5c
    }
    else
        return -1;

    // Get string length of path
    pathlen = (int)strlen (path);
   1614c:	e1a00005 	mov	r0, r5
   16150:	eb000dc4 	bl	19868 <strlen>

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   16154:	e3500000 	cmp	r0, #0
   16158:	da000039 	ble	16244 <fatfs_split_path+0x1b8>
   1615c:	e1a0c005 	mov	r12, r5
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
    int i;
    int pathlen=0;
    int levels=0;
    int copypnt=0;
   16160:	e3a05000 	mov	r5, #0
// fatfs_split_path: Full path contains the passed in string.
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
   16164:	e08c2000 	add	r2, r12, r0
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
    int i;
    int pathlen=0;
    int levels=0;
   16168:	e1a01005 	mov	r1, r5
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   1616c:	e2477001 	sub	r7, r7, #1

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
   16170:	e4dc3001 	ldrb	r3, [r12], #1
   16174:	e1530004 	cmp	r3, r4
   16178:	02811001 	addeq	r1, r1, #1
   1617c:	0a000001 	beq	16188 <fatfs_split_path+0xfc>

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   16180:	e1510006 	cmp	r1, r6
   16184:	0a000020 	beq	1620c <fatfs_split_path+0x180>

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   16188:	e15c0002 	cmp	r12, r2
   1618c:	1afffff7 	bne	16170 <fatfs_split_path+0xe4>
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
   16190:	e3a04000 	mov	r4, #0
   16194:	e7cb4005 	strb	r4, [r11, r5]

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
   16198:	e5db3000 	ldrb	r3, [r11]
   1619c:	e1530004 	cmp	r3, r4
   161a0:	0a00001f 	beq	16224 <fatfs_split_path+0x198>
    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
        return -1;

    // If root file
    if (levels == 0)
   161a4:	e3560000 	cmp	r6, #0
   161a8:	0a00001f 	beq	1622c <fatfs_split_path+0x1a0>
        path[0] = '\0';
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
   161ac:	e1a00009 	mov	r0, r9
   161b0:	eb000dac 	bl	19868 <strlen>
   161b4:	e1a05000 	mov	r5, r0
   161b8:	e1a0000b 	mov	r0, r11
   161bc:	eb000da9 	bl	19868 <strlen>
   161c0:	e0600005 	rsb	r0, r0, r5
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
   161c4:	e1a01009 	mov	r1, r9
   161c8:	e150000a 	cmp	r0, r10
   161cc:	b1a0a000 	movlt	r10, r0
   161d0:	a1a0a00a 	movge	r10, r10
   161d4:	e1a00008 	mov	r0, r8
   161d8:	e1a0200a 	mov	r2, r10
        path[strindex-1] = '\0';
   161dc:	e088800a 	add	r8, r8, r10
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
   161e0:	eb000cd0 	bl	19528 <memcpy>
        path[strindex-1] = '\0';
    }

    return 0;
   161e4:	e1a00004 	mov	r0, r4
        strindex = (int)strlen(full_path) - (int)strlen(filename);
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
        path[strindex-1] = '\0';
   161e8:	e5484001 	strb	r4, [r8, #-1]
   161ec:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   161f0:	e1a0500c 	mov	r5, r12
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   161f4:	e5d52001 	ldrb	r2, [r5, #1]
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   161f8:	e285c001 	add	r12, r5, #1
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   161fc:	e2811001 	add	r1, r1, #1
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   16200:	e3520000 	cmp	r2, #0
   16204:	1affffb6 	bne	160e4 <fatfs_split_path+0x58>
   16208:	eaffffc0 	b	16110 <fatfs_split_path+0x84>
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   1620c:	e1570005 	cmp	r7, r5
            output[copypnt++] = *path;
   16210:	c7cb3005 	strbgt	r3, [r11, r5]
   16214:	c2855001 	addgt	r5, r5, #1

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   16218:	e15c0002 	cmp	r12, r2
   1621c:	1affffd3 	bne	16170 <fatfs_split_path+0xe4>
   16220:	eaffffda 	b	16190 <fatfs_split_path+0x104>
    if (levels == -1)
        return -1;

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
        return -1;
   16224:	e3e00000 	mvn	r0, #0
   16228:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

    // If root file
    if (levels == 0)
        path[0] = '\0';
   1622c:	e5c86000 	strb	r6, [r8]

        memcpy(path, full_path, strindex);
        path[strindex-1] = '\0';
    }

    return 0;
   16230:	e1a00006 	mov	r0, r6
   16234:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
   16238:	e289c001 	add	r12, r9, #1
    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
   1623c:	e1a06003 	mov	r6, r3
   16240:	eaffffa3 	b	160d4 <fatfs_split_path+0x48>

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   16244:	e3a05000 	mov	r5, #0
   16248:	eaffffd0 	b	16190 <fatfs_split_path+0x104>

0001624c <fatfs_compare_names>:
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
   1624c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   16250:	e1a06000 	mov	r6, r0
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   16254:	e5d03000 	ldrb	r3, [r0]
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
   16258:	e24dd00c 	sub	sp, sp, #12
   1625c:	e1a07001 	mov	r7, r1
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   16260:	e3530000 	cmp	r3, #0
   16264:	0a000093 	beq	164b8 <fatfs_compare_names+0x26c>
   16268:	e1a02000 	mov	r2, r0
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
    int dotPos = -1;
   1626c:	e3e04000 	mvn	r4, #0
   16270:	e353002e 	cmp	r3, #46	; 0x2e
   16274:	00664002 	rsbeq	r4, r6, r2
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   16278:	e5f23001 	ldrb	r3, [r2, #1]!
   1627c:	e3530000 	cmp	r3, #0
   16280:	1afffffa 	bne	16270 <fatfs_compare_names+0x24>
   16284:	e5d70000 	ldrb	r0, [r7]
   16288:	e3500000 	cmp	r0, #0
   1628c:	0a00008b 	beq	164c0 <fatfs_compare_names+0x274>
   16290:	e1a03007 	mov	r3, r7
   16294:	e3e05000 	mvn	r5, #0
   16298:	e350002e 	cmp	r0, #46	; 0x2e
   1629c:	00675003 	rsbeq	r5, r7, r3
   162a0:	e5f30001 	ldrb	r0, [r3, #1]!
   162a4:	e3500000 	cmp	r0, #0
   162a8:	1afffffa 	bne	16298 <fatfs_compare_names+0x4c>
    ext2Pos = FileString_GetExtension(strB);

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
   162ac:	e3740001 	cmn	r4, #1
   162b0:	13a03000 	movne	r3, #0
   162b4:	03a03001 	moveq	r3, #1
   162b8:	e3750001 	cmn	r5, #1
   162bc:	03a03000 	moveq	r3, #0
   162c0:	e3530000 	cmp	r3, #0
   162c4:	1a000016 	bne	16324 <fatfs_compare_names+0xd8>
   162c8:	e3750001 	cmn	r5, #1
   162cc:	13a03000 	movne	r3, #0
   162d0:	03a03001 	moveq	r3, #1
        return 0;
    if ((ext2Pos==-1) && (ext1Pos!=-1))
   162d4:	e2942001 	adds	r2, r4, #1
   162d8:	13a02001 	movne	r2, #1
   162dc:	e0138002 	ands	r8, r3, r2
   162e0:	1a00000e 	bne	16320 <fatfs_compare_names+0xd4>
        return 0;

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
   162e4:	e3520000 	cmp	r2, #0
   162e8:	0a000069 	beq	16494 <fatfs_compare_names+0x248>
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   162ec:	e2849001 	add	r9, r4, #1
        ext2 = strB+ext2Pos+1;
   162f0:	e285b001 	add	r11, r5, #1

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   162f4:	e0869009 	add	r9, r6, r9
        ext2 = strB+ext2Pos+1;
   162f8:	e087b00b 	add	r11, r7, r11

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   162fc:	e1a00009 	mov	r0, r9

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   16300:	e58d4004 	str	r4, [sp, #4]
        ext2 = strB+ext2Pos+1;

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   16304:	eb000d57 	bl	19868 <strlen>
   16308:	e1a0a000 	mov	r10, r0
   1630c:	e1a0000b 	mov	r0, r11
   16310:	eb000d54 	bl	19868 <strlen>
   16314:	e15a0000 	cmp	r10, r0
    // If they both have extensions, compare them
    if (ext1Pos!=-1)
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
        ext2 = strB+ext2Pos+1;
   16318:	e58d5000 	str	r5, [sp]

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   1631c:	0a000002 	beq	1632c <fatfs_compare_names+0xe0>

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
        return 0;
   16320:	e3a00000 	mov	r0, #0
    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
        return 0;
    else
        return 1;
}
   16324:	e28dd00c 	add	sp, sp, #12
   16328:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   1632c:	e35a0000 	cmp	r10, #0
   16330:	0a000017 	beq	16394 <fatfs_compare_names+0x148>
   16334:	e1a03008 	mov	r3, r8
   16338:	ea000005 	b	16354 <fatfs_compare_names+0x108>
        // If different
        if (diff)
            return diff;

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
   1633c:	e3520000 	cmp	r2, #0
   16340:	0a000015 	beq	1639c <fatfs_compare_names+0x150>
   16344:	e3510000 	cmp	r1, #0
   16348:	0a000013 	beq	1639c <fatfs_compare_names+0x150>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   1634c:	e15a0003 	cmp	r10, r3
   16350:	0a000011 	beq	1639c <fatfs_compare_names+0x150>
    {
        a = *s1;
   16354:	e7d92003 	ldrb	r2, [r9, r3]
        b = *s2;
   16358:	e7db1003 	ldrb	r1, [r11, r3]
   1635c:	e2833001 	add	r3, r3, #1

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   16360:	e2420041 	sub	r0, r2, #65	; 0x41
            a+= 32;
   16364:	e2828020 	add	r8, r2, #32
    {
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   16368:	e3500019 	cmp	r0, #25
   1636c:	e1a0c002 	mov	r12, r2
            a+= 32;
        if ((b>='A') && (b<='Z'))
            b+= 32;
   16370:	e2810020 	add	r0, r1, #32
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
            a+= 32;
   16374:	96efc078 	uxtbls	r12, r8
        if ((b>='A') && (b<='Z'))
   16378:	e2418041 	sub	r8, r1, #65	; 0x41
            b+= 32;
   1637c:	e6ef0070 	uxtb	r0, r0
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
            a+= 32;
        if ((b>='A') && (b<='Z'))
   16380:	e3580019 	cmp	r8, #25
   16384:	81a00001 	movhi	r0, r1
            b+= 32;

        diff = a - b;

        // If different
        if (diff)
   16388:	e15c0000 	cmp	r12, r0
   1638c:	0affffea 	beq	1633c <fatfs_compare_names+0xf0>
   16390:	eaffffe2 	b	16320 <fatfs_compare_names+0xd4>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   16394:	e59d5000 	ldr	r5, [sp]
   16398:	e59d4004 	ldr	r4, [sp, #4]
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
   1639c:	e59d3004 	ldr	r3, [sp, #4]

    // Find last non white space
    while (strLen != 0)
   163a0:	e3540000 	cmp	r4, #0
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
   163a4:	e2432001 	sub	r2, r3, #1
   163a8:	e0863002 	add	r3, r6, r2

    // Find last non white space
    while (strLen != 0)
   163ac:	0a00000b 	beq	163e0 <fatfs_compare_names+0x194>
    {
        if (*strSrc == ' ')
   163b0:	e7d62002 	ldrb	r2, [r6, r2]
   163b4:	e3520020 	cmp	r2, #32
   163b8:	1a000008 	bne	163e0 <fatfs_compare_names+0x194>
}
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
   163bc:	e2641001 	rsb	r1, r4, #1
   163c0:	e0831001 	add	r1, r3, r1
   163c4:	ea000002 	b	163d4 <fatfs_compare_names+0x188>
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
   163c8:	e5732001 	ldrb	r2, [r3, #-1]!
   163cc:	e3520020 	cmp	r2, #32
   163d0:	1a000002 	bne	163e0 <fatfs_compare_names+0x194>
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   163d4:	e1530001 	cmp	r3, r1
    {
        if (*strSrc == ' ')
            length = (int)(strSrc - str);
   163d8:	e0664003 	rsb	r4, r6, r3
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   163dc:	1afffff9 	bne	163c8 <fatfs_compare_names+0x17c>
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
   163e0:	e59d3000 	ldr	r3, [sp]

    // Find last non white space
    while (strLen != 0)
   163e4:	e3550000 	cmp	r5, #0
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
   163e8:	e2432001 	sub	r2, r3, #1
   163ec:	e0873002 	add	r3, r7, r2

    // Find last non white space
    while (strLen != 0)
   163f0:	0a00000b 	beq	16424 <fatfs_compare_names+0x1d8>
    {
        if (*strSrc == ' ')
   163f4:	e7d72002 	ldrb	r2, [r7, r2]
   163f8:	e3520020 	cmp	r2, #32
   163fc:	1a000008 	bne	16424 <fatfs_compare_names+0x1d8>
}
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
   16400:	e2651001 	rsb	r1, r5, #1
   16404:	e0831001 	add	r1, r3, r1
   16408:	ea000002 	b	16418 <fatfs_compare_names+0x1cc>
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
   1640c:	e5732001 	ldrb	r2, [r3, #-1]!
   16410:	e3520020 	cmp	r2, #32
   16414:	1a000002 	bne	16424 <fatfs_compare_names+0x1d8>
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   16418:	e1530001 	cmp	r3, r1
    {
        if (*strSrc == ' ')
            length = (int)(strSrc - str);
   1641c:	e0675003 	rsb	r5, r7, r3
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   16420:	1afffff9 	bne	1640c <fatfs_compare_names+0x1c0>
    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
   16424:	e1540005 	cmp	r4, r5
   16428:	1affffbc 	bne	16320 <fatfs_compare_names+0xd4>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   1642c:	e3540000 	cmp	r4, #0
   16430:	0a000025 	beq	164cc <fatfs_compare_names+0x280>
   16434:	e3a03000 	mov	r3, #0
   16438:	ea000005 	b	16454 <fatfs_compare_names+0x208>
        // If different
        if (diff)
            return diff;

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
   1643c:	e3520000 	cmp	r2, #0
   16440:	0a000021 	beq	164cc <fatfs_compare_names+0x280>
   16444:	e3510000 	cmp	r1, #0
   16448:	0a00001f 	beq	164cc <fatfs_compare_names+0x280>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   1644c:	e1530004 	cmp	r3, r4
   16450:	0a00001d 	beq	164cc <fatfs_compare_names+0x280>
    {
        a = *s1;
   16454:	e7d62003 	ldrb	r2, [r6, r3]
        b = *s2;
   16458:	e7d71003 	ldrb	r1, [r7, r3]
   1645c:	e2833001 	add	r3, r3, #1

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   16460:	e2420041 	sub	r0, r2, #65	; 0x41
            a+= 32;
   16464:	e2825020 	add	r5, r2, #32
    {
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   16468:	e3500019 	cmp	r0, #25
   1646c:	e1a0c002 	mov	r12, r2
            a+= 32;
        if ((b>='A') && (b<='Z'))
            b+= 32;
   16470:	e2810020 	add	r0, r1, #32
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
            a+= 32;
   16474:	96efc075 	uxtbls	r12, r5
        if ((b>='A') && (b<='Z'))
   16478:	e2415041 	sub	r5, r1, #65	; 0x41
            b+= 32;
   1647c:	e6ef0070 	uxtb	r0, r0
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
            a+= 32;
        if ((b>='A') && (b<='Z'))
   16480:	e3550019 	cmp	r5, #25
   16484:	81a00001 	movhi	r0, r1
            b+= 32;

        diff = a - b;

        // If different
        if (diff)
   16488:	e15c0000 	cmp	r12, r0
   1648c:	0affffea 	beq	1643c <fatfs_compare_names+0x1f0>
   16490:	eaffffa2 	b	16320 <fatfs_compare_names+0xd4>
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
   16494:	e1a00006 	mov	r0, r6
   16498:	eb000cf2 	bl	19868 <strlen>
   1649c:	e58d0004 	str	r0, [sp, #4]
        file2Len = (int)strlen(strB);
   164a0:	e1a00007 	mov	r0, r7
   164a4:	eb000cef 	bl	19868 <strlen>
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
   164a8:	e59d4004 	ldr	r4, [sp, #4]
        file2Len = (int)strlen(strB);
   164ac:	e1a05000 	mov	r5, r0
   164b0:	e58d0000 	str	r0, [sp]
   164b4:	eaffffb8 	b	1639c <fatfs_compare_names+0x150>
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
    int dotPos = -1;
   164b8:	e3e04000 	mvn	r4, #0
   164bc:	eaffff70 	b	16284 <fatfs_compare_names+0x38>
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   164c0:	e3a03001 	mov	r3, #1
   164c4:	e3e05000 	mvn	r5, #0
   164c8:	eaffff81 	b	162d4 <fatfs_compare_names+0x88>

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
        return 0;
    else
        return 1;
   164cc:	e3a00001 	mov	r0, #1
   164d0:	eaffff93 	b	16324 <fatfs_compare_names+0xd8>

000164d4 <fatfs_string_ends_with_slash>:
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
   164d4:	e2503000 	subs	r3, r0, #0
   164d8:	0a00000d 	beq	16514 <fatfs_string_ends_with_slash+0x40>
    {
        while (*path)
   164dc:	e5d30000 	ldrb	r0, [r3]
   164e0:	e3500000 	cmp	r0, #0
   164e4:	012fff1e 	bxeq	lr
        {
            // Last character?
            if (!(*(path+1)))
   164e8:	e5d32001 	ldrb	r2, [r3, #1]
            {
                if (*path == '\\' || *path == '/')
                    return 1;
            }

            path++;
   164ec:	e2833001 	add	r3, r3, #1
    if (path)
    {
        while (*path)
        {
            // Last character?
            if (!(*(path+1)))
   164f0:	e3520000 	cmp	r2, #0
   164f4:	1a000004 	bne	1650c <fatfs_string_ends_with_slash+0x38>
            {
                if (*path == '\\' || *path == '/')
                    return 1;
   164f8:	e350005c 	cmp	r0, #92	; 0x5c
   164fc:	1350002f 	cmpne	r0, #47	; 0x2f
   16500:	13a00000 	movne	r0, #0
   16504:	03a00001 	moveq	r0, #1
   16508:	e12fff1e 	bx	lr
    if (path)
    {
        while (*path)
        {
            // Last character?
            if (!(*(path+1)))
   1650c:	e1a00002 	mov	r0, r2
   16510:	eafffff4 	b	164e8 <fatfs_string_ends_with_slash+0x14>

            path++;
        }
    }

    return 0;
   16514:	e1a00003 	mov	r0, r3
   16518:	e12fff1e 	bx	lr

0001651c <fatfs_get_sfn_display_name>:
}
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
   1651c:	e2411001 	sub	r1, r1, #1
{
    int len = 0;
   16520:	e3a02000 	mov	r2, #0
}
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
   16524:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    int len = 0;
    while (*in && len <= 11)
   16528:	e5f13001 	ldrb	r3, [r1, #1]!
   1652c:	e3530000 	cmp	r3, #0
        char a = *in++;

        if (a == ' ')
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   16530:	e243c041 	sub	r12, r3, #65	; 0x41
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   16534:	0a00000c 	beq	1656c <fatfs_get_sfn_display_name+0x50>
   16538:	e352000b 	cmp	r2, #11
   1653c:	ca00000a 	bgt	1656c <fatfs_get_sfn_display_name+0x50>
    {
        char a = *in++;

        if (a == ' ')
   16540:	e3530020 	cmp	r3, #32
   16544:	0afffff7 	beq	16528 <fatfs_get_sfn_display_name+0xc>
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   16548:	e35c0019 	cmp	r12, #25
            a+= 32;
   1654c:	e2834020 	add	r4, r3, #32
   16550:	96ef3074 	uxtbls	r3, r4

        *out++ = a;
        len++;
   16554:	e2822001 	add	r2, r2, #1
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
            a+= 32;

        *out++ = a;
   16558:	e4c03001 	strb	r3, [r0], #1
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   1655c:	e5f13001 	ldrb	r3, [r1, #1]!
   16560:	e3530000 	cmp	r3, #0
        char a = *in++;

        if (a == ' ')
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   16564:	e243c041 	sub	r12, r3, #65	; 0x41
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   16568:	1afffff2 	bne	16538 <fatfs_get_sfn_display_name+0x1c>

        *out++ = a;
        len++;
    }

    *out = '\0';
   1656c:	e3a03000 	mov	r3, #0
   16570:	e5c03000 	strb	r3, [r0]
    return 1;
}
   16574:	e3a00001 	mov	r0, #1
   16578:	e8bd0010 	ldmfd	sp!, {r4}
   1657c:	e12fff1e 	bx	lr

00016580 <fatfs_get_extension>:
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
   16580:	e92d0030 	push	{r4, r5}
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   16584:	e5d03000 	ldrb	r3, [r0]
   16588:	e3530000 	cmp	r3, #0
   1658c:	0a000027 	beq	16630 <fatfs_get_extension+0xb0>
   16590:	e1a0c000 	mov	r12, r0
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
    int dotPos = -1;
   16594:	e3e04000 	mvn	r4, #0
   16598:	e353002e 	cmp	r3, #46	; 0x2e
   1659c:	0060400c 	rsbeq	r4, r0, r12
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   165a0:	e5fc3001 	ldrb	r3, [r12, #1]!
   165a4:	e3530000 	cmp	r3, #0
   165a8:	1afffffa 	bne	16598 <fatfs_get_extension+0x18>
    int len = 0;

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);

    if (ext_pos > 0 && out && maxlen)
   165ac:	e3510000 	cmp	r1, #0
   165b0:	13540000 	cmpne	r4, #0
   165b4:	da00001d 	ble	16630 <fatfs_get_extension+0xb0>
   165b8:	e3520000 	cmp	r2, #0

        *out = '\0';
        return 1;
    }

    return 0;
   165bc:	01a00002 	moveq	r0, r2
    int len = 0;

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);

    if (ext_pos > 0 && out && maxlen)
   165c0:	0a000018 	beq	16628 <fatfs_get_extension+0xa8>
    {
        filename += ext_pos + 1;
   165c4:	e2844001 	add	r4, r4, #1

        while (*filename && len < (maxlen-1))
   165c8:	e7d0c004 	ldrb	r12, [r0, r4]
    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;
   165cc:	e0800004 	add	r0, r0, r4

        while (*filename && len < (maxlen-1))
   165d0:	e35c0000 	cmp	r12, #0
   165d4:	0a000010 	beq	1661c <fatfs_get_extension+0x9c>
   165d8:	e2422001 	sub	r2, r2, #1
   165dc:	e3520000 	cmp	r2, #0
   165e0:	da00000d 	ble	1661c <fatfs_get_extension+0x9c>
   165e4:	e1a05001 	mov	r5, r1
   165e8:	ea000001 	b	165f4 <fatfs_get_extension+0x74>
   165ec:	e1530002 	cmp	r3, r2
   165f0:	0a000009 	beq	1661c <fatfs_get_extension+0x9c>
        {
            char a = *filename++;

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
   165f4:	e24c1041 	sub	r1, r12, #65	; 0x41
                a+= 32;
   165f8:	e28c4020 	add	r4, r12, #32
        while (*filename && len < (maxlen-1))
        {
            char a = *filename++;

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
   165fc:	e3510019 	cmp	r1, #25
                a+= 32;

            *out++ = a;
            len++;
   16600:	e2833001 	add	r3, r3, #1
        {
            char a = *filename++;

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
                a+= 32;
   16604:	96efc074 	uxtbls	r12, r4

            *out++ = a;
   16608:	e4c5c001 	strb	r12, [r5], #1
   1660c:	e1a01005 	mov	r1, r5

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
   16610:	e5f0c001 	ldrb	r12, [r0, #1]!
   16614:	e35c0000 	cmp	r12, #0
   16618:	1afffff3 	bne	165ec <fatfs_get_extension+0x6c>
            *out++ = a;
            len++;
        }

        *out = '\0';
        return 1;
   1661c:	e3a00001 	mov	r0, #1

            *out++ = a;
            len++;
        }

        *out = '\0';
   16620:	e3a03000 	mov	r3, #0
   16624:	e5c13000 	strb	r3, [r1]
        return 1;
    }

    return 0;
}
   16628:	e8bd0030 	pop	{r4, r5}
   1662c:	e12fff1e 	bx	lr

        *out = '\0';
        return 1;
    }

    return 0;
   16630:	e1a00003 	mov	r0, r3
   16634:	eafffffb 	b	16628 <fatfs_get_extension+0xa8>

00016638 <fatfs_create_path_string>:
{
    int len = 0;
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
   16638:	e3510000 	cmp	r1, #0
   1663c:	13500000 	cmpne	r0, #0
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
   16640:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    int len = 0;
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
   16644:	03a0c000 	moveq	r12, #0
   16648:	13a0c001 	movne	r12, #1
   1664c:	0a000032 	beq	1671c <fatfs_create_path_string+0xe4>
   16650:	e3520000 	cmp	r2, #0
   16654:	13530000 	cmpne	r3, #0
   16658:	d3a0c000 	movle	r12, #0
   1665c:	c3a0c001 	movgt	r12, #1
   16660:	da00002d 	ble	1671c <fatfs_create_path_string+0xe4>
    {
        while (*path && len < (maxlen-2))
   16664:	e5d0c000 	ldrb	r12, [r0]
   16668:	e35c0000 	cmp	r12, #0
   1666c:	0a000031 	beq	16738 <fatfs_create_path_string+0x100>
   16670:	e2438002 	sub	r8, r3, #2
   16674:	e3580000 	cmp	r8, #0
   16678:	da00002a 	ble	16728 <fatfs_create_path_string+0xf0>
   1667c:	e1a05002 	mov	r5, r2
   16680:	e3a0702f 	mov	r7, #47	; 0x2f
   16684:	e3a04000 	mov	r4, #0
   16688:	ea000002 	b	16698 <fatfs_create_path_string+0x60>
   1668c:	e1540008 	cmp	r4, r8
   16690:	0a000008 	beq	166b8 <fatfs_create_path_string+0x80>
   16694:	e1a0c006 	mov	r12, r6
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
            *out++ = last;
   16698:	e4c5c001 	strb	r12, [r5], #1
    {
        while (*path && len < (maxlen-2))
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
   1669c:	e35c005c 	cmp	r12, #92	; 0x5c
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   166a0:	e5f06001 	ldrb	r6, [r0, #1]!
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
   166a4:	03a0705c 	moveq	r7, #92	; 0x5c
            *out++ = last;
            len++;
   166a8:	e2844001 	add	r4, r4, #1
        while (*path && len < (maxlen-2))
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
            *out++ = last;
   166ac:	e1a02005 	mov	r2, r5
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   166b0:	e3560000 	cmp	r6, #0
   166b4:	1afffff4 	bne	1668c <fatfs_create_path_string+0x54>
            *out++ = last;
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
   166b8:	e35c002f 	cmp	r12, #47	; 0x2f
   166bc:	135c005c 	cmpne	r12, #92	; 0x5c
   166c0:	1a00001a 	bne	16730 <fatfs_create_path_string+0xf8>
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   166c4:	e5d1c000 	ldrb	r12, [r1]
   166c8:	e35c0000 	cmp	r12, #0
   166cc:	0a00000e 	beq	1670c <fatfs_create_path_string+0xd4>
   166d0:	e2430001 	sub	r0, r3, #1
   166d4:	e1500004 	cmp	r0, r4
   166d8:	da00000b 	ble	1670c <fatfs_create_path_string+0xd4>
}
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
   166dc:	e0823003 	add	r3, r2, r3
   166e0:	e2820001 	add	r0, r2, #1
   166e4:	e0644003 	rsb	r4, r4, r3
   166e8:	ea000001 	b	166f4 <fatfs_create_path_string+0xbc>

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   166ec:	e1500004 	cmp	r0, r4
   166f0:	0a000005 	beq	1670c <fatfs_create_path_string+0xd4>
        {
            *out++ = *filename++;
   166f4:	e540c001 	strb	r12, [r0, #-1]
}
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
   166f8:	e1a02000 	mov	r2, r0

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   166fc:	e5f1c001 	ldrb	r12, [r1, #1]!
   16700:	e2800001 	add	r0, r0, #1
   16704:	e35c0000 	cmp	r12, #0
   16708:	1afffff7 	bne	166ec <fatfs_create_path_string+0xb4>
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
   1670c:	e3a03000 	mov	r3, #0

        return 1;
   16710:	e3a00001 	mov	r0, #1
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
   16714:	e5c23000 	strb	r3, [r2]

        return 1;
   16718:	ea000000 	b	16720 <fatfs_create_path_string+0xe8>
    }

    return 0;
   1671c:	e1a0000c 	mov	r0, r12
}
   16720:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
   16724:	e12fff1e 	bx	lr
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   16728:	e3a0702f 	mov	r7, #47	; 0x2f
   1672c:	e3a04000 	mov	r4, #0
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;
   16730:	e4c27001 	strb	r7, [r2], #1
   16734:	eaffffe2 	b	166c4 <fatfs_create_path_string+0x8c>
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   16738:	e3a0702f 	mov	r7, #47	; 0x2f
   1673c:	e1a0400c 	mov	r4, r12
   16740:	eafffffa 	b	16730 <fatfs_create_path_string+0xf8>

00016744 <fatfs_fat_read_sector>:
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
   16744:	e3023050 	movw	r3, #8272	; 0x2050
}
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
   16748:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
   1674c:	e7904003 	ldr	r4, [r0, r3]
}
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
   16750:	e1a07000 	mov	r7, r0
   16754:	e1a05001 	mov	r5, r1
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   16758:	e3540000 	cmp	r4, #0
   1675c:	13a01000 	movne	r1, #0
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
   16760:	13a06a02 	movne	r6, #8192	; 0x2000
            break;

        // End of list?
        if (pcur->next == NULL)
   16764:	1302200c 	movwne	r2, #8204	; 0x200c
            // Remove buffer from list
            if (last)
                last->next = NULL;
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
   16768:	11a00003 	movne	r0, r3
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   1676c:	1a000002 	bne	1677c <fatfs_fat_read_sector+0x38>
   16770:	ea000044 	b	16888 <fatfs_fat_read_sector+0x144>
   16774:	e1a01004 	mov	r1, r4
   16778:	e1a04003 	mov	r4, r3
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
   1677c:	e794c006 	ldr	r12, [r4, r6]
   16780:	e15c0005 	cmp	r12, r5
   16784:	e28c3010 	add	r3, r12, #16
   16788:	8a000001 	bhi	16794 <fatfs_fat_read_sector+0x50>
   1678c:	e1550003 	cmp	r5, r3
   16790:	3a000022 	bcc	16820 <fatfs_fat_read_sector+0xdc>
            break;

        // End of list?
        if (pcur->next == NULL)
   16794:	e7943002 	ldr	r3, [r4, r2]
   16798:	e3530000 	cmp	r3, #0
   1679c:	1afffff4 	bne	16774 <fatfs_fat_read_sector+0x30>
        {
            // Remove buffer from list
            if (last)
   167a0:	e3510000 	cmp	r1, #0
                last->next = NULL;
   167a4:	17813002 	strne	r3, [r1, r2]
            else
                fs->fat_buffer_head = NULL;
        }

        last = pcur;
        pcur = pcur->next;
   167a8:	e7943002 	ldr	r3, [r4, r2]
            // Remove buffer from list
            if (last)
                last->next = NULL;
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
   167ac:	07871000 	streq	r1, [r7, r0]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   167b0:	e3530000 	cmp	r3, #0
   167b4:	1affffee 	bne	16774 <fatfs_fat_read_sector+0x30>
    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
   167b8:	e3022004 	movw	r2, #8196	; 0x2004

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   167bc:	e3023050 	movw	r3, #8272	; 0x2050
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
   167c0:	e7942002 	ldr	r2, [r4, r2]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   167c4:	e7971003 	ldr	r1, [r7, r3]
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
   167c8:	e3520000 	cmp	r2, #0

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   167cc:	e302200c 	movw	r2, #8204	; 0x200c
   167d0:	e7841002 	str	r1, [r4, r2]
    fs->fat_buffer_head = pcur;
   167d4:	e7874003 	str	r4, [r7, r3]

    // Writeback sector if changed
    if (pcur->dirty)
   167d8:	1a000016 	bne	16838 <fatfs_fat_read_sector+0xf4>
   167dc:	e1a06004 	mov	r6, r4
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
   167e0:	e3a08a02 	mov	r8, #8192	; 0x2000

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
   167e4:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   167e8:	e1a00005 	mov	r0, r5
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
   167ec:	e7865008 	str	r5, [r6, r8]

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
   167f0:	e1a01006 	mov	r1, r6
   167f4:	e3a02010 	mov	r2, #16
   167f8:	e12fff33 	blx	r3
   167fc:	e3500000 	cmp	r0, #0
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
   16800:	01a04000 	moveq	r4, r0
    }

    pcur->ptr = pcur->sector;
    return pcur;
   16804:	11a04006 	movne	r4, r6

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
   16808:	03e03000 	mvneq	r3, #0
        return NULL;
    }

    pcur->ptr = pcur->sector;
   1680c:	13023008 	movwne	r3, #8200	; 0x2008

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
   16810:	07863008 	streq	r3, [r6, r8]
        return NULL;
    }

    pcur->ptr = pcur->sector;
   16814:	17866003 	strne	r6, [r6, r3]
    return pcur;
}
   16818:	e1a00004 	mov	r0, r4
   1681c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
   16820:	e06cc005 	rsb	r12, r12, r5
   16824:	e3023008 	movw	r3, #8200	; 0x2008
   16828:	e084c48c 	add	r12, r4, r12, lsl #9
        return NULL;
    }

    pcur->ptr = pcur->sector;
    return pcur;
}
   1682c:	e1a00004 	mov	r0, r4
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
   16830:	e784c003 	str	r12, [r4, r3]
        return NULL;
    }

    pcur->ptr = pcur->sector;
    return pcur;
}
   16834:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty)
        {
            if (fs->disk_io.write_media)
   16838:	e5973034 	ldr	r3, [r7, #52]	; 0x34
   1683c:	e3530000 	cmp	r3, #0
   16840:	0a00000b 	beq	16874 <fatfs_fat_read_sector+0x130>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
   16844:	e5972014 	ldr	r2, [r7, #20]

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   16848:	e5971020 	ldr	r1, [r7, #32]
        if (pcur->dirty)
        {
            if (fs->disk_io.write_media)
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
   1684c:	e062200c 	rsb	r2, r2, r12

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   16850:	e2820010 	add	r0, r2, #16
   16854:	e1500001 	cmp	r0, r1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   16858:	e1a0000c 	mov	r0, r12

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
   1685c:	80622001 	rsbhi	r2, r2, r1
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
                    sectors = FAT_BUFFER_SECTORS;
   16860:	93a02010 	movls	r2, #16
                else
                    sectors = fs->fat_sectors - offset;

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   16864:	e1a01004 	mov	r1, r4
   16868:	e12fff33 	blx	r3
   1686c:	e3500000 	cmp	r0, #0
   16870:	0a00000a 	beq	168a0 <fatfs_fat_read_sector+0x15c>
                    return 0;
            }

            pcur->dirty = 0;
   16874:	e3a02000 	mov	r2, #0
   16878:	e3023004 	movw	r3, #8196	; 0x2004
   1687c:	e7842003 	str	r2, [r4, r3]
   16880:	e1a06004 	mov	r6, r4
   16884:	eaffffd5 	b	167e0 <fatfs_fat_read_sector+0x9c>
    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
   16888:	e3022004 	movw	r2, #8196	; 0x2004
   1688c:	e5926000 	ldr	r6, [r2]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   16890:	e5824008 	str	r4, [r2, #8]
    fs->fat_buffer_head = pcur;
   16894:	e7874003 	str	r4, [r7, r3]

    // Writeback sector if changed
    if (pcur->dirty)
   16898:	e3560000 	cmp	r6, #0
   1689c:	0affffcf 	beq	167e0 <fatfs_fat_read_sector+0x9c>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;
   168a0:	e3a04000 	mov	r4, #0
   168a4:	eaffffdb 	b	16818 <fatfs_fat_read_sector+0xd4>

000168a8 <fatfs_fat_init>:

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   168a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   168ac:	e3043054 	movw	r3, #16468	; 0x4054
void fatfs_fat_init(struct fatfs *fs)
{
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
   168b0:	e3a05000 	mov	r5, #0
   168b4:	e3026050 	movw	r6, #8272	; 0x2050

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   168b8:	e3e08000 	mvn	r8, #0
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   168bc:	e280bd81 	add	r11, r0, #8256	; 0x2040

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   168c0:	e1a04000 	mov	r4, r0
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   168c4:	e3a07a02 	mov	r7, #8192	; 0x2000
void fatfs_fat_init(struct fatfs *fs)
{
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
   168c8:	e7805006 	str	r5, [r0, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   168cc:	e28bb014 	add	r11, r11, #20
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   168d0:	e7808003 	str	r8, [r0, r3]
        fs->fat_buffers[i].dirty = 0;
   168d4:	e2833004 	add	r3, r3, #4

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   168d8:	e24dd00c 	sub	sp, sp, #12
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   168dc:	e1a01005 	mov	r1, r5
   168e0:	e1a02007 	mov	r2, r7
   168e4:	e1a0000b 	mov	r0, r11

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   168e8:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   168ec:	e284a901 	add	r10, r4, #16384	; 0x4000
   168f0:	eb000b8f 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   168f4:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   168f8:	e304305c 	movw	r3, #16476	; 0x405c
   168fc:	e7845003 	str	r5, [r4, r3]

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16900:	e2833004 	add	r3, r3, #4
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16904:	e28aa064 	add	r10, r10, #100	; 0x64
   16908:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   1690c:	e784c003 	str	r12, [r4, r3]
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16910:	e3063064 	movw	r3, #24676	; 0x6064
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16914:	e784b006 	str	r11, [r4, r6]

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16918:	e306c068 	movw	r12, #24680	; 0x6068
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   1691c:	e7848003 	str	r8, [r4, r3]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16920:	e2843902 	add	r3, r4, #32768	; 0x8000
   16924:	e2833084 	add	r3, r3, #132	; 0x84

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16928:	e784500c 	str	r5, [r4, r12]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   1692c:	e1a02007 	mov	r2, r7
   16930:	e1a0000a 	mov	r0, r10
   16934:	e58d3004 	str	r3, [sp, #4]
   16938:	e2849a06 	add	r9, r4, #24576	; 0x6000
   1693c:	eb000b7c 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16940:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16944:	e306006c 	movw	r0, #24684	; 0x606c
   16948:	e7845000 	str	r5, [r4, r0]

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   1694c:	e2800004 	add	r0, r0, #4
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16950:	e2899074 	add	r9, r9, #116	; 0x74
   16954:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16958:	e784c000 	str	r12, [r4, r0]
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   1695c:	e308c074 	movw	r12, #32884	; 0x8074
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16960:	e784a006 	str	r10, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16964:	e1a02007 	mov	r2, r7
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16968:	e784800c 	str	r8, [r4, r12]
        fs->fat_buffers[i].dirty = 0;
   1696c:	e28cc004 	add	r12, r12, #4
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16970:	e1a00009 	mov	r0, r9

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16974:	e784500c 	str	r5, [r4, r12]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16978:	eb000b6d 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   1697c:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16980:	e308007c 	movw	r0, #32892	; 0x807c
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16984:	e59d3004 	ldr	r3, [sp, #4]
   16988:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;
   1698c:	e7845000 	str	r5, [r4, r0]

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16990:	e2800004 	add	r0, r0, #4
   16994:	e784c000 	str	r12, [r4, r0]
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16998:	e30ac084 	movw	r12, #41092	; 0xa084
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   1699c:	e7849006 	str	r9, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   169a0:	e1a02007 	mov	r2, r7
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   169a4:	e784800c 	str	r8, [r4, r12]
        fs->fat_buffers[i].dirty = 0;
   169a8:	e28cc004 	add	r12, r12, #4
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   169ac:	e1a00003 	mov	r0, r3

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   169b0:	e784500c 	str	r5, [r4, r12]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   169b4:	eb000b5e 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   169b8:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   169bc:	e30a008c 	movw	r0, #41100	; 0xa08c

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   169c0:	e59d3004 	ldr	r3, [sp, #4]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   169c4:	e284ba0a 	add	r11, r4, #40960	; 0xa000
        fs->fat_buffers[i].ptr = NULL;
   169c8:	e7845000 	str	r5, [r4, r0]

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   169cc:	e2800004 	add	r0, r0, #4
   169d0:	e784c000 	str	r12, [r4, r0]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   169d4:	e28bb094 	add	r11, r11, #148	; 0x94
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   169d8:	e7843006 	str	r3, [r4, r6]
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   169dc:	e30c3094 	movw	r3, #49300	; 0xc094
   169e0:	e7848003 	str	r8, [r4, r3]
        fs->fat_buffers[i].dirty = 0;
   169e4:	e2833004 	add	r3, r3, #4
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   169e8:	e1a01005 	mov	r1, r5
   169ec:	e1a02007 	mov	r2, r7
   169f0:	e1a0000b 	mov	r0, r11

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   169f4:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   169f8:	eb000b4d 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   169fc:	e7940006 	ldr	r0, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16a00:	e30c309c 	movw	r3, #49308	; 0xc09c
   16a04:	e7845003 	str	r5, [r4, r3]

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16a08:	e2833004 	add	r3, r3, #4
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a0c:	e284a903 	add	r10, r4, #49152	; 0xc000
   16a10:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16a14:	e7840003 	str	r0, [r4, r3]
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16a18:	e30e30a4 	movw	r3, #57508	; 0xe0a4
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16a1c:	e784b006 	str	r11, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a20:	e28aa0a4 	add	r10, r10, #164	; 0xa4
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16a24:	e7848003 	str	r8, [r4, r3]
        fs->fat_buffers[i].dirty = 0;
   16a28:	e2833004 	add	r3, r3, #4
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a2c:	e1a02007 	mov	r2, r7
   16a30:	e1a0000a 	mov	r0, r10

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16a34:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a38:	e2849a0e 	add	r9, r4, #57344	; 0xe000
   16a3c:	eb000b3c 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16a40:	e794b006 	ldr	r11, [r4, r6]
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16a44:	e3a0c0b4 	mov	r12, #180	; 0xb4
        fs->fat_buffers[i].dirty = 0;
   16a48:	e3a030b8 	mov	r3, #184	; 0xb8
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16a4c:	e30ee0b0 	movw	lr, #57520	; 0xe0b0
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a50:	e28990b4 	add	r9, r9, #180	; 0xb4
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16a54:	e340c001 	movt	r12, #1
        fs->fat_buffers[i].dirty = 0;
   16a58:	e3403001 	movt	r3, #1
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16a5c:	e30e00ac 	movw	r0, #57516	; 0xe0ac

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16a60:	e784a006 	str	r10, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a64:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16a68:	e784b00e 	str	r11, [r4, lr]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a6c:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;
   16a70:	e7845000 	str	r5, [r4, r0]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a74:	e1a00009 	mov	r0, r9
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16a78:	e784800c 	str	r8, [r4, r12]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a7c:	e284a801 	add	r10, r4, #65536	; 0x10000

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16a80:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16a84:	e28aa0c4 	add	r10, r10, #196	; 0xc4
   16a88:	eb000b29 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16a8c:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16a90:	e3a010bc 	mov	r1, #188	; 0xbc

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16a94:	e3a020c0 	mov	r2, #192	; 0xc0
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16a98:	e30200c4 	movw	r0, #8388	; 0x20c4
        fs->fat_buffers[i].dirty = 0;
   16a9c:	e30230c8 	movw	r3, #8392	; 0x20c8
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16aa0:	e3401001 	movt	r1, #1

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16aa4:	e3403001 	movt	r3, #1
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16aa8:	e3402001 	movt	r2, #1
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16aac:	e3400001 	movt	r0, #1
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16ab0:	e784c002 	str	r12, [r4, r2]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16ab4:	e7845001 	str	r5, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ab8:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16abc:	e7849006 	str	r9, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ac0:	e1a01005 	mov	r1, r5
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16ac4:	e7848000 	str	r8, [r4, r0]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ac8:	e1a0000a 	mov	r0, r10

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16acc:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ad0:	e2849a12 	add	r9, r4, #73728	; 0x12000
   16ad4:	eb000b16 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16ad8:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16adc:	e30210cc 	movw	r1, #8396	; 0x20cc

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16ae0:	e30220d0 	movw	r2, #8400	; 0x20d0
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16ae4:	e30400d4 	movw	r0, #16596	; 0x40d4
        fs->fat_buffers[i].dirty = 0;
   16ae8:	e30430d8 	movw	r3, #16600	; 0x40d8
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16aec:	e28990d4 	add	r9, r9, #212	; 0xd4

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16af0:	e3403001 	movt	r3, #1
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16af4:	e3401001 	movt	r1, #1

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16af8:	e3402001 	movt	r2, #1
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16afc:	e3400001 	movt	r0, #1
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16b00:	e784c002 	str	r12, [r4, r2]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b04:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;
   16b08:	e7845001 	str	r5, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b0c:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16b10:	e784a006 	str	r10, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b14:	e284a905 	add	r10, r4, #81920	; 0x14000
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16b18:	e7848000 	str	r8, [r4, r0]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b1c:	e1a00009 	mov	r0, r9

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16b20:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b24:	e28aa0e4 	add	r10, r10, #228	; 0xe4
   16b28:	eb000b01 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16b2c:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16b30:	e30410dc 	movw	r1, #16604	; 0x40dc

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16b34:	e30420e0 	movw	r2, #16608	; 0x40e0
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16b38:	e30600e4 	movw	r0, #24804	; 0x60e4
        fs->fat_buffers[i].dirty = 0;
   16b3c:	e30630e8 	movw	r3, #24808	; 0x60e8
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16b40:	e3401001 	movt	r1, #1

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16b44:	e3403001 	movt	r3, #1
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16b48:	e3402001 	movt	r2, #1
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16b4c:	e3400001 	movt	r0, #1
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16b50:	e784c002 	str	r12, [r4, r2]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16b54:	e7845001 	str	r5, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b58:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16b5c:	e7849006 	str	r9, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b60:	e1a01005 	mov	r1, r5
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16b64:	e7848000 	str	r8, [r4, r0]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b68:	e1a0000a 	mov	r0, r10

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16b6c:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b70:	e2849a16 	add	r9, r4, #90112	; 0x16000
   16b74:	eb000aee 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16b78:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16b7c:	e30610ec 	movw	r1, #24812	; 0x60ec

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16b80:	e30620f0 	movw	r2, #24816	; 0x60f0
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16b84:	e30800f4 	movw	r0, #33012	; 0x80f4
        fs->fat_buffers[i].dirty = 0;
   16b88:	e30830f8 	movw	r3, #33016	; 0x80f8
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16b8c:	e28990f4 	add	r9, r9, #244	; 0xf4

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16b90:	e3403001 	movt	r3, #1
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16b94:	e3401001 	movt	r1, #1

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16b98:	e3402001 	movt	r2, #1
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16b9c:	e3400001 	movt	r0, #1
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16ba0:	e784c002 	str	r12, [r4, r2]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ba4:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;
   16ba8:	e7845001 	str	r5, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16bac:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16bb0:	e784a006 	str	r10, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16bb4:	e284a906 	add	r10, r4, #98304	; 0x18000
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16bb8:	e7848000 	str	r8, [r4, r0]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16bbc:	e1a00009 	mov	r0, r9

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16bc0:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16bc4:	e28aaf41 	add	r10, r10, #260	; 0x104
   16bc8:	eb000ad9 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16bcc:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16bd0:	e30810fc 	movw	r1, #33020	; 0x80fc

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16bd4:	e3a02c81 	mov	r2, #33024	; 0x8100
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16bd8:	e30a0104 	movw	r0, #41220	; 0xa104
        fs->fat_buffers[i].dirty = 0;
   16bdc:	e30a3108 	movw	r3, #41224	; 0xa108
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16be0:	e3401001 	movt	r1, #1

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16be4:	e3403001 	movt	r3, #1
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16be8:	e3402001 	movt	r2, #1
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16bec:	e3400001 	movt	r0, #1
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16bf0:	e784c002 	str	r12, [r4, r2]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16bf4:	e7845001 	str	r5, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16bf8:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16bfc:	e7849006 	str	r9, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c00:	e1a01005 	mov	r1, r5
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16c04:	e7848000 	str	r8, [r4, r0]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c08:	e1a0000a 	mov	r0, r10

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16c0c:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c10:	e2849a1a 	add	r9, r4, #106496	; 0x1a000
   16c14:	eb000ac6 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16c18:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16c1c:	e30a110c 	movw	r1, #41228	; 0xa10c

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16c20:	e30a2110 	movw	r2, #41232	; 0xa110
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16c24:	e30c0114 	movw	r0, #49428	; 0xc114
        fs->fat_buffers[i].dirty = 0;
   16c28:	e30c3118 	movw	r3, #49432	; 0xc118
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c2c:	e2899f45 	add	r9, r9, #276	; 0x114

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16c30:	e3403001 	movt	r3, #1
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16c34:	e3401001 	movt	r1, #1

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16c38:	e3402001 	movt	r2, #1
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16c3c:	e3400001 	movt	r0, #1
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16c40:	e784c002 	str	r12, [r4, r2]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c44:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;
   16c48:	e7845001 	str	r5, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c4c:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16c50:	e784a006 	str	r10, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c54:	e284a907 	add	r10, r4, #114688	; 0x1c000
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16c58:	e7848000 	str	r8, [r4, r0]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c5c:	e1a00009 	mov	r0, r9

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16c60:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c64:	e28aaf49 	add	r10, r10, #292	; 0x124
   16c68:	eb000ab1 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16c6c:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16c70:	e30c111c 	movw	r1, #49436	; 0xc11c

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16c74:	e30c2120 	movw	r2, #49440	; 0xc120
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16c78:	e30e0124 	movw	r0, #57636	; 0xe124
        fs->fat_buffers[i].dirty = 0;
   16c7c:	e30e3128 	movw	r3, #57640	; 0xe128
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16c80:	e3401001 	movt	r1, #1

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16c84:	e3403001 	movt	r3, #1
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16c88:	e3402001 	movt	r2, #1
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16c8c:	e3400001 	movt	r0, #1
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16c90:	e784c002 	str	r12, [r4, r2]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16c94:	e7845001 	str	r5, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16c98:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16c9c:	e7849006 	str	r9, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ca0:	e1a01005 	mov	r1, r5
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16ca4:	e7848000 	str	r8, [r4, r0]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ca8:	e1a0000a 	mov	r0, r10

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16cac:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16cb0:	e2849a1e 	add	r9, r4, #122880	; 0x1e000
   16cb4:	eb000a9e 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16cb8:	e794c006 	ldr	r12, [r4, r6]
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16cbc:	e3a00f4d 	mov	r0, #308	; 0x134
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16cc0:	e30e112c 	movw	r1, #57644	; 0xe12c

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16cc4:	e30e2130 	movw	r2, #57648	; 0xe130

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16cc8:	e3a03f4e 	mov	r3, #312	; 0x138
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ccc:	e0899000 	add	r9, r9, r0

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16cd0:	e3403002 	movt	r3, #2
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16cd4:	e3401001 	movt	r1, #1

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16cd8:	e3402001 	movt	r2, #1
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16cdc:	e3400002 	movt	r0, #2
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16ce0:	e784c002 	str	r12, [r4, r2]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16ce4:	e1a02007 	mov	r2, r7
        fs->fat_buffers[i].ptr = NULL;
   16ce8:	e7845001 	str	r5, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16cec:	e1a01005 	mov	r1, r5
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16cf0:	e784a006 	str	r10, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16cf4:	e284a802 	add	r10, r4, #131072	; 0x20000
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16cf8:	e7848000 	str	r8, [r4, r0]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16cfc:	e1a00009 	mov	r0, r9

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16d00:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16d04:	e28aaf51 	add	r10, r10, #324	; 0x144
   16d08:	eb000a89 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16d0c:	e794c006 	ldr	r12, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16d10:	e3a00f4f 	mov	r0, #316	; 0x13c

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16d14:	e3a01d05 	mov	r1, #320	; 0x140
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16d18:	e3022144 	movw	r2, #8516	; 0x2144
        fs->fat_buffers[i].dirty = 0;
   16d1c:	e3023148 	movw	r3, #8520	; 0x2148
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16d20:	e3400002 	movt	r0, #2

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16d24:	e3403002 	movt	r3, #2
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16d28:	e3401002 	movt	r1, #2
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16d2c:	e3402002 	movt	r2, #2
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16d30:	e7845000 	str	r5, [r4, r0]

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16d34:	e784c001 	str	r12, [r4, r1]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16d38:	e1a0000a 	mov	r0, r10
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16d3c:	e7849006 	str	r9, [r4, r6]
    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16d40:	e1a01005 	mov	r1, r5
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   16d44:	e7848002 	str	r8, [r4, r2]
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16d48:	e1a02007 	mov	r2, r7

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
   16d4c:	e7845003 	str	r5, [r4, r3]
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   16d50:	eb000a77 	bl	19734 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16d54:	e7941006 	ldr	r1, [r4, r6]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16d58:	e302214c 	movw	r2, #8524	; 0x214c

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16d5c:	e3023150 	movw	r3, #8528	; 0x2150
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16d60:	e3402002 	movt	r2, #2

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16d64:	e3403002 	movt	r3, #2
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
   16d68:	e7845002 	str	r5, [r4, r2]

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   16d6c:	e7841003 	str	r1, [r4, r3]
        fs->fat_buffer_head = &fs->fat_buffers[i];
   16d70:	e784a006 	str	r10, [r4, r6]
    }
}
   16d74:	e28dd00c 	add	sp, sp, #12
   16d78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00016d7c <fatfs_fat_purge>:
}
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
   16d7c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    struct fat_buffer *pcur = fs->fat_buffer_head;
   16d80:	e3023050 	movw	r3, #8272	; 0x2050
   16d84:	e7904003 	ldr	r4, [r0, r3]
}
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
   16d88:	e1a07000 	mov	r7, r0
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   16d8c:	e3540000 	cmp	r4, #0
    {
        // Writeback sector if changed
        if (pcur->dirty)
   16d90:	13025004 	movwne	r5, #8196	; 0x2004
        if (pcur->dirty)
        {
            if (fs->disk_io.write_media)
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
   16d94:	13a08a02 	movne	r8, #8192	; 0x2000

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
                    return 0;
            }

            pcur->dirty = 0;
   16d98:	13a0a000 	movne	r10, #0
        // Writeback sector if changed
        if (pcur->dirty)
            if (!fatfs_fat_writeback(fs, pcur))
                return 0;

        pcur = pcur->next;
   16d9c:	1302600c 	movwne	r6, #8204	; 0x200c
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   16da0:	1a000003 	bne	16db4 <fatfs_fat_purge+0x38>
   16da4:	ea000018 	b	16e0c <fatfs_fat_purge+0x90>
        // Writeback sector if changed
        if (pcur->dirty)
            if (!fatfs_fat_writeback(fs, pcur))
                return 0;

        pcur = pcur->next;
   16da8:	e7944006 	ldr	r4, [r4, r6]
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   16dac:	e3540000 	cmp	r4, #0
   16db0:	0a000015 	beq	16e0c <fatfs_fat_purge+0x90>
    {
        // Writeback sector if changed
        if (pcur->dirty)
   16db4:	e7943005 	ldr	r3, [r4, r5]
   16db8:	e3530000 	cmp	r3, #0
   16dbc:	0afffff9 	beq	16da8 <fatfs_fat_purge+0x2c>
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty)
        {
            if (fs->disk_io.write_media)
   16dc0:	e5973034 	ldr	r3, [r7, #52]	; 0x34
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
                    sectors = FAT_BUFFER_SECTORS;
   16dc4:	e3a02010 	mov	r2, #16
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty)
        {
            if (fs->disk_io.write_media)
   16dc8:	e3530000 	cmp	r3, #0
   16dcc:	0a00000a 	beq	16dfc <fatfs_fat_purge+0x80>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
   16dd0:	e7940008 	ldr	r0, [r4, r8]
   16dd4:	e5971014 	ldr	r1, [r7, #20]

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   16dd8:	e597c020 	ldr	r12, [r7, #32]
        if (pcur->dirty)
        {
            if (fs->disk_io.write_media)
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
   16ddc:	e0611000 	rsb	r1, r1, r0

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   16de0:	e281e010 	add	lr, r1, #16
   16de4:	e15e000c 	cmp	lr, r12
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
   16de8:	8061200c 	rsbhi	r2, r1, r12

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   16dec:	e1a01004 	mov	r1, r4
   16df0:	e12fff33 	blx	r3
   16df4:	e3500000 	cmp	r0, #0
   16df8:	0a000005 	beq	16e14 <fatfs_fat_purge+0x98>
                    return 0;
            }

            pcur->dirty = 0;
   16dfc:	e784a005 	str	r10, [r4, r5]
        // Writeback sector if changed
        if (pcur->dirty)
            if (!fatfs_fat_writeback(fs, pcur))
                return 0;

        pcur = pcur->next;
   16e00:	e7944006 	ldr	r4, [r4, r6]
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   16e04:	e3540000 	cmp	r4, #0
   16e08:	1affffe9 	bne	16db4 <fatfs_fat_purge+0x38>
                return 0;

        pcur = pcur->next;
    }

    return 1;
   16e0c:	e3a00001 	mov	r0, #1
   16e10:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
   16e14:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00016e18 <fatfs_find_next_cluster>:
    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   16e18:	e5d0302d 	ldrb	r3, [r0, #45]	; 0x2d
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
        current_cluster = 2;
   16e1c:	e3510000 	cmp	r1, #0
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
   16e20:	e92d4070 	push	{r4, r5, r6, lr}
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
        current_cluster = 2;
   16e24:	11a06001 	movne	r6, r1
   16e28:	03a06002 	moveq	r6, #2
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   16e2c:	e5901014 	ldr	r1, [r0, #20]
    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   16e30:	e3530000 	cmp	r3, #0
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
   16e34:	e1a04000 	mov	r4, r0
    if (current_cluster == 0)
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = current_cluster / 256;
   16e38:	01a05426 	lsreq	r5, r6, #8
    else
        fat_sector_offset = current_cluster / 128;
   16e3c:	11a053a6 	lsrne	r5, r6, #7

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   16e40:	e0851001 	add	r1, r5, r1
   16e44:	ebfffe3e 	bl	16744 <fatfs_fat_read_sector>
    if (!pbuf)
   16e48:	e3500000 	cmp	r0, #0
   16e4c:	0a000021 	beq	16ed8 <fatfs_find_next_cluster+0xc0>
        return (FAT32_LAST_CLUSTER);

    if (fs->fat_type == FAT_TYPE_16)
   16e50:	e5d4302d 	ldrb	r3, [r4, #45]	; 0x2d
   16e54:	e3530000 	cmp	r3, #0
   16e58:	1a00000c 	bne	16e90 <fatfs_find_next_cluster+0x78>
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   16e5c:	e3023008 	movw	r3, #8200	; 0x2008
        return (FAT32_LAST_CLUSTER);

    if (fs->fat_type == FAT_TYPE_16)
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;
   16e60:	e0465405 	sub	r5, r6, r5, lsl #8

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   16e64:	e7903003 	ldr	r3, [r0, r3]
   16e68:	e1a05885 	lsl	r5, r5, #17
   16e6c:	e7d32825 	ldrb	r2, [r3, r5, lsr #16]
   16e70:	e0833825 	add	r3, r3, r5, lsr #16
   16e74:	e5d30001 	ldrb	r0, [r3, #1]
   16e78:	e0820400 	add	r0, r2, r0, lsl #8

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
   16e7c:	e2403cff 	sub	r3, r0, #65280	; 0xff00
   16e80:	e24330f8 	sub	r3, r3, #248	; 0xf8
   16e84:	e3530007 	cmp	r3, #7
            return (FAT32_LAST_CLUSTER);
   16e88:	93e00000 	mvnls	r0, #0
   16e8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   16e90:	e3023008 	movw	r3, #8200	; 0x2008
            return (FAT32_LAST_CLUSTER);
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;
   16e94:	e0465385 	sub	r5, r6, r5, lsl #7

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   16e98:	e7903003 	ldr	r3, [r0, r3]
   16e9c:	e1a05905 	lsl	r5, r5, #18
   16ea0:	e7d32825 	ldrb	r2, [r3, r5, lsr #16]
   16ea4:	e0835825 	add	r5, r3, r5, lsr #16
   16ea8:	e5d50002 	ldrb	r0, [r5, #2]
   16eac:	e5d51003 	ldrb	r1, [r5, #3]
   16eb0:	e5d53001 	ldrb	r3, [r5, #1]
   16eb4:	e1a00800 	lsl	r0, r0, #16
   16eb8:	e0800c01 	add	r0, r0, r1, lsl #24
   16ebc:	e0800002 	add	r0, r0, r2
   16ec0:	e0800403 	add	r0, r0, r3, lsl #8

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
   16ec4:	e3c0020f 	bic	r0, r0, #-268435456	; 0xf0000000

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
   16ec8:	e280328f 	add	r3, r0, #-268435448	; 0xf0000008
   16ecc:	e3530007 	cmp	r3, #7
        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
            return (FAT32_LAST_CLUSTER);
   16ed0:	93e00000 	mvnls	r0, #0
   16ed4:	e8bd8070 	pop	{r4, r5, r6, pc}
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return (FAT32_LAST_CLUSTER);
   16ed8:	e3e00000 	mvn	r0, #0
            return (FAT32_LAST_CLUSTER);
    }

    // Else return next cluster
    return (nextcluster);
}
   16edc:	e8bd8070 	pop	{r4, r5, r6, pc}

00016ee0 <fatfs_set_fs_info_next_free_cluster>:
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
   16ee0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   16ee4:	e1a04000 	mov	r4, r0
    if (fs->fat_type == FAT_TYPE_16)
   16ee8:	e5d0302d 	ldrb	r3, [r0, #45]	; 0x2d
}
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
   16eec:	e1a06001 	mov	r6, r1
    if (fs->fat_type == FAT_TYPE_16)
   16ef0:	e3530000 	cmp	r3, #0
   16ef4:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
   16ef8:	e1d011b8 	ldrh	r1, [r0, #24]
   16efc:	e590301c 	ldr	r3, [r0, #28]
   16f00:	e0811003 	add	r1, r1, r3
   16f04:	ebfffe0e 	bl	16744 <fatfs_fat_read_sector>
        if (!pbuf)
   16f08:	e2505000 	subs	r5, r0, #0
   16f0c:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
   16f10:	e3023008 	movw	r3, #8200	; 0x2008
   16f14:	e1a07426 	lsr	r7, r6, #8
   16f18:	e7950003 	ldr	r0, [r5, r3]
   16f1c:	e1a0c826 	lsr	r12, r6, #16
   16f20:	e1a01c26 	lsr	r1, r6, #24
   16f24:	e3a02001 	mov	r2, #1
   16f28:	e5c061ec 	strb	r6, [r0, #492]	; 0x1ec
   16f2c:	e7950003 	ldr	r0, [r5, r3]
   16f30:	e5c071ed 	strb	r7, [r0, #493]	; 0x1ed
   16f34:	e7950003 	ldr	r0, [r5, r3]
   16f38:	e5c0c1ee 	strb	r12, [r0, #494]	; 0x1ee
   16f3c:	e7953003 	ldr	r3, [r5, r3]
   16f40:	e5c311ef 	strb	r1, [r3, #495]	; 0x1ef
   16f44:	e3021004 	movw	r1, #8196	; 0x2004
        fs->next_free_cluster = newValue;

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
   16f48:	e5943034 	ldr	r3, [r4, #52]	; 0x34
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
   16f4c:	e7852001 	str	r2, [r5, r1]
        fs->next_free_cluster = newValue;
   16f50:	e5846024 	str	r6, [r4, #36]	; 0x24

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
   16f54:	e3530000 	cmp	r3, #0
   16f58:	0a000003 	beq	16f6c <fatfs_set_fs_info_next_free_cluster+0x8c>
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
   16f5c:	e3a00a02 	mov	r0, #8192	; 0x2000
   16f60:	e1a01005 	mov	r1, r5
   16f64:	e7950000 	ldr	r0, [r5, r0]
   16f68:	e12fff33 	blx	r3

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
   16f6c:	e3e02000 	mvn	r2, #0
   16f70:	e3a03a02 	mov	r3, #8192	; 0x2000
   16f74:	e7852003 	str	r2, [r5, r3]
        pbuf->dirty = 0;
   16f78:	e3a02000 	mov	r2, #0
   16f7c:	e2833004 	add	r3, r3, #4
   16f80:	e7852003 	str	r2, [r5, r3]
   16f84:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00016f88 <fatfs_find_blank_cluster>:
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
   16f88:	e5d0302d 	ldrb	r3, [r0, #45]	; 0x2d
   16f8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16f90:	e1a06000 	mov	r6, r0
   16f94:	e1a08002 	mov	r8, r2
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    uint32 current_cluster = start_cluster;
   16f98:	e1a05001 	mov	r5, r1
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   16f9c:	e3027008 	movw	r7, #8200	; 0x2008
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
   16fa0:	e3530000 	cmp	r3, #0
            fat_sector_offset = current_cluster / 256;
        else
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
   16fa4:	e5963020 	ldr	r3, [r6, #32]
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
            fat_sector_offset = current_cluster / 256;
        else
            fat_sector_offset = current_cluster / 128;
   16fa8:	e1a043a5 	lsr	r4, r5, #7

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
            fat_sector_offset = current_cluster / 256;
   16fac:	01a04425 	lsreq	r4, r5, #8
        else
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
   16fb0:	e1540003 	cmp	r4, r3
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   16fb4:	e1a00006 	mov	r0, r6
        if (fs->fat_type == FAT_TYPE_16)
            fat_sector_offset = current_cluster / 256;
        else
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
   16fb8:	2a000021 	bcs	17044 <fatfs_find_blank_cluster+0xbc>
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   16fbc:	e5961014 	ldr	r1, [r6, #20]
   16fc0:	e0841001 	add	r1, r4, r1
   16fc4:	ebfffdde 	bl	16744 <fatfs_fat_read_sector>
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
            }
            else
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;
   16fc8:	e0453384 	sub	r3, r5, r4, lsl #7

        if ( fat_sector_offset < fs->fat_sectors)
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
            if (!pbuf)
   16fcc:	e3500000 	cmp	r0, #0
                return 0;

            if (fs->fat_type == FAT_TYPE_16)
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;
   16fd0:	e0454404 	sub	r4, r5, r4, lsl #8
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   16fd4:	e1a02903 	lsl	r2, r3, #18
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   16fd8:	e1a04884 	lsl	r4, r4, #17

        if ( fat_sector_offset < fs->fat_sectors)
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
            if (!pbuf)
   16fdc:	0a000018 	beq	17044 <fatfs_find_blank_cluster+0xbc>
                return 0;

            if (fs->fat_type == FAT_TYPE_16)
   16fe0:	e5d6302d 	ldrb	r3, [r6, #45]	; 0x2d
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   16fe4:	e7901007 	ldr	r1, [r0, r7]
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
            if (!pbuf)
                return 0;

            if (fs->fat_type == FAT_TYPE_16)
   16fe8:	e3530000 	cmp	r3, #0
   16fec:	1a000009 	bne	17018 <fatfs_find_blank_cluster+0x90>
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   16ff0:	e7d12824 	ldrb	r2, [r1, r4, lsr #16]
   16ff4:	e0814824 	add	r4, r1, r4, lsr #16
   16ff8:	e5d41001 	ldrb	r1, [r4, #1]
   16ffc:	e0822401 	add	r2, r2, r1, lsl #8

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
            }

            if (nextcluster !=0 )
   17000:	e3520000 	cmp	r2, #0
                current_cluster++;
   17004:	12855001 	addne	r5, r5, #1
   17008:	1affffe4 	bne	16fa0 <fatfs_find_blank_cluster+0x18>
    }
    while (nextcluster != 0x0);

    // Found blank entry
    *free_cluster = current_cluster;
    return 1;
   1700c:	e3a00001 	mov	r0, #1
            return 0;
    }
    while (nextcluster != 0x0);

    // Found blank entry
    *free_cluster = current_cluster;
   17010:	e5885000 	str	r5, [r8]
    return 1;
}
   17014:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   17018:	e7d10822 	ldrb	r0, [r1, r2, lsr #16]
   1701c:	e0812822 	add	r2, r1, r2, lsr #16
   17020:	e5d24002 	ldrb	r4, [r2, #2]
   17024:	e5d2c003 	ldrb	r12, [r2, #3]
   17028:	e5d21001 	ldrb	r1, [r2, #1]
   1702c:	e1a02804 	lsl	r2, r4, #16
   17030:	e0822c0c 	add	r2, r2, r12, lsl #24
   17034:	e0822000 	add	r2, r2, r0
   17038:	e0822401 	add	r2, r2, r1, lsl #8

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
   1703c:	e3c2220f 	bic	r2, r2, #-268435456	; 0xf0000000
   17040:	eaffffee 	b	17000 <fatfs_find_blank_cluster+0x78>
            if (nextcluster !=0 )
                current_cluster++;
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
   17044:	e3a00000 	mov	r0, #0
   17048:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001704c <fatfs_fat_set_cluster>:
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   1704c:	e5d0302d 	ldrb	r3, [r0, #45]	; 0x2d
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
   17050:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17054:	e1a06001 	mov	r6, r1
   17058:	e1a04000 	mov	r4, r0
   1705c:	e1a05002 	mov	r5, r2
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   17060:	e3530000 	cmp	r3, #0
        fat_sector_offset = cluster / 256;
   17064:	01a07421 	lsreq	r7, r1, #8
    else
        fat_sector_offset = cluster / 128;
   17068:	11a073a1 	lsrne	r7, r1, #7

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   1706c:	e5901014 	ldr	r1, [r0, #20]
   17070:	e0871001 	add	r1, r7, r1
   17074:	ebfffdb2 	bl	16744 <fatfs_fat_read_sector>
    if (!pbuf)
   17078:	e2503000 	subs	r3, r0, #0
   1707c:	0a000027 	beq	17120 <fatfs_fat_set_cluster+0xd4>
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
   17080:	e5d4202d 	ldrb	r2, [r4, #45]	; 0x2d
   17084:	e3520000 	cmp	r2, #0
   17088:	0a000016 	beq	170e8 <fatfs_fat_set_cluster+0x9c>
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   1708c:	e3022008 	movw	r2, #8200	; 0x2008
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;
   17090:	e0466387 	sub	r6, r6, r7, lsl #7

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   17094:	e7931002 	ldr	r1, [r3, r2]
   17098:	e1a08425 	lsr	r8, r5, #8
   1709c:	e1a06906 	lsl	r6, r6, #18
   170a0:	e1a07825 	lsr	r7, r5, #16
   170a4:	e1a0cc25 	lsr	r12, r5, #24
   170a8:	e7c15826 	strb	r5, [r1, r6, lsr #16]
   170ac:	e1a06826 	lsr	r6, r6, #16
   170b0:	e7934002 	ldr	r4, [r3, r2]
   170b4:	e3a01001 	mov	r1, #1
    }

    return 1;
   170b8:	e1a00001 	mov	r0, r1
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   170bc:	e0844006 	add	r4, r4, r6
   170c0:	e5c48001 	strb	r8, [r4, #1]
   170c4:	e7934002 	ldr	r4, [r3, r2]
   170c8:	e0844006 	add	r4, r4, r6
   170cc:	e5c47002 	strb	r7, [r4, #2]
   170d0:	e7932002 	ldr	r2, [r3, r2]
   170d4:	e0826006 	add	r6, r2, r6
   170d8:	e3022004 	movw	r2, #8196	; 0x2004
   170dc:	e5c6c003 	strb	r12, [r6, #3]
   170e0:	e7831002 	str	r1, [r3, r2]
   170e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   170e8:	e3021008 	movw	r1, #8200	; 0x2008
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;
   170ec:	e0466407 	sub	r6, r6, r7, lsl #8

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   170f0:	e7930001 	ldr	r0, [r3, r1]
   170f4:	e3a02001 	mov	r2, #1
   170f8:	e1a06886 	lsl	r6, r6, #17
   170fc:	e7e7c455 	ubfx	r12, r5, #8, #8
   17100:	e7c05826 	strb	r5, [r0, r6, lsr #16]

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
    }

    return 1;
   17104:	e1a00002 	mov	r0, r2
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   17108:	e7937001 	ldr	r7, [r3, r1]
   1710c:	e3021004 	movw	r1, #8196	; 0x2004
   17110:	e0876826 	add	r6, r7, r6, lsr #16
   17114:	e5c6c001 	strb	r12, [r6, #1]
   17118:	e7832001 	str	r2, [r3, r1]
   1711c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;
   17120:	e1a00003 	mov	r0, r3
        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
    }

    return 1;
}
   17124:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00017128 <fatfs_free_cluster_chain>:
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
   17128:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1712c:	e1a05000 	mov	r5, r0
   17130:	e1a04001 	mov	r4, r1
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   17134:	e3027008 	movw	r7, #8200	; 0x2008
   17138:	e3a08000 	mov	r8, #0
   1713c:	e3a09001 	mov	r9, #1
   17140:	e302a004 	movw	r10, #8196	; 0x2004
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   17144:	ea00000c 	b	1717c <fatfs_free_cluster_chain+0x54>
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   17148:	e7931007 	ldr	r1, [r3, r7]
   1714c:	e7c18820 	strb	r8, [r1, r0, lsr #16]
   17150:	e7931007 	ldr	r1, [r3, r7]
   17154:	e0811002 	add	r1, r1, r2
   17158:	e5c18001 	strb	r8, [r1, #1]
   1715c:	e7931007 	ldr	r1, [r3, r7]
   17160:	e0811002 	add	r1, r1, r2
   17164:	e5c18002 	strb	r8, [r1, #2]
   17168:	e7931007 	ldr	r1, [r3, r7]
   1716c:	e0812002 	add	r2, r1, r2
   17170:	e5c28003 	strb	r8, [r2, #3]
   17174:	e783900a 	str	r9, [r3, r10]
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
   17178:	e1a0400b 	mov	r4, r11
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   1717c:	e2443001 	sub	r3, r4, #1
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   17180:	e1a01004 	mov	r1, r4
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   17184:	e3730003 	cmn	r3, #3
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   17188:	e1a00005 	mov	r0, r5

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
    else
        fat_sector_offset = cluster / 128;
   1718c:	e1a063a4 	lsr	r6, r4, #7
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   17190:	8a000019 	bhi	171fc <fatfs_free_cluster_chain+0xd4>
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   17194:	ebffff1f 	bl	16e18 <fatfs_find_next_cluster>
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   17198:	e5d5302d 	ldrb	r3, [r5, #45]	; 0x2d
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   1719c:	e1a0b000 	mov	r11, r0
        fat_sector_offset = cluster / 256;
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   171a0:	e5951014 	ldr	r1, [r5, #20]
   171a4:	e1a00005 	mov	r0, r5
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   171a8:	e3530000 	cmp	r3, #0
        fat_sector_offset = cluster / 256;
   171ac:	01a06424 	lsreq	r6, r4, #8
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   171b0:	e0861001 	add	r1, r6, r1
   171b4:	ebfffd62 	bl	16744 <fatfs_fat_read_sector>
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;
   171b8:	e0442386 	sub	r2, r4, r6, lsl #7
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
   171bc:	e2503000 	subs	r3, r0, #0
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   171c0:	e1a00902 	lsl	r0, r2, #18
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
   171c4:	0affffeb 	beq	17178 <fatfs_free_cluster_chain+0x50>
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
   171c8:	e5d5102d 	ldrb	r1, [r5, #45]	; 0x2d
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   171cc:	e1a02820 	lsr	r2, r0, #16
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
   171d0:	e3510000 	cmp	r1, #0
   171d4:	1affffdb 	bne	17148 <fatfs_free_cluster_chain+0x20>
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;
   171d8:	e0444406 	sub	r4, r4, r6, lsl #8

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   171dc:	e7932007 	ldr	r2, [r3, r7]
   171e0:	e1a04884 	lsl	r4, r4, #17
   171e4:	e7c21824 	strb	r1, [r2, r4, lsr #16]
   171e8:	e7936007 	ldr	r6, [r3, r7]
   171ec:	e0864824 	add	r4, r6, r4, lsr #16
   171f0:	e5c41001 	strb	r1, [r4, #1]
   171f4:	e783900a 	str	r9, [r3, r10]
   171f8:	eaffffde 	b	17178 <fatfs_free_cluster_chain+0x50>
        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
}
   171fc:	e3a00001 	mov	r0, #1
   17200:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00017204 <fatfs_fat_add_cluster_to_chain>:
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
   17204:	e3710001 	cmn	r1, #1
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
   17208:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   1720c:	e1a06000 	mov	r6, r0
   17210:	e1a07002 	mov	r7, r2
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
   17214:	11a05001 	movne	r5, r1
   17218:	1a000003 	bne	1722c <fatfs_fat_add_cluster_to_chain+0x28>
   1721c:	ea000007 	b	17240 <fatfs_fat_add_cluster_to_chain+0x3c>
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
   17220:	e3740001 	cmn	r4, #1
   17224:	0a000007 	beq	17248 <fatfs_fat_add_cluster_to_chain+0x44>
   17228:	e1a05004 	mov	r5, r4
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   1722c:	e1a01005 	mov	r1, r5
   17230:	e1a00006 	mov	r0, r6
   17234:	ebfffef7 	bl	16e18 <fatfs_find_next_cluster>
        if (!next_cluster)
   17238:	e2504000 	subs	r4, r0, #0
   1723c:	1afffff7 	bne	17220 <fatfs_fat_add_cluster_to_chain+0x1c>
{
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;
   17240:	e3a00000 	mov	r0, #0
   17244:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
   17248:	e1a01005 	mov	r1, r5
   1724c:	e1a02007 	mov	r2, r7
   17250:	e1a00006 	mov	r0, r6
   17254:	ebffff7c 	bl	1704c <fatfs_fat_set_cluster>

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
   17258:	e1a00006 	mov	r0, r6
   1725c:	e1a01007 	mov	r1, r7
   17260:	e1a02004 	mov	r2, r4
   17264:	ebffff78 	bl	1704c <fatfs_fat_set_cluster>

    return 1;
   17268:	e3a00001 	mov	r0, #1
}
   1726c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00017270 <fatfs_count_free_clusters>:
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   17270:	e5903020 	ldr	r3, [r0, #32]
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
   17274:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   17278:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1727c:	e58d001c 	str	r0, [sp, #28]
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   17280:	e3530000 	cmp	r3, #0
   17284:	0a0000aa 	beq	17534 <fatfs_count_free_clusters+0x2c4>
   17288:	e3a07000 	mov	r7, #0
   1728c:	e1a05007 	mov	r5, r7
   17290:	e58d7020 	str	r7, [sp, #32]
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
   17294:	e59d201c 	ldr	r2, [sp, #28]
   17298:	e59d3020 	ldr	r3, [sp, #32]
   1729c:	e5921014 	ldr	r1, [r2, #20]
   172a0:	e1a00002 	mov	r0, r2
   172a4:	e0831001 	add	r1, r3, r1
   172a8:	ebfffd25 	bl	16744 <fatfs_fat_read_sector>
        if (!pbuf)
   172ac:	e3500000 	cmp	r0, #0
   172b0:	0a00008d 	beq	174ec <fatfs_count_free_clusters+0x27c>
   172b4:	e59d401c 	ldr	r4, [sp, #28]
   172b8:	e5d4302d 	ldrb	r3, [r4, #45]	; 0x2d
   172bc:	e3530000 	cmp	r3, #0
   172c0:	0a00008d 	beq	174fc <fatfs_count_free_clusters+0x28c>
   172c4:	e3028008 	movw	r8, #8200	; 0x2008
   172c8:	e1a0c005 	mov	r12, r5
   172cc:	e7900008 	ldr	r0, [r0, r8]
   172d0:	e3a09000 	mov	r9, #0
   172d4:	e3a0b080 	mov	r11, #128	; 0x80
   172d8:	e98d0a00 	stmib	sp, {r9, r11}
   172dc:	e1a0a000 	mov	r10, r0
   172e0:	e2801027 	add	r1, r0, #39	; 0x27
   172e4:	e58d0018 	str	r0, [sp, #24]
   172e8:	e58d1024 	str	r1, [sp, #36]	; 0x24

                j += 2;
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   172ec:	e5da1002 	ldrb	r1, [r10, #2]
   172f0:	e28aa020 	add	r10, r10, #32
   172f4:	e55a001d 	ldrb	r0, [r10, #-29]	; 0xffffffe3
   172f8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   172fc:	e99d0014 	ldmib	sp, {r2, r4}
   17300:	e1a01801 	lsl	r1, r1, #16
   17304:	e59d9018 	ldr	r9, [sp, #24]
   17308:	e59d8004 	ldr	r8, [sp, #4]
   1730c:	f7d3f002 	pld	[r3, r2]
   17310:	e55a501a 	ldrb	r5, [r10, #-26]	; 0xffffffe6
   17314:	e2444008 	sub	r4, r4, #8
   17318:	e0811c00 	add	r1, r1, r0, lsl #24
   1731c:	e58d4008 	str	r4, [sp, #8]
   17320:	e7d90008 	ldrb	r0, [r9, r8]
   17324:	e55a3016 	ldrb	r3, [r10, #-22]	; 0xffffffea
   17328:	e55a2019 	ldrb	r2, [r10, #-25]	; 0xffffffe7
   1732c:	e1a05805 	lsl	r5, r5, #16
   17330:	e55a4015 	ldrb	r4, [r10, #-21]	; 0xffffffeb
   17334:	e0811000 	add	r1, r1, r0
   17338:	e55a801b 	ldrb	r8, [r10, #-27]	; 0xffffffe5
   1733c:	e55a001c 	ldrb	r0, [r10, #-28]	; 0xffffffe4
   17340:	e1a03803 	lsl	r3, r3, #16
   17344:	e0855c02 	add	r5, r5, r2, lsl #24
   17348:	e55ab01f 	ldrb	r11, [r10, #-31]	; 0xffffffe1
   1734c:	e0833c04 	add	r3, r3, r4, lsl #24
   17350:	e55a400a 	ldrb	r4, [r10, #-10]
   17354:	e0855000 	add	r5, r5, r0
   17358:	e55a700e 	ldrb	r7, [r10, #-14]
   1735c:	e0855408 	add	r5, r5, r8, lsl #8
   17360:	e55a8009 	ldrb	r8, [r10, #-9]
   17364:	e55a6012 	ldrb	r6, [r10, #-18]	; 0xffffffee
   17368:	e081140b 	add	r1, r1, r11, lsl #8
   1736c:	e1a04804 	lsl	r4, r4, #16
   17370:	e55ab00d 	ldrb	r11, [r10, #-13]
   17374:	e55a2011 	ldrb	r2, [r10, #-17]	; 0xffffffef
   17378:	e1a07807 	lsl	r7, r7, #16
   1737c:	e0844c08 	add	r4, r4, r8, lsl #24
   17380:	e55a0018 	ldrb	r0, [r10, #-24]	; 0xffffffe8
   17384:	e55a9017 	ldrb	r9, [r10, #-23]	; 0xffffffe9
   17388:	e1a06806 	lsl	r6, r6, #16
   1738c:	e0877c0b 	add	r7, r7, r11, lsl #24
   17390:	e58d4010 	str	r4, [sp, #16]
   17394:	e55ab014 	ldrb	r11, [r10, #-20]	; 0xffffffec
   17398:	e0866c02 	add	r6, r6, r2, lsl #24
   1739c:	e55a4001 	ldrb	r4, [r10, #-1]
   173a0:	e3510000 	cmp	r1, #0
   173a4:	11a0100c 	movne	r1, r12
   173a8:	028c1001 	addeq	r1, r12, #1
   173ac:	e0833000 	add	r3, r3, r0
   173b0:	e3550000 	cmp	r5, #0
   173b4:	11a05001 	movne	r5, r1
   173b8:	02815001 	addeq	r5, r1, #1
   173bc:	e55a0013 	ldrb	r0, [r10, #-19]	; 0xffffffed
   173c0:	e0833409 	add	r3, r3, r9, lsl #8
   173c4:	e55a2006 	ldrb	r2, [r10, #-6]
   173c8:	e086600b 	add	r6, r6, r11
   173cc:	e58d700c 	str	r7, [sp, #12]
   173d0:	e3530000 	cmp	r3, #0
   173d4:	02855001 	addeq	r5, r5, #1
   173d8:	e55ab00f 	ldrb	r11, [r10, #-15]
   173dc:	e55a7002 	ldrb	r7, [r10, #-2]
   173e0:	e0866400 	add	r6, r6, r0, lsl #8
   173e4:	e55ac005 	ldrb	r12, [r10, #-5]
   173e8:	e1a02802 	lsl	r2, r2, #16
   173ec:	e55a9010 	ldrb	r9, [r10, #-16]
   173f0:	e3560000 	cmp	r6, #0
   173f4:	02855001 	addeq	r5, r5, #1
   173f8:	e58d4014 	str	r4, [sp, #20]
   173fc:	e59d100c 	ldr	r1, [sp, #12]
   17400:	e1a07807 	lsl	r7, r7, #16
   17404:	e55a800c 	ldrb	r8, [r10, #-12]
   17408:	e082cc0c 	add	r12, r2, r12, lsl #24
   1740c:	e55a400b 	ldrb	r4, [r10, #-11]
   17410:	e0819009 	add	r9, r1, r9
   17414:	e55a0008 	ldrb	r0, [r10, #-8]
   17418:	e089940b 	add	r9, r9, r11, lsl #8
   1741c:	e59db010 	ldr	r11, [sp, #16]
   17420:	e55a1007 	ldrb	r1, [r10, #-7]
   17424:	e08c0000 	add	r0, r12, r0
   17428:	e3590000 	cmp	r9, #0
   1742c:	11a09005 	movne	r9, r5
   17430:	02859001 	addeq	r9, r5, #1
   17434:	e08b8008 	add	r8, r11, r8
   17438:	e59db014 	ldr	r11, [sp, #20]
   1743c:	e0888404 	add	r8, r8, r4, lsl #8
   17440:	e55a2004 	ldrb	r2, [r10, #-4]
   17444:	e0801401 	add	r1, r0, r1, lsl #8
   17448:	e55a3003 	ldrb	r3, [r10, #-3]
   1744c:	e3580000 	cmp	r8, #0
   17450:	11a08009 	movne	r8, r9
   17454:	02898001 	addeq	r8, r9, #1
   17458:	e0877c0b 	add	r7, r7, r11, lsl #24
   1745c:	e3510000 	cmp	r1, #0
   17460:	02888001 	addeq	r8, r8, #1
                    count++;

                j += 4;
   17464:	e59d1004 	ldr	r1, [sp, #4]

                j += 2;
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   17468:	e0877002 	add	r7, r7, r2
   1746c:	e0873403 	add	r3, r7, r3, lsl #8
                    count++;

                j += 4;
   17470:	e2811020 	add	r1, r1, #32
   17474:	e3530000 	cmp	r3, #0
   17478:	11a0c008 	movne	r12, r8
   1747c:	0288c001 	addeq	r12, r8, #1
   17480:	e3510e1e 	cmp	r1, #480	; 0x1e0
   17484:	e58d1004 	str	r1, [sp, #4]
   17488:	1affff97 	bne	172ec <fatfs_count_free_clusters+0x7c>
}
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
   1748c:	e59d2018 	ldr	r2, [sp, #24]
   17490:	e1a0500c 	mov	r5, r12
   17494:	e2823e1e 	add	r3, r2, #480	; 0x1e0
   17498:	e59d2008 	ldr	r2, [sp, #8]

                j += 2;
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   1749c:	e5d31002 	ldrb	r1, [r3, #2]
   174a0:	e2833004 	add	r3, r3, #4
   174a4:	e5534001 	ldrb	r4, [r3, #-1]
   174a8:	e1a01801 	lsl	r1, r1, #16
   174ac:	e553c004 	ldrb	r12, [r3, #-4]
   174b0:	e5530003 	ldrb	r0, [r3, #-3]
   174b4:	e0811c04 	add	r1, r1, r4, lsl #24
   174b8:	e081100c 	add	r1, r1, r12
   174bc:	e0811400 	add	r1, r1, r0, lsl #8
   174c0:	e3510000 	cmp	r1, #0
   174c4:	02855001 	addeq	r5, r5, #1
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   174c8:	e2522001 	subs	r2, r2, #1
   174cc:	1afffff2 	bne	1749c <fatfs_count_free_clusters+0x22c>
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   174d0:	e59d801c 	ldr	r8, [sp, #28]
   174d4:	e59d9020 	ldr	r9, [sp, #32]
   174d8:	e5983020 	ldr	r3, [r8, #32]
   174dc:	e2899001 	add	r9, r9, #1
   174e0:	e58d9020 	str	r9, [sp, #32]
   174e4:	e1530009 	cmp	r3, r9
   174e8:	8affff69 	bhi	17294 <fatfs_count_free_clusters+0x24>
   174ec:	e1a07005 	mov	r7, r5
            }
        }
    }

    return count;
}
   174f0:	e1a00007 	mov	r0, r7
   174f4:	e28dd02c 	add	sp, sp, #44	; 0x2c
   174f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
   174fc:	e3024008 	movw	r4, #8200	; 0x2008
   17500:	e7903004 	ldr	r3, [r0, r4]
}
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
   17504:	e2830c02 	add	r0, r3, #512	; 0x200
   17508:	e2833001 	add	r3, r3, #1
   1750c:	e2800001 	add	r0, r0, #1

        for (j = 0; j < FAT_SECTOR_SIZE; )
        {
            if (fs->fat_type == FAT_TYPE_16)
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
   17510:	e5d31000 	ldrb	r1, [r3]
   17514:	e2833002 	add	r3, r3, #2
   17518:	e5532003 	ldrb	r2, [r3, #-3]
   1751c:	e0822401 	add	r2, r2, r1, lsl #8
   17520:	e3520000 	cmp	r2, #0
   17524:	02855001 	addeq	r5, r5, #1
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   17528:	e1530000 	cmp	r3, r0
   1752c:	1afffff7 	bne	17510 <fatfs_count_free_clusters+0x2a0>
   17530:	eaffffe6 	b	174d0 <fatfs_count_free_clusters+0x260>
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
    uint32 i,j;
    uint32 count = 0;
   17534:	e1a07003 	mov	r7, r3
   17538:	eaffffec 	b	174f0 <fatfs_count_free_clusters+0x280>

0001753c <fatfs_add_free_space>:
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   1753c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
   17540:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17544:	e1a04000 	mov	r4, r0
   17548:	e24dd008 	sub	sp, sp, #8
   1754c:	e1a08001 	mov	r8, r1
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   17550:	e3730001 	cmn	r3, #1
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
   17554:	e1a07002 	mov	r7, r2
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
   17558:	e5916000 	ldr	r6, [r1]

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   1755c:	0a000001 	beq	17568 <fatfs_add_free_space+0x2c>
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   17560:	e3e01000 	mvn	r1, #0
   17564:	ebfffe5d 	bl	16ee0 <fatfs_set_fs_info_next_free_cluster>

    for (i=0;i<clusters;i++)
   17568:	e3570000 	cmp	r7, #0
   1756c:	13a05000 	movne	r5, #0
   17570:	1a00000c 	bne	175a8 <fatfs_add_free_space+0x6c>
   17574:	ea000015 	b	175d0 <fatfs_add_free_space+0x94>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   17578:	e59d2004 	ldr	r2, [sp, #4]
   1757c:	ebfffeb2 	bl	1704c <fatfs_fat_set_cluster>

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   17580:	e1a00004 	mov	r0, r4
   17584:	e59d1004 	ldr	r1, [sp, #4]
   17588:	e3e02000 	mvn	r2, #0
   1758c:	ebfffeae 	bl	1704c <fatfs_fat_set_cluster>

            // Adjust argument reference
            start = nextcluster;
   17590:	e59d6004 	ldr	r6, [sp, #4]
            if (i == 0)
   17594:	e3550000 	cmp	r5, #0

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   17598:	e2855001 	add	r5, r5, #1
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);

            // Adjust argument reference
            start = nextcluster;
            if (i == 0)
                *startCluster = nextcluster;
   1759c:	05886000 	streq	r6, [r8]

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   175a0:	e1550007 	cmp	r5, r7
   175a4:	0a000009 	beq	175d0 <fatfs_add_free_space+0x94>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   175a8:	e5941008 	ldr	r1, [r4, #8]
   175ac:	e28d2004 	add	r2, sp, #4
   175b0:	e1a00004 	mov	r0, r4
   175b4:	ebfffe73 	bl	16f88 <fatfs_find_blank_cluster>
   175b8:	e2503000 	subs	r3, r0, #0
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   175bc:	e1a01006 	mov	r1, r6
   175c0:	e1a00004 	mov	r0, r4
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   175c4:	1affffeb 	bne	17578 <fatfs_add_free_space+0x3c>
            start = nextcluster;
            if (i == 0)
                *startCluster = nextcluster;
        }
        else
            return 0;
   175c8:	e1a00003 	mov	r0, r3
   175cc:	ea000000 	b	175d4 <fatfs_add_free_space+0x98>
    }

    return 1;
   175d0:	e3a00001 	mov	r0, #1
}
   175d4:	e28dd008 	add	sp, sp, #8
   175d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000175dc <fatfs_allocate_free_space>:
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
   175dc:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
   175e0:	e2535000 	subs	r5, r3, #0
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
   175e4:	e24dd00c 	sub	sp, sp, #12
   175e8:	e1a04000 	mov	r4, r0
   175ec:	e1a08001 	mov	r8, r1
   175f0:	e1a0a002 	mov	r10, r2
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
   175f4:	0a000032 	beq	176c4 <fatfs_allocate_free_space+0xe8>
        return 0;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   175f8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   175fc:	e3730001 	cmn	r3, #1
   17600:	0a000001 	beq	1760c <fatfs_allocate_free_space+0x30>
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   17604:	e3e01000 	mvn	r1, #0
   17608:	ebfffe34 	bl	16ee0 <fatfs_set_fs_info_next_free_cluster>

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
   1760c:	e5d46000 	ldrb	r6, [r4]
    clusterCount = (size / clusterSize);
   17610:	e1a00005 	mov	r0, r5
    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
   17614:	e1a06486 	lsl	r6, r6, #9
    clusterCount = (size / clusterSize);
   17618:	e1a01006 	mov	r1, r6
   1761c:	eb0004c6 	bl	1893c <__aeabi_uidiv>

    // If any left over
    if (size-(clusterSize*clusterCount))
   17620:	e0060096 	mul	r6, r6, r0
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
    clusterCount = (size / clusterSize);
   17624:	e1a07000 	mov	r7, r0

    // If any left over
    if (size-(clusterSize*clusterCount))
   17628:	e1560005 	cmp	r6, r5
        clusterCount++;
   1762c:	12807001 	addne	r7, r0, #1

    // Allocated first link in the chain if a new file
    if (newFile)
   17630:	e3580000 	cmp	r8, #0
   17634:	1a000026 	bne	176d4 <fatfs_allocate_free_space+0xf8>
            return 1;
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
   17638:	e59a6000 	ldr	r6, [r10]
   1763c:	e58d6000 	str	r6, [sp]
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   17640:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17644:	e3730001 	cmn	r3, #1
   17648:	0a000002 	beq	17658 <fatfs_allocate_free_space+0x7c>
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   1764c:	e1a00004 	mov	r0, r4
   17650:	e3e01000 	mvn	r1, #0
   17654:	ebfffe21 	bl	16ee0 <fatfs_set_fs_info_next_free_cluster>

    for (i=0;i<clusters;i++)
   17658:	e3570000 	cmp	r7, #0
   1765c:	0a00001a 	beq	176cc <fatfs_allocate_free_space+0xf0>
   17660:	e3a05000 	mov	r5, #0
   17664:	ea00000b 	b	17698 <fatfs_allocate_free_space+0xbc>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   17668:	e59d2004 	ldr	r2, [sp, #4]
   1766c:	ebfffe76 	bl	1704c <fatfs_fat_set_cluster>

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   17670:	e1a00004 	mov	r0, r4
   17674:	e59d1004 	ldr	r1, [sp, #4]
   17678:	e3e02000 	mvn	r2, #0
   1767c:	ebfffe72 	bl	1704c <fatfs_fat_set_cluster>

            // Adjust argument reference
            start = nextcluster;
   17680:	e59d6004 	ldr	r6, [sp, #4]
            if (i == 0)
   17684:	e3550000 	cmp	r5, #0

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   17688:	e2855001 	add	r5, r5, #1
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);

            // Adjust argument reference
            start = nextcluster;
            if (i == 0)
                *startCluster = nextcluster;
   1768c:	058d6000 	streq	r6, [sp]

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   17690:	e1550007 	cmp	r5, r7
   17694:	0a00000c 	beq	176cc <fatfs_allocate_free_space+0xf0>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   17698:	e5941008 	ldr	r1, [r4, #8]
   1769c:	e28d2004 	add	r2, sp, #4
   176a0:	e1a00004 	mov	r0, r4
   176a4:	ebfffe37 	bl	16f88 <fatfs_find_blank_cluster>
   176a8:	e2503000 	subs	r3, r0, #0
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   176ac:	e1a01006 	mov	r1, r6
   176b0:	e1a00004 	mov	r0, r4
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   176b4:	1affffeb 	bne	17668 <fatfs_allocate_free_space+0x8c>
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
            return 0;
   176b8:	e1a00003 	mov	r0, r3

    return 1;
}
   176bc:	e28dd00c 	add	sp, sp, #12
   176c0:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
        return 0;
   176c4:	e3a00000 	mov	r0, #0
   176c8:	eafffffb 	b	176bc <fatfs_allocate_free_space+0xe0>
        nextcluster = *startCluster;

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
            return 0;

    return 1;
   176cc:	e3a00001 	mov	r0, #1
   176d0:	eafffff9 	b	176bc <fatfs_allocate_free_space+0xe0>
        clusterCount++;

    // Allocated first link in the chain if a new file
    if (newFile)
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   176d4:	e1a00004 	mov	r0, r4
   176d8:	e5941008 	ldr	r1, [r4, #8]
   176dc:	e1a0200d 	mov	r2, sp
   176e0:	ebfffe28 	bl	16f88 <fatfs_find_blank_cluster>
   176e4:	e3500000 	cmp	r0, #0
   176e8:	0afffff5 	beq	176c4 <fatfs_allocate_free_space+0xe8>
            return 0;

        // If this is all that is needed then all done
        if (clusterCount==1)
   176ec:	e3570001 	cmp	r7, #1
   176f0:	159d6000 	ldrne	r6, [sp]
   176f4:	1affffd1 	bne	17640 <fatfs_allocate_free_space+0x64>
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   176f8:	e1a00004 	mov	r0, r4
   176fc:	e59d1000 	ldr	r1, [sp]
   17700:	e3e02000 	mvn	r2, #0
   17704:	ebfffe50 	bl	1704c <fatfs_fat_set_cluster>
            *startCluster = nextcluster;
   17708:	e59d3000 	ldr	r3, [sp]
            return 1;
   1770c:	e1a00007 	mov	r0, r7

        // If this is all that is needed then all done
        if (clusterCount==1)
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
            *startCluster = nextcluster;
   17710:	e58a3000 	str	r3, [r10]
   17714:	eaffffe8 	b	176bc <fatfs_allocate_free_space+0xe0>

00017718 <fatfs_add_file_entry>:
}
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
   17718:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1771c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   17720:	e58d1018 	str	r1, [sp, #24]
   17724:	e1a04000 	mov	r4, r0

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
   17728:	e5901034 	ldr	r1, [r0, #52]	; 0x34
}
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
   1772c:	e58d2020 	str	r2, [sp, #32]
   17730:	e58d3010 	str	r3, [sp, #16]

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
   17734:	e3510000 	cmp	r1, #0
   17738:	0a000003 	beq	1774c <fatfs_add_file_entry+0x34>
   1773c:	e1a00002 	mov	r0, r2
        return 0;

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
   17740:	ebfff78e 	bl	15580 <fatfs_lfn_entries_required>
    if (!entryCount)
   17744:	e2505000 	subs	r5, r0, #0
   17748:	1a000002 	bne	17758 <fatfs_add_file_entry+0x40>
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
        return 0;
   1774c:	e3a00000 	mov	r0, #0
        else
            return 0;
    } // End of while loop

    return 0;
}
   17750:	e28dd05c 	add	sp, sp, #92	; 0x5c
   17754:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    int x=0;
    int possible_spaces = 0;
    int start_recorded = 0;

    // No entries required?
    if (entryCount == 0)
   17758:	e2959001 	adds	r9, r5, #1
   1775c:	0afffffa 	beq	1774c <fatfs_add_file_entry+0x34>
   17760:	e3a06000 	mov	r6, #0
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   17764:	e2848040 	add	r8, r4, #64	; 0x40
   17768:	e58d8014 	str	r8, [sp, #20]
    int x=0;
    int possible_spaces = 0;
    int start_recorded = 0;

    // No entries required?
    if (entryCount == 0)
   1776c:	e1a07006 	mov	r7, r6
   17770:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   17774:	e1a08006 	mov	r8, r6
   17778:	e1a0b006 	mov	r11, r6
   1777c:	e1a05006 	mov	r5, r6
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   17780:	e2840e22 	add	r0, r4, #544	; 0x220
   17784:	e2841c02 	add	r1, r4, #512	; 0x200
   17788:	e58d001c 	str	r0, [sp, #28]
   1778c:	e58d1028 	str	r1, [sp, #40]	; 0x28

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17790:	e1a0200b 	mov	r2, r11
   17794:	e1a00004 	mov	r0, r4
   17798:	e59d1018 	ldr	r1, [sp, #24]
   1779c:	e3a03000 	mov	r3, #0
   177a0:	ebffe18b 	bl	fdd4 <fatfs_sector_reader>
   177a4:	e3500000 	cmp	r0, #0
   177a8:	e1a0a00b 	mov	r10, r11
   177ac:	e28bb001 	add	r11, r11, #1
   177b0:	0a0003fa 	beq	187a0 <fatfs_add_file_entry+0x1088>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   177b4:	e59d0014 	ldr	r0, [sp, #20]
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   177b8:	e58d0024 	str	r0, [sp, #36]	; 0x24

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   177bc:	ebfff732 	bl	1548c <fatfs_entry_lfn_text>
   177c0:	e3500000 	cmp	r0, #0
   177c4:	1a000012 	bne	17814 <fatfs_add_file_entry+0xfc>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   177c8:	e5d43040 	ldrb	r3, [r4, #64]	; 0x40
   177cc:	e35300e5 	cmp	r3, #229	; 0xe5
   177d0:	0a000236 	beq	180b0 <fatfs_add_file_entry+0x998>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   177d4:	e3530000 	cmp	r3, #0
   177d8:	0a000234 	beq	180b0 <fatfs_add_file_entry+0x998>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   177dc:	e2840060 	add	r0, r4, #96	; 0x60
   177e0:	ebfff729 	bl	1548c <fatfs_entry_lfn_text>
   177e4:	e3500000 	cmp	r0, #0
   177e8:	1a000028 	bne	17890 <fatfs_add_file_entry+0x178>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   177ec:	e5d4c060 	ldrb	r12, [r4, #96]	; 0x60
   177f0:	e35c00e5 	cmp	r12, #229	; 0xe5
   177f4:	0a00033f 	beq	184f8 <fatfs_add_file_entry+0xde0>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   177f8:	e35c0000 	cmp	r12, #0
   177fc:	1a000012 	bne	1784c <fatfs_add_file_entry+0x134>
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17800:	e3a06001 	mov	r6, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17804:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17808:	e1a0500c 	mov	r5, r12
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
   1780c:	e1a08006 	mov	r8, r6
   17810:	ea0002c4 	b	18328 <fatfs_add_file_entry+0xc10>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17814:	e3550000 	cmp	r5, #0
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
   17818:	e2855001 	add	r5, r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   1781c:	01a0700a 	moveq	r7, r10
   17820:	03a06000 	moveq	r6, #0
   17824:	03a08001 	moveq	r8, #1

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17828:	e2840060 	add	r0, r4, #96	; 0x60
   1782c:	ebfff716 	bl	1548c <fatfs_entry_lfn_text>
   17830:	e3500000 	cmp	r0, #0
   17834:	1a000012 	bne	17884 <fatfs_add_file_entry+0x16c>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17838:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
   1783c:	e35300e5 	cmp	r3, #229	; 0xe5
   17840:	0a000329 	beq	184ec <fatfs_add_file_entry+0xdd4>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17844:	e3530000 	cmp	r3, #0
   17848:	0a0002b2 	beq	18318 <fatfs_add_file_entry+0xc00>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   1784c:	e2840080 	add	r0, r4, #128	; 0x80
   17850:	ebfff70d 	bl	1548c <fatfs_entry_lfn_text>
   17854:	e3500000 	cmp	r0, #0
   17858:	1a00002a 	bne	17908 <fatfs_add_file_entry+0x1f0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   1785c:	e5d4c080 	ldrb	r12, [r4, #128]	; 0x80
   17860:	e35c00e5 	cmp	r12, #229	; 0xe5
   17864:	0a000319 	beq	184d0 <fatfs_add_file_entry+0xdb8>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17868:	e35c0000 	cmp	r12, #0
   1786c:	1a000014 	bne	178c4 <fatfs_add_file_entry+0x1ac>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17870:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17874:	e1a0500c 	mov	r5, r12
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17878:	e3a06002 	mov	r6, #2
                            start_recorded = 1;
   1787c:	e3a08001 	mov	r8, #1
   17880:	ea0002a0 	b	18308 <fatfs_add_file_entry+0xbf0>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17884:	e3550000 	cmp	r5, #0
   17888:	12855001 	addne	r5, r5, #1
   1788c:	1a000003 	bne	178a0 <fatfs_add_file_entry+0x188>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17890:	e3a06001 	mov	r6, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17894:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17898:	e1a05006 	mov	r5, r6
                        start_recorded = 1;
   1789c:	e1a08006 	mov	r8, r6

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   178a0:	e2840080 	add	r0, r4, #128	; 0x80
   178a4:	ebfff6f8 	bl	1548c <fatfs_entry_lfn_text>
   178a8:	e3500000 	cmp	r0, #0
   178ac:	1a000012 	bne	178fc <fatfs_add_file_entry+0x1e4>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   178b0:	e5d43080 	ldrb	r3, [r4, #128]	; 0x80
   178b4:	e35300e5 	cmp	r3, #229	; 0xe5
   178b8:	0a000301 	beq	184c4 <fatfs_add_file_entry+0xdac>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   178bc:	e3530000 	cmp	r3, #0
   178c0:	0a00028c 	beq	182f8 <fatfs_add_file_entry+0xbe0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   178c4:	e28400a0 	add	r0, r4, #160	; 0xa0
   178c8:	ebfff6ef 	bl	1548c <fatfs_entry_lfn_text>
   178cc:	e3500000 	cmp	r0, #0
   178d0:	1a00002a 	bne	17980 <fatfs_add_file_entry+0x268>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   178d4:	e5d430a0 	ldrb	r3, [r4, #160]	; 0xa0
   178d8:	e35300e5 	cmp	r3, #229	; 0xe5
   178dc:	0a00030f 	beq	18520 <fatfs_add_file_entry+0xe08>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   178e0:	e3530000 	cmp	r3, #0
   178e4:	1a000014 	bne	1793c <fatfs_add_file_entry+0x224>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   178e8:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   178ec:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   178f0:	e3a06003 	mov	r6, #3
                            start_recorded = 1;
   178f4:	e3a08001 	mov	r8, #1
   178f8:	ea000292 	b	18348 <fatfs_add_file_entry+0xc30>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   178fc:	e3550000 	cmp	r5, #0
   17900:	12855001 	addne	r5, r5, #1
   17904:	1a000003 	bne	17918 <fatfs_add_file_entry+0x200>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17908:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   1790c:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17910:	e3a06002 	mov	r6, #2
                        start_recorded = 1;
   17914:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17918:	e28400a0 	add	r0, r4, #160	; 0xa0
   1791c:	ebfff6da 	bl	1548c <fatfs_entry_lfn_text>
   17920:	e3500000 	cmp	r0, #0
   17924:	1a000012 	bne	17974 <fatfs_add_file_entry+0x25c>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17928:	e5d420a0 	ldrb	r2, [r4, #160]	; 0xa0
   1792c:	e35200e5 	cmp	r2, #229	; 0xe5
   17930:	0a0002f7 	beq	18514 <fatfs_add_file_entry+0xdfc>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17934:	e3520000 	cmp	r2, #0
   17938:	0a00027e 	beq	18338 <fatfs_add_file_entry+0xc20>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   1793c:	e28400c0 	add	r0, r4, #192	; 0xc0
   17940:	ebfff6d1 	bl	1548c <fatfs_entry_lfn_text>
   17944:	e3500000 	cmp	r0, #0
   17948:	1a00002a 	bne	179f8 <fatfs_add_file_entry+0x2e0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   1794c:	e5d430c0 	ldrb	r3, [r4, #192]	; 0xc0
   17950:	e35300e5 	cmp	r3, #229	; 0xe5
   17954:	0a0002fb 	beq	18548 <fatfs_add_file_entry+0xe30>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17958:	e3530000 	cmp	r3, #0
   1795c:	1a000014 	bne	179b4 <fatfs_add_file_entry+0x29c>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17960:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17964:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17968:	e3a06004 	mov	r6, #4
                            start_recorded = 1;
   1796c:	e3a08001 	mov	r8, #1
   17970:	ea00027c 	b	18368 <fatfs_add_file_entry+0xc50>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17974:	e3550000 	cmp	r5, #0
   17978:	12855001 	addne	r5, r5, #1
   1797c:	1a000003 	bne	17990 <fatfs_add_file_entry+0x278>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17980:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17984:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17988:	e3a06003 	mov	r6, #3
                        start_recorded = 1;
   1798c:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17990:	e28400c0 	add	r0, r4, #192	; 0xc0
   17994:	ebfff6bc 	bl	1548c <fatfs_entry_lfn_text>
   17998:	e3500000 	cmp	r0, #0
   1799c:	1a000012 	bne	179ec <fatfs_add_file_entry+0x2d4>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   179a0:	e5d420c0 	ldrb	r2, [r4, #192]	; 0xc0
   179a4:	e35200e5 	cmp	r2, #229	; 0xe5
   179a8:	0a0002e3 	beq	1853c <fatfs_add_file_entry+0xe24>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   179ac:	e3520000 	cmp	r2, #0
   179b0:	0a000268 	beq	18358 <fatfs_add_file_entry+0xc40>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   179b4:	e28400e0 	add	r0, r4, #224	; 0xe0
   179b8:	ebfff6b3 	bl	1548c <fatfs_entry_lfn_text>
   179bc:	e3500000 	cmp	r0, #0
   179c0:	1a00002a 	bne	17a70 <fatfs_add_file_entry+0x358>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   179c4:	e5d430e0 	ldrb	r3, [r4, #224]	; 0xe0
   179c8:	e35300e5 	cmp	r3, #229	; 0xe5
   179cc:	0a0002e7 	beq	18570 <fatfs_add_file_entry+0xe58>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   179d0:	e3530000 	cmp	r3, #0
   179d4:	1a000014 	bne	17a2c <fatfs_add_file_entry+0x314>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   179d8:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   179dc:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   179e0:	e3a06005 	mov	r6, #5
                            start_recorded = 1;
   179e4:	e3a08001 	mov	r8, #1
   179e8:	ea000266 	b	18388 <fatfs_add_file_entry+0xc70>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   179ec:	e3550000 	cmp	r5, #0
   179f0:	12855001 	addne	r5, r5, #1
   179f4:	1a000003 	bne	17a08 <fatfs_add_file_entry+0x2f0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   179f8:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   179fc:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17a00:	e3a06004 	mov	r6, #4
                        start_recorded = 1;
   17a04:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17a08:	e28400e0 	add	r0, r4, #224	; 0xe0
   17a0c:	ebfff69e 	bl	1548c <fatfs_entry_lfn_text>
   17a10:	e3500000 	cmp	r0, #0
   17a14:	1a000012 	bne	17a64 <fatfs_add_file_entry+0x34c>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17a18:	e5d420e0 	ldrb	r2, [r4, #224]	; 0xe0
   17a1c:	e35200e5 	cmp	r2, #229	; 0xe5
   17a20:	0a0002cf 	beq	18564 <fatfs_add_file_entry+0xe4c>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17a24:	e3520000 	cmp	r2, #0
   17a28:	0a000252 	beq	18378 <fatfs_add_file_entry+0xc60>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17a2c:	e2840c01 	add	r0, r4, #256	; 0x100
   17a30:	ebfff695 	bl	1548c <fatfs_entry_lfn_text>
   17a34:	e3500000 	cmp	r0, #0
   17a38:	1a00002a 	bne	17ae8 <fatfs_add_file_entry+0x3d0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17a3c:	e5d43100 	ldrb	r3, [r4, #256]	; 0x100
   17a40:	e35300e5 	cmp	r3, #229	; 0xe5
   17a44:	0a0002d3 	beq	18598 <fatfs_add_file_entry+0xe80>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17a48:	e3530000 	cmp	r3, #0
   17a4c:	1a000014 	bne	17aa4 <fatfs_add_file_entry+0x38c>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17a50:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17a54:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17a58:	e3a06006 	mov	r6, #6
                            start_recorded = 1;
   17a5c:	e3a08001 	mov	r8, #1
   17a60:	ea000250 	b	183a8 <fatfs_add_file_entry+0xc90>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17a64:	e3550000 	cmp	r5, #0
   17a68:	12855001 	addne	r5, r5, #1
   17a6c:	1a000003 	bne	17a80 <fatfs_add_file_entry+0x368>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17a70:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17a74:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17a78:	e3a06005 	mov	r6, #5
                        start_recorded = 1;
   17a7c:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17a80:	e2840c01 	add	r0, r4, #256	; 0x100
   17a84:	ebfff680 	bl	1548c <fatfs_entry_lfn_text>
   17a88:	e3500000 	cmp	r0, #0
   17a8c:	1a000012 	bne	17adc <fatfs_add_file_entry+0x3c4>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17a90:	e5d42100 	ldrb	r2, [r4, #256]	; 0x100
   17a94:	e35200e5 	cmp	r2, #229	; 0xe5
   17a98:	0a0002bb 	beq	1858c <fatfs_add_file_entry+0xe74>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17a9c:	e3520000 	cmp	r2, #0
   17aa0:	0a00023c 	beq	18398 <fatfs_add_file_entry+0xc80>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17aa4:	e2840e12 	add	r0, r4, #288	; 0x120
   17aa8:	ebfff677 	bl	1548c <fatfs_entry_lfn_text>
   17aac:	e3500000 	cmp	r0, #0
   17ab0:	1a00002a 	bne	17b60 <fatfs_add_file_entry+0x448>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17ab4:	e5d43120 	ldrb	r3, [r4, #288]	; 0x120
   17ab8:	e35300e5 	cmp	r3, #229	; 0xe5
   17abc:	0a0002bf 	beq	185c0 <fatfs_add_file_entry+0xea8>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17ac0:	e3530000 	cmp	r3, #0
   17ac4:	1a000014 	bne	17b1c <fatfs_add_file_entry+0x404>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17ac8:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17acc:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17ad0:	e3a06007 	mov	r6, #7
                            start_recorded = 1;
   17ad4:	e3a08001 	mov	r8, #1
   17ad8:	ea00023a 	b	183c8 <fatfs_add_file_entry+0xcb0>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17adc:	e3550000 	cmp	r5, #0
   17ae0:	12855001 	addne	r5, r5, #1
   17ae4:	1a000003 	bne	17af8 <fatfs_add_file_entry+0x3e0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17ae8:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17aec:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17af0:	e3a06006 	mov	r6, #6
                        start_recorded = 1;
   17af4:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17af8:	e2840e12 	add	r0, r4, #288	; 0x120
   17afc:	ebfff662 	bl	1548c <fatfs_entry_lfn_text>
   17b00:	e3500000 	cmp	r0, #0
   17b04:	1a000012 	bne	17b54 <fatfs_add_file_entry+0x43c>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17b08:	e5d42120 	ldrb	r2, [r4, #288]	; 0x120
   17b0c:	e35200e5 	cmp	r2, #229	; 0xe5
   17b10:	0a0002a7 	beq	185b4 <fatfs_add_file_entry+0xe9c>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17b14:	e3520000 	cmp	r2, #0
   17b18:	0a000226 	beq	183b8 <fatfs_add_file_entry+0xca0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17b1c:	e2840d05 	add	r0, r4, #320	; 0x140
   17b20:	ebfff659 	bl	1548c <fatfs_entry_lfn_text>
   17b24:	e3500000 	cmp	r0, #0
   17b28:	1a00002a 	bne	17bd8 <fatfs_add_file_entry+0x4c0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17b2c:	e5d43140 	ldrb	r3, [r4, #320]	; 0x140
   17b30:	e35300e5 	cmp	r3, #229	; 0xe5
   17b34:	0a0002ab 	beq	185e8 <fatfs_add_file_entry+0xed0>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17b38:	e3530000 	cmp	r3, #0
   17b3c:	1a000014 	bne	17b94 <fatfs_add_file_entry+0x47c>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17b40:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17b44:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17b48:	e3a06008 	mov	r6, #8
                            start_recorded = 1;
   17b4c:	e3a08001 	mov	r8, #1
   17b50:	ea000224 	b	183e8 <fatfs_add_file_entry+0xcd0>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17b54:	e3550000 	cmp	r5, #0
   17b58:	12855001 	addne	r5, r5, #1
   17b5c:	1a000003 	bne	17b70 <fatfs_add_file_entry+0x458>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17b60:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17b64:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17b68:	e3a06007 	mov	r6, #7
                        start_recorded = 1;
   17b6c:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17b70:	e2840d05 	add	r0, r4, #320	; 0x140
   17b74:	ebfff644 	bl	1548c <fatfs_entry_lfn_text>
   17b78:	e3500000 	cmp	r0, #0
   17b7c:	1a000012 	bne	17bcc <fatfs_add_file_entry+0x4b4>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17b80:	e5d42140 	ldrb	r2, [r4, #320]	; 0x140
   17b84:	e35200e5 	cmp	r2, #229	; 0xe5
   17b88:	0a000293 	beq	185dc <fatfs_add_file_entry+0xec4>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17b8c:	e3520000 	cmp	r2, #0
   17b90:	0a000210 	beq	183d8 <fatfs_add_file_entry+0xcc0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17b94:	e2840e16 	add	r0, r4, #352	; 0x160
   17b98:	ebfff63b 	bl	1548c <fatfs_entry_lfn_text>
   17b9c:	e3500000 	cmp	r0, #0
   17ba0:	1a00002a 	bne	17c50 <fatfs_add_file_entry+0x538>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17ba4:	e5d43160 	ldrb	r3, [r4, #352]	; 0x160
   17ba8:	e35300e5 	cmp	r3, #229	; 0xe5
   17bac:	0a000297 	beq	18610 <fatfs_add_file_entry+0xef8>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17bb0:	e3530000 	cmp	r3, #0
   17bb4:	1a000014 	bne	17c0c <fatfs_add_file_entry+0x4f4>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17bb8:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17bbc:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17bc0:	e3a06009 	mov	r6, #9
                            start_recorded = 1;
   17bc4:	e3a08001 	mov	r8, #1
   17bc8:	ea00020e 	b	18408 <fatfs_add_file_entry+0xcf0>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17bcc:	e3550000 	cmp	r5, #0
   17bd0:	12855001 	addne	r5, r5, #1
   17bd4:	1a000003 	bne	17be8 <fatfs_add_file_entry+0x4d0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17bd8:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17bdc:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17be0:	e3a06008 	mov	r6, #8
                        start_recorded = 1;
   17be4:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17be8:	e2840e16 	add	r0, r4, #352	; 0x160
   17bec:	ebfff626 	bl	1548c <fatfs_entry_lfn_text>
   17bf0:	e3500000 	cmp	r0, #0
   17bf4:	1a000012 	bne	17c44 <fatfs_add_file_entry+0x52c>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17bf8:	e5d42160 	ldrb	r2, [r4, #352]	; 0x160
   17bfc:	e35200e5 	cmp	r2, #229	; 0xe5
   17c00:	0a00027f 	beq	18604 <fatfs_add_file_entry+0xeec>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17c04:	e3520000 	cmp	r2, #0
   17c08:	0a0001fa 	beq	183f8 <fatfs_add_file_entry+0xce0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17c0c:	e2840d06 	add	r0, r4, #384	; 0x180
   17c10:	ebfff61d 	bl	1548c <fatfs_entry_lfn_text>
   17c14:	e3500000 	cmp	r0, #0
   17c18:	1a00002a 	bne	17cc8 <fatfs_add_file_entry+0x5b0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17c1c:	e5d43180 	ldrb	r3, [r4, #384]	; 0x180
   17c20:	e35300e5 	cmp	r3, #229	; 0xe5
   17c24:	0a000283 	beq	18638 <fatfs_add_file_entry+0xf20>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17c28:	e3530000 	cmp	r3, #0
   17c2c:	1a000014 	bne	17c84 <fatfs_add_file_entry+0x56c>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17c30:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17c34:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17c38:	e3a0600a 	mov	r6, #10
                            start_recorded = 1;
   17c3c:	e3a08001 	mov	r8, #1
   17c40:	ea0001f8 	b	18428 <fatfs_add_file_entry+0xd10>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17c44:	e3550000 	cmp	r5, #0
   17c48:	12855001 	addne	r5, r5, #1
   17c4c:	1a000003 	bne	17c60 <fatfs_add_file_entry+0x548>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17c50:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17c54:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17c58:	e3a06009 	mov	r6, #9
                        start_recorded = 1;
   17c5c:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17c60:	e2840d06 	add	r0, r4, #384	; 0x180
   17c64:	ebfff608 	bl	1548c <fatfs_entry_lfn_text>
   17c68:	e3500000 	cmp	r0, #0
   17c6c:	1a000012 	bne	17cbc <fatfs_add_file_entry+0x5a4>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17c70:	e5d42180 	ldrb	r2, [r4, #384]	; 0x180
   17c74:	e35200e5 	cmp	r2, #229	; 0xe5
   17c78:	0a00026b 	beq	1862c <fatfs_add_file_entry+0xf14>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17c7c:	e3520000 	cmp	r2, #0
   17c80:	0a0001e4 	beq	18418 <fatfs_add_file_entry+0xd00>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17c84:	e2840e1a 	add	r0, r4, #416	; 0x1a0
   17c88:	ebfff5ff 	bl	1548c <fatfs_entry_lfn_text>
   17c8c:	e3500000 	cmp	r0, #0
   17c90:	1a00002a 	bne	17d40 <fatfs_add_file_entry+0x628>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17c94:	e5d431a0 	ldrb	r3, [r4, #416]	; 0x1a0
   17c98:	e35300e5 	cmp	r3, #229	; 0xe5
   17c9c:	0a00026f 	beq	18660 <fatfs_add_file_entry+0xf48>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17ca0:	e3530000 	cmp	r3, #0
   17ca4:	1a000014 	bne	17cfc <fatfs_add_file_entry+0x5e4>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17ca8:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17cac:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17cb0:	e3a0600b 	mov	r6, #11
                            start_recorded = 1;
   17cb4:	e3a08001 	mov	r8, #1
   17cb8:	ea0001e2 	b	18448 <fatfs_add_file_entry+0xd30>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17cbc:	e3550000 	cmp	r5, #0
   17cc0:	12855001 	addne	r5, r5, #1
   17cc4:	1a000003 	bne	17cd8 <fatfs_add_file_entry+0x5c0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17cc8:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17ccc:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17cd0:	e3a0600a 	mov	r6, #10
                        start_recorded = 1;
   17cd4:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17cd8:	e2840e1a 	add	r0, r4, #416	; 0x1a0
   17cdc:	ebfff5ea 	bl	1548c <fatfs_entry_lfn_text>
   17ce0:	e3500000 	cmp	r0, #0
   17ce4:	1a000012 	bne	17d34 <fatfs_add_file_entry+0x61c>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17ce8:	e5d421a0 	ldrb	r2, [r4, #416]	; 0x1a0
   17cec:	e35200e5 	cmp	r2, #229	; 0xe5
   17cf0:	0a000257 	beq	18654 <fatfs_add_file_entry+0xf3c>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17cf4:	e3520000 	cmp	r2, #0
   17cf8:	0a0001ce 	beq	18438 <fatfs_add_file_entry+0xd20>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17cfc:	e2840d07 	add	r0, r4, #448	; 0x1c0
   17d00:	ebfff5e1 	bl	1548c <fatfs_entry_lfn_text>
   17d04:	e3500000 	cmp	r0, #0
   17d08:	1a00002a 	bne	17db8 <fatfs_add_file_entry+0x6a0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17d0c:	e5d431c0 	ldrb	r3, [r4, #448]	; 0x1c0
   17d10:	e35300e5 	cmp	r3, #229	; 0xe5
   17d14:	0a00025b 	beq	18688 <fatfs_add_file_entry+0xf70>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17d18:	e3530000 	cmp	r3, #0
   17d1c:	1a000014 	bne	17d74 <fatfs_add_file_entry+0x65c>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17d20:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17d24:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17d28:	e3a0600c 	mov	r6, #12
                            start_recorded = 1;
   17d2c:	e3a08001 	mov	r8, #1
   17d30:	ea0001cc 	b	18468 <fatfs_add_file_entry+0xd50>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17d34:	e3550000 	cmp	r5, #0
   17d38:	12855001 	addne	r5, r5, #1
   17d3c:	1a000003 	bne	17d50 <fatfs_add_file_entry+0x638>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17d40:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17d44:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17d48:	e3a0600b 	mov	r6, #11
                        start_recorded = 1;
   17d4c:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17d50:	e2840d07 	add	r0, r4, #448	; 0x1c0
   17d54:	ebfff5cc 	bl	1548c <fatfs_entry_lfn_text>
   17d58:	e3500000 	cmp	r0, #0
   17d5c:	1a000012 	bne	17dac <fatfs_add_file_entry+0x694>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17d60:	e5d421c0 	ldrb	r2, [r4, #448]	; 0x1c0
   17d64:	e35200e5 	cmp	r2, #229	; 0xe5
   17d68:	0a000243 	beq	1867c <fatfs_add_file_entry+0xf64>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17d6c:	e3520000 	cmp	r2, #0
   17d70:	0a0001b8 	beq	18458 <fatfs_add_file_entry+0xd40>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17d74:	e2840e1e 	add	r0, r4, #480	; 0x1e0
   17d78:	ebfff5c3 	bl	1548c <fatfs_entry_lfn_text>
   17d7c:	e3500000 	cmp	r0, #0
   17d80:	1a00002a 	bne	17e30 <fatfs_add_file_entry+0x718>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17d84:	e5d431e0 	ldrb	r3, [r4, #480]	; 0x1e0
   17d88:	e35300e5 	cmp	r3, #229	; 0xe5
   17d8c:	0a000247 	beq	186b0 <fatfs_add_file_entry+0xf98>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17d90:	e3530000 	cmp	r3, #0
   17d94:	1a000014 	bne	17dec <fatfs_add_file_entry+0x6d4>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17d98:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17d9c:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17da0:	e3a0600d 	mov	r6, #13
                            start_recorded = 1;
   17da4:	e3a08001 	mov	r8, #1
   17da8:	ea0001b6 	b	18488 <fatfs_add_file_entry+0xd70>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17dac:	e3550000 	cmp	r5, #0
   17db0:	12855001 	addne	r5, r5, #1
   17db4:	1a000003 	bne	17dc8 <fatfs_add_file_entry+0x6b0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17db8:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17dbc:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17dc0:	e3a0600c 	mov	r6, #12
                        start_recorded = 1;
   17dc4:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17dc8:	e2840e1e 	add	r0, r4, #480	; 0x1e0
   17dcc:	ebfff5ae 	bl	1548c <fatfs_entry_lfn_text>
   17dd0:	e3500000 	cmp	r0, #0
   17dd4:	1a000012 	bne	17e24 <fatfs_add_file_entry+0x70c>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17dd8:	e5d421e0 	ldrb	r2, [r4, #480]	; 0x1e0
   17ddc:	e35200e5 	cmp	r2, #229	; 0xe5
   17de0:	0a00022f 	beq	186a4 <fatfs_add_file_entry+0xf8c>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17de4:	e3520000 	cmp	r2, #0
   17de8:	0a0001a2 	beq	18478 <fatfs_add_file_entry+0xd60>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17dec:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   17df0:	ebfff5a5 	bl	1548c <fatfs_entry_lfn_text>
   17df4:	e3500000 	cmp	r0, #0
   17df8:	1a00002a 	bne	17ea8 <fatfs_add_file_entry+0x790>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17dfc:	e5d43200 	ldrb	r3, [r4, #512]	; 0x200
   17e00:	e35300e5 	cmp	r3, #229	; 0xe5
   17e04:	0a000233 	beq	186d8 <fatfs_add_file_entry+0xfc0>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17e08:	e3530000 	cmp	r3, #0
   17e0c:	1a000014 	bne	17e64 <fatfs_add_file_entry+0x74c>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17e10:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17e14:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17e18:	e3a0600e 	mov	r6, #14
                            start_recorded = 1;
   17e1c:	e3a08001 	mov	r8, #1
   17e20:	ea0001a0 	b	184a8 <fatfs_add_file_entry+0xd90>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17e24:	e3550000 	cmp	r5, #0
   17e28:	12855001 	addne	r5, r5, #1
   17e2c:	1a000003 	bne	17e40 <fatfs_add_file_entry+0x728>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17e30:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17e34:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17e38:	e3a0600d 	mov	r6, #13
                        start_recorded = 1;
   17e3c:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17e40:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   17e44:	ebfff590 	bl	1548c <fatfs_entry_lfn_text>
   17e48:	e3500000 	cmp	r0, #0
   17e4c:	1a000012 	bne	17e9c <fatfs_add_file_entry+0x784>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17e50:	e5d42200 	ldrb	r2, [r4, #512]	; 0x200
   17e54:	e35200e5 	cmp	r2, #229	; 0xe5
   17e58:	0a00021b 	beq	186cc <fatfs_add_file_entry+0xfb4>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17e5c:	e3520000 	cmp	r2, #0
   17e60:	0a00018c 	beq	18498 <fatfs_add_file_entry+0xd80>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17e64:	e59d001c 	ldr	r0, [sp, #28]
   17e68:	ebfff587 	bl	1548c <fatfs_entry_lfn_text>
   17e6c:	e3500000 	cmp	r0, #0
   17e70:	1a000089 	bne	1809c <fatfs_add_file_entry+0x984>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17e74:	e5d43220 	ldrb	r3, [r4, #544]	; 0x220
   17e78:	e35300e5 	cmp	r3, #229	; 0xe5
   17e7c:	0a00021f 	beq	18700 <fatfs_add_file_entry+0xfe8>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17e80:	e3530000 	cmp	r3, #0
   17e84:	1a00018b 	bne	184b8 <fatfs_add_file_entry+0xda0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17e88:	e1a0700a 	mov	r7, r10
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   17e8c:	e1a05003 	mov	r5, r3
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   17e90:	e3a0600f 	mov	r6, #15
                            start_recorded = 1;
   17e94:	e3a08001 	mov	r8, #1
   17e98:	ea000013 	b	17eec <fatfs_add_file_entry+0x7d4>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   17e9c:	e3550000 	cmp	r5, #0
   17ea0:	12855001 	addne	r5, r5, #1
   17ea4:	1a000003 	bne	17eb8 <fatfs_add_file_entry+0x7a0>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17ea8:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17eac:	e1a0700a 	mov	r7, r10
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   17eb0:	e3a0600e 	mov	r6, #14
                        start_recorded = 1;
   17eb4:	e1a08005 	mov	r8, r5

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   17eb8:	e59d001c 	ldr	r0, [sp, #28]
   17ebc:	ebfff572 	bl	1548c <fatfs_entry_lfn_text>
   17ec0:	e3500000 	cmp	r0, #0
   17ec4:	1a000070 	bne	1808c <fatfs_add_file_entry+0x974>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   17ec8:	e5d42220 	ldrb	r2, [r4, #544]	; 0x220
   17ecc:	e35200e5 	cmp	r2, #229	; 0xe5
   17ed0:	0a000207 	beq	186f4 <fatfs_add_file_entry+0xfdc>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   17ed4:	e3520000 	cmp	r2, #0
   17ed8:	1a000176 	bne	184b8 <fatfs_add_file_entry+0xda0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   17edc:	e3550000 	cmp	r5, #0
   17ee0:	01a0700a 	moveq	r7, r10
   17ee4:	03a0600f 	moveq	r6, #15
   17ee8:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   17eec:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   17ef0:	e1590005 	cmp	r9, r5
   17ef4:	cafffe25 	bgt	17790 <fatfs_add_file_entry+0x78>
   17ef8:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   17efc:	e59d8010 	ldr	r8, [sp, #16]
    struct fat_dir_entry shortEntry;
    int dirtySector = 0;

    uint32 dirSector = 0;
    uint8 dirOffset = 0;
    int foundEnd = 0;
   17f00:	e3a0a000 	mov	r10, #0
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   17f04:	e58d7008 	str	r7, [sp, #8]
   17f08:	e5d83000 	ldrb	r3, [r8]
   17f0c:	e5d81001 	ldrb	r1, [r8, #1]
   17f10:	e5d8b002 	ldrb	r11, [r8, #2]
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   17f14:	e2848e22 	add	r8, r4, #544	; 0x220
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   17f18:	e3130001 	tst	r3, #1
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   17f1c:	e58d8028 	str	r8, [sp, #40]	; 0x28
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   17f20:	01a0200a 	moveq	r2, r10
   17f24:	13a02080 	movne	r2, #128	; 0x80
   17f28:	e59d8010 	ldr	r8, [sp, #16]
   17f2c:	e08130a3 	add	r3, r1, r3, lsr #1
   17f30:	e0823003 	add	r3, r2, r3
   17f34:	e5d89003 	ldrb	r9, [r8, #3]
   17f38:	e6ef3073 	uxtb	r3, r3
   17f3c:	e5d8e004 	ldrb	lr, [r8, #4]
   17f40:	e5d8c005 	ldrb	r12, [r8, #5]
   17f44:	e3130001 	tst	r3, #1
   17f48:	e08b30a3 	add	r3, r11, r3, lsr #1
   17f4c:	01a0b00a 	moveq	r11, r10
   17f50:	13a0b080 	movne	r11, #128	; 0x80
   17f54:	e5d80006 	ldrb	r0, [r8, #6]
   17f58:	e6eb3073 	uxtab	r3, r11, r3
   17f5c:	e5d81007 	ldrb	r1, [r8, #7]
   17f60:	e5d82008 	ldrb	r2, [r8, #8]
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   17f64:	e284be1e 	add	r11, r4, #480	; 0x1e0
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   17f68:	e6ef3073 	uxtb	r3, r3
   17f6c:	e5d88009 	ldrb	r8, [r8, #9]
   17f70:	e3130001 	tst	r3, #1
   17f74:	e08930a3 	add	r3, r9, r3, lsr #1
   17f78:	01a0900a 	moveq	r9, r10
   17f7c:	13a09080 	movne	r9, #128	; 0x80
   17f80:	e58d801c 	str	r8, [sp, #28]
   17f84:	e6e93073 	uxtab	r3, r9, r3
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   17f88:	e2848c02 	add	r8, r4, #512	; 0x200
   17f8c:	e58d8014 	str	r8, [sp, #20]
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   17f90:	e6ef3073 	uxtb	r3, r3
   17f94:	e59d8010 	ldr	r8, [sp, #16]
   17f98:	e3130001 	tst	r3, #1
   17f9c:	e08e30a3 	add	r3, lr, r3, lsr #1
   17fa0:	01a0900a 	moveq	r9, r10
   17fa4:	13a09080 	movne	r9, #128	; 0x80
   17fa8:	e5d8800a 	ldrb	r8, [r8, #10]
   17fac:	e6e93073 	uxtab	r3, r9, r3
   17fb0:	e6ef3073 	uxtb	r3, r3
   17fb4:	e3130001 	tst	r3, #1
   17fb8:	e08c30a3 	add	r3, r12, r3, lsr #1
   17fbc:	01a0e00a 	moveq	lr, r10
   17fc0:	13a0e080 	movne	lr, #128	; 0x80
   17fc4:	e6ee3073 	uxtab	r3, lr, r3
   17fc8:	e6ef3073 	uxtb	r3, r3
   17fcc:	e3130001 	tst	r3, #1
   17fd0:	e08030a3 	add	r3, r0, r3, lsr #1
   17fd4:	01a0c00a 	moveq	r12, r10
   17fd8:	13a0c080 	movne	r12, #128	; 0x80
   17fdc:	e6ec3073 	uxtab	r3, r12, r3
   17fe0:	e6ef3073 	uxtb	r3, r3
   17fe4:	e3130001 	tst	r3, #1
   17fe8:	e08130a3 	add	r3, r1, r3, lsr #1
   17fec:	01a0000a 	moveq	r0, r10
   17ff0:	13a00080 	movne	r0, #128	; 0x80
   17ff4:	e6e03073 	uxtab	r3, r0, r3
   17ff8:	e59d001c 	ldr	r0, [sp, #28]
   17ffc:	e58db01c 	str	r11, [sp, #28]
   18000:	e1a0b005 	mov	r11, r5
   18004:	e6ef3073 	uxtb	r3, r3
   18008:	e59d5020 	ldr	r5, [sp, #32]
   1800c:	e3130001 	tst	r3, #1
   18010:	e08230a3 	add	r3, r2, r3, lsr #1
   18014:	01a0100a 	moveq	r1, r10
   18018:	13a01080 	movne	r1, #128	; 0x80
   1801c:	e6e13073 	uxtab	r3, r1, r3
   18020:	e6ef3073 	uxtb	r3, r3
   18024:	e3130001 	tst	r3, #1
   18028:	e08030a3 	add	r3, r0, r3, lsr #1
   1802c:	01a0200a 	moveq	r2, r10
   18030:	13a02080 	movne	r2, #128	; 0x80
   18034:	e6e23073 	uxtab	r3, r2, r3
   18038:	e6ef3073 	uxtb	r3, r3
   1803c:	e3130001 	tst	r3, #1
   18040:	e08830a3 	add	r3, r8, r3, lsr #1
   18044:	01a0200a 	moveq	r2, r10
   18048:	13a02080 	movne	r2, #128	; 0x80
   1804c:	e6e29073 	uxtab	r9, r2, r3
   18050:	e1a08007 	mov	r8, r7
   18054:	e6ef9079 	uxtb	r9, r9

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18058:	e1a00004 	mov	r0, r4
   1805c:	e59d1018 	ldr	r1, [sp, #24]
   18060:	e1a02008 	mov	r2, r8
   18064:	e3a03000 	mov	r3, #0
   18068:	ebffdf59 	bl	fdd4 <fatfs_sector_reader>
   1806c:	e3500000 	cmp	r0, #0
   18070:	0afffdb5 	beq	1774c <fatfs_add_file_entry+0x34>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
   18074:	e35a0000 	cmp	r10, #0
   18078:	1a000014 	bne	180d0 <fatfs_add_file_entry+0x9b8>
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
   1807c:	e1580007 	cmp	r8, r7
   18080:	0a0001a5 	beq	1871c <fatfs_add_file_entry+0x1004>
   18084:	e2888001 	add	r8, r8, #1
   18088:	eafffff2 	b	18058 <fatfs_add_file_entry+0x940>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
   1808c:	e3550000 	cmp	r5, #0
   18090:	12855001 	addne	r5, r5, #1
   18094:	11a0a007 	movne	r10, r7
   18098:	1a000002 	bne	180a8 <fatfs_add_file_entry+0x990>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   1809c:	e3a05001 	mov	r5, #1
                    // First entry?
                    if (possible_spaces == 0)
                    {
                        // Store start
                        *pSector = x-1;
                        *pOffset = item;
   180a0:	e3a0600f 	mov	r6, #15
                        start_recorded = 1;
   180a4:	e1a08005 	mov	r8, r5
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   180a8:	e1a0700a 	mov	r7, r10
   180ac:	eafffdb7 	b	17790 <fatfs_add_file_entry+0x78>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   180b0:	e3550000 	cmp	r5, #0
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
   180b4:	e2855001 	add	r5, r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   180b8:	01a0700a 	moveq	r7, r10
   180bc:	03a06000 	moveq	r6, #0
   180c0:	03a08001 	moveq	r8, #1
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   180c4:	e1590005 	cmp	r9, r5
   180c8:	cafffdd6 	bgt	17828 <fatfs_add_file_entry+0x110>
   180cc:	eaffff89 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   180d0:	e35b0000 	cmp	r11, #0
   180d4:	0a0001fc 	beq	188cc <fatfs_add_file_entry+0x11b4>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   180d8:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   180dc:	e1a00005 	mov	r0, r5
   180e0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   180e4:	e1a0200b 	mov	r2, r11
   180e8:	e1a03009 	mov	r3, r9
   180ec:	ebfff52e 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   180f0:	e35b0000 	cmp	r11, #0
   180f4:	0a0001f2 	beq	188c4 <fatfs_add_file_entry+0x11ac>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   180f8:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   180fc:	e1a00005 	mov	r0, r5
   18100:	e2841060 	add	r1, r4, #96	; 0x60
   18104:	e1a0200b 	mov	r2, r11
   18108:	e1a03009 	mov	r3, r9
   1810c:	ebfff526 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18110:	e35b0000 	cmp	r11, #0
   18114:	0a0001e8 	beq	188bc <fatfs_add_file_entry+0x11a4>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18118:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1811c:	e1a00005 	mov	r0, r5
   18120:	e2841080 	add	r1, r4, #128	; 0x80
   18124:	e1a0200b 	mov	r2, r11
   18128:	e1a03009 	mov	r3, r9
   1812c:	ebfff51e 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18130:	e35b0000 	cmp	r11, #0
   18134:	0a0001de 	beq	188b4 <fatfs_add_file_entry+0x119c>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18138:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1813c:	e1a00005 	mov	r0, r5
   18140:	e28410a0 	add	r1, r4, #160	; 0xa0
   18144:	e1a0200b 	mov	r2, r11
   18148:	e1a03009 	mov	r3, r9
   1814c:	ebfff516 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18150:	e35b0000 	cmp	r11, #0
   18154:	0a0001ba 	beq	18844 <fatfs_add_file_entry+0x112c>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18158:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1815c:	e1a00005 	mov	r0, r5
   18160:	e28410c0 	add	r1, r4, #192	; 0xc0
   18164:	e1a0200b 	mov	r2, r11
   18168:	e1a03009 	mov	r3, r9
   1816c:	ebfff50e 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18170:	e35b0000 	cmp	r11, #0
   18174:	0a0001da 	beq	188e4 <fatfs_add_file_entry+0x11cc>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18178:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1817c:	e1a00005 	mov	r0, r5
   18180:	e28410e0 	add	r1, r4, #224	; 0xe0
   18184:	e1a0200b 	mov	r2, r11
   18188:	e1a03009 	mov	r3, r9
   1818c:	ebfff506 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18190:	e35b0000 	cmp	r11, #0
   18194:	0a0001d0 	beq	188dc <fatfs_add_file_entry+0x11c4>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18198:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1819c:	e1a00005 	mov	r0, r5
   181a0:	e2841c01 	add	r1, r4, #256	; 0x100
   181a4:	e1a0200b 	mov	r2, r11
   181a8:	e1a03009 	mov	r3, r9
   181ac:	ebfff4fe 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   181b0:	e35b0000 	cmp	r11, #0
   181b4:	0a0001c6 	beq	188d4 <fatfs_add_file_entry+0x11bc>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   181b8:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   181bc:	e1a00005 	mov	r0, r5
   181c0:	e2841e12 	add	r1, r4, #288	; 0x120
   181c4:	e1a0200b 	mov	r2, r11
   181c8:	e1a03009 	mov	r3, r9
   181cc:	ebfff4f6 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   181d0:	e35b0000 	cmp	r11, #0
   181d4:	0a0001ca 	beq	18904 <fatfs_add_file_entry+0x11ec>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   181d8:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   181dc:	e1a00005 	mov	r0, r5
   181e0:	e2841d05 	add	r1, r4, #320	; 0x140
   181e4:	e1a0200b 	mov	r2, r11
   181e8:	e1a03009 	mov	r3, r9
   181ec:	ebfff4ee 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   181f0:	e35b0000 	cmp	r11, #0
   181f4:	0a0001c0 	beq	188fc <fatfs_add_file_entry+0x11e4>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   181f8:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   181fc:	e1a00005 	mov	r0, r5
   18200:	e2841e16 	add	r1, r4, #352	; 0x160
   18204:	e1a0200b 	mov	r2, r11
   18208:	e1a03009 	mov	r3, r9
   1820c:	ebfff4e6 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18210:	e35b0000 	cmp	r11, #0
   18214:	0a0001b6 	beq	188f4 <fatfs_add_file_entry+0x11dc>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18218:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1821c:	e1a00005 	mov	r0, r5
   18220:	e2841d06 	add	r1, r4, #384	; 0x180
   18224:	e1a0200b 	mov	r2, r11
   18228:	e1a03009 	mov	r3, r9
   1822c:	ebfff4de 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18230:	e35b0000 	cmp	r11, #0
   18234:	0a0001ac 	beq	188ec <fatfs_add_file_entry+0x11d4>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18238:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1823c:	e1a00005 	mov	r0, r5
   18240:	e2841e1a 	add	r1, r4, #416	; 0x1a0
   18244:	e1a0200b 	mov	r2, r11
   18248:	e1a03009 	mov	r3, r9
   1824c:	ebfff4d6 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18250:	e35b0000 	cmp	r11, #0
   18254:	0a0001b2 	beq	18924 <fatfs_add_file_entry+0x120c>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18258:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1825c:	e1a00005 	mov	r0, r5
   18260:	e2841d07 	add	r1, r4, #448	; 0x1c0
   18264:	e1a0200b 	mov	r2, r11
   18268:	e1a03009 	mov	r3, r9
   1826c:	ebfff4ce 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18270:	e35b0000 	cmp	r11, #0
   18274:	0a0001a8 	beq	1891c <fatfs_add_file_entry+0x1204>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18278:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1827c:	e1a00005 	mov	r0, r5
   18280:	e59d101c 	ldr	r1, [sp, #28]
   18284:	e1a0200b 	mov	r2, r11
   18288:	e1a03009 	mov	r3, r9
   1828c:	ebfff4c6 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18290:	e35b0000 	cmp	r11, #0
   18294:	0a00019e 	beq	18914 <fatfs_add_file_entry+0x11fc>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   18298:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   1829c:	e1a00005 	mov	r0, r5
   182a0:	e59d1014 	ldr	r1, [sp, #20]
   182a4:	e1a0200b 	mov	r2, r11
   182a8:	e1a03009 	mov	r3, r9
   182ac:	ebfff4be 	bl	155ac <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   182b0:	e35b0000 	cmp	r11, #0
   182b4:	0a000194 	beq	1890c <fatfs_add_file_entry+0x11f4>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   182b8:	e24bb001 	sub	r11, r11, #1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   182bc:	e1a00005 	mov	r0, r5
   182c0:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   182c4:	e1a0200b 	mov	r2, r11
   182c8:	e1a03009 	mov	r3, r9
   182cc:	ebfff4b6 	bl	155ac <fatfs_filename_to_lfn>
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
   182d0:	e3a02d81 	mov	r2, #8256	; 0x2040
   182d4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   182d8:	e7940002 	ldr	r0, [r4, r2]
   182dc:	e3a02001 	mov	r2, #1
   182e0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   182e4:	e12fff33 	blx	r3
   182e8:	e3500000 	cmp	r0, #0
   182ec:	0afffd16 	beq	1774c <fatfs_add_file_entry+0x34>
   182f0:	e3a0a001 	mov	r10, #1
   182f4:	eaffff62 	b	18084 <fatfs_add_file_entry+0x96c>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   182f8:	e3550000 	cmp	r5, #0
   182fc:	01a0700a 	moveq	r7, r10
   18300:	03a06002 	moveq	r6, #2
   18304:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18308:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1830c:	e1590005 	cmp	r9, r5
   18310:	cafffd80 	bgt	17918 <fatfs_add_file_entry+0x200>
   18314:	eafffef7 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   18318:	e3550000 	cmp	r5, #0
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   1831c:	03a06001 	moveq	r6, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18320:	01a0700a 	moveq	r7, r10
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
   18324:	01a08006 	moveq	r8, r6
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18328:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1832c:	e1590005 	cmp	r9, r5
   18330:	cafffd5a 	bgt	178a0 <fatfs_add_file_entry+0x188>
   18334:	eafffeef 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18338:	e3550000 	cmp	r5, #0
   1833c:	01a0700a 	moveq	r7, r10
   18340:	03a06003 	moveq	r6, #3
   18344:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18348:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1834c:	e1590005 	cmp	r9, r5
   18350:	cafffd8e 	bgt	17990 <fatfs_add_file_entry+0x278>
   18354:	eafffee7 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18358:	e3550000 	cmp	r5, #0
   1835c:	01a0700a 	moveq	r7, r10
   18360:	03a06004 	moveq	r6, #4
   18364:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18368:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1836c:	e1590005 	cmp	r9, r5
   18370:	cafffda4 	bgt	17a08 <fatfs_add_file_entry+0x2f0>
   18374:	eafffedf 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18378:	e3550000 	cmp	r5, #0
   1837c:	01a0700a 	moveq	r7, r10
   18380:	03a06005 	moveq	r6, #5
   18384:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18388:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1838c:	e1590005 	cmp	r9, r5
   18390:	cafffdba 	bgt	17a80 <fatfs_add_file_entry+0x368>
   18394:	eafffed7 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18398:	e3550000 	cmp	r5, #0
   1839c:	01a0700a 	moveq	r7, r10
   183a0:	03a06006 	moveq	r6, #6
   183a4:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   183a8:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   183ac:	e1590005 	cmp	r9, r5
   183b0:	cafffdd0 	bgt	17af8 <fatfs_add_file_entry+0x3e0>
   183b4:	eafffecf 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   183b8:	e3550000 	cmp	r5, #0
   183bc:	01a0700a 	moveq	r7, r10
   183c0:	03a06007 	moveq	r6, #7
   183c4:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   183c8:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   183cc:	e1590005 	cmp	r9, r5
   183d0:	cafffde6 	bgt	17b70 <fatfs_add_file_entry+0x458>
   183d4:	eafffec7 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   183d8:	e3550000 	cmp	r5, #0
   183dc:	01a0700a 	moveq	r7, r10
   183e0:	03a06008 	moveq	r6, #8
   183e4:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   183e8:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   183ec:	e1590005 	cmp	r9, r5
   183f0:	cafffdfc 	bgt	17be8 <fatfs_add_file_entry+0x4d0>
   183f4:	eafffebf 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   183f8:	e3550000 	cmp	r5, #0
   183fc:	01a0700a 	moveq	r7, r10
   18400:	03a06009 	moveq	r6, #9
   18404:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18408:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1840c:	e1590005 	cmp	r9, r5
   18410:	cafffe12 	bgt	17c60 <fatfs_add_file_entry+0x548>
   18414:	eafffeb7 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18418:	e3550000 	cmp	r5, #0
   1841c:	01a0700a 	moveq	r7, r10
   18420:	03a0600a 	moveq	r6, #10
   18424:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18428:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1842c:	e1590005 	cmp	r9, r5
   18430:	cafffe28 	bgt	17cd8 <fatfs_add_file_entry+0x5c0>
   18434:	eafffeaf 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18438:	e3550000 	cmp	r5, #0
   1843c:	01a0700a 	moveq	r7, r10
   18440:	03a0600b 	moveq	r6, #11
   18444:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18448:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1844c:	e1590005 	cmp	r9, r5
   18450:	cafffe3e 	bgt	17d50 <fatfs_add_file_entry+0x638>
   18454:	eafffea7 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18458:	e3550000 	cmp	r5, #0
   1845c:	01a0700a 	moveq	r7, r10
   18460:	03a0600c 	moveq	r6, #12
   18464:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18468:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1846c:	e1590005 	cmp	r9, r5
   18470:	cafffe54 	bgt	17dc8 <fatfs_add_file_entry+0x6b0>
   18474:	eafffe9f 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18478:	e3550000 	cmp	r5, #0
   1847c:	01a0700a 	moveq	r7, r10
   18480:	03a0600d 	moveq	r6, #13
   18484:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   18488:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   1848c:	e1590005 	cmp	r9, r5
   18490:	cafffe6a 	bgt	17e40 <fatfs_add_file_entry+0x728>
   18494:	eafffe97 	b	17ef8 <fatfs_add_file_entry+0x7e0>

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18498:	e3550000 	cmp	r5, #0
   1849c:	01a0700a 	moveq	r7, r10
   184a0:	03a0600e 	moveq	r6, #14
   184a4:	03a08001 	moveq	r8, #1
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   184a8:	e2855001 	add	r5, r5, #1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   184ac:	e1590005 	cmp	r9, r5
   184b0:	cafffe80 	bgt	17eb8 <fatfs_add_file_entry+0x7a0>
   184b4:	eafffe8f 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
                        start_recorded = 0;
   184b8:	e1a08000 	mov	r8, r0
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   184bc:	e1a05000 	mov	r5, r0
   184c0:	eafffcb2 	b	17790 <fatfs_add_file_entry+0x78>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   184c4:	e3550000 	cmp	r5, #0
   184c8:	12855001 	addne	r5, r5, #1
   184cc:	1a000003 	bne	184e0 <fatfs_add_file_entry+0xdc8>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   184d0:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   184d4:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   184d8:	e3a06002 	mov	r6, #2
                            start_recorded = 1;
   184dc:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   184e0:	e1590005 	cmp	r9, r5
   184e4:	cafffd0b 	bgt	17918 <fatfs_add_file_entry+0x200>
   184e8:	eafffe82 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   184ec:	e3550000 	cmp	r5, #0
   184f0:	12855001 	addne	r5, r5, #1
   184f4:	1a000003 	bne	18508 <fatfs_add_file_entry+0xdf0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   184f8:	e3a06001 	mov	r6, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   184fc:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18500:	e1a05006 	mov	r5, r6
                            start_recorded = 1;
   18504:	e1a08006 	mov	r8, r6
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18508:	e1590005 	cmp	r9, r5
   1850c:	cafffce3 	bgt	178a0 <fatfs_add_file_entry+0x188>
   18510:	eafffe78 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   18514:	e3550000 	cmp	r5, #0
   18518:	12855001 	addne	r5, r5, #1
   1851c:	1a000003 	bne	18530 <fatfs_add_file_entry+0xe18>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18520:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18524:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18528:	e3a06003 	mov	r6, #3
                            start_recorded = 1;
   1852c:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18530:	e1590005 	cmp	r9, r5
   18534:	cafffd15 	bgt	17990 <fatfs_add_file_entry+0x278>
   18538:	eafffe6e 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   1853c:	e3550000 	cmp	r5, #0
   18540:	12855001 	addne	r5, r5, #1
   18544:	1a000003 	bne	18558 <fatfs_add_file_entry+0xe40>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18548:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   1854c:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18550:	e3a06004 	mov	r6, #4
                            start_recorded = 1;
   18554:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18558:	e1590005 	cmp	r9, r5
   1855c:	cafffd29 	bgt	17a08 <fatfs_add_file_entry+0x2f0>
   18560:	eafffe64 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   18564:	e3550000 	cmp	r5, #0
   18568:	12855001 	addne	r5, r5, #1
   1856c:	1a000003 	bne	18580 <fatfs_add_file_entry+0xe68>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18570:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18574:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18578:	e3a06005 	mov	r6, #5
                            start_recorded = 1;
   1857c:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18580:	e1590005 	cmp	r9, r5
   18584:	cafffd3d 	bgt	17a80 <fatfs_add_file_entry+0x368>
   18588:	eafffe5a 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   1858c:	e3550000 	cmp	r5, #0
   18590:	12855001 	addne	r5, r5, #1
   18594:	1a000003 	bne	185a8 <fatfs_add_file_entry+0xe90>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18598:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   1859c:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   185a0:	e3a06006 	mov	r6, #6
                            start_recorded = 1;
   185a4:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   185a8:	e1590005 	cmp	r9, r5
   185ac:	cafffd51 	bgt	17af8 <fatfs_add_file_entry+0x3e0>
   185b0:	eafffe50 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   185b4:	e3550000 	cmp	r5, #0
   185b8:	12855001 	addne	r5, r5, #1
   185bc:	1a000003 	bne	185d0 <fatfs_add_file_entry+0xeb8>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   185c0:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   185c4:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   185c8:	e3a06007 	mov	r6, #7
                            start_recorded = 1;
   185cc:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   185d0:	e1590005 	cmp	r9, r5
   185d4:	cafffd65 	bgt	17b70 <fatfs_add_file_entry+0x458>
   185d8:	eafffe46 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   185dc:	e3550000 	cmp	r5, #0
   185e0:	12855001 	addne	r5, r5, #1
   185e4:	1a000003 	bne	185f8 <fatfs_add_file_entry+0xee0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   185e8:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   185ec:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   185f0:	e3a06008 	mov	r6, #8
                            start_recorded = 1;
   185f4:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   185f8:	e1590005 	cmp	r9, r5
   185fc:	cafffd79 	bgt	17be8 <fatfs_add_file_entry+0x4d0>
   18600:	eafffe3c 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   18604:	e3550000 	cmp	r5, #0
   18608:	12855001 	addne	r5, r5, #1
   1860c:	1a000003 	bne	18620 <fatfs_add_file_entry+0xf08>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18610:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18614:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18618:	e3a06009 	mov	r6, #9
                            start_recorded = 1;
   1861c:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18620:	e1590005 	cmp	r9, r5
   18624:	cafffd8d 	bgt	17c60 <fatfs_add_file_entry+0x548>
   18628:	eafffe32 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   1862c:	e3550000 	cmp	r5, #0
   18630:	12855001 	addne	r5, r5, #1
   18634:	1a000003 	bne	18648 <fatfs_add_file_entry+0xf30>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18638:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   1863c:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18640:	e3a0600a 	mov	r6, #10
                            start_recorded = 1;
   18644:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18648:	e1590005 	cmp	r9, r5
   1864c:	cafffda1 	bgt	17cd8 <fatfs_add_file_entry+0x5c0>
   18650:	eafffe28 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   18654:	e3550000 	cmp	r5, #0
   18658:	12855001 	addne	r5, r5, #1
   1865c:	1a000003 	bne	18670 <fatfs_add_file_entry+0xf58>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18660:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18664:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18668:	e3a0600b 	mov	r6, #11
                            start_recorded = 1;
   1866c:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18670:	e1590005 	cmp	r9, r5
   18674:	cafffdb5 	bgt	17d50 <fatfs_add_file_entry+0x638>
   18678:	eafffe1e 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   1867c:	e3550000 	cmp	r5, #0
   18680:	12855001 	addne	r5, r5, #1
   18684:	1a000003 	bne	18698 <fatfs_add_file_entry+0xf80>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18688:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   1868c:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18690:	e3a0600c 	mov	r6, #12
                            start_recorded = 1;
   18694:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18698:	e1590005 	cmp	r9, r5
   1869c:	cafffdc9 	bgt	17dc8 <fatfs_add_file_entry+0x6b0>
   186a0:	eafffe14 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   186a4:	e3550000 	cmp	r5, #0
   186a8:	12855001 	addne	r5, r5, #1
   186ac:	1a000003 	bne	186c0 <fatfs_add_file_entry+0xfa8>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   186b0:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   186b4:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   186b8:	e3a0600d 	mov	r6, #13
                            start_recorded = 1;
   186bc:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   186c0:	e1590005 	cmp	r9, r5
   186c4:	cafffddd 	bgt	17e40 <fatfs_add_file_entry+0x728>
   186c8:	eafffe0a 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   186cc:	e3550000 	cmp	r5, #0
   186d0:	12855001 	addne	r5, r5, #1
   186d4:	1a000003 	bne	186e8 <fatfs_add_file_entry+0xfd0>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   186d8:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   186dc:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   186e0:	e3a0600e 	mov	r6, #14
                            start_recorded = 1;
   186e4:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   186e8:	e1590005 	cmp	r9, r5
   186ec:	cafffdf1 	bgt	17eb8 <fatfs_add_file_entry+0x7a0>
   186f0:	eafffe00 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
   186f4:	e3550000 	cmp	r5, #0
   186f8:	12855001 	addne	r5, r5, #1
   186fc:	1a000003 	bne	18710 <fatfs_add_file_entry+0xff8>
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   18700:	e3a05001 	mov	r5, #1

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   18704:	e1a0700a 	mov	r7, r10
                        // First entry?
                        if (possible_spaces == 0)
                        {
                            // Store start
                            *pSector = x-1;
                            *pOffset = item;
   18708:	e3a0600f 	mov	r6, #15
                            start_recorded = 1;
   1870c:	e1a08005 	mov	r8, r5
                        }

                        possible_spaces++;

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   18710:	e1590005 	cmp	r9, r5
   18714:	cafffc1d 	bgt	17790 <fatfs_add_file_entry+0x78>
   18718:	eafffdf6 	b	17ef8 <fatfs_add_file_entry+0x7e0>
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
   1871c:	e3560000 	cmp	r6, #0
   18720:	0afffe6a 	beq	180d0 <fatfs_add_file_entry+0x9b8>
   18724:	e3560001 	cmp	r6, #1
   18728:	0afffe70 	beq	180f0 <fatfs_add_file_entry+0x9d8>
   1872c:	e3560002 	cmp	r6, #2
   18730:	0afffe76 	beq	18110 <fatfs_add_file_entry+0x9f8>
   18734:	e3560003 	cmp	r6, #3
   18738:	0afffe7c 	beq	18130 <fatfs_add_file_entry+0xa18>
   1873c:	e3560004 	cmp	r6, #4
   18740:	0afffe82 	beq	18150 <fatfs_add_file_entry+0xa38>
   18744:	e3560005 	cmp	r6, #5
   18748:	0afffe88 	beq	18170 <fatfs_add_file_entry+0xa58>
   1874c:	e3560006 	cmp	r6, #6
   18750:	0afffe8e 	beq	18190 <fatfs_add_file_entry+0xa78>
   18754:	e3560007 	cmp	r6, #7
   18758:	0afffe94 	beq	181b0 <fatfs_add_file_entry+0xa98>
   1875c:	e3560008 	cmp	r6, #8
   18760:	0afffe9a 	beq	181d0 <fatfs_add_file_entry+0xab8>
   18764:	e3560009 	cmp	r6, #9
   18768:	0afffea0 	beq	181f0 <fatfs_add_file_entry+0xad8>
   1876c:	e356000a 	cmp	r6, #10
   18770:	0afffea6 	beq	18210 <fatfs_add_file_entry+0xaf8>
   18774:	e356000b 	cmp	r6, #11
   18778:	0afffeac 	beq	18230 <fatfs_add_file_entry+0xb18>
   1877c:	e356000c 	cmp	r6, #12
   18780:	0afffeb2 	beq	18250 <fatfs_add_file_entry+0xb38>
   18784:	e356000d 	cmp	r6, #13
   18788:	0afffeb8 	beq	18270 <fatfs_add_file_entry+0xb58>
   1878c:	e356000e 	cmp	r6, #14
   18790:	0afffebe 	beq	18290 <fatfs_add_file_entry+0xb78>
   18794:	e356000f 	cmp	r6, #15
   18798:	1afffe39 	bne	18084 <fatfs_add_file_entry+0x96c>
   1879c:	eafffec3 	b	182b0 <fatfs_add_file_entry+0xb98>
   187a0:	e1a03000 	mov	r3, r0
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
   187a4:	e5941008 	ldr	r1, [r4, #8]
   187a8:	e1a00004 	mov	r0, r4
   187ac:	e28d2034 	add	r2, sp, #52	; 0x34
   187b0:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
   187b4:	e58d300c 	str	r3, [sp, #12]
   187b8:	ebfff9f2 	bl	16f88 <fatfs_find_blank_cluster>
   187bc:	e3500000 	cmp	r0, #0
   187c0:	0afffbe1 	beq	1774c <fatfs_add_file_entry+0x34>
                return 0;

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
   187c4:	e1a00004 	mov	r0, r4
   187c8:	e59d1018 	ldr	r1, [sp, #24]
   187cc:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   187d0:	ebfffa8b 	bl	17204 <fatfs_fat_add_cluster_to_chain>
   187d4:	e3500000 	cmp	r0, #0
   187d8:	e59d300c 	ldr	r3, [sp, #12]
   187dc:	0afffbda 	beq	1774c <fatfs_add_file_entry+0x34>
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
   187e0:	e2842040 	add	r2, r4, #64	; 0x40
   187e4:	e1a01003 	mov	r1, r3
   187e8:	e58d2024 	str	r2, [sp, #36]	; 0x24
   187ec:	e1a00002 	mov	r0, r2
   187f0:	e3a02c02 	mov	r2, #512	; 0x200
   187f4:	eb0003ce 	bl	19734 <memset>
            for (i=0;i<fs->sectors_per_cluster;i++)
   187f8:	e5d42000 	ldrb	r2, [r4]
   187fc:	e59d300c 	ldr	r3, [sp, #12]
   18800:	e3520000 	cmp	r2, #0
   18804:	11a09003 	movne	r9, r3
   18808:	1a000003 	bne	1881c <fatfs_add_file_entry+0x1104>
   1880c:	ea000046 	b	1892c <fatfs_add_file_entry+0x1214>
   18810:	e5d43000 	ldrb	r3, [r4]
   18814:	e1530009 	cmp	r3, r9
   18818:	9a000043 	bls	1892c <fatfs_add_file_entry+0x1214>
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
   1881c:	e1a02009 	mov	r2, r9
   18820:	e1a00004 	mov	r0, r4
   18824:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
   18828:	e3a03000 	mov	r3, #0
   1882c:	ebffddf4 	bl	10004 <fatfs_write_sector>
   18830:	e3500000 	cmp	r0, #0
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
   18834:	e2899001 	add	r9, r9, #1
   18838:	e6ef9079 	uxtb	r9, r9
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
   1883c:	1afffff3 	bne	18810 <fatfs_add_file_entry+0x10f8>
   18840:	eafffbc1 	b	1774c <fatfs_add_file_entry+0x34>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   18844:	e3a05080 	mov	r5, #128	; 0x80
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
   18848:	e59dc088 	ldr	r12, [sp, #136]	; 0x88
   1884c:	e28d3038 	add	r3, sp, #56	; 0x38
   18850:	e59d0010 	ldr	r0, [sp, #16]
#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   18854:	e2855040 	add	r5, r5, #64	; 0x40
                if (foundEnd)
                {
                    if (entryCount==0)
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
   18858:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
   1885c:	e59d2080 	ldr	r2, [sp, #128]	; 0x80
   18860:	e58dc000 	str	r12, [sp]
   18864:	ebfff454 	bl	159bc <fatfs_sfn_create_entry>
#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   18868:	e28dc038 	add	r12, sp, #56	; 0x38
   1886c:	e084e005 	add	lr, r4, r5
   18870:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
   18874:	e7840005 	str	r0, [r4, r5]
   18878:	e58e1004 	str	r1, [lr, #4]
   1887c:	e58e2008 	str	r2, [lr, #8]
   18880:	e58e300c 	str	r3, [lr, #12]
   18884:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
   18888:	e58e0010 	str	r0, [lr, #16]

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1888c:	e3a00d81 	mov	r0, #8256	; 0x2040
#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   18890:	e58e1014 	str	r1, [lr, #20]
   18894:	e58e2018 	str	r2, [lr, #24]

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   18898:	e3a02001 	mov	r2, #1
#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   1889c:	e58e301c 	str	r3, [lr, #28]

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   188a0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   188a4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   188a8:	e7940000 	ldr	r0, [r4, r0]
   188ac:	e12fff33 	blx	r3
   188b0:	eafffba6 	b	17750 <fatfs_add_file_entry+0x38>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
   188b4:	e3a05060 	mov	r5, #96	; 0x60
   188b8:	eaffffe2 	b	18848 <fatfs_add_file_entry+0x1130>
   188bc:	e3a05040 	mov	r5, #64	; 0x40
   188c0:	eaffffe0 	b	18848 <fatfs_add_file_entry+0x1130>
   188c4:	e3a05020 	mov	r5, #32
   188c8:	eaffffde 	b	18848 <fatfs_add_file_entry+0x1130>
   188cc:	e1a0500b 	mov	r5, r11
   188d0:	eaffffdc 	b	18848 <fatfs_add_file_entry+0x1130>
   188d4:	e3a050e0 	mov	r5, #224	; 0xe0
   188d8:	eaffffda 	b	18848 <fatfs_add_file_entry+0x1130>
   188dc:	e3a050c0 	mov	r5, #192	; 0xc0
   188e0:	eaffffd8 	b	18848 <fatfs_add_file_entry+0x1130>
   188e4:	e3a050a0 	mov	r5, #160	; 0xa0
   188e8:	eaffffd6 	b	18848 <fatfs_add_file_entry+0x1130>
   188ec:	e3a05e16 	mov	r5, #352	; 0x160
   188f0:	eaffffd4 	b	18848 <fatfs_add_file_entry+0x1130>
   188f4:	e3a05d05 	mov	r5, #320	; 0x140
   188f8:	eaffffd2 	b	18848 <fatfs_add_file_entry+0x1130>
   188fc:	e3a05e12 	mov	r5, #288	; 0x120
   18900:	eaffffd0 	b	18848 <fatfs_add_file_entry+0x1130>
   18904:	e3a05c01 	mov	r5, #256	; 0x100
   18908:	eaffffce 	b	18848 <fatfs_add_file_entry+0x1130>
   1890c:	e3a05e1e 	mov	r5, #480	; 0x1e0
   18910:	eaffffcc 	b	18848 <fatfs_add_file_entry+0x1130>
   18914:	e3a05d07 	mov	r5, #448	; 0x1c0
   18918:	eaffffca 	b	18848 <fatfs_add_file_entry+0x1130>
   1891c:	e3a05e1a 	mov	r5, #416	; 0x1a0
   18920:	eaffffc8 	b	18848 <fatfs_add_file_entry+0x1130>
   18924:	e3a05d06 	mov	r5, #384	; 0x180
   18928:	eaffffc6 	b	18848 <fatfs_add_file_entry+0x1130>
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded)
   1892c:	e3580000 	cmp	r8, #0
   18930:	03a06000 	moveq	r6, #0
   18934:	01a0700a 	moveq	r7, r10
   18938:	eafffd6f 	b	17efc <fatfs_add_file_entry+0x7e4>

0001893c <__aeabi_uidiv>:
   1893c:	e2512001 	subs	r2, r1, #1
   18940:	012fff1e 	bxeq	lr
   18944:	3a000036 	bcc	18a24 <__aeabi_uidiv+0xe8>
   18948:	e1500001 	cmp	r0, r1
   1894c:	9a000022 	bls	189dc <__aeabi_uidiv+0xa0>
   18950:	e1110002 	tst	r1, r2
   18954:	0a000023 	beq	189e8 <__aeabi_uidiv+0xac>
   18958:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   1895c:	01a01181 	lsleq	r1, r1, #3
   18960:	03a03008 	moveq	r3, #8
   18964:	13a03001 	movne	r3, #1
   18968:	e3510201 	cmp	r1, #268435456	; 0x10000000
   1896c:	31510000 	cmpcc	r1, r0
   18970:	31a01201 	lslcc	r1, r1, #4
   18974:	31a03203 	lslcc	r3, r3, #4
   18978:	3afffffa 	bcc	18968 <__aeabi_uidiv+0x2c>
   1897c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   18980:	31510000 	cmpcc	r1, r0
   18984:	31a01081 	lslcc	r1, r1, #1
   18988:	31a03083 	lslcc	r3, r3, #1
   1898c:	3afffffa 	bcc	1897c <__aeabi_uidiv+0x40>
   18990:	e3a02000 	mov	r2, #0
   18994:	e1500001 	cmp	r0, r1
   18998:	20400001 	subcs	r0, r0, r1
   1899c:	21822003 	orrcs	r2, r2, r3
   189a0:	e15000a1 	cmp	r0, r1, lsr #1
   189a4:	204000a1 	subcs	r0, r0, r1, lsr #1
   189a8:	218220a3 	orrcs	r2, r2, r3, lsr #1
   189ac:	e1500121 	cmp	r0, r1, lsr #2
   189b0:	20400121 	subcs	r0, r0, r1, lsr #2
   189b4:	21822123 	orrcs	r2, r2, r3, lsr #2
   189b8:	e15001a1 	cmp	r0, r1, lsr #3
   189bc:	204001a1 	subcs	r0, r0, r1, lsr #3
   189c0:	218221a3 	orrcs	r2, r2, r3, lsr #3
   189c4:	e3500000 	cmp	r0, #0
   189c8:	11b03223 	lsrsne	r3, r3, #4
   189cc:	11a01221 	lsrne	r1, r1, #4
   189d0:	1affffef 	bne	18994 <__aeabi_uidiv+0x58>
   189d4:	e1a00002 	mov	r0, r2
   189d8:	e12fff1e 	bx	lr
   189dc:	03a00001 	moveq	r0, #1
   189e0:	13a00000 	movne	r0, #0
   189e4:	e12fff1e 	bx	lr
   189e8:	e3510801 	cmp	r1, #65536	; 0x10000
   189ec:	21a01821 	lsrcs	r1, r1, #16
   189f0:	23a02010 	movcs	r2, #16
   189f4:	33a02000 	movcc	r2, #0
   189f8:	e3510c01 	cmp	r1, #256	; 0x100
   189fc:	21a01421 	lsrcs	r1, r1, #8
   18a00:	22822008 	addcs	r2, r2, #8
   18a04:	e3510010 	cmp	r1, #16
   18a08:	21a01221 	lsrcs	r1, r1, #4
   18a0c:	22822004 	addcs	r2, r2, #4
   18a10:	e3510004 	cmp	r1, #4
   18a14:	82822003 	addhi	r2, r2, #3
   18a18:	908220a1 	addls	r2, r2, r1, lsr #1
   18a1c:	e1a00230 	lsr	r0, r0, r2
   18a20:	e12fff1e 	bx	lr
   18a24:	e3500000 	cmp	r0, #0
   18a28:	13e00000 	mvnne	r0, #0
   18a2c:	ea000007 	b	18a50 <__aeabi_idiv0>

00018a30 <__aeabi_uidivmod>:
   18a30:	e3510000 	cmp	r1, #0
   18a34:	0afffffa 	beq	18a24 <__aeabi_uidiv+0xe8>
   18a38:	e92d4003 	push	{r0, r1, lr}
   18a3c:	ebffffbe 	bl	1893c <__aeabi_uidiv>
   18a40:	e8bd4006 	pop	{r1, r2, lr}
   18a44:	e0030092 	mul	r3, r2, r0
   18a48:	e0411003 	sub	r1, r1, r3
   18a4c:	e12fff1e 	bx	lr

00018a50 <__aeabi_idiv0>:
   18a50:	e12fff1e 	bx	lr

00018a54 <__aeabi_uldivmod>:
   18a54:	e3530000 	cmp	r3, #0
   18a58:	03520000 	cmpeq	r2, #0
   18a5c:	1a000004 	bne	18a74 <__aeabi_uldivmod+0x20>
   18a60:	e3510000 	cmp	r1, #0
   18a64:	03500000 	cmpeq	r0, #0
   18a68:	13e01000 	mvnne	r1, #0
   18a6c:	13e00000 	mvnne	r0, #0
   18a70:	eafffff6 	b	18a50 <__aeabi_idiv0>
   18a74:	e24dd008 	sub	sp, sp, #8
   18a78:	e92d6000 	push	{sp, lr}
   18a7c:	eb000014 	bl	18ad4 <__gnu_uldivmod_helper>
   18a80:	e59de004 	ldr	lr, [sp, #4]
   18a84:	e28dd008 	add	sp, sp, #8
   18a88:	e8bd000c 	pop	{r2, r3}
   18a8c:	e12fff1e 	bx	lr

00018a90 <__gnu_ldivmod_helper>:
   18a90:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
   18a94:	e1a08002 	mov	r8, r2
   18a98:	e1a0a003 	mov	r10, r3
   18a9c:	e1a06000 	mov	r6, r0
   18aa0:	e1a07001 	mov	r7, r1
   18aa4:	eb00001a 	bl	18b14 <__divdi3>
   18aa8:	e0030198 	mul	r3, r8, r1
   18aac:	e1a02000 	mov	r2, r0
   18ab0:	e0854098 	umull	r4, r5, r8, r0
   18ab4:	e022329a 	mla	r2, r10, r2, r3
   18ab8:	e59d3020 	ldr	r3, [sp, #32]
   18abc:	e0825005 	add	r5, r2, r5
   18ac0:	e0564004 	subs	r4, r6, r4
   18ac4:	e0c75005 	sbc	r5, r7, r5
   18ac8:	e8830030 	stm	r3, {r4, r5}
   18acc:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
   18ad0:	e12fff1e 	bx	lr

00018ad4 <__gnu_uldivmod_helper>:
   18ad4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18ad8:	e1a08002 	mov	r8, r2
   18adc:	e1a06000 	mov	r6, r0
   18ae0:	e1a07001 	mov	r7, r1
   18ae4:	e1a04003 	mov	r4, r3
   18ae8:	eb000145 	bl	19004 <__udivdi3>
   18aec:	e0030490 	mul	r3, r0, r4
   18af0:	e0854890 	umull	r4, r5, r0, r8
   18af4:	e0283891 	mla	r8, r1, r8, r3
   18af8:	e59d3018 	ldr	r3, [sp, #24]
   18afc:	e0885005 	add	r5, r8, r5
   18b00:	e0564004 	subs	r4, r6, r4
   18b04:	e0c75005 	sbc	r5, r7, r5
   18b08:	e8830030 	stm	r3, {r4, r5}
   18b0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18b10:	e12fff1e 	bx	lr

00018b14 <__divdi3>:
   18b14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   18b18:	e3510000 	cmp	r1, #0
   18b1c:	e24dd00c 	sub	sp, sp, #12
   18b20:	e1a0c003 	mov	r12, r3
   18b24:	a3a05000 	movge	r5, #0
   18b28:	ba00009b 	blt	18d9c <__divdi3+0x288>
   18b2c:	e35c0000 	cmp	r12, #0
   18b30:	ba000095 	blt	18d8c <__divdi3+0x278>
   18b34:	e2539000 	subs	r9, r3, #0
   18b38:	e1a08000 	mov	r8, r0
   18b3c:	e1a0a001 	mov	r10, r1
   18b40:	e1a0b002 	mov	r11, r2
   18b44:	e1a04002 	mov	r4, r2
   18b48:	e1a06000 	mov	r6, r0
   18b4c:	e1a07001 	mov	r7, r1
   18b50:	1a000042 	bne	18c60 <__divdi3+0x14c>
   18b54:	e1520001 	cmp	r2, r1
   18b58:	9a000050 	bls	18ca0 <__divdi3+0x18c>
   18b5c:	e1a00002 	mov	r0, r2
   18b60:	eb000249 	bl	1948c <__clzsi2>
   18b64:	e3500000 	cmp	r0, #0
   18b68:	12603020 	rsbne	r3, r0, #32
   18b6c:	11a03338 	lsrne	r3, r8, r3
   18b70:	11a0401b 	lslne	r4, r11, r0
   18b74:	1183701a 	orrne	r7, r3, r10, lsl r0
   18b78:	11a06018 	lslne	r6, r8, r0
   18b7c:	e1a08824 	lsr	r8, r4, #16
   18b80:	e1a01008 	mov	r1, r8
   18b84:	e1a00007 	mov	r0, r7
   18b88:	ebffff6b 	bl	1893c <__aeabi_uidiv>
   18b8c:	e1a01008 	mov	r1, r8
   18b90:	e1a09000 	mov	r9, r0
   18b94:	e1a00007 	mov	r0, r7
   18b98:	ebffffa4 	bl	18a30 <__aeabi_uidivmod>
   18b9c:	e1a0a804 	lsl	r10, r4, #16
   18ba0:	e1a0a82a 	lsr	r10, r10, #16
   18ba4:	e000099a 	mul	r0, r10, r9
   18ba8:	e1a03826 	lsr	r3, r6, #16
   18bac:	e1831801 	orr	r1, r3, r1, lsl #16
   18bb0:	e1500001 	cmp	r0, r1
   18bb4:	9a000007 	bls	18bd8 <__divdi3+0xc4>
   18bb8:	e0911004 	adds	r1, r1, r4
   18bbc:	e2492001 	sub	r2, r9, #1
   18bc0:	2a000003 	bcs	18bd4 <__divdi3+0xc0>
   18bc4:	e1500001 	cmp	r0, r1
   18bc8:	82499002 	subhi	r9, r9, #2
   18bcc:	80811004 	addhi	r1, r1, r4
   18bd0:	8a000000 	bhi	18bd8 <__divdi3+0xc4>
   18bd4:	e1a09002 	mov	r9, r2
   18bd8:	e060b001 	rsb	r11, r0, r1
   18bdc:	e1a0000b 	mov	r0, r11
   18be0:	e1a01008 	mov	r1, r8
   18be4:	ebffff54 	bl	1893c <__aeabi_uidiv>
   18be8:	e1a01008 	mov	r1, r8
   18bec:	e1a07000 	mov	r7, r0
   18bf0:	e1a0000b 	mov	r0, r11
   18bf4:	ebffff8d 	bl	18a30 <__aeabi_uidivmod>
   18bf8:	e00a0a97 	mul	r10, r7, r10
   18bfc:	e1a06806 	lsl	r6, r6, #16
   18c00:	e1a06826 	lsr	r6, r6, #16
   18c04:	e1861801 	orr	r1, r6, r1, lsl #16
   18c08:	e15a0001 	cmp	r10, r1
   18c0c:	9a000006 	bls	18c2c <__divdi3+0x118>
   18c10:	e0914004 	adds	r4, r1, r4
   18c14:	e2473001 	sub	r3, r7, #1
   18c18:	2a000002 	bcs	18c28 <__divdi3+0x114>
   18c1c:	e15a0004 	cmp	r10, r4
   18c20:	82477002 	subhi	r7, r7, #2
   18c24:	8a000000 	bhi	18c2c <__divdi3+0x118>
   18c28:	e1a07003 	mov	r7, r3
   18c2c:	e1870809 	orr	r0, r7, r9, lsl #16
   18c30:	e3a08000 	mov	r8, #0
   18c34:	e3550000 	cmp	r5, #0
   18c38:	e1a02000 	mov	r2, r0
   18c3c:	e1a03008 	mov	r3, r8
   18c40:	0a000001 	beq	18c4c <__divdi3+0x138>
   18c44:	e2722000 	rsbs	r2, r2, #0
   18c48:	e2e33000 	rsc	r3, r3, #0
   18c4c:	e1a00002 	mov	r0, r2
   18c50:	e1a01003 	mov	r1, r3
   18c54:	e28dd00c 	add	sp, sp, #12
   18c58:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   18c5c:	e12fff1e 	bx	lr
   18c60:	e1590001 	cmp	r9, r1
   18c64:	83a08000 	movhi	r8, #0
   18c68:	81a00008 	movhi	r0, r8
   18c6c:	8afffff0 	bhi	18c34 <__divdi3+0x120>
   18c70:	e1a00003 	mov	r0, r3
   18c74:	eb000204 	bl	1948c <__clzsi2>
   18c78:	e2504000 	subs	r4, r0, #0
   18c7c:	1a000083 	bne	18e90 <__divdi3+0x37c>
   18c80:	e159000a 	cmp	r9, r10
   18c84:	215b0008 	cmpcs	r11, r8
   18c88:	83a08000 	movhi	r8, #0
   18c8c:	93a08001 	movls	r8, #1
   18c90:	93a00001 	movls	r0, #1
   18c94:	91a08004 	movls	r8, r4
   18c98:	81a00008 	movhi	r0, r8
   18c9c:	eaffffe4 	b	18c34 <__divdi3+0x120>
   18ca0:	e3520000 	cmp	r2, #0
   18ca4:	1a000003 	bne	18cb8 <__divdi3+0x1a4>
   18ca8:	e3a00001 	mov	r0, #1
   18cac:	e1a01002 	mov	r1, r2
   18cb0:	ebffff21 	bl	1893c <__aeabi_uidiv>
   18cb4:	e1a04000 	mov	r4, r0
   18cb8:	e1a00004 	mov	r0, r4
   18cbc:	eb0001f2 	bl	1948c <__clzsi2>
   18cc0:	e2503000 	subs	r3, r0, #0
   18cc4:	1a000038 	bne	18dac <__divdi3+0x298>
   18cc8:	e1a09804 	lsl	r9, r4, #16
   18ccc:	e0647007 	rsb	r7, r4, r7
   18cd0:	e1a0a824 	lsr	r10, r4, #16
   18cd4:	e1a09829 	lsr	r9, r9, #16
   18cd8:	e3a08001 	mov	r8, #1
   18cdc:	e1a0100a 	mov	r1, r10
   18ce0:	e1a00007 	mov	r0, r7
   18ce4:	ebffff14 	bl	1893c <__aeabi_uidiv>
   18ce8:	e1a0100a 	mov	r1, r10
   18cec:	e1a0b000 	mov	r11, r0
   18cf0:	e1a00007 	mov	r0, r7
   18cf4:	ebffff4d 	bl	18a30 <__aeabi_uidivmod>
   18cf8:	e0000b99 	mul	r0, r9, r11
   18cfc:	e1a03826 	lsr	r3, r6, #16
   18d00:	e1831801 	orr	r1, r3, r1, lsl #16
   18d04:	e1500001 	cmp	r0, r1
   18d08:	9a000006 	bls	18d28 <__divdi3+0x214>
   18d0c:	e0911004 	adds	r1, r1, r4
   18d10:	e24b3001 	sub	r3, r11, #1
   18d14:	2a0000b2 	bcs	18fe4 <__divdi3+0x4d0>
   18d18:	e1500001 	cmp	r0, r1
   18d1c:	824bb002 	subhi	r11, r11, #2
   18d20:	80811004 	addhi	r1, r1, r4
   18d24:	9a0000ae 	bls	18fe4 <__divdi3+0x4d0>
   18d28:	e0603001 	rsb	r3, r0, r1
   18d2c:	e1a00003 	mov	r0, r3
   18d30:	e1a0100a 	mov	r1, r10
   18d34:	e58d3000 	str	r3, [sp]
   18d38:	ebfffeff 	bl	1893c <__aeabi_uidiv>
   18d3c:	e59d3000 	ldr	r3, [sp]
   18d40:	e1a07000 	mov	r7, r0
   18d44:	e1a0100a 	mov	r1, r10
   18d48:	e1a00003 	mov	r0, r3
   18d4c:	ebffff37 	bl	18a30 <__aeabi_uidivmod>
   18d50:	e0090997 	mul	r9, r7, r9
   18d54:	e1a06806 	lsl	r6, r6, #16
   18d58:	e1a06826 	lsr	r6, r6, #16
   18d5c:	e1861801 	orr	r1, r6, r1, lsl #16
   18d60:	e1590001 	cmp	r9, r1
   18d64:	9a000006 	bls	18d84 <__divdi3+0x270>
   18d68:	e0914004 	adds	r4, r1, r4
   18d6c:	e2473001 	sub	r3, r7, #1
   18d70:	2a000002 	bcs	18d80 <__divdi3+0x26c>
   18d74:	e1590004 	cmp	r9, r4
   18d78:	82477002 	subhi	r7, r7, #2
   18d7c:	8a000000 	bhi	18d84 <__divdi3+0x270>
   18d80:	e1a07003 	mov	r7, r3
   18d84:	e187080b 	orr	r0, r7, r11, lsl #16
   18d88:	eaffffa9 	b	18c34 <__divdi3+0x120>
   18d8c:	e1e05005 	mvn	r5, r5
   18d90:	e2722000 	rsbs	r2, r2, #0
   18d94:	e2e33000 	rsc	r3, r3, #0
   18d98:	eaffff65 	b	18b34 <__divdi3+0x20>
   18d9c:	e2700000 	rsbs	r0, r0, #0
   18da0:	e2e11000 	rsc	r1, r1, #0
   18da4:	e3e05000 	mvn	r5, #0
   18da8:	eaffff5f 	b	18b2c <__divdi3+0x18>
   18dac:	e1a04314 	lsl	r4, r4, r3
   18db0:	e263b020 	rsb	r11, r3, #32
   18db4:	e1a08b37 	lsr	r8, r7, r11
   18db8:	e1a0bb36 	lsr	r11, r6, r11
   18dbc:	e1a0a824 	lsr	r10, r4, #16
   18dc0:	e1a0100a 	mov	r1, r10
   18dc4:	e1a00008 	mov	r0, r8
   18dc8:	e18bb317 	orr	r11, r11, r7, lsl r3
   18dcc:	e1a06316 	lsl	r6, r6, r3
   18dd0:	ebfffed9 	bl	1893c <__aeabi_uidiv>
   18dd4:	e1a0100a 	mov	r1, r10
   18dd8:	e1a03000 	mov	r3, r0
   18ddc:	e1a00008 	mov	r0, r8
   18de0:	e58d3000 	str	r3, [sp]
   18de4:	ebffff11 	bl	18a30 <__aeabi_uidivmod>
   18de8:	e1a09804 	lsl	r9, r4, #16
   18dec:	e59d3000 	ldr	r3, [sp]
   18df0:	e1a09829 	lsr	r9, r9, #16
   18df4:	e0000399 	mul	r0, r9, r3
   18df8:	e1a0282b 	lsr	r2, r11, #16
   18dfc:	e1821801 	orr	r1, r2, r1, lsl #16
   18e00:	e1500001 	cmp	r0, r1
   18e04:	9a000006 	bls	18e24 <__divdi3+0x310>
   18e08:	e0911004 	adds	r1, r1, r4
   18e0c:	e2432001 	sub	r2, r3, #1
   18e10:	2a000079 	bcs	18ffc <__divdi3+0x4e8>
   18e14:	e1500001 	cmp	r0, r1
   18e18:	82433002 	subhi	r3, r3, #2
   18e1c:	80811004 	addhi	r1, r1, r4
   18e20:	9a000075 	bls	18ffc <__divdi3+0x4e8>
   18e24:	e0607001 	rsb	r7, r0, r1
   18e28:	e1a00007 	mov	r0, r7
   18e2c:	e1a0100a 	mov	r1, r10
   18e30:	e58d3000 	str	r3, [sp]
   18e34:	ebfffec0 	bl	1893c <__aeabi_uidiv>
   18e38:	e1a0100a 	mov	r1, r10
   18e3c:	e1a08000 	mov	r8, r0
   18e40:	e1a00007 	mov	r0, r7
   18e44:	ebfffef9 	bl	18a30 <__aeabi_uidivmod>
   18e48:	e0070899 	mul	r7, r9, r8
   18e4c:	e1a0b80b 	lsl	r11, r11, #16
   18e50:	e1a0b82b 	lsr	r11, r11, #16
   18e54:	e18b1801 	orr	r1, r11, r1, lsl #16
   18e58:	e1570001 	cmp	r7, r1
   18e5c:	e59d3000 	ldr	r3, [sp]
   18e60:	9a000007 	bls	18e84 <__divdi3+0x370>
   18e64:	e0911004 	adds	r1, r1, r4
   18e68:	e2482001 	sub	r2, r8, #1
   18e6c:	2a000003 	bcs	18e80 <__divdi3+0x36c>
   18e70:	e1570001 	cmp	r7, r1
   18e74:	82488002 	subhi	r8, r8, #2
   18e78:	80811004 	addhi	r1, r1, r4
   18e7c:	8a000000 	bhi	18e84 <__divdi3+0x370>
   18e80:	e1a08002 	mov	r8, r2
   18e84:	e0677001 	rsb	r7, r7, r1
   18e88:	e1888803 	orr	r8, r8, r3, lsl #16
   18e8c:	eaffff92 	b	18cdc <__divdi3+0x1c8>
   18e90:	e2643020 	rsb	r3, r4, #32
   18e94:	e1a0233b 	lsr	r2, r11, r3
   18e98:	e1829419 	orr	r9, r2, r9, lsl r4
   18e9c:	e1a0233a 	lsr	r2, r10, r3
   18ea0:	e1a03336 	lsr	r3, r6, r3
   18ea4:	e1a07829 	lsr	r7, r9, #16
   18ea8:	e1a01007 	mov	r1, r7
   18eac:	e1a00002 	mov	r0, r2
   18eb0:	e183a41a 	orr	r10, r3, r10, lsl r4
   18eb4:	e58d2004 	str	r2, [sp, #4]
   18eb8:	ebfffe9f 	bl	1893c <__aeabi_uidiv>
   18ebc:	e59d2004 	ldr	r2, [sp, #4]
   18ec0:	e1a03000 	mov	r3, r0
   18ec4:	e1a01007 	mov	r1, r7
   18ec8:	e1a00002 	mov	r0, r2
   18ecc:	e58d3000 	str	r3, [sp]
   18ed0:	ebfffed6 	bl	18a30 <__aeabi_uidivmod>
   18ed4:	e1a08809 	lsl	r8, r9, #16
   18ed8:	e59d3000 	ldr	r3, [sp]
   18edc:	e1a08828 	lsr	r8, r8, #16
   18ee0:	e0000398 	mul	r0, r8, r3
   18ee4:	e1a0282a 	lsr	r2, r10, #16
   18ee8:	e1821801 	orr	r1, r2, r1, lsl #16
   18eec:	e1500001 	cmp	r0, r1
   18ef0:	e1a0b41b 	lsl	r11, r11, r4
   18ef4:	9a000006 	bls	18f14 <__divdi3+0x400>
   18ef8:	e0911009 	adds	r1, r1, r9
   18efc:	e2432001 	sub	r2, r3, #1
   18f00:	2a00003b 	bcs	18ff4 <__divdi3+0x4e0>
   18f04:	e1500001 	cmp	r0, r1
   18f08:	82433002 	subhi	r3, r3, #2
   18f0c:	80811009 	addhi	r1, r1, r9
   18f10:	9a000037 	bls	18ff4 <__divdi3+0x4e0>
   18f14:	e060c001 	rsb	r12, r0, r1
   18f18:	e1a0000c 	mov	r0, r12
   18f1c:	e1a01007 	mov	r1, r7
   18f20:	e88d1008 	stm	sp, {r3, r12}
   18f24:	ebfffe84 	bl	1893c <__aeabi_uidiv>
   18f28:	e59dc004 	ldr	r12, [sp, #4]
   18f2c:	e1a02000 	mov	r2, r0
   18f30:	e1a01007 	mov	r1, r7
   18f34:	e1a0000c 	mov	r0, r12
   18f38:	e58d2004 	str	r2, [sp, #4]
   18f3c:	ebfffebb 	bl	18a30 <__aeabi_uidivmod>
   18f40:	e59d2004 	ldr	r2, [sp, #4]
   18f44:	e0080892 	mul	r8, r2, r8
   18f48:	e1a0a80a 	lsl	r10, r10, #16
   18f4c:	e1a0a82a 	lsr	r10, r10, #16
   18f50:	e18a1801 	orr	r1, r10, r1, lsl #16
   18f54:	e1580001 	cmp	r8, r1
   18f58:	e59d3000 	ldr	r3, [sp]
   18f5c:	9a000006 	bls	18f7c <__divdi3+0x468>
   18f60:	e0911009 	adds	r1, r1, r9
   18f64:	e2420001 	sub	r0, r2, #1
   18f68:	2a00001f 	bcs	18fec <__divdi3+0x4d8>
   18f6c:	e1580001 	cmp	r8, r1
   18f70:	82422002 	subhi	r2, r2, #2
   18f74:	80811009 	addhi	r1, r1, r9
   18f78:	9a00001b 	bls	18fec <__divdi3+0x4d8>
   18f7c:	e0688001 	rsb	r8, r8, r1
   18f80:	e1820803 	orr	r0, r2, r3, lsl #16
   18f84:	e1a01820 	lsr	r1, r0, #16
   18f88:	e1a0382b 	lsr	r3, r11, #16
   18f8c:	e1c0c801 	bic	r12, r0, r1, lsl #16
   18f90:	e1cbb803 	bic	r11, r11, r3, lsl #16
   18f94:	e0020b9c 	mul	r2, r12, r11
   18f98:	e00b0b91 	mul	r11, r1, r11
   18f9c:	e00c0c93 	mul	r12, r3, r12
   18fa0:	e0030391 	mul	r3, r1, r3
   18fa4:	e09bc00c 	adds	r12, r11, r12
   18fa8:	22833801 	addcs	r3, r3, #65536	; 0x10000
   18fac:	e092280c 	adds	r2, r2, r12, lsl #16
   18fb0:	e0a3382c 	adc	r3, r3, r12, lsr #16
   18fb4:	e1580003 	cmp	r8, r3
   18fb8:	3a000006 	bcc	18fd8 <__divdi3+0x4c4>
   18fbc:	13a08000 	movne	r8, #0
   18fc0:	03a08001 	moveq	r8, #1
   18fc4:	e1520416 	cmp	r2, r6, lsl r4
   18fc8:	93a08000 	movls	r8, #0
   18fcc:	82088001 	andhi	r8, r8, #1
   18fd0:	e3580000 	cmp	r8, #0
   18fd4:	0affff16 	beq	18c34 <__divdi3+0x120>
   18fd8:	e2400001 	sub	r0, r0, #1
   18fdc:	e3a08000 	mov	r8, #0
   18fe0:	eaffff13 	b	18c34 <__divdi3+0x120>
   18fe4:	e1a0b003 	mov	r11, r3
   18fe8:	eaffff4e 	b	18d28 <__divdi3+0x214>
   18fec:	e1a02000 	mov	r2, r0
   18ff0:	eaffffe1 	b	18f7c <__divdi3+0x468>
   18ff4:	e1a03002 	mov	r3, r2
   18ff8:	eaffffc5 	b	18f14 <__divdi3+0x400>
   18ffc:	e1a03002 	mov	r3, r2
   19000:	eaffff87 	b	18e24 <__divdi3+0x310>

00019004 <__udivdi3>:
   19004:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   19008:	e253a000 	subs	r10, r3, #0
   1900c:	e24dd00c 	sub	sp, sp, #12
   19010:	e1a06000 	mov	r6, r0
   19014:	e1a05001 	mov	r5, r1
   19018:	e1a07002 	mov	r7, r2
   1901c:	e1a04002 	mov	r4, r2
   19020:	e1a08000 	mov	r8, r0
   19024:	e1a09001 	mov	r9, r1
   19028:	1a00003a 	bne	19118 <__udivdi3+0x114>
   1902c:	e1520001 	cmp	r2, r1
   19030:	9a000048 	bls	19158 <__udivdi3+0x154>
   19034:	e1a00002 	mov	r0, r2
   19038:	eb000113 	bl	1948c <__clzsi2>
   1903c:	e3500000 	cmp	r0, #0
   19040:	12603020 	rsbne	r3, r0, #32
   19044:	11a03336 	lsrne	r3, r6, r3
   19048:	11a04017 	lslne	r4, r7, r0
   1904c:	11839015 	orrne	r9, r3, r5, lsl r0
   19050:	e1a05824 	lsr	r5, r4, #16
   19054:	11a08016 	lslne	r8, r6, r0
   19058:	e1a01005 	mov	r1, r5
   1905c:	e1a00009 	mov	r0, r9
   19060:	ebfffe35 	bl	1893c <__aeabi_uidiv>
   19064:	e1a01005 	mov	r1, r5
   19068:	e1a07000 	mov	r7, r0
   1906c:	e1a00009 	mov	r0, r9
   19070:	ebfffe6e 	bl	18a30 <__aeabi_uidivmod>
   19074:	e1a0a804 	lsl	r10, r4, #16
   19078:	e1a0a82a 	lsr	r10, r10, #16
   1907c:	e000079a 	mul	r0, r10, r7
   19080:	e1a03828 	lsr	r3, r8, #16
   19084:	e1831801 	orr	r1, r3, r1, lsl #16
   19088:	e1500001 	cmp	r0, r1
   1908c:	9a000007 	bls	190b0 <__udivdi3+0xac>
   19090:	e0911004 	adds	r1, r1, r4
   19094:	e2472001 	sub	r2, r7, #1
   19098:	2a000003 	bcs	190ac <__udivdi3+0xa8>
   1909c:	e1500001 	cmp	r0, r1
   190a0:	82477002 	subhi	r7, r7, #2
   190a4:	80811004 	addhi	r1, r1, r4
   190a8:	8a000000 	bhi	190b0 <__udivdi3+0xac>
   190ac:	e1a07002 	mov	r7, r2
   190b0:	e0609001 	rsb	r9, r0, r1
   190b4:	e1a00009 	mov	r0, r9
   190b8:	e1a01005 	mov	r1, r5
   190bc:	ebfffe1e 	bl	1893c <__aeabi_uidiv>
   190c0:	e1a01005 	mov	r1, r5
   190c4:	e1a06000 	mov	r6, r0
   190c8:	e1a00009 	mov	r0, r9
   190cc:	ebfffe57 	bl	18a30 <__aeabi_uidivmod>
   190d0:	e00a0a96 	mul	r10, r6, r10
   190d4:	e1a08808 	lsl	r8, r8, #16
   190d8:	e1a08828 	lsr	r8, r8, #16
   190dc:	e1881801 	orr	r1, r8, r1, lsl #16
   190e0:	e15a0001 	cmp	r10, r1
   190e4:	9a000005 	bls	19100 <__udivdi3+0xfc>
   190e8:	e0914004 	adds	r4, r1, r4
   190ec:	e2463001 	sub	r3, r6, #1
   190f0:	2a0000d3 	bcs	19444 <__udivdi3+0x440>
   190f4:	e15a0004 	cmp	r10, r4
   190f8:	82466002 	subhi	r6, r6, #2
   190fc:	9a0000d0 	bls	19444 <__udivdi3+0x440>
   19100:	e1860807 	orr	r0, r6, r7, lsl #16
   19104:	e3a06000 	mov	r6, #0
   19108:	e1a01006 	mov	r1, r6
   1910c:	e28dd00c 	add	sp, sp, #12
   19110:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   19114:	e12fff1e 	bx	lr
   19118:	e15a0001 	cmp	r10, r1
   1911c:	83a06000 	movhi	r6, #0
   19120:	81a00006 	movhi	r0, r6
   19124:	8afffff7 	bhi	19108 <__udivdi3+0x104>
   19128:	e1a0000a 	mov	r0, r10
   1912c:	eb0000d6 	bl	1948c <__clzsi2>
   19130:	e2504000 	subs	r4, r0, #0
   19134:	1a00003f 	bne	19238 <__udivdi3+0x234>
   19138:	e15a0005 	cmp	r10, r5
   1913c:	21570006 	cmpcs	r7, r6
   19140:	83a06000 	movhi	r6, #0
   19144:	93a06001 	movls	r6, #1
   19148:	93a00001 	movls	r0, #1
   1914c:	91a06004 	movls	r6, r4
   19150:	81a00006 	movhi	r0, r6
   19154:	eaffffeb 	b	19108 <__udivdi3+0x104>
   19158:	e3520000 	cmp	r2, #0
   1915c:	1a000003 	bne	19170 <__udivdi3+0x16c>
   19160:	e3a00001 	mov	r0, #1
   19164:	e1a01002 	mov	r1, r2
   19168:	ebfffdf3 	bl	1893c <__aeabi_uidiv>
   1916c:	e1a04000 	mov	r4, r0
   19170:	e1a00004 	mov	r0, r4
   19174:	eb0000c4 	bl	1948c <__clzsi2>
   19178:	e2503000 	subs	r3, r0, #0
   1917c:	1a000079 	bne	19368 <__udivdi3+0x364>
   19180:	e1a09804 	lsl	r9, r4, #16
   19184:	e0645005 	rsb	r5, r4, r5
   19188:	e1a0a824 	lsr	r10, r4, #16
   1918c:	e1a09829 	lsr	r9, r9, #16
   19190:	e3a06001 	mov	r6, #1
   19194:	e1a0100a 	mov	r1, r10
   19198:	e1a00005 	mov	r0, r5
   1919c:	ebfffde6 	bl	1893c <__aeabi_uidiv>
   191a0:	e1a0100a 	mov	r1, r10
   191a4:	e1a07000 	mov	r7, r0
   191a8:	e1a00005 	mov	r0, r5
   191ac:	ebfffe1f 	bl	18a30 <__aeabi_uidivmod>
   191b0:	e0000799 	mul	r0, r9, r7
   191b4:	e1a03828 	lsr	r3, r8, #16
   191b8:	e1831801 	orr	r1, r3, r1, lsl #16
   191bc:	e1500001 	cmp	r0, r1
   191c0:	9a000006 	bls	191e0 <__udivdi3+0x1dc>
   191c4:	e0911004 	adds	r1, r1, r4
   191c8:	e2473001 	sub	r3, r7, #1
   191cc:	2a00009e 	bcs	1944c <__udivdi3+0x448>
   191d0:	e1500001 	cmp	r0, r1
   191d4:	82477002 	subhi	r7, r7, #2
   191d8:	80811004 	addhi	r1, r1, r4
   191dc:	9a00009a 	bls	1944c <__udivdi3+0x448>
   191e0:	e060b001 	rsb	r11, r0, r1
   191e4:	e1a0000b 	mov	r0, r11
   191e8:	e1a0100a 	mov	r1, r10
   191ec:	ebfffdd2 	bl	1893c <__aeabi_uidiv>
   191f0:	e1a0100a 	mov	r1, r10
   191f4:	e1a05000 	mov	r5, r0
   191f8:	e1a0000b 	mov	r0, r11
   191fc:	ebfffe0b 	bl	18a30 <__aeabi_uidivmod>
   19200:	e0090995 	mul	r9, r5, r9
   19204:	e1a08808 	lsl	r8, r8, #16
   19208:	e1a08828 	lsr	r8, r8, #16
   1920c:	e1881801 	orr	r1, r8, r1, lsl #16
   19210:	e1590001 	cmp	r9, r1
   19214:	9a000005 	bls	19230 <__udivdi3+0x22c>
   19218:	e0914004 	adds	r4, r1, r4
   1921c:	e2453001 	sub	r3, r5, #1
   19220:	2a00008b 	bcs	19454 <__udivdi3+0x450>
   19224:	e1590004 	cmp	r9, r4
   19228:	82455002 	subhi	r5, r5, #2
   1922c:	9a000088 	bls	19454 <__udivdi3+0x450>
   19230:	e1850807 	orr	r0, r5, r7, lsl #16
   19234:	eaffffb3 	b	19108 <__udivdi3+0x104>
   19238:	e2643020 	rsb	r3, r4, #32
   1923c:	e1a02337 	lsr	r2, r7, r3
   19240:	e182a41a 	orr	r10, r2, r10, lsl r4
   19244:	e1a02335 	lsr	r2, r5, r3
   19248:	e1a03336 	lsr	r3, r6, r3
   1924c:	e1a0882a 	lsr	r8, r10, #16
   19250:	e1a01008 	mov	r1, r8
   19254:	e1a00002 	mov	r0, r2
   19258:	e1835415 	orr	r5, r3, r5, lsl r4
   1925c:	e58d2004 	str	r2, [sp, #4]
   19260:	ebfffdb5 	bl	1893c <__aeabi_uidiv>
   19264:	e59d2004 	ldr	r2, [sp, #4]
   19268:	e1a0b000 	mov	r11, r0
   1926c:	e1a01008 	mov	r1, r8
   19270:	e1a00002 	mov	r0, r2
   19274:	ebfffded 	bl	18a30 <__aeabi_uidivmod>
   19278:	e1a0980a 	lsl	r9, r10, #16
   1927c:	e1a09829 	lsr	r9, r9, #16
   19280:	e0000b99 	mul	r0, r9, r11
   19284:	e1a03825 	lsr	r3, r5, #16
   19288:	e1831801 	orr	r1, r3, r1, lsl #16
   1928c:	e1500001 	cmp	r0, r1
   19290:	e1a07417 	lsl	r7, r7, r4
   19294:	9a000003 	bls	192a8 <__udivdi3+0x2a4>
   19298:	e091100a 	adds	r1, r1, r10
   1929c:	e24b2001 	sub	r2, r11, #1
   192a0:	3a000072 	bcc	19470 <__udivdi3+0x46c>
   192a4:	e1a0b002 	mov	r11, r2
   192a8:	e0603001 	rsb	r3, r0, r1
   192ac:	e1a00003 	mov	r0, r3
   192b0:	e1a01008 	mov	r1, r8
   192b4:	e58d3004 	str	r3, [sp, #4]
   192b8:	ebfffd9f 	bl	1893c <__aeabi_uidiv>
   192bc:	e59d3004 	ldr	r3, [sp, #4]
   192c0:	e1a02000 	mov	r2, r0
   192c4:	e1a01008 	mov	r1, r8
   192c8:	e1a00003 	mov	r0, r3
   192cc:	e58d2004 	str	r2, [sp, #4]
   192d0:	ebfffdd6 	bl	18a30 <__aeabi_uidivmod>
   192d4:	e59d2004 	ldr	r2, [sp, #4]
   192d8:	e0090992 	mul	r9, r2, r9
   192dc:	e1a05805 	lsl	r5, r5, #16
   192e0:	e1a05825 	lsr	r5, r5, #16
   192e4:	e1851801 	orr	r1, r5, r1, lsl #16
   192e8:	e1590001 	cmp	r9, r1
   192ec:	9a000003 	bls	19300 <__udivdi3+0x2fc>
   192f0:	e091100a 	adds	r1, r1, r10
   192f4:	e2423001 	sub	r3, r2, #1
   192f8:	3a000057 	bcc	1945c <__udivdi3+0x458>
   192fc:	e1a02003 	mov	r2, r3
   19300:	e0699001 	rsb	r9, r9, r1
   19304:	e182080b 	orr	r0, r2, r11, lsl #16
   19308:	e1a01820 	lsr	r1, r0, #16
   1930c:	e1a03827 	lsr	r3, r7, #16
   19310:	e1c0c801 	bic	r12, r0, r1, lsl #16
   19314:	e1c77803 	bic	r7, r7, r3, lsl #16
   19318:	e002079c 	mul	r2, r12, r7
   1931c:	e0070791 	mul	r7, r1, r7
   19320:	e00c0c93 	mul	r12, r3, r12
   19324:	e0030391 	mul	r3, r1, r3
   19328:	e097c00c 	adds	r12, r7, r12
   1932c:	22833801 	addcs	r3, r3, #65536	; 0x10000
   19330:	e092280c 	adds	r2, r2, r12, lsl #16
   19334:	e0a3382c 	adc	r3, r3, r12, lsr #16
   19338:	e1590003 	cmp	r9, r3
   1933c:	3a000006 	bcc	1935c <__udivdi3+0x358>
   19340:	13a03000 	movne	r3, #0
   19344:	03a03001 	moveq	r3, #1
   19348:	e1520416 	cmp	r2, r6, lsl r4
   1934c:	93a06000 	movls	r6, #0
   19350:	82036001 	andhi	r6, r3, #1
   19354:	e3560000 	cmp	r6, #0
   19358:	0affff6a 	beq	19108 <__udivdi3+0x104>
   1935c:	e2400001 	sub	r0, r0, #1
   19360:	e3a06000 	mov	r6, #0
   19364:	eaffff67 	b	19108 <__udivdi3+0x104>
   19368:	e1a04314 	lsl	r4, r4, r3
   1936c:	e263b020 	rsb	r11, r3, #32
   19370:	e1a02b35 	lsr	r2, r5, r11
   19374:	e1a0bb36 	lsr	r11, r6, r11
   19378:	e1a0a824 	lsr	r10, r4, #16
   1937c:	e1a0100a 	mov	r1, r10
   19380:	e1a00002 	mov	r0, r2
   19384:	e18bb315 	orr	r11, r11, r5, lsl r3
   19388:	e1a08316 	lsl	r8, r6, r3
   1938c:	e58d2004 	str	r2, [sp, #4]
   19390:	ebfffd69 	bl	1893c <__aeabi_uidiv>
   19394:	e59d2004 	ldr	r2, [sp, #4]
   19398:	e1a07000 	mov	r7, r0
   1939c:	e1a0100a 	mov	r1, r10
   193a0:	e1a00002 	mov	r0, r2
   193a4:	ebfffda1 	bl	18a30 <__aeabi_uidivmod>
   193a8:	e1a09804 	lsl	r9, r4, #16
   193ac:	e1a09829 	lsr	r9, r9, #16
   193b0:	e0000799 	mul	r0, r9, r7
   193b4:	e1a0382b 	lsr	r3, r11, #16
   193b8:	e1831801 	orr	r1, r3, r1, lsl #16
   193bc:	e1500001 	cmp	r0, r1
   193c0:	9a000006 	bls	193e0 <__udivdi3+0x3dc>
   193c4:	e0911004 	adds	r1, r1, r4
   193c8:	e2473001 	sub	r3, r7, #1
   193cc:	2a00002c 	bcs	19484 <__udivdi3+0x480>
   193d0:	e1500001 	cmp	r0, r1
   193d4:	82477002 	subhi	r7, r7, #2
   193d8:	80811004 	addhi	r1, r1, r4
   193dc:	9a000028 	bls	19484 <__udivdi3+0x480>
   193e0:	e0605001 	rsb	r5, r0, r1
   193e4:	e1a00005 	mov	r0, r5
   193e8:	e1a0100a 	mov	r1, r10
   193ec:	ebfffd52 	bl	1893c <__aeabi_uidiv>
   193f0:	e1a0100a 	mov	r1, r10
   193f4:	e1a06000 	mov	r6, r0
   193f8:	e1a00005 	mov	r0, r5
   193fc:	ebfffd8b 	bl	18a30 <__aeabi_uidivmod>
   19400:	e0050699 	mul	r5, r9, r6
   19404:	e1a0b80b 	lsl	r11, r11, #16
   19408:	e1a0b82b 	lsr	r11, r11, #16
   1940c:	e18b1801 	orr	r1, r11, r1, lsl #16
   19410:	e1550001 	cmp	r5, r1
   19414:	9a000007 	bls	19438 <__udivdi3+0x434>
   19418:	e0911004 	adds	r1, r1, r4
   1941c:	e2463001 	sub	r3, r6, #1
   19420:	2a000003 	bcs	19434 <__udivdi3+0x430>
   19424:	e1550001 	cmp	r5, r1
   19428:	82466002 	subhi	r6, r6, #2
   1942c:	80811004 	addhi	r1, r1, r4
   19430:	8a000000 	bhi	19438 <__udivdi3+0x434>
   19434:	e1a06003 	mov	r6, r3
   19438:	e0655001 	rsb	r5, r5, r1
   1943c:	e1866807 	orr	r6, r6, r7, lsl #16
   19440:	eaffff53 	b	19194 <__udivdi3+0x190>
   19444:	e1a06003 	mov	r6, r3
   19448:	eaffff2c 	b	19100 <__udivdi3+0xfc>
   1944c:	e1a07003 	mov	r7, r3
   19450:	eaffff62 	b	191e0 <__udivdi3+0x1dc>
   19454:	e1a05003 	mov	r5, r3
   19458:	eaffff74 	b	19230 <__udivdi3+0x22c>
   1945c:	e1590001 	cmp	r9, r1
   19460:	82422002 	subhi	r2, r2, #2
   19464:	8081100a 	addhi	r1, r1, r10
   19468:	8affffa4 	bhi	19300 <__udivdi3+0x2fc>
   1946c:	eaffffa2 	b	192fc <__udivdi3+0x2f8>
   19470:	e1500001 	cmp	r0, r1
   19474:	824bb002 	subhi	r11, r11, #2
   19478:	8081100a 	addhi	r1, r1, r10
   1947c:	8affff89 	bhi	192a8 <__udivdi3+0x2a4>
   19480:	eaffff87 	b	192a4 <__udivdi3+0x2a0>
   19484:	e1a07003 	mov	r7, r3
   19488:	eaffffd4 	b	193e0 <__udivdi3+0x3dc>

0001948c <__clzsi2>:
   1948c:	e3a0101c 	mov	r1, #28
   19490:	e3500801 	cmp	r0, #65536	; 0x10000
   19494:	21a00820 	lsrcs	r0, r0, #16
   19498:	22411010 	subcs	r1, r1, #16
   1949c:	e3500c01 	cmp	r0, #256	; 0x100
   194a0:	21a00420 	lsrcs	r0, r0, #8
   194a4:	22411008 	subcs	r1, r1, #8
   194a8:	e3500010 	cmp	r0, #16
   194ac:	21a00220 	lsrcs	r0, r0, #4
   194b0:	22411004 	subcs	r1, r1, #4
   194b4:	e28f2008 	add	r2, pc, #8
   194b8:	e7d20000 	ldrb	r0, [r2, r0]
   194bc:	e0800001 	add	r0, r0, r1
   194c0:	e12fff1e 	bx	lr
   194c4:	02020304 	.word	0x02020304
   194c8:	01010101 	.word	0x01010101
	...

000194d4 <atexit>:
   194d4:	e1a01000 	mov	r1, r0
   194d8:	e3a00000 	mov	r0, #0
   194dc:	e92d4008 	push	{r3, lr}
   194e0:	e1a02000 	mov	r2, r0
   194e4:	e1a03000 	mov	r3, r0
   194e8:	eb000197 	bl	19b4c <__register_exitproc>
   194ec:	e8bd4008 	pop	{r3, lr}
   194f0:	e12fff1e 	bx	lr

000194f4 <exit>:
   194f4:	e92d4008 	push	{r3, lr}
   194f8:	e3a01000 	mov	r1, #0
   194fc:	e1a04000 	mov	r4, r0
   19500:	eb0001ce 	bl	19c40 <__call_exitprocs>
   19504:	e59f3018 	ldr	r3, [pc, #24]	; 19524 <exit+0x30>
   19508:	e5930000 	ldr	r0, [r3]
   1950c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   19510:	e3530000 	cmp	r3, #0
   19514:	11a0e00f 	movne	lr, pc
   19518:	112fff13 	bxne	r3
   1951c:	e1a00004 	mov	r0, r4
   19520:	eb0020cd 	bl	2185c <_exit>
   19524:	00022808 	.word	0x00022808

00019528 <memcpy>:
   19528:	e3520003 	cmp	r2, #3
   1952c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
   19530:	8a000009 	bhi	1955c <memcpy+0x34>
   19534:	e3520000 	cmp	r2, #0
   19538:	0a000005 	beq	19554 <memcpy+0x2c>
   1953c:	e3a03000 	mov	r3, #0
   19540:	e7d1c003 	ldrb	r12, [r1, r3]
   19544:	e7c0c003 	strb	r12, [r0, r3]
   19548:	e2833001 	add	r3, r3, #1
   1954c:	e1530002 	cmp	r3, r2
   19550:	1afffffa 	bne	19540 <memcpy+0x18>
   19554:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
   19558:	e12fff1e 	bx	lr
   1955c:	e3100003 	tst	r0, #3
   19560:	e0802002 	add	r2, r0, r2
   19564:	0a00000b 	beq	19598 <memcpy+0x70>
   19568:	e280c001 	add	r12, r0, #1
   1956c:	e2814001 	add	r4, r1, #1
   19570:	e20c3003 	and	r3, r12, #3
   19574:	e5545001 	ldrb	r5, [r4, #-1]
   19578:	e3530000 	cmp	r3, #0
   1957c:	e1a01004 	mov	r1, r4
   19580:	e1a0300c 	mov	r3, r12
   19584:	e54c5001 	strb	r5, [r12, #-1]
   19588:	e2844001 	add	r4, r4, #1
   1958c:	e28cc001 	add	r12, r12, #1
   19590:	1afffff6 	bne	19570 <memcpy+0x48>
   19594:	ea000000 	b	1959c <memcpy+0x74>
   19598:	e1a03000 	mov	r3, r0
   1959c:	e211c003 	ands	r12, r1, #3
   195a0:	1a00004f 	bne	196e4 <memcpy+0x1bc>
   195a4:	e063c002 	rsb	r12, r3, r2
   195a8:	e35c003f 	cmp	r12, #63	; 0x3f
   195ac:	da000024 	ble	19644 <memcpy+0x11c>
   195b0:	e591c000 	ldr	r12, [r1]
   195b4:	e583c000 	str	r12, [r3]
   195b8:	e591c004 	ldr	r12, [r1, #4]
   195bc:	e583c004 	str	r12, [r3, #4]
   195c0:	e591c008 	ldr	r12, [r1, #8]
   195c4:	e583c008 	str	r12, [r3, #8]
   195c8:	e591c00c 	ldr	r12, [r1, #12]
   195cc:	e583c00c 	str	r12, [r3, #12]
   195d0:	e591c010 	ldr	r12, [r1, #16]
   195d4:	e583c010 	str	r12, [r3, #16]
   195d8:	e591c014 	ldr	r12, [r1, #20]
   195dc:	e583c014 	str	r12, [r3, #20]
   195e0:	e591c018 	ldr	r12, [r1, #24]
   195e4:	e583c018 	str	r12, [r3, #24]
   195e8:	e591c01c 	ldr	r12, [r1, #28]
   195ec:	e583c01c 	str	r12, [r3, #28]
   195f0:	e591c020 	ldr	r12, [r1, #32]
   195f4:	e583c020 	str	r12, [r3, #32]
   195f8:	e591c024 	ldr	r12, [r1, #36]	; 0x24
   195fc:	e583c024 	str	r12, [r3, #36]	; 0x24
   19600:	e591c028 	ldr	r12, [r1, #40]	; 0x28
   19604:	e583c028 	str	r12, [r3, #40]	; 0x28
   19608:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
   1960c:	e583c02c 	str	r12, [r3, #44]	; 0x2c
   19610:	e591c030 	ldr	r12, [r1, #48]	; 0x30
   19614:	e583c030 	str	r12, [r3, #48]	; 0x30
   19618:	e591c034 	ldr	r12, [r1, #52]	; 0x34
   1961c:	e583c034 	str	r12, [r3, #52]	; 0x34
   19620:	e591c038 	ldr	r12, [r1, #56]	; 0x38
   19624:	e583c038 	str	r12, [r3, #56]	; 0x38
   19628:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
   1962c:	e2833040 	add	r3, r3, #64	; 0x40
   19630:	e503c004 	str	r12, [r3, #-4]
   19634:	e063c002 	rsb	r12, r3, r2
   19638:	e35c003f 	cmp	r12, #63	; 0x3f
   1963c:	e2811040 	add	r1, r1, #64	; 0x40
   19640:	caffffda 	bgt	195b0 <memcpy+0x88>
   19644:	e35c000f 	cmp	r12, #15
   19648:	da00000c 	ble	19680 <memcpy+0x158>
   1964c:	e591c000 	ldr	r12, [r1]
   19650:	e583c000 	str	r12, [r3]
   19654:	e591c004 	ldr	r12, [r1, #4]
   19658:	e583c004 	str	r12, [r3, #4]
   1965c:	e591c008 	ldr	r12, [r1, #8]
   19660:	e583c008 	str	r12, [r3, #8]
   19664:	e591c00c 	ldr	r12, [r1, #12]
   19668:	e2833010 	add	r3, r3, #16
   1966c:	e503c004 	str	r12, [r3, #-4]
   19670:	e063c002 	rsb	r12, r3, r2
   19674:	e35c000f 	cmp	r12, #15
   19678:	e2811010 	add	r1, r1, #16
   1967c:	cafffff2 	bgt	1964c <memcpy+0x124>
   19680:	e35c0003 	cmp	r12, #3
   19684:	da00000a 	ble	196b4 <memcpy+0x18c>
   19688:	e283c004 	add	r12, r3, #4
   1968c:	e2814004 	add	r4, r1, #4
   19690:	e06c3002 	rsb	r3, r12, r2
   19694:	e5145004 	ldr	r5, [r4, #-4]
   19698:	e3530003 	cmp	r3, #3
   1969c:	e1a01004 	mov	r1, r4
   196a0:	e1a0300c 	mov	r3, r12
   196a4:	e50c5004 	str	r5, [r12, #-4]
   196a8:	e2844004 	add	r4, r4, #4
   196ac:	e28cc004 	add	r12, r12, #4
   196b0:	cafffff6 	bgt	19690 <memcpy+0x168>
   196b4:	e1520003 	cmp	r2, r3
   196b8:	82833001 	addhi	r3, r3, #1
   196bc:	82811001 	addhi	r1, r1, #1
   196c0:	82822001 	addhi	r2, r2, #1
   196c4:	9affffa2 	bls	19554 <memcpy+0x2c>
   196c8:	e551c001 	ldrb	r12, [r1, #-1]
   196cc:	e2833001 	add	r3, r3, #1
   196d0:	e1530002 	cmp	r3, r2
   196d4:	e543c002 	strb	r12, [r3, #-2]
   196d8:	e2811001 	add	r1, r1, #1
   196dc:	1afffff9 	bne	196c8 <memcpy+0x1a0>
   196e0:	eaffff9b 	b	19554 <memcpy+0x2c>
   196e4:	e0635002 	rsb	r5, r3, r2
   196e8:	e06c4001 	rsb	r4, r12, r1
   196ec:	e3550003 	cmp	r5, #3
   196f0:	e5945000 	ldr	r5, [r4]
   196f4:	daffffee 	ble	196b4 <memcpy+0x18c>
   196f8:	e26c6004 	rsb	r6, r12, #4
   196fc:	e1a0718c 	lsl	r7, r12, #3
   19700:	e1a06186 	lsl	r6, r6, #3
   19704:	e283c004 	add	r12, r3, #4
   19708:	e1a08735 	lsr	r8, r5, r7
   1970c:	e5b45004 	ldr	r5, [r4, #4]!
   19710:	e1888615 	orr	r8, r8, r5, lsl r6
   19714:	e06c3002 	rsb	r3, r12, r2
   19718:	e3530003 	cmp	r3, #3
   1971c:	e50c8004 	str	r8, [r12, #-4]
   19720:	e1a0300c 	mov	r3, r12
   19724:	e2811004 	add	r1, r1, #4
   19728:	e28cc004 	add	r12, r12, #4
   1972c:	cafffff5 	bgt	19708 <memcpy+0x1e0>
   19730:	eaffffdf 	b	196b4 <memcpy+0x18c>

00019734 <memset>:
   19734:	e3520003 	cmp	r2, #3
   19738:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   1973c:	e20110ff 	and	r1, r1, #255	; 0xff
   19740:	8a000008 	bhi	19768 <memset+0x34>
   19744:	e3520000 	cmp	r2, #0
   19748:	0a000004 	beq	19760 <memset+0x2c>
   1974c:	e1a03000 	mov	r3, r0
   19750:	e0822000 	add	r2, r2, r0
   19754:	e4c31001 	strb	r1, [r3], #1
   19758:	e1530002 	cmp	r3, r2
   1975c:	1afffffc 	bne	19754 <memset+0x20>
   19760:	e8bd0010 	ldmfd	sp!, {r4}
   19764:	e12fff1e 	bx	lr
   19768:	e3100003 	tst	r0, #3
   1976c:	e0802002 	add	r2, r0, r2
   19770:	0a000007 	beq	19794 <memset+0x60>
   19774:	e280c001 	add	r12, r0, #1
   19778:	e20c3003 	and	r3, r12, #3
   1977c:	e3530000 	cmp	r3, #0
   19780:	e54c1001 	strb	r1, [r12, #-1]
   19784:	e1a0300c 	mov	r3, r12
   19788:	e28cc001 	add	r12, r12, #1
   1978c:	1afffff9 	bne	19778 <memset+0x44>
   19790:	ea000000 	b	19798 <memset+0x64>
   19794:	e1a03000 	mov	r3, r0
   19798:	e0634002 	rsb	r4, r3, r2
   1979c:	e081c401 	add	r12, r1, r1, lsl #8
   197a0:	e354003f 	cmp	r4, #63	; 0x3f
   197a4:	e08cc80c 	add	r12, r12, r12, lsl #16
   197a8:	da00001a 	ble	19818 <memset+0xe4>
   197ac:	e583c000 	str	r12, [r3]
   197b0:	e583c004 	str	r12, [r3, #4]
   197b4:	e583c008 	str	r12, [r3, #8]
   197b8:	e583c00c 	str	r12, [r3, #12]
   197bc:	e583c010 	str	r12, [r3, #16]
   197c0:	e583c014 	str	r12, [r3, #20]
   197c4:	e583c018 	str	r12, [r3, #24]
   197c8:	e583c01c 	str	r12, [r3, #28]
   197cc:	e583c020 	str	r12, [r3, #32]
   197d0:	e583c024 	str	r12, [r3, #36]	; 0x24
   197d4:	e583c028 	str	r12, [r3, #40]	; 0x28
   197d8:	e583c02c 	str	r12, [r3, #44]	; 0x2c
   197dc:	e583c030 	str	r12, [r3, #48]	; 0x30
   197e0:	e583c034 	str	r12, [r3, #52]	; 0x34
   197e4:	e583c038 	str	r12, [r3, #56]	; 0x38
   197e8:	e583c03c 	str	r12, [r3, #60]	; 0x3c
   197ec:	e2833040 	add	r3, r3, #64	; 0x40
   197f0:	e0634002 	rsb	r4, r3, r2
   197f4:	e354003f 	cmp	r4, #63	; 0x3f
   197f8:	caffffeb 	bgt	197ac <memset+0x78>
   197fc:	ea000005 	b	19818 <memset+0xe4>
   19800:	e583c000 	str	r12, [r3]
   19804:	e583c004 	str	r12, [r3, #4]
   19808:	e583c008 	str	r12, [r3, #8]
   1980c:	e583c00c 	str	r12, [r3, #12]
   19810:	e2833010 	add	r3, r3, #16
   19814:	e0634002 	rsb	r4, r3, r2
   19818:	e354000f 	cmp	r4, #15
   1981c:	cafffff7 	bgt	19800 <memset+0xcc>
   19820:	e3540003 	cmp	r4, #3
   19824:	da000006 	ble	19844 <memset+0x110>
   19828:	e2834004 	add	r4, r3, #4
   1982c:	e0643002 	rsb	r3, r4, r2
   19830:	e3530003 	cmp	r3, #3
   19834:	e504c004 	str	r12, [r4, #-4]
   19838:	e1a03004 	mov	r3, r4
   1983c:	e2844004 	add	r4, r4, #4
   19840:	cafffff9 	bgt	1982c <memset+0xf8>
   19844:	e1520003 	cmp	r2, r3
   19848:	9affffc4 	bls	19760 <memset+0x2c>
   1984c:	e2833001 	add	r3, r3, #1
   19850:	e2822001 	add	r2, r2, #1
   19854:	e5431001 	strb	r1, [r3, #-1]
   19858:	e2833001 	add	r3, r3, #1
   1985c:	e1530002 	cmp	r3, r2
   19860:	1afffffb 	bne	19854 <memset+0x120>
   19864:	eaffffbd 	b	19760 <memset+0x2c>

00019868 <strlen>:
   19868:	e3c01003 	bic	r1, r0, #3
   1986c:	e2100003 	ands	r0, r0, #3
   19870:	e2600000 	rsb	r0, r0, #0
   19874:	e4913004 	ldr	r3, [r1], #4
   19878:	e280c004 	add	r12, r0, #4
   1987c:	e1a0c18c 	lsl	r12, r12, #3
   19880:	e3e02000 	mvn	r2, #0
   19884:	11833c32 	orrne	r3, r3, r2, lsr r12
   19888:	e3a0c001 	mov	r12, #1
   1988c:	e18cc40c 	orr	r12, r12, r12, lsl #8
   19890:	e18cc80c 	orr	r12, r12, r12, lsl #16
   19894:	e043200c 	sub	r2, r3, r12
   19898:	e1c22003 	bic	r2, r2, r3
   1989c:	e012238c 	ands	r2, r2, r12, lsl #7
   198a0:	04913004 	ldreq	r3, [r1], #4
   198a4:	02800004 	addeq	r0, r0, #4
   198a8:	0afffff9 	beq	19894 <strlen+0x2c>
   198ac:	e31300ff 	tst	r3, #255	; 0xff
   198b0:	12800001 	addne	r0, r0, #1
   198b4:	13130cff 	tstne	r3, #65280	; 0xff00
   198b8:	12800001 	addne	r0, r0, #1
   198bc:	131308ff 	tstne	r3, #16711680	; 0xff0000
   198c0:	12800001 	addne	r0, r0, #1
   198c4:	e12fff1e 	bx	lr

000198c8 <strncmp>:
   198c8:	e3520000 	cmp	r2, #0
   198cc:	e92d0030 	push	{r4, r5}
   198d0:	0a00002c 	beq	19988 <strncmp+0xc0>
   198d4:	e1813000 	orr	r3, r1, r0
   198d8:	e2133003 	ands	r3, r3, #3
   198dc:	1a00002c 	bne	19994 <strncmp+0xcc>
   198e0:	e3520003 	cmp	r2, #3
   198e4:	9a00002a 	bls	19994 <strncmp+0xcc>
   198e8:	e590c000 	ldr	r12, [r0]
   198ec:	e5914000 	ldr	r4, [r1]
   198f0:	e15c0004 	cmp	r12, r4
   198f4:	1a000026 	bne	19994 <strncmp+0xcc>
   198f8:	e2522004 	subs	r2, r2, #4
   198fc:	0a000021 	beq	19988 <strncmp+0xc0>
   19900:	e59f50f8 	ldr	r5, [pc, #248]	; 19a00 <strncmp+0x138>
   19904:	e59f40f8 	ldr	r4, [pc, #248]	; 19a04 <strncmp+0x13c>
   19908:	e08c5005 	add	r5, r12, r5
   1990c:	e1c5c00c 	bic	r12, r5, r12
   19910:	e00c4004 	and	r4, r12, r4
   19914:	e3540000 	cmp	r4, #0
   19918:	0a00000b 	beq	1994c <strncmp+0x84>
   1991c:	ea000035 	b	199f8 <strncmp+0x130>
   19920:	e59cc004 	ldr	r12, [r12, #4]
   19924:	e5955004 	ldr	r5, [r5, #4]
   19928:	e08c3003 	add	r3, r12, r3
   1992c:	e1c3300c 	bic	r3, r3, r12
   19930:	e15c0005 	cmp	r12, r5
   19934:	e0034004 	and	r4, r3, r4
   19938:	1a000015 	bne	19994 <strncmp+0xcc>
   1993c:	e2522004 	subs	r2, r2, #4
   19940:	0a000010 	beq	19988 <strncmp+0xc0>
   19944:	e3540000 	cmp	r4, #0
   19948:	1a000028 	bne	199f0 <strncmp+0x128>
   1994c:	e3520003 	cmp	r2, #3
   19950:	e1a05001 	mov	r5, r1
   19954:	e1a0c000 	mov	r12, r0
   19958:	e59f30a0 	ldr	r3, [pc, #160]	; 19a00 <strncmp+0x138>
   1995c:	e59f40a0 	ldr	r4, [pc, #160]	; 19a04 <strncmp+0x13c>
   19960:	e2811004 	add	r1, r1, #4
   19964:	e2800004 	add	r0, r0, #4
   19968:	8affffec 	bhi	19920 <strncmp+0x58>
   1996c:	e3520000 	cmp	r2, #0
   19970:	e2423001 	sub	r3, r2, #1
   19974:	1a000007 	bne	19998 <strncmp+0xd0>
   19978:	e5dc2004 	ldrb	r2, [r12, #4]
   1997c:	e5d5c004 	ldrb	r12, [r5, #4]
   19980:	e06c0002 	rsb	r0, r12, r2
   19984:	ea000000 	b	1998c <strncmp+0xc4>
   19988:	e1a00002 	mov	r0, r2
   1998c:	e8bd0030 	pop	{r4, r5}
   19990:	e12fff1e 	bx	lr
   19994:	e2423001 	sub	r3, r2, #1
   19998:	e5d02000 	ldrb	r2, [r0]
   1999c:	e5d1c000 	ldrb	r12, [r1]
   199a0:	e152000c 	cmp	r2, r12
   199a4:	1afffff5 	bne	19980 <strncmp+0xb8>
   199a8:	e3530000 	cmp	r3, #0
   199ac:	0a000011 	beq	199f8 <strncmp+0x130>
   199b0:	e3520000 	cmp	r2, #0
   199b4:	12832001 	addne	r2, r3, #1
   199b8:	12813002 	addne	r3, r1, #2
   199bc:	10811002 	addne	r1, r1, r2
   199c0:	1a000005 	bne	199dc <strncmp+0x114>
   199c4:	eaffffef 	b	19988 <strncmp+0xc0>
   199c8:	e1530001 	cmp	r3, r1
   199cc:	0a000007 	beq	199f0 <strncmp+0x128>
   199d0:	e3520000 	cmp	r2, #0
   199d4:	e2833001 	add	r3, r3, #1
   199d8:	0affffea 	beq	19988 <strncmp+0xc0>
   199dc:	e553c001 	ldrb	r12, [r3, #-1]
   199e0:	e5f02001 	ldrb	r2, [r0, #1]!
   199e4:	e152000c 	cmp	r2, r12
   199e8:	0afffff6 	beq	199c8 <strncmp+0x100>
   199ec:	eaffffe3 	b	19980 <strncmp+0xb8>
   199f0:	e3a00000 	mov	r0, #0
   199f4:	eaffffe4 	b	1998c <strncmp+0xc4>
   199f8:	e1a00003 	mov	r0, r3
   199fc:	eaffffe2 	b	1998c <strncmp+0xc4>
   19a00:	fefefeff 	.word	0xfefefeff
   19a04:	80808080 	.word	0x80808080

00019a08 <strncpy>:
   19a08:	e1813000 	orr	r3, r1, r0
   19a0c:	e3130003 	tst	r3, #3
   19a10:	e92d0070 	push	{r4, r5, r6}
   19a14:	e1a03000 	mov	r3, r0
   19a18:	1a000001 	bne	19a24 <strncpy+0x1c>
   19a1c:	e3520003 	cmp	r2, #3
   19a20:	8a000018 	bhi	19a88 <strncpy+0x80>
   19a24:	e3520000 	cmp	r2, #0
   19a28:	0a000014 	beq	19a80 <strncpy+0x78>
   19a2c:	e5d1c000 	ldrb	r12, [r1]
   19a30:	e4c3c001 	strb	r12, [r3], #1
   19a34:	e35c0000 	cmp	r12, #0
   19a38:	e2422001 	sub	r2, r2, #1
   19a3c:	11a0c003 	movne	r12, r3
   19a40:	0a000007 	beq	19a64 <strncpy+0x5c>
   19a44:	e3520000 	cmp	r2, #0
   19a48:	0a00000c 	beq	19a80 <strncpy+0x78>
   19a4c:	e5f13001 	ldrb	r3, [r1, #1]!
   19a50:	e4cc3001 	strb	r3, [r12], #1
   19a54:	e3530000 	cmp	r3, #0
   19a58:	e2422001 	sub	r2, r2, #1
   19a5c:	e1a0300c 	mov	r3, r12
   19a60:	1afffff7 	bne	19a44 <strncpy+0x3c>
   19a64:	e3520000 	cmp	r2, #0
   19a68:	10832002 	addne	r2, r3, r2
   19a6c:	13a01000 	movne	r1, #0
   19a70:	0a000002 	beq	19a80 <strncpy+0x78>
   19a74:	e4c31001 	strb	r1, [r3], #1
   19a78:	e1530002 	cmp	r3, r2
   19a7c:	1afffffc 	bne	19a74 <strncpy+0x6c>
   19a80:	e8bd0070 	pop	{r4, r5, r6}
   19a84:	e12fff1e 	bx	lr
   19a88:	e1a06001 	mov	r6, r1
   19a8c:	e59f4034 	ldr	r4, [pc, #52]	; 19ac8 <strncpy+0xc0>
   19a90:	e4915004 	ldr	r5, [r1], #4
   19a94:	e59fc030 	ldr	r12, [pc, #48]	; 19acc <strncpy+0xc4>
   19a98:	e0854004 	add	r4, r5, r4
   19a9c:	e1c44005 	bic	r4, r4, r5
   19aa0:	e004c00c 	and	r12, r4, r12
   19aa4:	e35c0000 	cmp	r12, #0
   19aa8:	1a000004 	bne	19ac0 <strncpy+0xb8>
   19aac:	e2422004 	sub	r2, r2, #4
   19ab0:	e3520003 	cmp	r2, #3
   19ab4:	e4835004 	str	r5, [r3], #4
   19ab8:	8afffff2 	bhi	19a88 <strncpy+0x80>
   19abc:	eaffffd8 	b	19a24 <strncpy+0x1c>
   19ac0:	e1a01006 	mov	r1, r6
   19ac4:	eaffffd6 	b	19a24 <strncpy+0x1c>
   19ac8:	fefefeff 	.word	0xfefefeff
   19acc:	80808080 	.word	0x80808080

00019ad0 <_vsprintf_r>:
   19ad0:	e92d4010 	push	{r4, lr}
   19ad4:	e3e0c102 	mvn	r12, #-2147483648	; 0x80000000
   19ad8:	e24dd068 	sub	sp, sp, #104	; 0x68
   19adc:	e1a0e001 	mov	lr, r1
   19ae0:	e58dc008 	str	r12, [sp, #8]
   19ae4:	e58dc014 	str	r12, [sp, #20]
   19ae8:	e1a0100d 	mov	r1, sp
   19aec:	e3e0c000 	mvn	r12, #0
   19af0:	e3a04f82 	mov	r4, #520	; 0x208
   19af4:	e1cd40bc 	strh	r4, [sp, #12]
   19af8:	e58de000 	str	lr, [sp]
   19afc:	e58de010 	str	lr, [sp, #16]
   19b00:	e1cdc0be 	strh	r12, [sp, #14]
   19b04:	eb0000c6 	bl	19e24 <_svfprintf_r>
   19b08:	e59d3000 	ldr	r3, [sp]
   19b0c:	e3a02000 	mov	r2, #0
   19b10:	e5c32000 	strb	r2, [r3]
   19b14:	e28dd068 	add	sp, sp, #104	; 0x68
   19b18:	e8bd4010 	pop	{r4, lr}
   19b1c:	e12fff1e 	bx	lr

00019b20 <vsprintf>:
   19b20:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   19b24:	e1a03002 	mov	r3, r2
   19b28:	e59f2018 	ldr	r2, [pc, #24]	; 19b48 <vsprintf+0x28>
   19b2c:	e1a04000 	mov	r4, r0
   19b30:	e1a0c001 	mov	r12, r1
   19b34:	e5920000 	ldr	r0, [r2]
   19b38:	e1a01004 	mov	r1, r4
   19b3c:	e1a0200c 	mov	r2, r12
   19b40:	e8bd0010 	ldmfd	sp!, {r4}
   19b44:	eaffffe1 	b	19ad0 <_vsprintf_r>
   19b48:	00022be8 	.word	0x00022be8

00019b4c <__register_exitproc>:
   19b4c:	e59fc0e4 	ldr	r12, [pc, #228]	; 19c38 <__register_exitproc+0xec>
   19b50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19b54:	e59c4000 	ldr	r4, [r12]
   19b58:	e594c148 	ldr	r12, [r4, #328]	; 0x148
   19b5c:	e35c0000 	cmp	r12, #0
   19b60:	0284cf53 	addeq	r12, r4, #332	; 0x14c
   19b64:	e59c5004 	ldr	r5, [r12, #4]
   19b68:	0584c148 	streq	r12, [r4, #328]	; 0x148
   19b6c:	e355001f 	cmp	r5, #31
   19b70:	e24dd010 	sub	sp, sp, #16
   19b74:	e1a06000 	mov	r6, r0
   19b78:	da000015 	ble	19bd4 <__register_exitproc+0x88>
   19b7c:	e59f00b8 	ldr	r0, [pc, #184]	; 19c3c <__register_exitproc+0xf0>
   19b80:	e3500000 	cmp	r0, #0
   19b84:	1a000001 	bne	19b90 <__register_exitproc+0x44>
   19b88:	e3e00000 	mvn	r0, #0
   19b8c:	ea000018 	b	19bf4 <__register_exitproc+0xa8>
   19b90:	e3a00e19 	mov	r0, #400	; 0x190
   19b94:	e58d100c 	str	r1, [sp, #12]
   19b98:	e58d2008 	str	r2, [sp, #8]
   19b9c:	e58d3004 	str	r3, [sp, #4]
   19ba0:	e320f000 	nop	{0}
   19ba4:	e250c000 	subs	r12, r0, #0
   19ba8:	e59d100c 	ldr	r1, [sp, #12]
   19bac:	e59d2008 	ldr	r2, [sp, #8]
   19bb0:	e59d3004 	ldr	r3, [sp, #4]
   19bb4:	0afffff3 	beq	19b88 <__register_exitproc+0x3c>
   19bb8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
   19bbc:	e3a00000 	mov	r0, #0
   19bc0:	e58c0004 	str	r0, [r12, #4]
   19bc4:	e58c5000 	str	r5, [r12]
   19bc8:	e584c148 	str	r12, [r4, #328]	; 0x148
   19bcc:	e58c0188 	str	r0, [r12, #392]	; 0x188
   19bd0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
   19bd4:	e3560000 	cmp	r6, #0
   19bd8:	e59c4004 	ldr	r4, [r12, #4]
   19bdc:	1a000007 	bne	19c00 <__register_exitproc+0xb4>
   19be0:	e2843002 	add	r3, r4, #2
   19be4:	e2844001 	add	r4, r4, #1
   19be8:	e78c1103 	str	r1, [r12, r3, lsl #2]
   19bec:	e58c4004 	str	r4, [r12, #4]
   19bf0:	e3a00000 	mov	r0, #0
   19bf4:	e28dd010 	add	sp, sp, #16
   19bf8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19bfc:	e12fff1e 	bx	lr
   19c00:	e3a00001 	mov	r0, #1
   19c04:	e1a00410 	lsl	r0, r0, r4
   19c08:	e08c8104 	add	r8, r12, r4, lsl #2
   19c0c:	e3560002 	cmp	r6, #2
   19c10:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
   19c14:	e5883108 	str	r3, [r8, #264]	; 0x108
   19c18:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
   19c1c:	e1877000 	orr	r7, r7, r0
   19c20:	01830000 	orreq	r0, r3, r0
   19c24:	e1a05008 	mov	r5, r8
   19c28:	e5882088 	str	r2, [r8, #136]	; 0x88
   19c2c:	e58c7188 	str	r7, [r12, #392]	; 0x188
   19c30:	058c018c 	streq	r0, [r12, #396]	; 0x18c
   19c34:	eaffffe9 	b	19be0 <__register_exitproc+0x94>
   19c38:	00022808 	.word	0x00022808
   19c3c:	00000000 	.word	0x00000000

00019c40 <__call_exitprocs>:
   19c40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   19c44:	e59f3168 	ldr	r3, [pc, #360]	; 19db4 <__call_exitprocs+0x174>
   19c48:	e5933000 	ldr	r3, [r3]
   19c4c:	e24dd014 	sub	sp, sp, #20
   19c50:	e58d3004 	str	r3, [sp, #4]
   19c54:	e2833f52 	add	r3, r3, #328	; 0x148
   19c58:	e58d0008 	str	r0, [sp, #8]
   19c5c:	e58d300c 	str	r3, [sp, #12]
   19c60:	e1a07001 	mov	r7, r1
   19c64:	e3a08001 	mov	r8, #1
   19c68:	e59d3004 	ldr	r3, [sp, #4]
   19c6c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
   19c70:	e3560000 	cmp	r6, #0
   19c74:	e59db00c 	ldr	r11, [sp, #12]
   19c78:	0a000033 	beq	19d4c <__call_exitprocs+0x10c>
   19c7c:	e5965004 	ldr	r5, [r6, #4]
   19c80:	e2554001 	subs	r4, r5, #1
   19c84:	5286a088 	addpl	r10, r6, #136	; 0x88
   19c88:	5285501f 	addpl	r5, r5, #31
   19c8c:	508a5105 	addpl	r5, r10, r5, lsl #2
   19c90:	5a000007 	bpl	19cb4 <__call_exitprocs+0x74>
   19c94:	ea000029 	b	19d40 <__call_exitprocs+0x100>
   19c98:	e5953000 	ldr	r3, [r5]
   19c9c:	e1530007 	cmp	r3, r7
   19ca0:	0a000005 	beq	19cbc <__call_exitprocs+0x7c>
   19ca4:	e2444001 	sub	r4, r4, #1
   19ca8:	e3740001 	cmn	r4, #1
   19cac:	e2455004 	sub	r5, r5, #4
   19cb0:	0a000022 	beq	19d40 <__call_exitprocs+0x100>
   19cb4:	e3570000 	cmp	r7, #0
   19cb8:	1afffff6 	bne	19c98 <__call_exitprocs+0x58>
   19cbc:	e5963004 	ldr	r3, [r6, #4]
   19cc0:	e06a2005 	rsb	r2, r10, r5
   19cc4:	e2433001 	sub	r3, r3, #1
   19cc8:	e0862002 	add	r2, r6, r2
   19ccc:	e1530004 	cmp	r3, r4
   19cd0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
   19cd4:	13a01000 	movne	r1, #0
   19cd8:	05864004 	streq	r4, [r6, #4]
   19cdc:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
   19ce0:	e3530000 	cmp	r3, #0
   19ce4:	0affffee 	beq	19ca4 <__call_exitprocs+0x64>
   19ce8:	e1a02418 	lsl	r2, r8, r4
   19cec:	e5961188 	ldr	r1, [r6, #392]	; 0x188
   19cf0:	e1120001 	tst	r2, r1
   19cf4:	e5969004 	ldr	r9, [r6, #4]
   19cf8:	0a000016 	beq	19d58 <__call_exitprocs+0x118>
   19cfc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
   19d00:	e1120001 	tst	r2, r1
   19d04:	1a000016 	bne	19d64 <__call_exitprocs+0x124>
   19d08:	e59d0008 	ldr	r0, [sp, #8]
   19d0c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
   19d10:	e1a0e00f 	mov	lr, pc
   19d14:	e12fff13 	bx	r3
   19d18:	e5963004 	ldr	r3, [r6, #4]
   19d1c:	e1530009 	cmp	r3, r9
   19d20:	1affffd0 	bne	19c68 <__call_exitprocs+0x28>
   19d24:	e59b3000 	ldr	r3, [r11]
   19d28:	e1530006 	cmp	r3, r6
   19d2c:	1affffcd 	bne	19c68 <__call_exitprocs+0x28>
   19d30:	e2444001 	sub	r4, r4, #1
   19d34:	e3740001 	cmn	r4, #1
   19d38:	e2455004 	sub	r5, r5, #4
   19d3c:	1affffdc 	bne	19cb4 <__call_exitprocs+0x74>
   19d40:	e59f1070 	ldr	r1, [pc, #112]	; 19db8 <__call_exitprocs+0x178>
   19d44:	e3510000 	cmp	r1, #0
   19d48:	1a000009 	bne	19d74 <__call_exitprocs+0x134>
   19d4c:	e28dd014 	add	sp, sp, #20
   19d50:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   19d54:	e12fff1e 	bx	lr
   19d58:	e1a0e00f 	mov	lr, pc
   19d5c:	e12fff13 	bx	r3
   19d60:	eaffffec 	b	19d18 <__call_exitprocs+0xd8>
   19d64:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
   19d68:	e1a0e00f 	mov	lr, pc
   19d6c:	e12fff13 	bx	r3
   19d70:	eaffffe8 	b	19d18 <__call_exitprocs+0xd8>
   19d74:	e5963004 	ldr	r3, [r6, #4]
   19d78:	e3530000 	cmp	r3, #0
   19d7c:	e5963000 	ldr	r3, [r6]
   19d80:	1a000008 	bne	19da8 <__call_exitprocs+0x168>
   19d84:	e3530000 	cmp	r3, #0
   19d88:	0a000006 	beq	19da8 <__call_exitprocs+0x168>
   19d8c:	e1a00006 	mov	r0, r6
   19d90:	e58b3000 	str	r3, [r11]
   19d94:	e320f000 	nop	{0}
   19d98:	e59b6000 	ldr	r6, [r11]
   19d9c:	e3560000 	cmp	r6, #0
   19da0:	1affffb5 	bne	19c7c <__call_exitprocs+0x3c>
   19da4:	eaffffe8 	b	19d4c <__call_exitprocs+0x10c>
   19da8:	e1a0b006 	mov	r11, r6
   19dac:	e1a06003 	mov	r6, r3
   19db0:	eafffff9 	b	19d9c <__call_exitprocs+0x15c>
   19db4:	00022808 	.word	0x00022808
   19db8:	00000000 	.word	0x00000000

00019dbc <register_fini>:
   19dbc:	e92d4008 	push	{r3, lr}
   19dc0:	e59f3010 	ldr	r3, [pc, #16]	; 19dd8 <register_fini+0x1c>
   19dc4:	e3530000 	cmp	r3, #0
   19dc8:	159f000c 	ldrne	r0, [pc, #12]	; 19ddc <register_fini+0x20>
   19dcc:	1bfffdc0 	blne	194d4 <atexit>
   19dd0:	e8bd4008 	pop	{r3, lr}
   19dd4:	e12fff1e 	bx	lr
   19dd8:	000229e8 	.word	0x000229e8
   19ddc:	00019de0 	.word	0x00019de0

00019de0 <__libc_fini_array>:
   19de0:	e92d4038 	push	{r3, r4, r5, lr}
   19de4:	e59f5030 	ldr	r5, [pc, #48]	; 19e1c <__libc_fini_array+0x3c>
   19de8:	e59f4030 	ldr	r4, [pc, #48]	; 19e20 <__libc_fini_array+0x40>
   19dec:	e0654004 	rsb	r4, r5, r4
   19df0:	e1b04144 	asrs	r4, r4, #2
   19df4:	10855104 	addne	r5, r5, r4, lsl #2
   19df8:	0a000004 	beq	19e10 <__libc_fini_array+0x30>
   19dfc:	e5353004 	ldr	r3, [r5, #-4]!
   19e00:	e1a0e00f 	mov	lr, pc
   19e04:	e12fff13 	bx	r3
   19e08:	e2544001 	subs	r4, r4, #1
   19e0c:	1afffffa 	bne	19dfc <__libc_fini_array+0x1c>
   19e10:	eb0022f4 	bl	229e8 <__libc_fini>
   19e14:	e8bd4038 	pop	{r3, r4, r5, lr}
   19e18:	e12fff1e 	bx	lr
   19e1c:	00022a00 	.word	0x00022a00
   19e20:	00022a04 	.word	0x00022a04

00019e24 <_svfprintf_r>:
   19e24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   19e28:	e24ddf45 	sub	sp, sp, #276	; 0x114
   19e2c:	e58d1030 	str	r1, [sp, #48]	; 0x30
   19e30:	e58d3048 	str	r3, [sp, #72]	; 0x48
   19e34:	e1a04002 	mov	r4, r2
   19e38:	e58d0040 	str	r0, [sp, #64]	; 0x40
   19e3c:	eb000e28 	bl	1d6e4 <_localeconv_r>
   19e40:	e5900000 	ldr	r0, [r0]
   19e44:	e58d0058 	str	r0, [sp, #88]	; 0x58
   19e48:	ebfffe86 	bl	19868 <strlen>
   19e4c:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
   19e50:	e1dc30bc 	ldrh	r3, [r12, #12]
   19e54:	e58d005c 	str	r0, [sp, #92]	; 0x5c
   19e58:	e3a01000 	mov	r1, #0
   19e5c:	e3a00000 	mov	r0, #0
   19e60:	e3130080 	tst	r3, #128	; 0x80
   19e64:	e58d0060 	str	r0, [sp, #96]	; 0x60
   19e68:	e58d1064 	str	r1, [sp, #100]	; 0x64
   19e6c:	0a000002 	beq	19e7c <_svfprintf_r+0x58>
   19e70:	e59c3010 	ldr	r3, [r12, #16]
   19e74:	e3530000 	cmp	r3, #0
   19e78:	0a0006bb 	beq	1b96c <_svfprintf_r+0x1b48>
   19e7c:	e3a03000 	mov	r3, #0
   19e80:	e28dc0d0 	add	r12, sp, #208	; 0xd0
   19e84:	e1a0b004 	mov	r11, r4
   19e88:	e58dc01c 	str	r12, [sp, #28]
   19e8c:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   19e90:	e58dc09c 	str	r12, [sp, #156]	; 0x9c
   19e94:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   19e98:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
   19e9c:	e58d306c 	str	r3, [sp, #108]	; 0x6c
   19ea0:	e58d3068 	str	r3, [sp, #104]	; 0x68
   19ea4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   19ea8:	e58db024 	str	r11, [sp, #36]	; 0x24
   19eac:	e1a04003 	mov	r4, r3
   19eb0:	e1a0a00c 	mov	r10, r12
   19eb4:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   19eb8:	e5dc3000 	ldrb	r3, [r12]
   19ebc:	e3530025 	cmp	r3, #37	; 0x25
   19ec0:	13530000 	cmpne	r3, #0
   19ec4:	0a0000a5 	beq	1a160 <_svfprintf_r+0x33c>
   19ec8:	e28c3001 	add	r3, r12, #1
   19ecc:	e1a06003 	mov	r6, r3
   19ed0:	e5d33000 	ldrb	r3, [r3]
   19ed4:	e3530025 	cmp	r3, #37	; 0x25
   19ed8:	13530000 	cmpne	r3, #0
   19edc:	e2863001 	add	r3, r6, #1
   19ee0:	1afffff9 	bne	19ecc <_svfprintf_r+0xa8>
   19ee4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   19ee8:	e0567004 	subs	r7, r6, r4
   19eec:	0a00000e 	beq	19f2c <_svfprintf_r+0x108>
   19ef0:	e28d40a0 	add	r4, sp, #160	; 0xa0
   19ef4:	e8940030 	ldm	r4, {r4, r5}
   19ef8:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   19efc:	e2844001 	add	r4, r4, #1
   19f00:	e0855007 	add	r5, r5, r7
   19f04:	e3540007 	cmp	r4, #7
   19f08:	e58ac000 	str	r12, [r10]
   19f0c:	e58a7004 	str	r7, [r10, #4]
   19f10:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   19f14:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   19f18:	d28aa008 	addle	r10, r10, #8
   19f1c:	ca000077 	bgt	1a100 <_svfprintf_r+0x2dc>
   19f20:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   19f24:	e0844007 	add	r4, r4, r7
   19f28:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   19f2c:	e5d63000 	ldrb	r3, [r6]
   19f30:	e3530000 	cmp	r3, #0
   19f34:	0a000079 	beq	1a120 <_svfprintf_r+0x2fc>
   19f38:	e286c001 	add	r12, r6, #1
   19f3c:	e3a03000 	mov	r3, #0
   19f40:	e58dc024 	str	r12, [sp, #36]	; 0x24
   19f44:	e58d3034 	str	r3, [sp, #52]	; 0x34
   19f48:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
   19f4c:	e5d67001 	ldrb	r7, [r6, #1]
   19f50:	e58d3020 	str	r3, [sp, #32]
   19f54:	e3e06000 	mvn	r6, #0
   19f58:	e3a01020 	mov	r1, #32
   19f5c:	e3a0202b 	mov	r2, #43	; 0x2b
   19f60:	e1a0300c 	mov	r3, r12
   19f64:	e2833001 	add	r3, r3, #1
   19f68:	e2470020 	sub	r0, r7, #32
   19f6c:	e3500058 	cmp	r0, #88	; 0x58
   19f70:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   19f74:	ea00022d 	b	1a830 <_svfprintf_r+0xa0c>
   19f78:	0001a85c 	.word	0x0001a85c
   19f7c:	0001a830 	.word	0x0001a830
   19f80:	0001a830 	.word	0x0001a830
   19f84:	0001a874 	.word	0x0001a874
   19f88:	0001a830 	.word	0x0001a830
   19f8c:	0001a830 	.word	0x0001a830
   19f90:	0001a830 	.word	0x0001a830
   19f94:	0001a830 	.word	0x0001a830
   19f98:	0001a830 	.word	0x0001a830
   19f9c:	0001a830 	.word	0x0001a830
   19fa0:	0001a888 	.word	0x0001a888
   19fa4:	0001a168 	.word	0x0001a168
   19fa8:	0001a830 	.word	0x0001a830
   19fac:	0001a0ec 	.word	0x0001a0ec
   19fb0:	0001a174 	.word	0x0001a174
   19fb4:	0001a830 	.word	0x0001a830
   19fb8:	0001a1c0 	.word	0x0001a1c0
   19fbc:	0001a1d4 	.word	0x0001a1d4
   19fc0:	0001a1d4 	.word	0x0001a1d4
   19fc4:	0001a1d4 	.word	0x0001a1d4
   19fc8:	0001a1d4 	.word	0x0001a1d4
   19fcc:	0001a1d4 	.word	0x0001a1d4
   19fd0:	0001a1d4 	.word	0x0001a1d4
   19fd4:	0001a1d4 	.word	0x0001a1d4
   19fd8:	0001a1d4 	.word	0x0001a1d4
   19fdc:	0001a1d4 	.word	0x0001a1d4
   19fe0:	0001a830 	.word	0x0001a830
   19fe4:	0001a830 	.word	0x0001a830
   19fe8:	0001a830 	.word	0x0001a830
   19fec:	0001a830 	.word	0x0001a830
   19ff0:	0001a830 	.word	0x0001a830
   19ff4:	0001a830 	.word	0x0001a830
   19ff8:	0001a830 	.word	0x0001a830
   19ffc:	0001a830 	.word	0x0001a830
   1a000:	0001a830 	.word	0x0001a830
   1a004:	0001a830 	.word	0x0001a830
   1a008:	0001a204 	.word	0x0001a204
   1a00c:	0001a448 	.word	0x0001a448
   1a010:	0001a830 	.word	0x0001a830
   1a014:	0001a448 	.word	0x0001a448
   1a018:	0001a830 	.word	0x0001a830
   1a01c:	0001a830 	.word	0x0001a830
   1a020:	0001a830 	.word	0x0001a830
   1a024:	0001a830 	.word	0x0001a830
   1a028:	0001a500 	.word	0x0001a500
   1a02c:	0001a830 	.word	0x0001a830
   1a030:	0001a830 	.word	0x0001a830
   1a034:	0001a8b0 	.word	0x0001a8b0
   1a038:	0001a830 	.word	0x0001a830
   1a03c:	0001a830 	.word	0x0001a830
   1a040:	0001a830 	.word	0x0001a830
   1a044:	0001a830 	.word	0x0001a830
   1a048:	0001a830 	.word	0x0001a830
   1a04c:	0001a8fc 	.word	0x0001a8fc
   1a050:	0001a830 	.word	0x0001a830
   1a054:	0001a830 	.word	0x0001a830
   1a058:	0001a514 	.word	0x0001a514
   1a05c:	0001a830 	.word	0x0001a830
   1a060:	0001a830 	.word	0x0001a830
   1a064:	0001a830 	.word	0x0001a830
   1a068:	0001a830 	.word	0x0001a830
   1a06c:	0001a830 	.word	0x0001a830
   1a070:	0001a830 	.word	0x0001a830
   1a074:	0001a830 	.word	0x0001a830
   1a078:	0001a830 	.word	0x0001a830
   1a07c:	0001a830 	.word	0x0001a830
   1a080:	0001a830 	.word	0x0001a830
   1a084:	0001a56c 	.word	0x0001a56c
   1a088:	0001a5b0 	.word	0x0001a5b0
   1a08c:	0001a448 	.word	0x0001a448
   1a090:	0001a448 	.word	0x0001a448
   1a094:	0001a448 	.word	0x0001a448
   1a098:	0001a61c 	.word	0x0001a61c
   1a09c:	0001a5b0 	.word	0x0001a5b0
   1a0a0:	0001a830 	.word	0x0001a830
   1a0a4:	0001a830 	.word	0x0001a830
   1a0a8:	0001a630 	.word	0x0001a630
   1a0ac:	0001a830 	.word	0x0001a830
   1a0b0:	0001a660 	.word	0x0001a660
   1a0b4:	0001a694 	.word	0x0001a694
   1a0b8:	0001a6d0 	.word	0x0001a6d0
   1a0bc:	0001a720 	.word	0x0001a720
   1a0c0:	0001a830 	.word	0x0001a830
   1a0c4:	0001a734 	.word	0x0001a734
   1a0c8:	0001a830 	.word	0x0001a830
   1a0cc:	0001a7a8 	.word	0x0001a7a8
   1a0d0:	0001a830 	.word	0x0001a830
   1a0d4:	0001a830 	.word	0x0001a830
   1a0d8:	0001a7e4 	.word	0x0001a7e4
   1a0dc:	e59dc034 	ldr	r12, [sp, #52]	; 0x34
   1a0e0:	e26cc000 	rsb	r12, r12, #0
   1a0e4:	e58dc034 	str	r12, [sp, #52]	; 0x34
   1a0e8:	e58d0048 	str	r0, [sp, #72]	; 0x48
   1a0ec:	e59d4020 	ldr	r4, [sp, #32]
   1a0f0:	e3844004 	orr	r4, r4, #4
   1a0f4:	e58d4020 	str	r4, [sp, #32]
   1a0f8:	e5d37000 	ldrb	r7, [r3]
   1a0fc:	eaffff98 	b	19f64 <_svfprintf_r+0x140>
   1a100:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1a104:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1a108:	e28d209c 	add	r2, sp, #156	; 0x9c
   1a10c:	eb001390 	bl	1ef54 <__ssprint_r>
   1a110:	e3500000 	cmp	r0, #0
   1a114:	1a000007 	bne	1a138 <_svfprintf_r+0x314>
   1a118:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1a11c:	eaffff7f 	b	19f20 <_svfprintf_r+0xfc>
   1a120:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   1a124:	e3530000 	cmp	r3, #0
   1a128:	159d0040 	ldrne	r0, [sp, #64]	; 0x40
   1a12c:	159d1030 	ldrne	r1, [sp, #48]	; 0x30
   1a130:	128d209c 	addne	r2, sp, #156	; 0x9c
   1a134:	1b001386 	blne	1ef54 <__ssprint_r>
   1a138:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1a13c:	e1d430bc 	ldrh	r3, [r4, #12]
   1a140:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1a144:	e3130040 	tst	r3, #64	; 0x40
   1a148:	13e0c000 	mvnne	r12, #0
   1a14c:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1a150:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1a154:	e28ddf45 	add	sp, sp, #276	; 0x114
   1a158:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1a15c:	e12fff1e 	bx	lr
   1a160:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   1a164:	eaffff70 	b	19f2c <_svfprintf_r+0x108>
   1a168:	e5cd207b 	strb	r2, [sp, #123]	; 0x7b
   1a16c:	e5d37000 	ldrb	r7, [r3]
   1a170:	eaffff7b 	b	19f64 <_svfprintf_r+0x140>
   1a174:	e1a0c003 	mov	r12, r3
   1a178:	e4dc7001 	ldrb	r7, [r12], #1
   1a17c:	e357002a 	cmp	r7, #42	; 0x2a
   1a180:	0a0006de 	beq	1bd00 <_svfprintf_r+0x1edc>
   1a184:	e2470030 	sub	r0, r7, #48	; 0x30
   1a188:	e3500009 	cmp	r0, #9
   1a18c:	81a0300c 	movhi	r3, r12
   1a190:	83a06000 	movhi	r6, #0
   1a194:	8affff73 	bhi	19f68 <_svfprintf_r+0x144>
   1a198:	e3a06000 	mov	r6, #0
   1a19c:	e4dc7001 	ldrb	r7, [r12], #1
   1a1a0:	e0866106 	add	r6, r6, r6, lsl #2
   1a1a4:	e0806086 	add	r6, r0, r6, lsl #1
   1a1a8:	e2470030 	sub	r0, r7, #48	; 0x30
   1a1ac:	e3500009 	cmp	r0, #9
   1a1b0:	e1a0300c 	mov	r3, r12
   1a1b4:	9afffff8 	bls	1a19c <_svfprintf_r+0x378>
   1a1b8:	e1866fc6 	orr	r6, r6, r6, asr #31
   1a1bc:	eaffff69 	b	19f68 <_svfprintf_r+0x144>
   1a1c0:	e59dc020 	ldr	r12, [sp, #32]
   1a1c4:	e38cc080 	orr	r12, r12, #128	; 0x80
   1a1c8:	e58dc020 	str	r12, [sp, #32]
   1a1cc:	e5d37000 	ldrb	r7, [r3]
   1a1d0:	eaffff63 	b	19f64 <_svfprintf_r+0x140>
   1a1d4:	e1a0c003 	mov	r12, r3
   1a1d8:	e3a00000 	mov	r0, #0
   1a1dc:	e2473030 	sub	r3, r7, #48	; 0x30
   1a1e0:	e4dc7001 	ldrb	r7, [r12], #1
   1a1e4:	e2474030 	sub	r4, r7, #48	; 0x30
   1a1e8:	e0800100 	add	r0, r0, r0, lsl #2
   1a1ec:	e3540009 	cmp	r4, #9
   1a1f0:	e0830080 	add	r0, r3, r0, lsl #1
   1a1f4:	e1a0300c 	mov	r3, r12
   1a1f8:	9afffff7 	bls	1a1dc <_svfprintf_r+0x3b8>
   1a1fc:	e58d0034 	str	r0, [sp, #52]	; 0x34
   1a200:	eaffff58 	b	19f68 <_svfprintf_r+0x144>
   1a204:	e59dc020 	ldr	r12, [sp, #32]
   1a208:	e38cc010 	orr	r12, r12, #16
   1a20c:	e58dc020 	str	r12, [sp, #32]
   1a210:	e59d4020 	ldr	r4, [sp, #32]
   1a214:	e3140020 	tst	r4, #32
   1a218:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a21c:	0a0000e7 	beq	1a5c0 <_svfprintf_r+0x79c>
   1a220:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a224:	e28c1007 	add	r1, r12, #7
   1a228:	e3c11007 	bic	r1, r1, #7
   1a22c:	e891000c 	ldm	r1, {r2, r3}
   1a230:	e2811008 	add	r1, r1, #8
   1a234:	e58d1048 	str	r1, [sp, #72]	; 0x48
   1a238:	e1a04002 	mov	r4, r2
   1a23c:	e1a05003 	mov	r5, r3
   1a240:	e3520000 	cmp	r2, #0
   1a244:	e2d30000 	sbcs	r0, r3, #0
   1a248:	ba0000ea 	blt	1a5f8 <_svfprintf_r+0x7d4>
   1a24c:	e1941005 	orrs	r1, r4, r5
   1a250:	03a02000 	moveq	r2, #0
   1a254:	13a02001 	movne	r2, #1
   1a258:	e3a03001 	mov	r3, #1
   1a25c:	e3560000 	cmp	r6, #0
   1a260:	a59dc020 	ldrge	r12, [sp, #32]
   1a264:	a3ccc080 	bicge	r12, r12, #128	; 0x80
   1a268:	a58dc020 	strge	r12, [sp, #32]
   1a26c:	e3560000 	cmp	r6, #0
   1a270:	13822001 	orrne	r2, r2, #1
   1a274:	e3520000 	cmp	r2, #0
   1a278:	0a0002ac 	beq	1ad30 <_svfprintf_r+0xf0c>
   1a27c:	e3530001 	cmp	r3, #1
   1a280:	0a00039d 	beq	1b0fc <_svfprintf_r+0x12d8>
   1a284:	e3530002 	cmp	r3, #2
   1a288:	e28dc0cf 	add	r12, sp, #207	; 0xcf
   1a28c:	0a000339 	beq	1af78 <_svfprintf_r+0x1154>
   1a290:	e3a00007 	mov	r0, #7
   1a294:	e1a081a4 	lsr	r8, r4, #3
   1a298:	e1888e85 	orr	r8, r8, r5, lsl #29
   1a29c:	e0042000 	and	r2, r4, r0
   1a2a0:	e1a031a5 	lsr	r3, r5, #3
   1a2a4:	e1a04008 	mov	r4, r8
   1a2a8:	e2822030 	add	r2, r2, #48	; 0x30
   1a2ac:	e1a05003 	mov	r5, r3
   1a2b0:	e20220ff 	and	r2, r2, #255	; 0xff
   1a2b4:	e1943005 	orrs	r3, r4, r5
   1a2b8:	e1a0800c 	mov	r8, r12
   1a2bc:	e5cc2000 	strb	r2, [r12]
   1a2c0:	e24cc001 	sub	r12, r12, #1
   1a2c4:	1afffff2 	bne	1a294 <_svfprintf_r+0x470>
   1a2c8:	e59d4020 	ldr	r4, [sp, #32]
   1a2cc:	e3140001 	tst	r4, #1
   1a2d0:	e1a03008 	mov	r3, r8
   1a2d4:	0a00038e 	beq	1b114 <_svfprintf_r+0x12f0>
   1a2d8:	e3520030 	cmp	r2, #48	; 0x30
   1a2dc:	0a000334 	beq	1afb4 <_svfprintf_r+0x1190>
   1a2e0:	e59d401c 	ldr	r4, [sp, #28]
   1a2e4:	e3a02030 	mov	r2, #48	; 0x30
   1a2e8:	e06c4004 	rsb	r4, r12, r4
   1a2ec:	e5432001 	strb	r2, [r3, #-1]
   1a2f0:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1a2f4:	e1a0800c 	mov	r8, r12
   1a2f8:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   1a2fc:	e3a0c000 	mov	r12, #0
   1a300:	e1540006 	cmp	r4, r6
   1a304:	b1a04006 	movlt	r4, r6
   1a308:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1a30c:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
   1a310:	e58d6044 	str	r6, [sp, #68]	; 0x44
   1a314:	e58dc054 	str	r12, [sp, #84]	; 0x54
   1a318:	e3530000 	cmp	r3, #0
   1a31c:	0a000002 	beq	1a32c <_svfprintf_r+0x508>
   1a320:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   1a324:	e2844001 	add	r4, r4, #1
   1a328:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1a32c:	e59dc020 	ldr	r12, [sp, #32]
   1a330:	e21cc002 	ands	r12, r12, #2
   1a334:	159d4028 	ldrne	r4, [sp, #40]	; 0x28
   1a338:	e58dc03c 	str	r12, [sp, #60]	; 0x3c
   1a33c:	e59dc020 	ldr	r12, [sp, #32]
   1a340:	12844002 	addne	r4, r4, #2
   1a344:	158d4028 	strne	r4, [sp, #40]	; 0x28
   1a348:	e21cc084 	ands	r12, r12, #132	; 0x84
   1a34c:	e58dc050 	str	r12, [sp, #80]	; 0x50
   1a350:	1a00017d 	bne	1a94c <_svfprintf_r+0xb28>
   1a354:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   1a358:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1a35c:	e06c6004 	rsb	r6, r12, r4
   1a360:	e3560000 	cmp	r6, #0
   1a364:	da000178 	ble	1a94c <_svfprintf_r+0xb28>
   1a368:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1a36c:	e3560010 	cmp	r6, #16
   1a370:	e8940030 	ldm	r4, {r4, r5}
   1a374:	e59f9fc8 	ldr	r9, [pc, #4040]	; 1b344 <_svfprintf_r+0x1520>
   1a378:	da000020 	ble	1a400 <_svfprintf_r+0x5dc>
   1a37c:	e58d7070 	str	r7, [sp, #112]	; 0x70
   1a380:	e58d8074 	str	r8, [sp, #116]	; 0x74
   1a384:	e3a0b010 	mov	r11, #16
   1a388:	e1a08006 	mov	r8, r6
   1a38c:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1a390:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
   1a394:	ea000002 	b	1a3a4 <_svfprintf_r+0x580>
   1a398:	e2488010 	sub	r8, r8, #16
   1a39c:	e3580010 	cmp	r8, #16
   1a3a0:	da000013 	ble	1a3f4 <_svfprintf_r+0x5d0>
   1a3a4:	e2844001 	add	r4, r4, #1
   1a3a8:	e3540007 	cmp	r4, #7
   1a3ac:	e2855010 	add	r5, r5, #16
   1a3b0:	e88a0a00 	stm	r10, {r9, r11}
   1a3b4:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1a3b8:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1a3bc:	d28aa008 	addle	r10, r10, #8
   1a3c0:	dafffff4 	ble	1a398 <_svfprintf_r+0x574>
   1a3c4:	e1a00006 	mov	r0, r6
   1a3c8:	e1a01007 	mov	r1, r7
   1a3cc:	e28d209c 	add	r2, sp, #156	; 0x9c
   1a3d0:	eb0012df 	bl	1ef54 <__ssprint_r>
   1a3d4:	e3500000 	cmp	r0, #0
   1a3d8:	1affff56 	bne	1a138 <_svfprintf_r+0x314>
   1a3dc:	e2488010 	sub	r8, r8, #16
   1a3e0:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1a3e4:	e3580010 	cmp	r8, #16
   1a3e8:	e8940030 	ldm	r4, {r4, r5}
   1a3ec:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1a3f0:	caffffeb 	bgt	1a3a4 <_svfprintf_r+0x580>
   1a3f4:	e1a06008 	mov	r6, r8
   1a3f8:	e28d7070 	add	r7, sp, #112	; 0x70
   1a3fc:	e8970180 	ldm	r7, {r7, r8}
   1a400:	e2844001 	add	r4, r4, #1
   1a404:	e0855006 	add	r5, r5, r6
   1a408:	e3540007 	cmp	r4, #7
   1a40c:	e58a9000 	str	r9, [r10]
   1a410:	e58a6004 	str	r6, [r10, #4]
   1a414:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1a418:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1a41c:	d28aa008 	addle	r10, r10, #8
   1a420:	da00014a 	ble	1a950 <_svfprintf_r+0xb2c>
   1a424:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1a428:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1a42c:	e28d209c 	add	r2, sp, #156	; 0x9c
   1a430:	eb0012c7 	bl	1ef54 <__ssprint_r>
   1a434:	e3500000 	cmp	r0, #0
   1a438:	1affff3e 	bne	1a138 <_svfprintf_r+0x314>
   1a43c:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1a440:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1a444:	ea000141 	b	1a950 <_svfprintf_r+0xb2c>
   1a448:	e59d4020 	ldr	r4, [sp, #32]
   1a44c:	e3140008 	tst	r4, #8
   1a450:	159dc048 	ldrne	r12, [sp, #72]	; 0x48
   1a454:	059d4048 	ldreq	r4, [sp, #72]	; 0x48
   1a458:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a45c:	128c1007 	addne	r1, r12, #7
   1a460:	02841007 	addeq	r1, r4, #7
   1a464:	e3c11007 	bic	r1, r1, #7
   1a468:	e5919000 	ldr	r9, [r1]
   1a46c:	e5915004 	ldr	r5, [r1, #4]
   1a470:	e2811008 	add	r1, r1, #8
   1a474:	e58d1048 	str	r1, [sp, #72]	; 0x48
   1a478:	e1a00009 	mov	r0, r9
   1a47c:	e1a01005 	mov	r1, r5
   1a480:	e58d0060 	str	r0, [sp, #96]	; 0x60
   1a484:	e58d1064 	str	r1, [sp, #100]	; 0x64
   1a488:	e1a01005 	mov	r1, r5
   1a48c:	e1a00009 	mov	r0, r9
   1a490:	eb0011f8 	bl	1ec78 <__fpclassifyd>
   1a494:	e3500001 	cmp	r0, #1
   1a498:	e1a01005 	mov	r1, r5
   1a49c:	e1a00009 	mov	r0, r9
   1a4a0:	1a000414 	bne	1b4f8 <_svfprintf_r+0x16d4>
   1a4a4:	e3a03000 	mov	r3, #0
   1a4a8:	e3a02000 	mov	r2, #0
   1a4ac:	eb001ca8 	bl	21754 <__aeabi_dcmplt>
   1a4b0:	e3a04003 	mov	r4, #3
   1a4b4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1a4b8:	e59d4020 	ldr	r4, [sp, #32]
   1a4bc:	e3500000 	cmp	r0, #0
   1a4c0:	13a0302d 	movne	r3, #45	; 0x2d
   1a4c4:	e3a0c000 	mov	r12, #0
   1a4c8:	e3c44080 	bic	r4, r4, #128	; 0x80
   1a4cc:	e59f0e74 	ldr	r0, [pc, #3700]	; 1b348 <_svfprintf_r+0x1524>
   1a4d0:	05dd307b 	ldrbeq	r3, [sp, #123]	; 0x7b
   1a4d4:	15cd307b 	strbne	r3, [sp, #123]	; 0x7b
   1a4d8:	e58dc044 	str	r12, [sp, #68]	; 0x44
   1a4dc:	e3570047 	cmp	r7, #71	; 0x47
   1a4e0:	e58d4020 	str	r4, [sp, #32]
   1a4e4:	e3a0c003 	mov	r12, #3
   1a4e8:	e3a04000 	mov	r4, #0
   1a4ec:	e59f8e58 	ldr	r8, [pc, #3672]	; 1b34c <_svfprintf_r+0x1528>
   1a4f0:	e58dc038 	str	r12, [sp, #56]	; 0x38
   1a4f4:	d1a08000 	movle	r8, r0
   1a4f8:	e58d4054 	str	r4, [sp, #84]	; 0x54
   1a4fc:	eaffff85 	b	1a318 <_svfprintf_r+0x4f4>
   1a500:	e59d4020 	ldr	r4, [sp, #32]
   1a504:	e3844008 	orr	r4, r4, #8
   1a508:	e58d4020 	str	r4, [sp, #32]
   1a50c:	e5d37000 	ldrb	r7, [r3]
   1a510:	eafffe93 	b	19f64 <_svfprintf_r+0x140>
   1a514:	e59d4020 	ldr	r4, [sp, #32]
   1a518:	e59fce30 	ldr	r12, [pc, #3632]	; 1b350 <_svfprintf_r+0x152c>
   1a51c:	e3140020 	tst	r4, #32
   1a520:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a524:	e58dc06c 	str	r12, [sp, #108]	; 0x6c
   1a528:	0a0000b3 	beq	1a7fc <_svfprintf_r+0x9d8>
   1a52c:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a530:	e28c3007 	add	r3, r12, #7
   1a534:	e3c33007 	bic	r3, r3, #7
   1a538:	e2834008 	add	r4, r3, #8
   1a53c:	e58d4048 	str	r4, [sp, #72]	; 0x48
   1a540:	e8930030 	ldm	r3, {r4, r5}
   1a544:	e59dc020 	ldr	r12, [sp, #32]
   1a548:	e31c0001 	tst	r12, #1
   1a54c:	1a000326 	bne	1b1ec <_svfprintf_r+0x13c8>
   1a550:	e1940005 	orrs	r0, r4, r5
   1a554:	03a02000 	moveq	r2, #0
   1a558:	13a02001 	movne	r2, #1
   1a55c:	e3a03002 	mov	r3, #2
   1a560:	e3a01000 	mov	r1, #0
   1a564:	e5cd107b 	strb	r1, [sp, #123]	; 0x7b
   1a568:	eaffff3b 	b	1a25c <_svfprintf_r+0x438>
   1a56c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a570:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   1a574:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1a578:	e5933000 	ldr	r3, [r3]
   1a57c:	e3a0c001 	mov	r12, #1
   1a580:	e2844004 	add	r4, r4, #4
   1a584:	e5cd30a8 	strb	r3, [sp, #168]	; 0xa8
   1a588:	e3a03000 	mov	r3, #0
   1a58c:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1a590:	e58d4048 	str	r4, [sp, #72]	; 0x48
   1a594:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
   1a598:	e58dc038 	str	r12, [sp, #56]	; 0x38
   1a59c:	e28d80a8 	add	r8, sp, #168	; 0xa8
   1a5a0:	e3a03000 	mov	r3, #0
   1a5a4:	e58d3044 	str	r3, [sp, #68]	; 0x44
   1a5a8:	e58d3054 	str	r3, [sp, #84]	; 0x54
   1a5ac:	eaffff5e 	b	1a32c <_svfprintf_r+0x508>
   1a5b0:	e59d4020 	ldr	r4, [sp, #32]
   1a5b4:	e3140020 	tst	r4, #32
   1a5b8:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a5bc:	1affff17 	bne	1a220 <_svfprintf_r+0x3fc>
   1a5c0:	e59d4020 	ldr	r4, [sp, #32]
   1a5c4:	e3140010 	tst	r4, #16
   1a5c8:	0a0003fb 	beq	1b5bc <_svfprintf_r+0x1798>
   1a5cc:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a5d0:	e59c3000 	ldr	r3, [r12]
   1a5d4:	e1a05fc3 	asr	r5, r3, #31
   1a5d8:	e1a02003 	mov	r2, r3
   1a5dc:	e1a04003 	mov	r4, r3
   1a5e0:	e1a03005 	mov	r3, r5
   1a5e4:	e28cc004 	add	r12, r12, #4
   1a5e8:	e3520000 	cmp	r2, #0
   1a5ec:	e2d30000 	sbcs	r0, r3, #0
   1a5f0:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1a5f4:	aaffff14 	bge	1a24c <_svfprintf_r+0x428>
   1a5f8:	e2744000 	rsbs	r4, r4, #0
   1a5fc:	e2e55000 	rsc	r5, r5, #0
   1a600:	e3a0302d 	mov	r3, #45	; 0x2d
   1a604:	e1942005 	orrs	r2, r4, r5
   1a608:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
   1a60c:	03a02000 	moveq	r2, #0
   1a610:	13a02001 	movne	r2, #1
   1a614:	e3a03001 	mov	r3, #1
   1a618:	eaffff0f 	b	1a25c <_svfprintf_r+0x438>
   1a61c:	e59dc020 	ldr	r12, [sp, #32]
   1a620:	e38cc040 	orr	r12, r12, #64	; 0x40
   1a624:	e58dc020 	str	r12, [sp, #32]
   1a628:	e5d37000 	ldrb	r7, [r3]
   1a62c:	eafffe4c 	b	19f64 <_svfprintf_r+0x140>
   1a630:	e5d37000 	ldrb	r7, [r3]
   1a634:	e357006c 	cmp	r7, #108	; 0x6c
   1a638:	059d4020 	ldreq	r4, [sp, #32]
   1a63c:	159dc020 	ldrne	r12, [sp, #32]
   1a640:	e1a00003 	mov	r0, r3
   1a644:	03844020 	orreq	r4, r4, #32
   1a648:	138cc010 	orrne	r12, r12, #16
   1a64c:	02833001 	addeq	r3, r3, #1
   1a650:	058d4020 	streq	r4, [sp, #32]
   1a654:	05d07001 	ldrbeq	r7, [r0, #1]
   1a658:	158dc020 	strne	r12, [sp, #32]
   1a65c:	eafffe40 	b	19f64 <_svfprintf_r+0x140>
   1a660:	e59d4020 	ldr	r4, [sp, #32]
   1a664:	e3140020 	tst	r4, #32
   1a668:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a66c:	0a0003b5 	beq	1b548 <_svfprintf_r+0x1724>
   1a670:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a674:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   1a678:	e59c3000 	ldr	r3, [r12]
   1a67c:	e1a01fc2 	asr	r1, r2, #31
   1a680:	e28cc004 	add	r12, r12, #4
   1a684:	e5832000 	str	r2, [r3]
   1a688:	e5831004 	str	r1, [r3, #4]
   1a68c:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1a690:	eafffe07 	b	19eb4 <_svfprintf_r+0x90>
   1a694:	e59dc020 	ldr	r12, [sp, #32]
   1a698:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a69c:	e21c3020 	ands	r3, r12, #32
   1a6a0:	0a000089 	beq	1a8cc <_svfprintf_r+0xaa8>
   1a6a4:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1a6a8:	e2843007 	add	r3, r4, #7
   1a6ac:	e3c33007 	bic	r3, r3, #7
   1a6b0:	e8930030 	ldm	r3, {r4, r5}
   1a6b4:	e2833008 	add	r3, r3, #8
   1a6b8:	e194c005 	orrs	r12, r4, r5
   1a6bc:	e58d3048 	str	r3, [sp, #72]	; 0x48
   1a6c0:	03a02000 	moveq	r2, #0
   1a6c4:	13a02001 	movne	r2, #1
   1a6c8:	e3a03000 	mov	r3, #0
   1a6cc:	eaffffa3 	b	1a560 <_svfprintf_r+0x73c>
   1a6d0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a6d4:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   1a6d8:	e283c004 	add	r12, r3, #4
   1a6dc:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1a6e0:	e59dc020 	ldr	r12, [sp, #32]
   1a6e4:	e5932000 	ldr	r2, [r3]
   1a6e8:	e38cc002 	orr	r12, r12, #2
   1a6ec:	e58dc020 	str	r12, [sp, #32]
   1a6f0:	e3a05000 	mov	r5, #0
   1a6f4:	e59fcc58 	ldr	r12, [pc, #3160]	; 1b354 <_svfprintf_r+0x1530>
   1a6f8:	e3a03030 	mov	r3, #48	; 0x30
   1a6fc:	e3a07078 	mov	r7, #120	; 0x78
   1a700:	e1a04002 	mov	r4, r2
   1a704:	e0522005 	subs	r2, r2, r5
   1a708:	e5cd307c 	strb	r3, [sp, #124]	; 0x7c
   1a70c:	e5cd707d 	strb	r7, [sp, #125]	; 0x7d
   1a710:	13a02001 	movne	r2, #1
   1a714:	e58dc06c 	str	r12, [sp, #108]	; 0x6c
   1a718:	e3a03002 	mov	r3, #2
   1a71c:	eaffff8f 	b	1a560 <_svfprintf_r+0x73c>
   1a720:	e59d4020 	ldr	r4, [sp, #32]
   1a724:	e3844020 	orr	r4, r4, #32
   1a728:	e58d4020 	str	r4, [sp, #32]
   1a72c:	e5d37000 	ldrb	r7, [r3]
   1a730:	eafffe0b 	b	19f64 <_svfprintf_r+0x140>
   1a734:	e3a04000 	mov	r4, #0
   1a738:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a73c:	e5cd407b 	strb	r4, [sp, #123]	; 0x7b
   1a740:	e59c8000 	ldr	r8, [r12]
   1a744:	e1580004 	cmp	r8, r4
   1a748:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a74c:	e28c5004 	add	r5, r12, #4
   1a750:	0a0004e8 	beq	1baf8 <_svfprintf_r+0x1cd4>
   1a754:	e3560000 	cmp	r6, #0
   1a758:	e1a00008 	mov	r0, r8
   1a75c:	ba0004cb 	blt	1ba90 <_svfprintf_r+0x1c6c>
   1a760:	e1a01004 	mov	r1, r4
   1a764:	e1a02006 	mov	r2, r6
   1a768:	eb000db1 	bl	1de34 <memchr>
   1a76c:	e3500000 	cmp	r0, #0
   1a770:	0a000515 	beq	1bbcc <_svfprintf_r+0x1da8>
   1a774:	e0680000 	rsb	r0, r8, r0
   1a778:	e1500006 	cmp	r0, r6
   1a77c:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1a780:	e58d4044 	str	r4, [sp, #68]	; 0x44
   1a784:	da0003dd 	ble	1b700 <_svfprintf_r+0x18dc>
   1a788:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
   1a78c:	e1c64fc6 	bic	r4, r6, r6, asr #31
   1a790:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1a794:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
   1a798:	e58d5048 	str	r5, [sp, #72]	; 0x48
   1a79c:	e58d6038 	str	r6, [sp, #56]	; 0x38
   1a7a0:	e58dc054 	str	r12, [sp, #84]	; 0x54
   1a7a4:	eafffedb 	b	1a318 <_svfprintf_r+0x4f4>
   1a7a8:	e59dc020 	ldr	r12, [sp, #32]
   1a7ac:	e31c0020 	tst	r12, #32
   1a7b0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a7b4:	0a000057 	beq	1a918 <_svfprintf_r+0xaf4>
   1a7b8:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1a7bc:	e2843007 	add	r3, r4, #7
   1a7c0:	e3c33007 	bic	r3, r3, #7
   1a7c4:	e8930030 	ldm	r3, {r4, r5}
   1a7c8:	e2833008 	add	r3, r3, #8
   1a7cc:	e194c005 	orrs	r12, r4, r5
   1a7d0:	e58d3048 	str	r3, [sp, #72]	; 0x48
   1a7d4:	03a02000 	moveq	r2, #0
   1a7d8:	13a02001 	movne	r2, #1
   1a7dc:	e3a03001 	mov	r3, #1
   1a7e0:	eaffff5e 	b	1a560 <_svfprintf_r+0x73c>
   1a7e4:	e59f4b68 	ldr	r4, [pc, #2920]	; 1b354 <_svfprintf_r+0x1530>
   1a7e8:	e58d406c 	str	r4, [sp, #108]	; 0x6c
   1a7ec:	e59d4020 	ldr	r4, [sp, #32]
   1a7f0:	e3140020 	tst	r4, #32
   1a7f4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a7f8:	1affff4b 	bne	1a52c <_svfprintf_r+0x708>
   1a7fc:	e59dc020 	ldr	r12, [sp, #32]
   1a800:	e31c0010 	tst	r12, #16
   1a804:	1a00028b 	bne	1b238 <_svfprintf_r+0x1414>
   1a808:	e59d4020 	ldr	r4, [sp, #32]
   1a80c:	e3140040 	tst	r4, #64	; 0x40
   1a810:	0a000288 	beq	1b238 <_svfprintf_r+0x1414>
   1a814:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a818:	e1dc30b0 	ldrh	r3, [r12]
   1a81c:	e28cc004 	add	r12, r12, #4
   1a820:	e1a04003 	mov	r4, r3
   1a824:	e3a05000 	mov	r5, #0
   1a828:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1a82c:	eaffff44 	b	1a544 <_svfprintf_r+0x720>
   1a830:	e3570000 	cmp	r7, #0
   1a834:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a838:	0afffe38 	beq	1a120 <_svfprintf_r+0x2fc>
   1a83c:	e3a04001 	mov	r4, #1
   1a840:	e3a03000 	mov	r3, #0
   1a844:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1a848:	e5cd70a8 	strb	r7, [sp, #168]	; 0xa8
   1a84c:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
   1a850:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1a854:	e28d80a8 	add	r8, sp, #168	; 0xa8
   1a858:	eaffff50 	b	1a5a0 <_svfprintf_r+0x77c>
   1a85c:	e5dd007b 	ldrb	r0, [sp, #123]	; 0x7b
   1a860:	e3500000 	cmp	r0, #0
   1a864:	1a000335 	bne	1b540 <_svfprintf_r+0x171c>
   1a868:	e5cd107b 	strb	r1, [sp, #123]	; 0x7b
   1a86c:	e5d37000 	ldrb	r7, [r3]
   1a870:	eafffdbb 	b	19f64 <_svfprintf_r+0x140>
   1a874:	e59d4020 	ldr	r4, [sp, #32]
   1a878:	e3844001 	orr	r4, r4, #1
   1a87c:	e58d4020 	str	r4, [sp, #32]
   1a880:	e5d37000 	ldrb	r7, [r3]
   1a884:	eafffdb6 	b	19f64 <_svfprintf_r+0x140>
   1a888:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a88c:	e59cc000 	ldr	r12, [r12]
   1a890:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1a894:	e35c0000 	cmp	r12, #0
   1a898:	e58dc034 	str	r12, [sp, #52]	; 0x34
   1a89c:	e2840004 	add	r0, r4, #4
   1a8a0:	bafffe0d 	blt	1a0dc <_svfprintf_r+0x2b8>
   1a8a4:	e5d37000 	ldrb	r7, [r3]
   1a8a8:	e58d0048 	str	r0, [sp, #72]	; 0x48
   1a8ac:	eafffdac 	b	19f64 <_svfprintf_r+0x140>
   1a8b0:	e59d4020 	ldr	r4, [sp, #32]
   1a8b4:	e3844010 	orr	r4, r4, #16
   1a8b8:	e58d4020 	str	r4, [sp, #32]
   1a8bc:	e59dc020 	ldr	r12, [sp, #32]
   1a8c0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a8c4:	e21c3020 	ands	r3, r12, #32
   1a8c8:	1affff75 	bne	1a6a4 <_svfprintf_r+0x880>
   1a8cc:	e59d4020 	ldr	r4, [sp, #32]
   1a8d0:	e2141010 	ands	r1, r4, #16
   1a8d4:	0a00032b 	beq	1b588 <_svfprintf_r+0x1764>
   1a8d8:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a8dc:	e59c2000 	ldr	r2, [r12]
   1a8e0:	e3a05000 	mov	r5, #0
   1a8e4:	e1a04002 	mov	r4, r2
   1a8e8:	e28cc004 	add	r12, r12, #4
   1a8ec:	e0522005 	subs	r2, r2, r5
   1a8f0:	13a02001 	movne	r2, #1
   1a8f4:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1a8f8:	eaffff18 	b	1a560 <_svfprintf_r+0x73c>
   1a8fc:	e59d4020 	ldr	r4, [sp, #32]
   1a900:	e3844010 	orr	r4, r4, #16
   1a904:	e58d4020 	str	r4, [sp, #32]
   1a908:	e59dc020 	ldr	r12, [sp, #32]
   1a90c:	e31c0020 	tst	r12, #32
   1a910:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1a914:	1affffa7 	bne	1a7b8 <_svfprintf_r+0x994>
   1a918:	e59d4020 	ldr	r4, [sp, #32]
   1a91c:	e3140010 	tst	r4, #16
   1a920:	0a000312 	beq	1b570 <_svfprintf_r+0x174c>
   1a924:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1a928:	e59c2000 	ldr	r2, [r12]
   1a92c:	e3a05000 	mov	r5, #0
   1a930:	e1a04002 	mov	r4, r2
   1a934:	e28cc004 	add	r12, r12, #4
   1a938:	e0522005 	subs	r2, r2, r5
   1a93c:	13a02001 	movne	r2, #1
   1a940:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1a944:	e3a03001 	mov	r3, #1
   1a948:	eaffff04 	b	1a560 <_svfprintf_r+0x73c>
   1a94c:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1a950:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
   1a954:	e3530000 	cmp	r3, #0
   1a958:	0a00000b 	beq	1a98c <_svfprintf_r+0xb68>
   1a95c:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1a960:	e28d307b 	add	r3, sp, #123	; 0x7b
   1a964:	e2844001 	add	r4, r4, #1
   1a968:	e58a3000 	str	r3, [r10]
   1a96c:	e2855001 	add	r5, r5, #1
   1a970:	e3540007 	cmp	r4, #7
   1a974:	e3a03001 	mov	r3, #1
   1a978:	e58a3004 	str	r3, [r10, #4]
   1a97c:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1a980:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1a984:	d28aa008 	addle	r10, r10, #8
   1a988:	ca00018d 	bgt	1afc4 <_svfprintf_r+0x11a0>
   1a98c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
   1a990:	e3530000 	cmp	r3, #0
   1a994:	0a00000b 	beq	1a9c8 <_svfprintf_r+0xba4>
   1a998:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1a99c:	e28d307c 	add	r3, sp, #124	; 0x7c
   1a9a0:	e2844001 	add	r4, r4, #1
   1a9a4:	e58a3000 	str	r3, [r10]
   1a9a8:	e2855002 	add	r5, r5, #2
   1a9ac:	e3540007 	cmp	r4, #7
   1a9b0:	e3a03002 	mov	r3, #2
   1a9b4:	e58a3004 	str	r3, [r10, #4]
   1a9b8:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1a9bc:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1a9c0:	d28aa008 	addle	r10, r10, #8
   1a9c4:	ca000187 	bgt	1afe8 <_svfprintf_r+0x11c4>
   1a9c8:	e59d4050 	ldr	r4, [sp, #80]	; 0x50
   1a9cc:	e3540080 	cmp	r4, #128	; 0x80
   1a9d0:	0a0000e5 	beq	1ad6c <_svfprintf_r+0xf48>
   1a9d4:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
   1a9d8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1a9dc:	e063900c 	rsb	r9, r3, r12
   1a9e0:	e3590000 	cmp	r9, #0
   1a9e4:	da000036 	ble	1aac4 <_svfprintf_r+0xca0>
   1a9e8:	e3590010 	cmp	r9, #16
   1a9ec:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1a9f0:	e59f696c 	ldr	r6, [pc, #2412]	; 1b364 <_svfprintf_r+0x1540>
   1a9f4:	da000022 	ble	1aa84 <_svfprintf_r+0xc60>
   1a9f8:	e58d7044 	str	r7, [sp, #68]	; 0x44
   1a9fc:	e58d803c 	str	r8, [sp, #60]	; 0x3c
   1aa00:	e3a0b010 	mov	r11, #16
   1aa04:	e1a08009 	mov	r8, r9
   1aa08:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1aa0c:	e1a09006 	mov	r9, r6
   1aa10:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
   1aa14:	ea000002 	b	1aa24 <_svfprintf_r+0xc00>
   1aa18:	e2488010 	sub	r8, r8, #16
   1aa1c:	e3580010 	cmp	r8, #16
   1aa20:	da000013 	ble	1aa74 <_svfprintf_r+0xc50>
   1aa24:	e2844001 	add	r4, r4, #1
   1aa28:	e3540007 	cmp	r4, #7
   1aa2c:	e2855010 	add	r5, r5, #16
   1aa30:	e88a0a00 	stm	r10, {r9, r11}
   1aa34:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1aa38:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1aa3c:	d28aa008 	addle	r10, r10, #8
   1aa40:	dafffff4 	ble	1aa18 <_svfprintf_r+0xbf4>
   1aa44:	e1a00006 	mov	r0, r6
   1aa48:	e1a01007 	mov	r1, r7
   1aa4c:	e28d209c 	add	r2, sp, #156	; 0x9c
   1aa50:	eb00113f 	bl	1ef54 <__ssprint_r>
   1aa54:	e3500000 	cmp	r0, #0
   1aa58:	1afffdb6 	bne	1a138 <_svfprintf_r+0x314>
   1aa5c:	e2488010 	sub	r8, r8, #16
   1aa60:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1aa64:	e3580010 	cmp	r8, #16
   1aa68:	e8940030 	ldm	r4, {r4, r5}
   1aa6c:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1aa70:	caffffeb 	bgt	1aa24 <_svfprintf_r+0xc00>
   1aa74:	e1a06009 	mov	r6, r9
   1aa78:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
   1aa7c:	e1a09008 	mov	r9, r8
   1aa80:	e59d803c 	ldr	r8, [sp, #60]	; 0x3c
   1aa84:	e2844001 	add	r4, r4, #1
   1aa88:	e0855009 	add	r5, r5, r9
   1aa8c:	e3540007 	cmp	r4, #7
   1aa90:	e88a0240 	stm	r10, {r6, r9}
   1aa94:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1aa98:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1aa9c:	d28aa008 	addle	r10, r10, #8
   1aaa0:	da000007 	ble	1aac4 <_svfprintf_r+0xca0>
   1aaa4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1aaa8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1aaac:	e28d209c 	add	r2, sp, #156	; 0x9c
   1aab0:	eb001127 	bl	1ef54 <__ssprint_r>
   1aab4:	e3500000 	cmp	r0, #0
   1aab8:	1afffd9e 	bne	1a138 <_svfprintf_r+0x314>
   1aabc:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1aac0:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1aac4:	e59d4020 	ldr	r4, [sp, #32]
   1aac8:	e3140c01 	tst	r4, #256	; 0x100
   1aacc:	1a00004d 	bne	1ac08 <_svfprintf_r+0xde4>
   1aad0:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1aad4:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
   1aad8:	e2844001 	add	r4, r4, #1
   1aadc:	e085500c 	add	r5, r5, r12
   1aae0:	e3540007 	cmp	r4, #7
   1aae4:	e88a1100 	stm	r10, {r8, r12}
   1aae8:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1aaec:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1aaf0:	ca000110 	bgt	1af38 <_svfprintf_r+0x1114>
   1aaf4:	e28aa008 	add	r10, r10, #8
   1aaf8:	e59d4020 	ldr	r4, [sp, #32]
   1aafc:	e3140004 	tst	r4, #4
   1ab00:	0a000033 	beq	1abd4 <_svfprintf_r+0xdb0>
   1ab04:	e59dc034 	ldr	r12, [sp, #52]	; 0x34
   1ab08:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   1ab0c:	e064600c 	rsb	r6, r4, r12
   1ab10:	e3560000 	cmp	r6, #0
   1ab14:	da00002e 	ble	1abd4 <_svfprintf_r+0xdb0>
   1ab18:	e3560010 	cmp	r6, #16
   1ab1c:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1ab20:	e59f981c 	ldr	r9, [pc, #2076]	; 1b344 <_svfprintf_r+0x1520>
   1ab24:	da00001b 	ble	1ab98 <_svfprintf_r+0xd74>
   1ab28:	e3a07010 	mov	r7, #16
   1ab2c:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
   1ab30:	e59db030 	ldr	r11, [sp, #48]	; 0x30
   1ab34:	ea000002 	b	1ab44 <_svfprintf_r+0xd20>
   1ab38:	e2466010 	sub	r6, r6, #16
   1ab3c:	e3560010 	cmp	r6, #16
   1ab40:	da000014 	ble	1ab98 <_svfprintf_r+0xd74>
   1ab44:	e2844001 	add	r4, r4, #1
   1ab48:	e3540007 	cmp	r4, #7
   1ab4c:	e2855010 	add	r5, r5, #16
   1ab50:	e58a9000 	str	r9, [r10]
   1ab54:	e58a7004 	str	r7, [r10, #4]
   1ab58:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1ab5c:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1ab60:	d28aa008 	addle	r10, r10, #8
   1ab64:	dafffff3 	ble	1ab38 <_svfprintf_r+0xd14>
   1ab68:	e1a00008 	mov	r0, r8
   1ab6c:	e1a0100b 	mov	r1, r11
   1ab70:	e28d209c 	add	r2, sp, #156	; 0x9c
   1ab74:	eb0010f6 	bl	1ef54 <__ssprint_r>
   1ab78:	e3500000 	cmp	r0, #0
   1ab7c:	1afffd6d 	bne	1a138 <_svfprintf_r+0x314>
   1ab80:	e2466010 	sub	r6, r6, #16
   1ab84:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1ab88:	e3560010 	cmp	r6, #16
   1ab8c:	e8940030 	ldm	r4, {r4, r5}
   1ab90:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1ab94:	caffffea 	bgt	1ab44 <_svfprintf_r+0xd20>
   1ab98:	e2844001 	add	r4, r4, #1
   1ab9c:	e0865005 	add	r5, r6, r5
   1aba0:	e3540007 	cmp	r4, #7
   1aba4:	e58a9000 	str	r9, [r10]
   1aba8:	e58a6004 	str	r6, [r10, #4]
   1abac:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1abb0:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1abb4:	da000006 	ble	1abd4 <_svfprintf_r+0xdb0>
   1abb8:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1abbc:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1abc0:	e28d209c 	add	r2, sp, #156	; 0x9c
   1abc4:	eb0010e2 	bl	1ef54 <__ssprint_r>
   1abc8:	e3500000 	cmp	r0, #0
   1abcc:	1afffd59 	bne	1a138 <_svfprintf_r+0x314>
   1abd0:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1abd4:	e28d4028 	add	r4, sp, #40	; 0x28
   1abd8:	e8941010 	ldm	r4, {r4, r12}
   1abdc:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
   1abe0:	e1540000 	cmp	r4, r0
   1abe4:	a08cc004 	addge	r12, r12, r4
   1abe8:	b08cc000 	addlt	r12, r12, r0
   1abec:	e3550000 	cmp	r5, #0
   1abf0:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1abf4:	1a0000d8 	bne	1af5c <_svfprintf_r+0x1138>
   1abf8:	e3a03000 	mov	r3, #0
   1abfc:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
   1ac00:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1ac04:	eafffcaa 	b	19eb4 <_svfprintf_r+0x90>
   1ac08:	e3570065 	cmp	r7, #101	; 0x65
   1ac0c:	da000093 	ble	1ae60 <_svfprintf_r+0x103c>
   1ac10:	e28d1060 	add	r1, sp, #96	; 0x60
   1ac14:	e8910003 	ldm	r1, {r0, r1}
   1ac18:	e3a02000 	mov	r2, #0
   1ac1c:	e3a03000 	mov	r3, #0
   1ac20:	eb001ac5 	bl	2173c <__aeabi_dcmpeq>
   1ac24:	e3500000 	cmp	r0, #0
   1ac28:	0a0000f7 	beq	1b00c <_svfprintf_r+0x11e8>
   1ac2c:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1ac30:	e59f3728 	ldr	r3, [pc, #1832]	; 1b360 <_svfprintf_r+0x153c>
   1ac34:	e2844001 	add	r4, r4, #1
   1ac38:	e58a3000 	str	r3, [r10]
   1ac3c:	e2855001 	add	r5, r5, #1
   1ac40:	e3540007 	cmp	r4, #7
   1ac44:	e3a03001 	mov	r3, #1
   1ac48:	e58a3004 	str	r3, [r10, #4]
   1ac4c:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1ac50:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1ac54:	d28aa008 	addle	r10, r10, #8
   1ac58:	ca00025d 	bgt	1b5d4 <_svfprintf_r+0x17b0>
   1ac5c:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   1ac60:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1ac64:	e1530004 	cmp	r3, r4
   1ac68:	ba000002 	blt	1ac78 <_svfprintf_r+0xe54>
   1ac6c:	e59dc020 	ldr	r12, [sp, #32]
   1ac70:	e31c0001 	tst	r12, #1
   1ac74:	0affff9f 	beq	1aaf8 <_svfprintf_r+0xcd4>
   1ac78:	e59dc05c 	ldr	r12, [sp, #92]	; 0x5c
   1ac7c:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1ac80:	e085500c 	add	r5, r5, r12
   1ac84:	e59dc058 	ldr	r12, [sp, #88]	; 0x58
   1ac88:	e2844001 	add	r4, r4, #1
   1ac8c:	e58ac000 	str	r12, [r10]
   1ac90:	e59dc05c 	ldr	r12, [sp, #92]	; 0x5c
   1ac94:	e3540007 	cmp	r4, #7
   1ac98:	e58ac004 	str	r12, [r10, #4]
   1ac9c:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1aca0:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1aca4:	d28aa008 	addle	r10, r10, #8
   1aca8:	ca00031c 	bgt	1b920 <_svfprintf_r+0x1afc>
   1acac:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1acb0:	e2447001 	sub	r7, r4, #1
   1acb4:	e3570000 	cmp	r7, #0
   1acb8:	daffff8e 	ble	1aaf8 <_svfprintf_r+0xcd4>
   1acbc:	e3570010 	cmp	r7, #16
   1acc0:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1acc4:	e59f6698 	ldr	r6, [pc, #1688]	; 1b364 <_svfprintf_r+0x1540>
   1acc8:	da000152 	ble	1b218 <_svfprintf_r+0x13f4>
   1accc:	e3a08010 	mov	r8, #16
   1acd0:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
   1acd4:	e59db030 	ldr	r11, [sp, #48]	; 0x30
   1acd8:	ea000002 	b	1ace8 <_svfprintf_r+0xec4>
   1acdc:	e2477010 	sub	r7, r7, #16
   1ace0:	e3570010 	cmp	r7, #16
   1ace4:	da00014b 	ble	1b218 <_svfprintf_r+0x13f4>
   1ace8:	e2844001 	add	r4, r4, #1
   1acec:	e3540007 	cmp	r4, #7
   1acf0:	e2855010 	add	r5, r5, #16
   1acf4:	e88a0140 	stm	r10, {r6, r8}
   1acf8:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1acfc:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1ad00:	d28aa008 	addle	r10, r10, #8
   1ad04:	dafffff4 	ble	1acdc <_svfprintf_r+0xeb8>
   1ad08:	e1a00009 	mov	r0, r9
   1ad0c:	e1a0100b 	mov	r1, r11
   1ad10:	e28d209c 	add	r2, sp, #156	; 0x9c
   1ad14:	eb00108e 	bl	1ef54 <__ssprint_r>
   1ad18:	e3500000 	cmp	r0, #0
   1ad1c:	1afffd05 	bne	1a138 <_svfprintf_r+0x314>
   1ad20:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1ad24:	e8940030 	ldm	r4, {r4, r5}
   1ad28:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1ad2c:	eaffffea 	b	1acdc <_svfprintf_r+0xeb8>
   1ad30:	e3530000 	cmp	r3, #0
   1ad34:	158d2038 	strne	r2, [sp, #56]	; 0x38
   1ad38:	128d80d0 	addne	r8, sp, #208	; 0xd0
   1ad3c:	1afffd6d 	bne	1a2f8 <_svfprintf_r+0x4d4>
   1ad40:	e59d4020 	ldr	r4, [sp, #32]
   1ad44:	e3140001 	tst	r4, #1
   1ad48:	128d8e11 	addne	r8, sp, #272	; 0x110
   1ad4c:	13a03030 	movne	r3, #48	; 0x30
   1ad50:	159dc01c 	ldrne	r12, [sp, #28]
   1ad54:	15683041 	strbne	r3, [r8, #-65]!	; 0xffffffbf
   1ad58:	1068c00c 	rsbne	r12, r8, r12
   1ad5c:	158dc038 	strne	r12, [sp, #56]	; 0x38
   1ad60:	058d3038 	streq	r3, [sp, #56]	; 0x38
   1ad64:	028d80d0 	addeq	r8, sp, #208	; 0xd0
   1ad68:	eafffd62 	b	1a2f8 <_svfprintf_r+0x4d4>
   1ad6c:	e59dc034 	ldr	r12, [sp, #52]	; 0x34
   1ad70:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   1ad74:	e064900c 	rsb	r9, r4, r12
   1ad78:	e3590000 	cmp	r9, #0
   1ad7c:	daffff14 	ble	1a9d4 <_svfprintf_r+0xbb0>
   1ad80:	e3590010 	cmp	r9, #16
   1ad84:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1ad88:	e59f65d4 	ldr	r6, [pc, #1492]	; 1b364 <_svfprintf_r+0x1540>
   1ad8c:	da000022 	ble	1ae1c <_svfprintf_r+0xff8>
   1ad90:	e58d703c 	str	r7, [sp, #60]	; 0x3c
   1ad94:	e58d8050 	str	r8, [sp, #80]	; 0x50
   1ad98:	e3a0b010 	mov	r11, #16
   1ad9c:	e1a08009 	mov	r8, r9
   1ada0:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1ada4:	e1a09006 	mov	r9, r6
   1ada8:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
   1adac:	ea000002 	b	1adbc <_svfprintf_r+0xf98>
   1adb0:	e2488010 	sub	r8, r8, #16
   1adb4:	e3580010 	cmp	r8, #16
   1adb8:	da000013 	ble	1ae0c <_svfprintf_r+0xfe8>
   1adbc:	e2844001 	add	r4, r4, #1
   1adc0:	e3540007 	cmp	r4, #7
   1adc4:	e2855010 	add	r5, r5, #16
   1adc8:	e88a0a00 	stm	r10, {r9, r11}
   1adcc:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1add0:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1add4:	d28aa008 	addle	r10, r10, #8
   1add8:	dafffff4 	ble	1adb0 <_svfprintf_r+0xf8c>
   1addc:	e1a00006 	mov	r0, r6
   1ade0:	e1a01007 	mov	r1, r7
   1ade4:	e28d209c 	add	r2, sp, #156	; 0x9c
   1ade8:	eb001059 	bl	1ef54 <__ssprint_r>
   1adec:	e3500000 	cmp	r0, #0
   1adf0:	1afffcd0 	bne	1a138 <_svfprintf_r+0x314>
   1adf4:	e2488010 	sub	r8, r8, #16
   1adf8:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1adfc:	e3580010 	cmp	r8, #16
   1ae00:	e8940030 	ldm	r4, {r4, r5}
   1ae04:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1ae08:	caffffeb 	bgt	1adbc <_svfprintf_r+0xf98>
   1ae0c:	e1a06009 	mov	r6, r9
   1ae10:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
   1ae14:	e1a09008 	mov	r9, r8
   1ae18:	e59d8050 	ldr	r8, [sp, #80]	; 0x50
   1ae1c:	e2844001 	add	r4, r4, #1
   1ae20:	e0855009 	add	r5, r5, r9
   1ae24:	e3540007 	cmp	r4, #7
   1ae28:	e88a0240 	stm	r10, {r6, r9}
   1ae2c:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1ae30:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1ae34:	d28aa008 	addle	r10, r10, #8
   1ae38:	dafffee5 	ble	1a9d4 <_svfprintf_r+0xbb0>
   1ae3c:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1ae40:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1ae44:	e28d209c 	add	r2, sp, #156	; 0x9c
   1ae48:	eb001041 	bl	1ef54 <__ssprint_r>
   1ae4c:	e3500000 	cmp	r0, #0
   1ae50:	1afffcb8 	bne	1a138 <_svfprintf_r+0x314>
   1ae54:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1ae58:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1ae5c:	eafffedc 	b	1a9d4 <_svfprintf_r+0xbb0>
   1ae60:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1ae64:	e3540001 	cmp	r4, #1
   1ae68:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1ae6c:	e2855001 	add	r5, r5, #1
   1ae70:	e2844001 	add	r4, r4, #1
   1ae74:	da000169 	ble	1b420 <_svfprintf_r+0x15fc>
   1ae78:	e3540007 	cmp	r4, #7
   1ae7c:	e3a03001 	mov	r3, #1
   1ae80:	e58a8000 	str	r8, [r10]
   1ae84:	e58a3004 	str	r3, [r10, #4]
   1ae88:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1ae8c:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1ae90:	d28aa008 	addle	r10, r10, #8
   1ae94:	ca00016c 	bgt	1b44c <_svfprintf_r+0x1628>
   1ae98:	e59dc05c 	ldr	r12, [sp, #92]	; 0x5c
   1ae9c:	e085500c 	add	r5, r5, r12
   1aea0:	e59dc058 	ldr	r12, [sp, #88]	; 0x58
   1aea4:	e2844001 	add	r4, r4, #1
   1aea8:	e58ac000 	str	r12, [r10]
   1aeac:	e59dc05c 	ldr	r12, [sp, #92]	; 0x5c
   1aeb0:	e3540007 	cmp	r4, #7
   1aeb4:	e58ac004 	str	r12, [r10, #4]
   1aeb8:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1aebc:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1aec0:	d28aa008 	addle	r10, r10, #8
   1aec4:	ca00016a 	bgt	1b474 <_svfprintf_r+0x1650>
   1aec8:	e28d1060 	add	r1, sp, #96	; 0x60
   1aecc:	e8910003 	ldm	r1, {r0, r1}
   1aed0:	e3a02000 	mov	r2, #0
   1aed4:	e3a03000 	mov	r3, #0
   1aed8:	eb001a17 	bl	2173c <__aeabi_dcmpeq>
   1aedc:	e3500000 	cmp	r0, #0
   1aee0:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
   1aee4:	1a00008e 	bne	1b124 <_svfprintf_r+0x1300>
   1aee8:	e24c3001 	sub	r3, r12, #1
   1aeec:	e2844001 	add	r4, r4, #1
   1aef0:	e2888001 	add	r8, r8, #1
   1aef4:	e0855003 	add	r5, r5, r3
   1aef8:	e3540007 	cmp	r4, #7
   1aefc:	e58a8000 	str	r8, [r10]
   1af00:	e58a3004 	str	r3, [r10, #4]
   1af04:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1af08:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1af0c:	ca0000ac 	bgt	1b1c4 <_svfprintf_r+0x13a0>
   1af10:	e28aa008 	add	r10, r10, #8
   1af14:	e59dc068 	ldr	r12, [sp, #104]	; 0x68
   1af18:	e2844001 	add	r4, r4, #1
   1af1c:	e085500c 	add	r5, r5, r12
   1af20:	e28d308c 	add	r3, sp, #140	; 0x8c
   1af24:	e3540007 	cmp	r4, #7
   1af28:	e88a1008 	stm	r10, {r3, r12}
   1af2c:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1af30:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1af34:	dafffeee 	ble	1aaf4 <_svfprintf_r+0xcd0>
   1af38:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1af3c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1af40:	e28d209c 	add	r2, sp, #156	; 0x9c
   1af44:	eb001002 	bl	1ef54 <__ssprint_r>
   1af48:	e3500000 	cmp	r0, #0
   1af4c:	1afffc79 	bne	1a138 <_svfprintf_r+0x314>
   1af50:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1af54:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1af58:	eafffee6 	b	1aaf8 <_svfprintf_r+0xcd4>
   1af5c:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1af60:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1af64:	e28d209c 	add	r2, sp, #156	; 0x9c
   1af68:	eb000ff9 	bl	1ef54 <__ssprint_r>
   1af6c:	e3500000 	cmp	r0, #0
   1af70:	0affff20 	beq	1abf8 <_svfprintf_r+0xdd4>
   1af74:	eafffc6f 	b	1a138 <_svfprintf_r+0x314>
   1af78:	e59d906c 	ldr	r9, [sp, #108]	; 0x6c
   1af7c:	e3a0000f 	mov	r0, #15
   1af80:	e1a08224 	lsr	r8, r4, #4
   1af84:	e0042000 	and	r2, r4, r0
   1af88:	e1888e05 	orr	r8, r8, r5, lsl #28
   1af8c:	e1a0b225 	lsr	r11, r5, #4
   1af90:	e0892002 	add	r2, r9, r2
   1af94:	e1a04008 	mov	r4, r8
   1af98:	e5d23000 	ldrb	r3, [r2]
   1af9c:	e1a0500b 	mov	r5, r11
   1afa0:	e1a0800c 	mov	r8, r12
   1afa4:	e194c005 	orrs	r12, r4, r5
   1afa8:	e5c83000 	strb	r3, [r8]
   1afac:	e248c001 	sub	r12, r8, #1
   1afb0:	1afffff2 	bne	1af80 <_svfprintf_r+0x115c>
   1afb4:	e59d301c 	ldr	r3, [sp, #28]
   1afb8:	e0683003 	rsb	r3, r8, r3
   1afbc:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1afc0:	eafffccc 	b	1a2f8 <_svfprintf_r+0x4d4>
   1afc4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1afc8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1afcc:	e28d209c 	add	r2, sp, #156	; 0x9c
   1afd0:	eb000fdf 	bl	1ef54 <__ssprint_r>
   1afd4:	e3500000 	cmp	r0, #0
   1afd8:	1afffc56 	bne	1a138 <_svfprintf_r+0x314>
   1afdc:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1afe0:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1afe4:	eafffe68 	b	1a98c <_svfprintf_r+0xb68>
   1afe8:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1afec:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1aff0:	e28d209c 	add	r2, sp, #156	; 0x9c
   1aff4:	eb000fd6 	bl	1ef54 <__ssprint_r>
   1aff8:	e3500000 	cmp	r0, #0
   1affc:	1afffc4d 	bne	1a138 <_svfprintf_r+0x314>
   1b000:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1b004:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b008:	eafffe6e 	b	1a9c8 <_svfprintf_r+0xba4>
   1b00c:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
   1b010:	e3570000 	cmp	r7, #0
   1b014:	da000177 	ble	1b5f8 <_svfprintf_r+0x17d4>
   1b018:	e59d604c 	ldr	r6, [sp, #76]	; 0x4c
   1b01c:	e59d4054 	ldr	r4, [sp, #84]	; 0x54
   1b020:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
   1b024:	e1560004 	cmp	r6, r4
   1b028:	a1a06004 	movge	r6, r4
   1b02c:	e3560000 	cmp	r6, #0
   1b030:	e088b00c 	add	r11, r8, r12
   1b034:	da000009 	ble	1b060 <_svfprintf_r+0x123c>
   1b038:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1b03c:	e2844001 	add	r4, r4, #1
   1b040:	e0855006 	add	r5, r5, r6
   1b044:	e3540007 	cmp	r4, #7
   1b048:	e58a8000 	str	r8, [r10]
   1b04c:	e58a6004 	str	r6, [r10, #4]
   1b050:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b054:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b058:	d28aa008 	addle	r10, r10, #8
   1b05c:	ca000290 	bgt	1baa4 <_svfprintf_r+0x1c80>
   1b060:	e59d4054 	ldr	r4, [sp, #84]	; 0x54
   1b064:	e1c66fc6 	bic	r6, r6, r6, asr #31
   1b068:	e0667004 	rsb	r7, r6, r4
   1b06c:	e3570000 	cmp	r7, #0
   1b070:	da00008c 	ble	1b2a8 <_svfprintf_r+0x1484>
   1b074:	e3570010 	cmp	r7, #16
   1b078:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1b07c:	e59f62e0 	ldr	r6, [pc, #736]	; 1b364 <_svfprintf_r+0x1540>
   1b080:	da000078 	ble	1b268 <_svfprintf_r+0x1444>
   1b084:	e58d8038 	str	r8, [sp, #56]	; 0x38
   1b088:	e58db044 	str	r11, [sp, #68]	; 0x44
   1b08c:	e1a08007 	mov	r8, r7
   1b090:	e1a0b006 	mov	r11, r6
   1b094:	e3a09010 	mov	r9, #16
   1b098:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1b09c:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
   1b0a0:	ea000002 	b	1b0b0 <_svfprintf_r+0x128c>
   1b0a4:	e2488010 	sub	r8, r8, #16
   1b0a8:	e3580010 	cmp	r8, #16
   1b0ac:	da000069 	ble	1b258 <_svfprintf_r+0x1434>
   1b0b0:	e2844001 	add	r4, r4, #1
   1b0b4:	e3540007 	cmp	r4, #7
   1b0b8:	e2855010 	add	r5, r5, #16
   1b0bc:	e58ab000 	str	r11, [r10]
   1b0c0:	e58a9004 	str	r9, [r10, #4]
   1b0c4:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b0c8:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b0cc:	d28aa008 	addle	r10, r10, #8
   1b0d0:	dafffff3 	ble	1b0a4 <_svfprintf_r+0x1280>
   1b0d4:	e1a00006 	mov	r0, r6
   1b0d8:	e1a01007 	mov	r1, r7
   1b0dc:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b0e0:	eb000f9b 	bl	1ef54 <__ssprint_r>
   1b0e4:	e3500000 	cmp	r0, #0
   1b0e8:	1afffc12 	bne	1a138 <_svfprintf_r+0x314>
   1b0ec:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1b0f0:	e8940030 	ldm	r4, {r4, r5}
   1b0f4:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b0f8:	eaffffe9 	b	1b0a4 <_svfprintf_r+0x1280>
   1b0fc:	e3550000 	cmp	r5, #0
   1b100:	03540009 	cmpeq	r4, #9
   1b104:	8a0000e4 	bhi	1b49c <_svfprintf_r+0x1678>
   1b108:	e28d8e11 	add	r8, sp, #272	; 0x110
   1b10c:	e2844030 	add	r4, r4, #48	; 0x30
   1b110:	e5684041 	strb	r4, [r8, #-65]!	; 0xffffffbf
   1b114:	e59dc01c 	ldr	r12, [sp, #28]
   1b118:	e068c00c 	rsb	r12, r8, r12
   1b11c:	e58dc038 	str	r12, [sp, #56]	; 0x38
   1b120:	eafffc74 	b	1a2f8 <_svfprintf_r+0x4d4>
   1b124:	e24c7001 	sub	r7, r12, #1
   1b128:	e3570000 	cmp	r7, #0
   1b12c:	daffff78 	ble	1af14 <_svfprintf_r+0x10f0>
   1b130:	e3570010 	cmp	r7, #16
   1b134:	e59f6228 	ldr	r6, [pc, #552]	; 1b364 <_svfprintf_r+0x1540>
   1b138:	da00001a 	ble	1b1a8 <_svfprintf_r+0x1384>
   1b13c:	e3a08010 	mov	r8, #16
   1b140:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
   1b144:	e59db030 	ldr	r11, [sp, #48]	; 0x30
   1b148:	ea000002 	b	1b158 <_svfprintf_r+0x1334>
   1b14c:	e2477010 	sub	r7, r7, #16
   1b150:	e3570010 	cmp	r7, #16
   1b154:	da000013 	ble	1b1a8 <_svfprintf_r+0x1384>
   1b158:	e2844001 	add	r4, r4, #1
   1b15c:	e3540007 	cmp	r4, #7
   1b160:	e2855010 	add	r5, r5, #16
   1b164:	e88a0140 	stm	r10, {r6, r8}
   1b168:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b16c:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b170:	d28aa008 	addle	r10, r10, #8
   1b174:	dafffff4 	ble	1b14c <_svfprintf_r+0x1328>
   1b178:	e1a00009 	mov	r0, r9
   1b17c:	e1a0100b 	mov	r1, r11
   1b180:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b184:	eb000f72 	bl	1ef54 <__ssprint_r>
   1b188:	e3500000 	cmp	r0, #0
   1b18c:	1afffbe9 	bne	1a138 <_svfprintf_r+0x314>
   1b190:	e2477010 	sub	r7, r7, #16
   1b194:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1b198:	e3570010 	cmp	r7, #16
   1b19c:	e8940030 	ldm	r4, {r4, r5}
   1b1a0:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b1a4:	caffffeb 	bgt	1b158 <_svfprintf_r+0x1334>
   1b1a8:	e2844001 	add	r4, r4, #1
   1b1ac:	e0855007 	add	r5, r5, r7
   1b1b0:	e3540007 	cmp	r4, #7
   1b1b4:	e88a00c0 	stm	r10, {r6, r7}
   1b1b8:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b1bc:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b1c0:	daffff52 	ble	1af10 <_svfprintf_r+0x10ec>
   1b1c4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b1c8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1b1cc:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b1d0:	eb000f5f 	bl	1ef54 <__ssprint_r>
   1b1d4:	e3500000 	cmp	r0, #0
   1b1d8:	1afffbd6 	bne	1a138 <_svfprintf_r+0x314>
   1b1dc:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1b1e0:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b1e4:	e8940030 	ldm	r4, {r4, r5}
   1b1e8:	eaffff49 	b	1af14 <_svfprintf_r+0x10f0>
   1b1ec:	e1941005 	orrs	r1, r4, r5
   1b1f0:	159dc020 	ldrne	r12, [sp, #32]
   1b1f4:	13a03030 	movne	r3, #48	; 0x30
   1b1f8:	138cc002 	orrne	r12, r12, #2
   1b1fc:	15cd307c 	strbne	r3, [sp, #124]	; 0x7c
   1b200:	15cd707d 	strbne	r7, [sp, #125]	; 0x7d
   1b204:	158dc020 	strne	r12, [sp, #32]
   1b208:	13a02001 	movne	r2, #1
   1b20c:	03a02000 	moveq	r2, #0
   1b210:	e3a03002 	mov	r3, #2
   1b214:	eafffcd1 	b	1a560 <_svfprintf_r+0x73c>
   1b218:	e2844001 	add	r4, r4, #1
   1b21c:	e0855007 	add	r5, r5, r7
   1b220:	e3540007 	cmp	r4, #7
   1b224:	e88a00c0 	stm	r10, {r6, r7}
   1b228:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b22c:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b230:	dafffe2f 	ble	1aaf4 <_svfprintf_r+0xcd0>
   1b234:	eaffff3f 	b	1af38 <_svfprintf_r+0x1114>
   1b238:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1b23c:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1b240:	e5943000 	ldr	r3, [r4]
   1b244:	e28cc004 	add	r12, r12, #4
   1b248:	e1a04003 	mov	r4, r3
   1b24c:	e3a05000 	mov	r5, #0
   1b250:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1b254:	eafffcba 	b	1a544 <_svfprintf_r+0x720>
   1b258:	e1a07008 	mov	r7, r8
   1b25c:	e1a0600b 	mov	r6, r11
   1b260:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
   1b264:	e59db044 	ldr	r11, [sp, #68]	; 0x44
   1b268:	e2844001 	add	r4, r4, #1
   1b26c:	e0855007 	add	r5, r5, r7
   1b270:	e3540007 	cmp	r4, #7
   1b274:	e88a00c0 	stm	r10, {r6, r7}
   1b278:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b27c:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b280:	d28aa008 	addle	r10, r10, #8
   1b284:	da000007 	ble	1b2a8 <_svfprintf_r+0x1484>
   1b288:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b28c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1b290:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b294:	eb000f2e 	bl	1ef54 <__ssprint_r>
   1b298:	e3500000 	cmp	r0, #0
   1b29c:	1afffba5 	bne	1a138 <_svfprintf_r+0x314>
   1b2a0:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1b2a4:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b2a8:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   1b2ac:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
   1b2b0:	e59d4054 	ldr	r4, [sp, #84]	; 0x54
   1b2b4:	e153000c 	cmp	r3, r12
   1b2b8:	e0888004 	add	r8, r8, r4
   1b2bc:	ba000040 	blt	1b3c4 <_svfprintf_r+0x15a0>
   1b2c0:	e59dc020 	ldr	r12, [sp, #32]
   1b2c4:	e31c0001 	tst	r12, #1
   1b2c8:	1a00003d 	bne	1b3c4 <_svfprintf_r+0x15a0>
   1b2cc:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1b2d0:	e068600b 	rsb	r6, r8, r11
   1b2d4:	e0633004 	rsb	r3, r3, r4
   1b2d8:	e1530006 	cmp	r3, r6
   1b2dc:	b1a06003 	movlt	r6, r3
   1b2e0:	a1a06006 	movge	r6, r6
   1b2e4:	e3560000 	cmp	r6, #0
   1b2e8:	da000009 	ble	1b314 <_svfprintf_r+0x14f0>
   1b2ec:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1b2f0:	e2844001 	add	r4, r4, #1
   1b2f4:	e0855006 	add	r5, r5, r6
   1b2f8:	e3540007 	cmp	r4, #7
   1b2fc:	e58a8000 	str	r8, [r10]
   1b300:	e58a6004 	str	r6, [r10, #4]
   1b304:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b308:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b30c:	d28aa008 	addle	r10, r10, #8
   1b310:	ca0001ec 	bgt	1bac8 <_svfprintf_r+0x1ca4>
   1b314:	e1c66fc6 	bic	r6, r6, r6, asr #31
   1b318:	e0667003 	rsb	r7, r6, r3
   1b31c:	e3570000 	cmp	r7, #0
   1b320:	dafffdf4 	ble	1aaf8 <_svfprintf_r+0xcd4>
   1b324:	e3570010 	cmp	r7, #16
   1b328:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1b32c:	e59f6030 	ldr	r6, [pc, #48]	; 1b364 <_svfprintf_r+0x1540>
   1b330:	daffffb8 	ble	1b218 <_svfprintf_r+0x13f4>
   1b334:	e3a08010 	mov	r8, #16
   1b338:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
   1b33c:	e59db030 	ldr	r11, [sp, #48]	; 0x30
   1b340:	ea00000d 	b	1b37c <_svfprintf_r+0x1558>
   1b344:	00022810 	.word	0x00022810
   1b348:	00022830 	.word	0x00022830
   1b34c:	00022834 	.word	0x00022834
   1b350:	000227f4 	.word	0x000227f4
   1b354:	00022840 	.word	0x00022840
   1b358:	00022838 	.word	0x00022838
   1b35c:	0002283c 	.word	0x0002283c
   1b360:	0002285c 	.word	0x0002285c
   1b364:	00022820 	.word	0x00022820
   1b368:	00022854 	.word	0x00022854
   1b36c:	66666667 	.word	0x66666667
   1b370:	e2477010 	sub	r7, r7, #16
   1b374:	e3570010 	cmp	r7, #16
   1b378:	daffffa6 	ble	1b218 <_svfprintf_r+0x13f4>
   1b37c:	e2844001 	add	r4, r4, #1
   1b380:	e3540007 	cmp	r4, #7
   1b384:	e2855010 	add	r5, r5, #16
   1b388:	e88a0140 	stm	r10, {r6, r8}
   1b38c:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b390:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b394:	d28aa008 	addle	r10, r10, #8
   1b398:	dafffff4 	ble	1b370 <_svfprintf_r+0x154c>
   1b39c:	e1a00009 	mov	r0, r9
   1b3a0:	e1a0100b 	mov	r1, r11
   1b3a4:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b3a8:	eb000ee9 	bl	1ef54 <__ssprint_r>
   1b3ac:	e3500000 	cmp	r0, #0
   1b3b0:	1afffb60 	bne	1a138 <_svfprintf_r+0x314>
   1b3b4:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1b3b8:	e8940030 	ldm	r4, {r4, r5}
   1b3bc:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b3c0:	eaffffea 	b	1b370 <_svfprintf_r+0x154c>
   1b3c4:	e59dc05c 	ldr	r12, [sp, #92]	; 0x5c
   1b3c8:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1b3cc:	e085500c 	add	r5, r5, r12
   1b3d0:	e59dc058 	ldr	r12, [sp, #88]	; 0x58
   1b3d4:	e2844001 	add	r4, r4, #1
   1b3d8:	e58ac000 	str	r12, [r10]
   1b3dc:	e59dc05c 	ldr	r12, [sp, #92]	; 0x5c
   1b3e0:	e3540007 	cmp	r4, #7
   1b3e4:	e58ac004 	str	r12, [r10, #4]
   1b3e8:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b3ec:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b3f0:	d28aa008 	addle	r10, r10, #8
   1b3f4:	daffffb4 	ble	1b2cc <_svfprintf_r+0x14a8>
   1b3f8:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b3fc:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1b400:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b404:	eb000ed2 	bl	1ef54 <__ssprint_r>
   1b408:	e3500000 	cmp	r0, #0
   1b40c:	1afffb49 	bne	1a138 <_svfprintf_r+0x314>
   1b410:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   1b414:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1b418:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b41c:	eaffffaa 	b	1b2cc <_svfprintf_r+0x14a8>
   1b420:	e59dc020 	ldr	r12, [sp, #32]
   1b424:	e31c0001 	tst	r12, #1
   1b428:	1afffe92 	bne	1ae78 <_svfprintf_r+0x1054>
   1b42c:	e3a03001 	mov	r3, #1
   1b430:	e3540007 	cmp	r4, #7
   1b434:	e58a8000 	str	r8, [r10]
   1b438:	e58a3004 	str	r3, [r10, #4]
   1b43c:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b440:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b444:	dafffeb1 	ble	1af10 <_svfprintf_r+0x10ec>
   1b448:	eaffff5d 	b	1b1c4 <_svfprintf_r+0x13a0>
   1b44c:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b450:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1b454:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b458:	eb000ebd 	bl	1ef54 <__ssprint_r>
   1b45c:	e3500000 	cmp	r0, #0
   1b460:	1afffb34 	bne	1a138 <_svfprintf_r+0x314>
   1b464:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1b468:	e8940030 	ldm	r4, {r4, r5}
   1b46c:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b470:	eafffe88 	b	1ae98 <_svfprintf_r+0x1074>
   1b474:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b478:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1b47c:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b480:	eb000eb3 	bl	1ef54 <__ssprint_r>
   1b484:	e3500000 	cmp	r0, #0
   1b488:	1afffb2a 	bne	1a138 <_svfprintf_r+0x314>
   1b48c:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1b490:	e8940030 	ldm	r4, {r4, r5}
   1b494:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b498:	eafffe8a 	b	1aec8 <_svfprintf_r+0x10a4>
   1b49c:	e28d90cf 	add	r9, sp, #207	; 0xcf
   1b4a0:	e1a00004 	mov	r0, r4
   1b4a4:	e1a01005 	mov	r1, r5
   1b4a8:	e3a0200a 	mov	r2, #10
   1b4ac:	e3a03000 	mov	r3, #0
   1b4b0:	ebfff567 	bl	18a54 <__aeabi_uldivmod>
   1b4b4:	e2822030 	add	r2, r2, #48	; 0x30
   1b4b8:	e5c92000 	strb	r2, [r9]
   1b4bc:	e1a00004 	mov	r0, r4
   1b4c0:	e1a01005 	mov	r1, r5
   1b4c4:	e3a0200a 	mov	r2, #10
   1b4c8:	e3a03000 	mov	r3, #0
   1b4cc:	ebfff560 	bl	18a54 <__aeabi_uldivmod>
   1b4d0:	e1a04000 	mov	r4, r0
   1b4d4:	e1a05001 	mov	r5, r1
   1b4d8:	e1940005 	orrs	r0, r4, r5
   1b4dc:	e1a08009 	mov	r8, r9
   1b4e0:	e2499001 	sub	r9, r9, #1
   1b4e4:	1affffed 	bne	1b4a0 <_svfprintf_r+0x167c>
   1b4e8:	e59d301c 	ldr	r3, [sp, #28]
   1b4ec:	e0683003 	rsb	r3, r8, r3
   1b4f0:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1b4f4:	eafffb7f 	b	1a2f8 <_svfprintf_r+0x4d4>
   1b4f8:	eb000dde 	bl	1ec78 <__fpclassifyd>
   1b4fc:	e3500000 	cmp	r0, #0
   1b500:	1a0000a5 	bne	1b79c <_svfprintf_r+0x1978>
   1b504:	e3a0c003 	mov	r12, #3
   1b508:	e58d0044 	str	r0, [sp, #68]	; 0x44
   1b50c:	e59d4020 	ldr	r4, [sp, #32]
   1b510:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1b514:	e51f01c4 	ldr	r0, [pc, #-452]	; 1b358 <_svfprintf_r+0x1534>
   1b518:	e58dc038 	str	r12, [sp, #56]	; 0x38
   1b51c:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
   1b520:	e3570047 	cmp	r7, #71	; 0x47
   1b524:	e3c44080 	bic	r4, r4, #128	; 0x80
   1b528:	e51f81d4 	ldr	r8, [pc, #-468]	; 1b35c <_svfprintf_r+0x1538>
   1b52c:	e58d4020 	str	r4, [sp, #32]
   1b530:	d1a08000 	movle	r8, r0
   1b534:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
   1b538:	e58dc054 	str	r12, [sp, #84]	; 0x54
   1b53c:	eafffb75 	b	1a318 <_svfprintf_r+0x4f4>
   1b540:	e5d37000 	ldrb	r7, [r3]
   1b544:	eafffa86 	b	19f64 <_svfprintf_r+0x140>
   1b548:	e59d4020 	ldr	r4, [sp, #32]
   1b54c:	e3140010 	tst	r4, #16
   1b550:	0a0000fb 	beq	1b944 <_svfprintf_r+0x1b20>
   1b554:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1b558:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1b55c:	e59c3000 	ldr	r3, [r12]
   1b560:	e28cc004 	add	r12, r12, #4
   1b564:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1b568:	e5834000 	str	r4, [r3]
   1b56c:	eafffa50 	b	19eb4 <_svfprintf_r+0x90>
   1b570:	e59d4020 	ldr	r4, [sp, #32]
   1b574:	e3140040 	tst	r4, #64	; 0x40
   1b578:	0a000072 	beq	1b748 <_svfprintf_r+0x1924>
   1b57c:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1b580:	e1dc20b0 	ldrh	r2, [r12]
   1b584:	eafffce8 	b	1a92c <_svfprintf_r+0xb08>
   1b588:	e59d4020 	ldr	r4, [sp, #32]
   1b58c:	e2143040 	ands	r3, r4, #64	; 0x40
   1b590:	0a000077 	beq	1b774 <_svfprintf_r+0x1950>
   1b594:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1b598:	e1dc20b0 	ldrh	r2, [r12]
   1b59c:	e3a05000 	mov	r5, #0
   1b5a0:	e1a04002 	mov	r4, r2
   1b5a4:	e28cc004 	add	r12, r12, #4
   1b5a8:	e0522005 	subs	r2, r2, r5
   1b5ac:	13a02001 	movne	r2, #1
   1b5b0:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1b5b4:	e1a03001 	mov	r3, r1
   1b5b8:	eafffbe8 	b	1a560 <_svfprintf_r+0x73c>
   1b5bc:	e59d4020 	ldr	r4, [sp, #32]
   1b5c0:	e3140040 	tst	r4, #64	; 0x40
   1b5c4:	0a000055 	beq	1b720 <_svfprintf_r+0x18fc>
   1b5c8:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1b5cc:	e1dc30f0 	ldrsh	r3, [r12]
   1b5d0:	eafffbff 	b	1a5d4 <_svfprintf_r+0x7b0>
   1b5d4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b5d8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1b5dc:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b5e0:	eb000e5b 	bl	1ef54 <__ssprint_r>
   1b5e4:	e3500000 	cmp	r0, #0
   1b5e8:	1afffad2 	bne	1a138 <_svfprintf_r+0x314>
   1b5ec:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1b5f0:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b5f4:	eafffd98 	b	1ac5c <_svfprintf_r+0xe38>
   1b5f8:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1b5fc:	e51f32a4 	ldr	r3, [pc, #-676]	; 1b360 <_svfprintf_r+0x153c>
   1b600:	e2844001 	add	r4, r4, #1
   1b604:	e58a3000 	str	r3, [r10]
   1b608:	e2855001 	add	r5, r5, #1
   1b60c:	e3540007 	cmp	r4, #7
   1b610:	e3a03001 	mov	r3, #1
   1b614:	e58a3004 	str	r3, [r10, #4]
   1b618:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b61c:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b620:	d28aa008 	addle	r10, r10, #8
   1b624:	ca0000ee 	bgt	1b9e4 <_svfprintf_r+0x1bc0>
   1b628:	e3570000 	cmp	r7, #0
   1b62c:	1a000005 	bne	1b648 <_svfprintf_r+0x1824>
   1b630:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
   1b634:	e35c0000 	cmp	r12, #0
   1b638:	1a000002 	bne	1b648 <_svfprintf_r+0x1824>
   1b63c:	e59d4020 	ldr	r4, [sp, #32]
   1b640:	e3140001 	tst	r4, #1
   1b644:	0afffd2b 	beq	1aaf8 <_svfprintf_r+0xcd4>
   1b648:	e59dc05c 	ldr	r12, [sp, #92]	; 0x5c
   1b64c:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1b650:	e085500c 	add	r5, r5, r12
   1b654:	e59dc058 	ldr	r12, [sp, #88]	; 0x58
   1b658:	e2844001 	add	r4, r4, #1
   1b65c:	e58ac000 	str	r12, [r10]
   1b660:	e59dc05c 	ldr	r12, [sp, #92]	; 0x5c
   1b664:	e3540007 	cmp	r4, #7
   1b668:	e58ac004 	str	r12, [r10, #4]
   1b66c:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b670:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b674:	d28aa008 	addle	r10, r10, #8
   1b678:	ca0000f9 	bgt	1ba64 <_svfprintf_r+0x1c40>
   1b67c:	e2677000 	rsb	r7, r7, #0
   1b680:	e3570000 	cmp	r7, #0
   1b684:	da0000f3 	ble	1ba58 <_svfprintf_r+0x1c34>
   1b688:	e3570010 	cmp	r7, #16
   1b68c:	e51f6330 	ldr	r6, [pc, #-816]	; 1b364 <_svfprintf_r+0x1540>
   1b690:	da0000df 	ble	1ba14 <_svfprintf_r+0x1bf0>
   1b694:	e58d8038 	str	r8, [sp, #56]	; 0x38
   1b698:	e3a09010 	mov	r9, #16
   1b69c:	e1a08006 	mov	r8, r6
   1b6a0:	e59db040 	ldr	r11, [sp, #64]	; 0x40
   1b6a4:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
   1b6a8:	ea000002 	b	1b6b8 <_svfprintf_r+0x1894>
   1b6ac:	e2477010 	sub	r7, r7, #16
   1b6b0:	e3570010 	cmp	r7, #16
   1b6b4:	da0000d4 	ble	1ba0c <_svfprintf_r+0x1be8>
   1b6b8:	e2844001 	add	r4, r4, #1
   1b6bc:	e3540007 	cmp	r4, #7
   1b6c0:	e2855010 	add	r5, r5, #16
   1b6c4:	e88a0300 	stm	r10, {r8, r9}
   1b6c8:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1b6cc:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1b6d0:	d28aa008 	addle	r10, r10, #8
   1b6d4:	dafffff4 	ble	1b6ac <_svfprintf_r+0x1888>
   1b6d8:	e1a0000b 	mov	r0, r11
   1b6dc:	e1a01006 	mov	r1, r6
   1b6e0:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b6e4:	eb000e1a 	bl	1ef54 <__ssprint_r>
   1b6e8:	e3500000 	cmp	r0, #0
   1b6ec:	1afffa91 	bne	1a138 <_svfprintf_r+0x314>
   1b6f0:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1b6f4:	e8940030 	ldm	r4, {r4, r5}
   1b6f8:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b6fc:	eaffffea 	b	1b6ac <_svfprintf_r+0x1888>
   1b700:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   1b704:	e1c44fc4 	bic	r4, r4, r4, asr #31
   1b708:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
   1b70c:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1b710:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
   1b714:	e58d5048 	str	r5, [sp, #72]	; 0x48
   1b718:	e58dc054 	str	r12, [sp, #84]	; 0x54
   1b71c:	eafffafd 	b	1a318 <_svfprintf_r+0x4f4>
   1b720:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1b724:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1b728:	e5943000 	ldr	r3, [r4]
   1b72c:	e28cc004 	add	r12, r12, #4
   1b730:	e1a05fc3 	asr	r5, r3, #31
   1b734:	e1a04003 	mov	r4, r3
   1b738:	e1a02003 	mov	r2, r3
   1b73c:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1b740:	e1a03005 	mov	r3, r5
   1b744:	eafffabd 	b	1a240 <_svfprintf_r+0x41c>
   1b748:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1b74c:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1b750:	e5942000 	ldr	r2, [r4]
   1b754:	e3a05000 	mov	r5, #0
   1b758:	e1a04002 	mov	r4, r2
   1b75c:	e28cc004 	add	r12, r12, #4
   1b760:	e0522005 	subs	r2, r2, r5
   1b764:	13a02001 	movne	r2, #1
   1b768:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1b76c:	e3a03001 	mov	r3, #1
   1b770:	eafffb7a 	b	1a560 <_svfprintf_r+0x73c>
   1b774:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1b778:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1b77c:	e5942000 	ldr	r2, [r4]
   1b780:	e3a05000 	mov	r5, #0
   1b784:	e1a04002 	mov	r4, r2
   1b788:	e28cc004 	add	r12, r12, #4
   1b78c:	e0522005 	subs	r2, r2, r5
   1b790:	13a02001 	movne	r2, #1
   1b794:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1b798:	eafffb70 	b	1a560 <_svfprintf_r+0x73c>
   1b79c:	e3760001 	cmn	r6, #1
   1b7a0:	e3c7b020 	bic	r11, r7, #32
   1b7a4:	03a06006 	moveq	r6, #6
   1b7a8:	0a000003 	beq	1b7bc <_svfprintf_r+0x1998>
   1b7ac:	e35b0047 	cmp	r11, #71	; 0x47
   1b7b0:	1a000001 	bne	1b7bc <_svfprintf_r+0x1998>
   1b7b4:	e3560000 	cmp	r6, #0
   1b7b8:	03a06001 	moveq	r6, #1
   1b7bc:	e59d4020 	ldr	r4, [sp, #32]
   1b7c0:	e3550000 	cmp	r5, #0
   1b7c4:	e3844c01 	orr	r4, r4, #256	; 0x100
   1b7c8:	e58d403c 	str	r4, [sp, #60]	; 0x3c
   1b7cc:	b3a0c02d 	movlt	r12, #45	; 0x2d
   1b7d0:	a3a04000 	movge	r4, #0
   1b7d4:	a58d4044 	strge	r4, [sp, #68]	; 0x44
   1b7d8:	b2855102 	addlt	r5, r5, #-2147483648	; 0x80000000
   1b7dc:	b58dc044 	strlt	r12, [sp, #68]	; 0x44
   1b7e0:	e25b3046 	subs	r3, r11, #70	; 0x46
   1b7e4:	e2734000 	rsbs	r4, r3, #0
   1b7e8:	e0b44003 	adcs	r4, r4, r3
   1b7ec:	e3540000 	cmp	r4, #0
   1b7f0:	0a000069 	beq	1b99c <_svfprintf_r+0x1b78>
   1b7f4:	e3a01003 	mov	r1, #3
   1b7f8:	e88d0042 	stm	sp, {r1, r6}
   1b7fc:	e28d1080 	add	r1, sp, #128	; 0x80
   1b800:	e58d1008 	str	r1, [sp, #8]
   1b804:	e28d1084 	add	r1, sp, #132	; 0x84
   1b808:	e58d100c 	str	r1, [sp, #12]
   1b80c:	e28d1088 	add	r1, sp, #136	; 0x88
   1b810:	e1a02009 	mov	r2, r9
   1b814:	e1a03005 	mov	r3, r5
   1b818:	e58d1010 	str	r1, [sp, #16]
   1b81c:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b820:	eb0001d6 	bl	1bf80 <_dtoa_r>
   1b824:	e35b0047 	cmp	r11, #71	; 0x47
   1b828:	e1a08000 	mov	r8, r0
   1b82c:	1a000002 	bne	1b83c <_svfprintf_r+0x1a18>
   1b830:	e59dc020 	ldr	r12, [sp, #32]
   1b834:	e31c0001 	tst	r12, #1
   1b838:	0a0000ba 	beq	1bb28 <_svfprintf_r+0x1d04>
   1b83c:	e3540000 	cmp	r4, #0
   1b840:	e0884006 	add	r4, r8, r6
   1b844:	0a000004 	beq	1b85c <_svfprintf_r+0x1a38>
   1b848:	e5d83000 	ldrb	r3, [r8]
   1b84c:	e3530030 	cmp	r3, #48	; 0x30
   1b850:	0a00011a 	beq	1bcc0 <_svfprintf_r+0x1e9c>
   1b854:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   1b858:	e0844003 	add	r4, r4, r3
   1b85c:	e1a00009 	mov	r0, r9
   1b860:	e1a01005 	mov	r1, r5
   1b864:	e3a02000 	mov	r2, #0
   1b868:	e3a03000 	mov	r3, #0
   1b86c:	eb0017b2 	bl	2173c <__aeabi_dcmpeq>
   1b870:	e3500000 	cmp	r0, #0
   1b874:	1a000008 	bne	1b89c <_svfprintf_r+0x1a78>
   1b878:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   1b87c:	e1540003 	cmp	r4, r3
   1b880:	91a04003 	movls	r4, r3
   1b884:	9a000004 	bls	1b89c <_svfprintf_r+0x1a78>
   1b888:	e3a02030 	mov	r2, #48	; 0x30
   1b88c:	e4c32001 	strb	r2, [r3], #1
   1b890:	e1530004 	cmp	r3, r4
   1b894:	e58d3088 	str	r3, [sp, #136]	; 0x88
   1b898:	1afffffb 	bne	1b88c <_svfprintf_r+0x1a68>
   1b89c:	e0684004 	rsb	r4, r8, r4
   1b8a0:	e35b0047 	cmp	r11, #71	; 0x47
   1b8a4:	e58d404c 	str	r4, [sp, #76]	; 0x4c
   1b8a8:	0a0000a1 	beq	1bb34 <_svfprintf_r+0x1d10>
   1b8ac:	e3570065 	cmp	r7, #101	; 0x65
   1b8b0:	da000136 	ble	1bd90 <_svfprintf_r+0x1f6c>
   1b8b4:	e3570066 	cmp	r7, #102	; 0x66
   1b8b8:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   1b8bc:	0a0000d6 	beq	1bc1c <_svfprintf_r+0x1df8>
   1b8c0:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
   1b8c4:	e153000c 	cmp	r3, r12
   1b8c8:	ba0000c9 	blt	1bbf4 <_svfprintf_r+0x1dd0>
   1b8cc:	e59d4020 	ldr	r4, [sp, #32]
   1b8d0:	e3140001 	tst	r4, #1
   1b8d4:	12834001 	addne	r4, r3, #1
   1b8d8:	01c3cfc3 	biceq	r12, r3, r3, asr #31
   1b8dc:	11c4cfc4 	bicne	r12, r4, r4, asr #31
   1b8e0:	058dc028 	streq	r12, [sp, #40]	; 0x28
   1b8e4:	058d3038 	streq	r3, [sp, #56]	; 0x38
   1b8e8:	158d4038 	strne	r4, [sp, #56]	; 0x38
   1b8ec:	158dc028 	strne	r12, [sp, #40]	; 0x28
   1b8f0:	e3a07067 	mov	r7, #103	; 0x67
   1b8f4:	e58d3054 	str	r3, [sp, #84]	; 0x54
   1b8f8:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
   1b8fc:	e35c0000 	cmp	r12, #0
   1b900:	0a000084 	beq	1bb18 <_svfprintf_r+0x1cf4>
   1b904:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
   1b908:	e3a0302d 	mov	r3, #45	; 0x2d
   1b90c:	e3a0c000 	mov	r12, #0
   1b910:	e5cd307b 	strb	r3, [sp, #123]	; 0x7b
   1b914:	e58d4020 	str	r4, [sp, #32]
   1b918:	e58dc044 	str	r12, [sp, #68]	; 0x44
   1b91c:	eafffa7f 	b	1a320 <_svfprintf_r+0x4fc>
   1b920:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b924:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1b928:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b92c:	eb000d88 	bl	1ef54 <__ssprint_r>
   1b930:	e3500000 	cmp	r0, #0
   1b934:	1afff9ff 	bne	1a138 <_svfprintf_r+0x314>
   1b938:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1b93c:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1b940:	eafffcd9 	b	1acac <_svfprintf_r+0xe88>
   1b944:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1b948:	e59dc020 	ldr	r12, [sp, #32]
   1b94c:	e5943000 	ldr	r3, [r4]
   1b950:	e31c0040 	tst	r12, #64	; 0x40
   1b954:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1b958:	e2844004 	add	r4, r4, #4
   1b95c:	e58d4048 	str	r4, [sp, #72]	; 0x48
   1b960:	11c3c0b0 	strhne	r12, [r3]
   1b964:	0583c000 	streq	r12, [r3]
   1b968:	eafff951 	b	19eb4 <_svfprintf_r+0x90>
   1b96c:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b970:	e3a01040 	mov	r1, #64	; 0x40
   1b974:	eb000767 	bl	1d718 <_malloc_r>
   1b978:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
   1b97c:	e3500000 	cmp	r0, #0
   1b980:	e58c0000 	str	r0, [r12]
   1b984:	e58c0010 	str	r0, [r12, #16]
   1b988:	0a0000fa 	beq	1bd78 <_svfprintf_r+0x1f54>
   1b98c:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
   1b990:	e3a03040 	mov	r3, #64	; 0x40
   1b994:	e58c3014 	str	r3, [r12, #20]
   1b998:	eafff937 	b	19e7c <_svfprintf_r+0x58>
   1b99c:	e35b0045 	cmp	r11, #69	; 0x45
   1b9a0:	1a000091 	bne	1bbec <_svfprintf_r+0x1dc8>
   1b9a4:	e2864001 	add	r4, r6, #1
   1b9a8:	e3a01002 	mov	r1, #2
   1b9ac:	e88d0012 	stm	sp, {r1, r4}
   1b9b0:	e28d1080 	add	r1, sp, #128	; 0x80
   1b9b4:	e58d1008 	str	r1, [sp, #8]
   1b9b8:	e28d1084 	add	r1, sp, #132	; 0x84
   1b9bc:	e58d100c 	str	r1, [sp, #12]
   1b9c0:	e28d1088 	add	r1, sp, #136	; 0x88
   1b9c4:	e1a02009 	mov	r2, r9
   1b9c8:	e1a03005 	mov	r3, r5
   1b9cc:	e58d1010 	str	r1, [sp, #16]
   1b9d0:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b9d4:	eb000169 	bl	1bf80 <_dtoa_r>
   1b9d8:	e1a08000 	mov	r8, r0
   1b9dc:	e0804004 	add	r4, r0, r4
   1b9e0:	eaffff9d 	b	1b85c <_svfprintf_r+0x1a38>
   1b9e4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1b9e8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1b9ec:	e28d209c 	add	r2, sp, #156	; 0x9c
   1b9f0:	eb000d57 	bl	1ef54 <__ssprint_r>
   1b9f4:	e3500000 	cmp	r0, #0
   1b9f8:	1afff9ce 	bne	1a138 <_svfprintf_r+0x314>
   1b9fc:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
   1ba00:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1ba04:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1ba08:	eaffff06 	b	1b628 <_svfprintf_r+0x1804>
   1ba0c:	e1a06008 	mov	r6, r8
   1ba10:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
   1ba14:	e2844001 	add	r4, r4, #1
   1ba18:	e0855007 	add	r5, r5, r7
   1ba1c:	e3540007 	cmp	r4, #7
   1ba20:	e88a00c0 	stm	r10, {r6, r7}
   1ba24:	e58d50a4 	str	r5, [sp, #164]	; 0xa4
   1ba28:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1ba2c:	d28aa008 	addle	r10, r10, #8
   1ba30:	da000008 	ble	1ba58 <_svfprintf_r+0x1c34>
   1ba34:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1ba38:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1ba3c:	e28d209c 	add	r2, sp, #156	; 0x9c
   1ba40:	eb000d43 	bl	1ef54 <__ssprint_r>
   1ba44:	e3500000 	cmp	r0, #0
   1ba48:	1afff9ba 	bne	1a138 <_svfprintf_r+0x314>
   1ba4c:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1ba50:	e8940030 	ldm	r4, {r4, r5}
   1ba54:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1ba58:	e2844001 	add	r4, r4, #1
   1ba5c:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
   1ba60:	eafffc1d 	b	1aadc <_svfprintf_r+0xcb8>
   1ba64:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1ba68:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1ba6c:	e28d209c 	add	r2, sp, #156	; 0x9c
   1ba70:	eb000d37 	bl	1ef54 <__ssprint_r>
   1ba74:	e3500000 	cmp	r0, #0
   1ba78:	1afff9ae 	bne	1a138 <_svfprintf_r+0x314>
   1ba7c:	e28d40a0 	add	r4, sp, #160	; 0xa0
   1ba80:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
   1ba84:	e8940030 	ldm	r4, {r4, r5}
   1ba88:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1ba8c:	eafffefa 	b	1b67c <_svfprintf_r+0x1858>
   1ba90:	ebfff774 	bl	19868 <strlen>
   1ba94:	e58d4044 	str	r4, [sp, #68]	; 0x44
   1ba98:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1ba9c:	e1c04fc0 	bic	r4, r0, r0, asr #31
   1baa0:	eaffff18 	b	1b708 <_svfprintf_r+0x18e4>
   1baa4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1baa8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1baac:	e28d209c 	add	r2, sp, #156	; 0x9c
   1bab0:	eb000d27 	bl	1ef54 <__ssprint_r>
   1bab4:	e3500000 	cmp	r0, #0
   1bab8:	1afff99e 	bne	1a138 <_svfprintf_r+0x314>
   1babc:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1bac0:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1bac4:	eafffd65 	b	1b060 <_svfprintf_r+0x123c>
   1bac8:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   1bacc:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1bad0:	e28d209c 	add	r2, sp, #156	; 0x9c
   1bad4:	eb000d1e 	bl	1ef54 <__ssprint_r>
   1bad8:	e3500000 	cmp	r0, #0
   1badc:	1afff995 	bne	1a138 <_svfprintf_r+0x314>
   1bae0:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   1bae4:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
   1bae8:	e59d50a4 	ldr	r5, [sp, #164]	; 0xa4
   1baec:	e063300c 	rsb	r3, r3, r12
   1baf0:	e28da0d0 	add	r10, sp, #208	; 0xd0
   1baf4:	eafffe06 	b	1b314 <_svfprintf_r+0x14f0>
   1baf8:	e3560006 	cmp	r6, #6
   1bafc:	23a06006 	movcs	r6, #6
   1bb00:	e1c64fc6 	bic	r4, r6, r6, asr #31
   1bb04:	e58d6038 	str	r6, [sp, #56]	; 0x38
   1bb08:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1bb0c:	e58d5048 	str	r5, [sp, #72]	; 0x48
   1bb10:	e51f87b0 	ldr	r8, [pc, #-1968]	; 1b368 <_svfprintf_r+0x1544>
   1bb14:	eafffaa1 	b	1a5a0 <_svfprintf_r+0x77c>
   1bb18:	e59dc03c 	ldr	r12, [sp, #60]	; 0x3c
   1bb1c:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
   1bb20:	e58dc020 	str	r12, [sp, #32]
   1bb24:	eafff9fb 	b	1a318 <_svfprintf_r+0x4f4>
   1bb28:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
   1bb2c:	e0603003 	rsb	r3, r0, r3
   1bb30:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1bb34:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
   1bb38:	e3710003 	cmn	r1, #3
   1bb3c:	e1a03001 	mov	r3, r1
   1bb40:	ba000001 	blt	1bb4c <_svfprintf_r+0x1d28>
   1bb44:	e1560001 	cmp	r6, r1
   1bb48:	aaffff5c 	bge	1b8c0 <_svfprintf_r+0x1a9c>
   1bb4c:	e2477002 	sub	r7, r7, #2
   1bb50:	e2411001 	sub	r1, r1, #1
   1bb54:	e3510000 	cmp	r1, #0
   1bb58:	e58d1080 	str	r1, [sp, #128]	; 0x80
   1bb5c:	b2611000 	rsblt	r1, r1, #0
   1bb60:	b3a0302d 	movlt	r3, #45	; 0x2d
   1bb64:	a3a0302b 	movge	r3, #43	; 0x2b
   1bb68:	e3510009 	cmp	r1, #9
   1bb6c:	e5cd708c 	strb	r7, [sp, #140]	; 0x8c
   1bb70:	e5cd308d 	strb	r3, [sp, #141]	; 0x8d
   1bb74:	ca000033 	bgt	1bc48 <_svfprintf_r+0x1e24>
   1bb78:	e2811030 	add	r1, r1, #48	; 0x30
   1bb7c:	e3a03030 	mov	r3, #48	; 0x30
   1bb80:	e5cd108f 	strb	r1, [sp, #143]	; 0x8f
   1bb84:	e5cd308e 	strb	r3, [sp, #142]	; 0x8e
   1bb88:	e28d3090 	add	r3, sp, #144	; 0x90
   1bb8c:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1bb90:	e28d208c 	add	r2, sp, #140	; 0x8c
   1bb94:	e0622003 	rsb	r2, r2, r3
   1bb98:	e084c002 	add	r12, r4, r2
   1bb9c:	e3540001 	cmp	r4, #1
   1bba0:	e58d2068 	str	r2, [sp, #104]	; 0x68
   1bba4:	e58dc038 	str	r12, [sp, #56]	; 0x38
   1bba8:	da000066 	ble	1bd48 <_svfprintf_r+0x1f24>
   1bbac:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1bbb0:	e2833001 	add	r3, r3, #1
   1bbb4:	e1c34fc3 	bic	r4, r3, r3, asr #31
   1bbb8:	e3a0c000 	mov	r12, #0
   1bbbc:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1bbc0:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1bbc4:	e58dc054 	str	r12, [sp, #84]	; 0x54
   1bbc8:	eaffff4a 	b	1b8f8 <_svfprintf_r+0x1ad4>
   1bbcc:	e1c6cfc6 	bic	r12, r6, r6, asr #31
   1bbd0:	e58d0044 	str	r0, [sp, #68]	; 0x44
   1bbd4:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1bbd8:	e5dd307b 	ldrb	r3, [sp, #123]	; 0x7b
   1bbdc:	e58d5048 	str	r5, [sp, #72]	; 0x48
   1bbe0:	e58d6038 	str	r6, [sp, #56]	; 0x38
   1bbe4:	e58d0054 	str	r0, [sp, #84]	; 0x54
   1bbe8:	eafff9ca 	b	1a318 <_svfprintf_r+0x4f4>
   1bbec:	e3a01002 	mov	r1, #2
   1bbf0:	eaffff00 	b	1b7f8 <_svfprintf_r+0x19d4>
   1bbf4:	e3530000 	cmp	r3, #0
   1bbf8:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1bbfc:	d2632002 	rsble	r2, r3, #2
   1bc00:	c3a02001 	movgt	r2, #1
   1bc04:	e0822004 	add	r2, r2, r4
   1bc08:	e1c2cfc2 	bic	r12, r2, r2, asr #31
   1bc0c:	e58d2038 	str	r2, [sp, #56]	; 0x38
   1bc10:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1bc14:	e3a07067 	mov	r7, #103	; 0x67
   1bc18:	eaffff35 	b	1b8f4 <_svfprintf_r+0x1ad0>
   1bc1c:	e3530000 	cmp	r3, #0
   1bc20:	da00003f 	ble	1bd24 <_svfprintf_r+0x1f00>
   1bc24:	e3560000 	cmp	r6, #0
   1bc28:	1a00002e 	bne	1bce8 <_svfprintf_r+0x1ec4>
   1bc2c:	e59d4020 	ldr	r4, [sp, #32]
   1bc30:	e3140001 	tst	r4, #1
   1bc34:	1a00002b 	bne	1bce8 <_svfprintf_r+0x1ec4>
   1bc38:	e1c3cfc3 	bic	r12, r3, r3, asr #31
   1bc3c:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1bc40:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1bc44:	eaffff2a 	b	1b8f4 <_svfprintf_r+0x1ad0>
   1bc48:	e28d309a 	add	r3, sp, #154	; 0x9a
   1bc4c:	e51f28e8 	ldr	r2, [pc, #-2280]	; 1b36c <_svfprintf_r+0x1548>
   1bc50:	e0c04192 	smull	r4, r0, r2, r1
   1bc54:	e1a02fc1 	asr	r2, r1, #31
   1bc58:	e0622140 	rsb	r2, r2, r0, asr #2
   1bc5c:	e0820102 	add	r0, r2, r2, lsl #2
   1bc60:	e0410080 	sub	r0, r1, r0, lsl #1
   1bc64:	e1a01002 	mov	r1, r2
   1bc68:	e3510009 	cmp	r1, #9
   1bc6c:	e1a02003 	mov	r2, r3
   1bc70:	e2803030 	add	r3, r0, #48	; 0x30
   1bc74:	e5c23000 	strb	r3, [r2]
   1bc78:	e2423001 	sub	r3, r2, #1
   1bc7c:	cafffff2 	bgt	1bc4c <_svfprintf_r+0x1e28>
   1bc80:	e28dc09b 	add	r12, sp, #155	; 0x9b
   1bc84:	e2811030 	add	r1, r1, #48	; 0x30
   1bc88:	e15c0003 	cmp	r12, r3
   1bc8c:	e5421001 	strb	r1, [r2, #-1]
   1bc90:	9a000040 	bls	1bd98 <_svfprintf_r+0x1f74>
   1bc94:	e28d008d 	add	r0, sp, #141	; 0x8d
   1bc98:	e1a03002 	mov	r3, r2
   1bc9c:	ea000000 	b	1bca4 <_svfprintf_r+0x1e80>
   1bca0:	e4d31001 	ldrb	r1, [r3], #1
   1bca4:	e153000c 	cmp	r3, r12
   1bca8:	e5e01001 	strb	r1, [r0, #1]!
   1bcac:	1afffffb 	bne	1bca0 <_svfprintf_r+0x1e7c>
   1bcb0:	e28dce11 	add	r12, sp, #272	; 0x110
   1bcb4:	e062308c 	rsb	r3, r2, r12, lsl #1
   1bcb8:	e24330f6 	sub	r3, r3, #246	; 0xf6
   1bcbc:	eaffffb2 	b	1bb8c <_svfprintf_r+0x1d68>
   1bcc0:	e3a03000 	mov	r3, #0
   1bcc4:	e1a00009 	mov	r0, r9
   1bcc8:	e1a01005 	mov	r1, r5
   1bccc:	e3a02000 	mov	r2, #0
   1bcd0:	eb001699 	bl	2173c <__aeabi_dcmpeq>
   1bcd4:	e3500000 	cmp	r0, #0
   1bcd8:	02663001 	rsbeq	r3, r6, #1
   1bcdc:	058d3080 	streq	r3, [sp, #128]	; 0x80
   1bce0:	0afffedc 	beq	1b858 <_svfprintf_r+0x1a34>
   1bce4:	eafffeda 	b	1b854 <_svfprintf_r+0x1a30>
   1bce8:	e2866001 	add	r6, r6, #1
   1bcec:	e0836006 	add	r6, r3, r6
   1bcf0:	e1c64fc6 	bic	r4, r6, r6, asr #31
   1bcf4:	e58d6038 	str	r6, [sp, #56]	; 0x38
   1bcf8:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1bcfc:	eafffefc 	b	1b8f4 <_svfprintf_r+0x1ad0>
   1bd00:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1bd04:	e5946000 	ldr	r6, [r4]
   1bd08:	e2840004 	add	r0, r4, #4
   1bd0c:	e3560000 	cmp	r6, #0
   1bd10:	e5d37001 	ldrb	r7, [r3, #1]
   1bd14:	e58d0048 	str	r0, [sp, #72]	; 0x48
   1bd18:	e1a0300c 	mov	r3, r12
   1bd1c:	b3e06000 	mvnlt	r6, #0
   1bd20:	eafff88f 	b	19f64 <_svfprintf_r+0x140>
   1bd24:	e3560000 	cmp	r6, #0
   1bd28:	1a00000d 	bne	1bd64 <_svfprintf_r+0x1f40>
   1bd2c:	e59dc020 	ldr	r12, [sp, #32]
   1bd30:	e31c0001 	tst	r12, #1
   1bd34:	1a00000a 	bne	1bd64 <_svfprintf_r+0x1f40>
   1bd38:	e3a04001 	mov	r4, #1
   1bd3c:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1bd40:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1bd44:	eafffeea 	b	1b8f4 <_svfprintf_r+0x1ad0>
   1bd48:	e59d4020 	ldr	r4, [sp, #32]
   1bd4c:	e2143001 	ands	r3, r4, #1
   1bd50:	1affff95 	bne	1bbac <_svfprintf_r+0x1d88>
   1bd54:	e1cccfcc 	bic	r12, r12, r12, asr #31
   1bd58:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1bd5c:	e58d3054 	str	r3, [sp, #84]	; 0x54
   1bd60:	eafffee4 	b	1b8f8 <_svfprintf_r+0x1ad4>
   1bd64:	e2866002 	add	r6, r6, #2
   1bd68:	e1c64fc6 	bic	r4, r6, r6, asr #31
   1bd6c:	e58d6038 	str	r6, [sp, #56]	; 0x38
   1bd70:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1bd74:	eafffede 	b	1b8f4 <_svfprintf_r+0x1ad0>
   1bd78:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
   1bd7c:	e3a0300c 	mov	r3, #12
   1bd80:	e3e0c000 	mvn	r12, #0
   1bd84:	e5843000 	str	r3, [r4]
   1bd88:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1bd8c:	eafff8ef 	b	1a150 <_svfprintf_r+0x32c>
   1bd90:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
   1bd94:	eaffff6d 	b	1bb50 <_svfprintf_r+0x1d2c>
   1bd98:	e28d308e 	add	r3, sp, #142	; 0x8e
   1bd9c:	eaffff7a 	b	1bb8c <_svfprintf_r+0x1d68>

0001bda0 <quorem>:
   1bda0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1bda4:	e5903010 	ldr	r3, [r0, #16]
   1bda8:	e5916010 	ldr	r6, [r1, #16]
   1bdac:	e1560003 	cmp	r6, r3
   1bdb0:	e1a0a000 	mov	r10, r0
   1bdb4:	e1a05001 	mov	r5, r1
   1bdb8:	c3a00000 	movgt	r0, #0
   1bdbc:	ca00006d 	bgt	1bf78 <quorem+0x1d8>
   1bdc0:	e2863003 	add	r3, r6, #3
   1bdc4:	e1a03103 	lsl	r3, r3, #2
   1bdc8:	e0819003 	add	r9, r1, r3
   1bdcc:	e5991004 	ldr	r1, [r9, #4]
   1bdd0:	e08a3003 	add	r3, r10, r3
   1bdd4:	e5930004 	ldr	r0, [r3, #4]
   1bdd8:	e2811001 	add	r1, r1, #1
   1bddc:	ebfff2d6 	bl	1893c <__aeabi_uidiv>
   1bde0:	e2507000 	subs	r7, r0, #0
   1bde4:	e2466001 	sub	r6, r6, #1
   1bde8:	e2899004 	add	r9, r9, #4
   1bdec:	e2854014 	add	r4, r5, #20
   1bdf0:	e28a8014 	add	r8, r10, #20
   1bdf4:	0a000030 	beq	1bebc <quorem+0x11c>
   1bdf8:	e3a0c000 	mov	r12, #0
   1bdfc:	e1a02008 	mov	r2, r8
   1be00:	e1a03004 	mov	r3, r4
   1be04:	e1a0000c 	mov	r0, r12
   1be08:	e493e004 	ldr	lr, [r3], #4
   1be0c:	e1a0b80e 	lsl	r11, lr, #16
   1be10:	e1a0b82b 	lsr	r11, r11, #16
   1be14:	e1a0e82e 	lsr	lr, lr, #16
   1be18:	e02bcb97 	mla	r11, r7, r11, r12
   1be1c:	e00c0e97 	mul	r12, r7, lr
   1be20:	e592e000 	ldr	lr, [r2]
   1be24:	e08cc82b 	add	r12, r12, r11, lsr #16
   1be28:	e1a0180e 	lsl	r1, lr, #16
   1be2c:	e0801821 	add	r1, r0, r1, lsr #16
   1be30:	e1a0b80b 	lsl	r11, r11, #16
   1be34:	e1a0080c 	lsl	r0, r12, #16
   1be38:	e041182b 	sub	r1, r1, r11, lsr #16
   1be3c:	e1a00820 	lsr	r0, r0, #16
   1be40:	e060082e 	rsb	r0, r0, lr, lsr #16
   1be44:	e1a0b801 	lsl	r11, r1, #16
   1be48:	e0800841 	add	r0, r0, r1, asr #16
   1be4c:	e1a0182b 	lsr	r1, r11, #16
   1be50:	e1811800 	orr	r1, r1, r0, lsl #16
   1be54:	e1590003 	cmp	r9, r3
   1be58:	e1a0c82c 	lsr	r12, r12, #16
   1be5c:	e1a00840 	asr	r0, r0, #16
   1be60:	e4821004 	str	r1, [r2], #4
   1be64:	2affffe7 	bcs	1be08 <quorem+0x68>
   1be68:	e2863004 	add	r3, r6, #4
   1be6c:	e08a3103 	add	r3, r10, r3, lsl #2
   1be70:	e5932004 	ldr	r2, [r3, #4]
   1be74:	e3520000 	cmp	r2, #0
   1be78:	1a00000f 	bne	1bebc <quorem+0x11c>
   1be7c:	e1580003 	cmp	r8, r3
   1be80:	e2832004 	add	r2, r3, #4
   1be84:	2a00000b 	bcs	1beb8 <quorem+0x118>
   1be88:	e5122004 	ldr	r2, [r2, #-4]
   1be8c:	e3520000 	cmp	r2, #0
   1be90:	1a000008 	bne	1beb8 <quorem+0x118>
   1be94:	e2433004 	sub	r3, r3, #4
   1be98:	ea000003 	b	1beac <quorem+0x10c>
   1be9c:	e5932000 	ldr	r2, [r3]
   1bea0:	e3520000 	cmp	r2, #0
   1bea4:	e2433004 	sub	r3, r3, #4
   1bea8:	1a000002 	bne	1beb8 <quorem+0x118>
   1beac:	e1580003 	cmp	r8, r3
   1beb0:	e2466001 	sub	r6, r6, #1
   1beb4:	3afffff8 	bcc	1be9c <quorem+0xfc>
   1beb8:	e58a6010 	str	r6, [r10, #16]
   1bebc:	e1a0000a 	mov	r0, r10
   1bec0:	e1a01005 	mov	r1, r5
   1bec4:	eb0009f9 	bl	1e6b0 <__mcmp>
   1bec8:	e3500000 	cmp	r0, #0
   1becc:	ba000028 	blt	1bf74 <quorem+0x1d4>
   1bed0:	e2877001 	add	r7, r7, #1
   1bed4:	e1a03008 	mov	r3, r8
   1bed8:	e3a02000 	mov	r2, #0
   1bedc:	e4945004 	ldr	r5, [r4], #4
   1bee0:	e593c000 	ldr	r12, [r3]
   1bee4:	e1a01805 	lsl	r1, r5, #16
   1bee8:	e1a0080c 	lsl	r0, r12, #16
   1beec:	e1a01821 	lsr	r1, r1, #16
   1bef0:	e0611820 	rsb	r1, r1, r0, lsr #16
   1bef4:	e0811002 	add	r1, r1, r2
   1bef8:	e1a02825 	lsr	r2, r5, #16
   1befc:	e062282c 	rsb	r2, r2, r12, lsr #16
   1bf00:	e1a00801 	lsl	r0, r1, #16
   1bf04:	e0822841 	add	r2, r2, r1, asr #16
   1bf08:	e1a01820 	lsr	r1, r0, #16
   1bf0c:	e1811802 	orr	r1, r1, r2, lsl #16
   1bf10:	e1590004 	cmp	r9, r4
   1bf14:	e1a02842 	asr	r2, r2, #16
   1bf18:	e4831004 	str	r1, [r3], #4
   1bf1c:	2affffee 	bcs	1bedc <quorem+0x13c>
   1bf20:	e2863004 	add	r3, r6, #4
   1bf24:	e08a3103 	add	r3, r10, r3, lsl #2
   1bf28:	e5932004 	ldr	r2, [r3, #4]
   1bf2c:	e3520000 	cmp	r2, #0
   1bf30:	1a00000f 	bne	1bf74 <quorem+0x1d4>
   1bf34:	e1580003 	cmp	r8, r3
   1bf38:	e2832004 	add	r2, r3, #4
   1bf3c:	2a00000b 	bcs	1bf70 <quorem+0x1d0>
   1bf40:	e5122004 	ldr	r2, [r2, #-4]
   1bf44:	e3520000 	cmp	r2, #0
   1bf48:	1a000008 	bne	1bf70 <quorem+0x1d0>
   1bf4c:	e2433004 	sub	r3, r3, #4
   1bf50:	ea000003 	b	1bf64 <quorem+0x1c4>
   1bf54:	e5932000 	ldr	r2, [r3]
   1bf58:	e3520000 	cmp	r2, #0
   1bf5c:	e2433004 	sub	r3, r3, #4
   1bf60:	1a000002 	bne	1bf70 <quorem+0x1d0>
   1bf64:	e1580003 	cmp	r8, r3
   1bf68:	e2466001 	sub	r6, r6, #1
   1bf6c:	3afffff8 	bcc	1bf54 <quorem+0x1b4>
   1bf70:	e58a6010 	str	r6, [r10, #16]
   1bf74:	e1a00007 	mov	r0, r7
   1bf78:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1bf7c:	e12fff1e 	bx	lr

0001bf80 <_dtoa_r>:
   1bf80:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1bf84:	e5901040 	ldr	r1, [r0, #64]	; 0x40
   1bf88:	e24dd07c 	sub	sp, sp, #124	; 0x7c
   1bf8c:	e3510000 	cmp	r1, #0
   1bf90:	e1a06000 	mov	r6, r0
   1bf94:	e59d40ac 	ldr	r4, [sp, #172]	; 0xac
   1bf98:	e58d2010 	str	r2, [sp, #16]
   1bf9c:	e58d3014 	str	r3, [sp, #20]
   1bfa0:	0a000007 	beq	1bfc4 <_dtoa_r+0x44>
   1bfa4:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   1bfa8:	e3a02001 	mov	r2, #1
   1bfac:	e1a02312 	lsl	r2, r2, r3
   1bfb0:	e5813004 	str	r3, [r1, #4]
   1bfb4:	e5812008 	str	r2, [r1, #8]
   1bfb8:	eb000809 	bl	1dfe4 <_Bfree>
   1bfbc:	e3a03000 	mov	r3, #0
   1bfc0:	e5863040 	str	r3, [r6, #64]	; 0x40
   1bfc4:	e59da014 	ldr	r10, [sp, #20]
   1bfc8:	e35a0000 	cmp	r10, #0
   1bfcc:	b3a03001 	movlt	r3, #1
   1bfd0:	a3a03000 	movge	r3, #0
   1bfd4:	b5843000 	strlt	r3, [r4]
   1bfd8:	a5843000 	strge	r3, [r4]
   1bfdc:	e59f3570 	ldr	r3, [pc, #1392]	; 1c554 <_dtoa_r+0x5d4>
   1bfe0:	b3caa102 	biclt	r10, r10, #-2147483648	; 0x80000000
   1bfe4:	e59f2568 	ldr	r2, [pc, #1384]	; 1c554 <_dtoa_r+0x5d4>
   1bfe8:	b1a0100a 	movlt	r1, r10
   1bfec:	e00a3003 	and	r3, r10, r3
   1bff0:	b58d1014 	strlt	r1, [sp, #20]
   1bff4:	e1530002 	cmp	r3, r2
   1bff8:	0a000016 	beq	1c058 <_dtoa_r+0xd8>
   1bffc:	e28d5010 	add	r5, sp, #16
   1c000:	e8950030 	ldm	r5, {r4, r5}
   1c004:	e3a02000 	mov	r2, #0
   1c008:	e1a00004 	mov	r0, r4
   1c00c:	e1a01005 	mov	r1, r5
   1c010:	e3a03000 	mov	r3, #0
   1c014:	eb0015c8 	bl	2173c <__aeabi_dcmpeq>
   1c018:	e3500000 	cmp	r0, #0
   1c01c:	0a00001e 	beq	1c09c <_dtoa_r+0x11c>
   1c020:	e59d40b0 	ldr	r4, [sp, #176]	; 0xb0
   1c024:	e59dc0a8 	ldr	r12, [sp, #168]	; 0xa8
   1c028:	e3a03001 	mov	r3, #1
   1c02c:	e3540000 	cmp	r4, #0
   1c030:	e58c3000 	str	r3, [r12]
   1c034:	0a00009a 	beq	1c2a4 <_dtoa_r+0x324>
   1c038:	e59f44e8 	ldr	r4, [pc, #1256]	; 1c528 <_dtoa_r+0x5a8>
   1c03c:	e59dc0b0 	ldr	r12, [sp, #176]	; 0xb0
   1c040:	e58c4000 	str	r4, [r12]
   1c044:	e2444001 	sub	r4, r4, #1
   1c048:	e1a00004 	mov	r0, r4
   1c04c:	e28dd07c 	add	sp, sp, #124	; 0x7c
   1c050:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1c054:	e12fff1e 	bx	lr
   1c058:	e59d2010 	ldr	r2, [sp, #16]
   1c05c:	e59f34c8 	ldr	r3, [pc, #1224]	; 1c52c <_dtoa_r+0x5ac>
   1c060:	e59d40a8 	ldr	r4, [sp, #168]	; 0xa8
   1c064:	e3520000 	cmp	r2, #0
   1c068:	e5843000 	str	r3, [r4]
   1c06c:	0a000079 	beq	1c258 <_dtoa_r+0x2d8>
   1c070:	e59f44b8 	ldr	r4, [pc, #1208]	; 1c530 <_dtoa_r+0x5b0>
   1c074:	e59dc0b0 	ldr	r12, [sp, #176]	; 0xb0
   1c078:	e35c0000 	cmp	r12, #0
   1c07c:	0afffff1 	beq	1c048 <_dtoa_r+0xc8>
   1c080:	e5d43003 	ldrb	r3, [r4, #3]
   1c084:	e59dc0b0 	ldr	r12, [sp, #176]	; 0xb0
   1c088:	e3530000 	cmp	r3, #0
   1c08c:	12843008 	addne	r3, r4, #8
   1c090:	02843003 	addeq	r3, r4, #3
   1c094:	e58c3000 	str	r3, [r12]
   1c098:	eaffffea 	b	1c048 <_dtoa_r+0xc8>
   1c09c:	e28d3074 	add	r3, sp, #116	; 0x74
   1c0a0:	e58d3000 	str	r3, [sp]
   1c0a4:	e28d3070 	add	r3, sp, #112	; 0x70
   1c0a8:	e58d3004 	str	r3, [sp, #4]
   1c0ac:	e1a00006 	mov	r0, r6
   1c0b0:	e1a02004 	mov	r2, r4
   1c0b4:	e1a03005 	mov	r3, r5
   1c0b8:	eb000a34 	bl	1e990 <__d2b>
   1c0bc:	e1a0708a 	lsl	r7, r10, #1
   1c0c0:	e1b07aa7 	lsrs	r7, r7, #21
   1c0c4:	e1a0b000 	mov	r11, r0
   1c0c8:	1a00006a 	bne	1c278 <_dtoa_r+0x2f8>
   1c0cc:	e59d8070 	ldr	r8, [sp, #112]	; 0x70
   1c0d0:	e59d7074 	ldr	r7, [sp, #116]	; 0x74
   1c0d4:	e3e03e41 	mvn	r3, #1040	; 0x410
   1c0d8:	e0887007 	add	r7, r8, r7
   1c0dc:	e1570003 	cmp	r7, r3
   1c0e0:	ba0001da 	blt	1c850 <_dtoa_r+0x8d0>
   1c0e4:	e2870e41 	add	r0, r7, #1040	; 0x410
   1c0e8:	e59dc010 	ldr	r12, [sp, #16]
   1c0ec:	e2800002 	add	r0, r0, #2
   1c0f0:	e1a0003c 	lsr	r0, r12, r0
   1c0f4:	e283301f 	add	r3, r3, #31
   1c0f8:	e0673003 	rsb	r3, r7, r3
   1c0fc:	e180031a 	orr	r0, r0, r10, lsl r3
   1c100:	eb0013f3 	bl	210d4 <__aeabi_ui2d>
   1c104:	e3a04001 	mov	r4, #1
   1c108:	e58d4060 	str	r4, [sp, #96]	; 0x60
   1c10c:	e241161f 	sub	r1, r1, #32505856	; 0x1f00000
   1c110:	e2477001 	sub	r7, r7, #1
   1c114:	e3a02000 	mov	r2, #0
   1c118:	e59f3414 	ldr	r3, [pc, #1044]	; 1c534 <_dtoa_r+0x5b4>
   1c11c:	eb001327 	bl	20dc0 <__aeabi_dsub>
   1c120:	e28f3ffa 	add	r3, pc, #1000	; 0x3e8
   1c124:	e893000c 	ldm	r3, {r2, r3}
   1c128:	eb001429 	bl	211d4 <__aeabi_dmul>
   1c12c:	e28f3ff9 	add	r3, pc, #996	; 0x3e4
   1c130:	e893000c 	ldm	r3, {r2, r3}
   1c134:	eb001322 	bl	20dc4 <__adddf3>
   1c138:	e1a04000 	mov	r4, r0
   1c13c:	e1a00007 	mov	r0, r7
   1c140:	e1a05001 	mov	r5, r1
   1c144:	eb0013eb 	bl	210f8 <__aeabi_i2d>
   1c148:	e28f3e3d 	add	r3, pc, #976	; 0x3d0
   1c14c:	e893000c 	ldm	r3, {r2, r3}
   1c150:	eb00141f 	bl	211d4 <__aeabi_dmul>
   1c154:	e1a02000 	mov	r2, r0
   1c158:	e1a03001 	mov	r3, r1
   1c15c:	e1a00004 	mov	r0, r4
   1c160:	e1a01005 	mov	r1, r5
   1c164:	eb001316 	bl	20dc4 <__adddf3>
   1c168:	e1a04000 	mov	r4, r0
   1c16c:	e1a05001 	mov	r5, r1
   1c170:	eb00158f 	bl	217b4 <__aeabi_d2iz>
   1c174:	e1a01005 	mov	r1, r5
   1c178:	e1a09000 	mov	r9, r0
   1c17c:	e3a02000 	mov	r2, #0
   1c180:	e1a00004 	mov	r0, r4
   1c184:	e3a03000 	mov	r3, #0
   1c188:	eb001571 	bl	21754 <__aeabi_dcmplt>
   1c18c:	e3500000 	cmp	r0, #0
   1c190:	1a0001a6 	bne	1c830 <_dtoa_r+0x8b0>
   1c194:	e3590016 	cmp	r9, #22
   1c198:	83a04001 	movhi	r4, #1
   1c19c:	858d404c 	strhi	r4, [sp, #76]	; 0x4c
   1c1a0:	8a00000a 	bhi	1c1d0 <_dtoa_r+0x250>
   1c1a4:	e59f33a0 	ldr	r3, [pc, #928]	; 1c54c <_dtoa_r+0x5cc>
   1c1a8:	e0833189 	add	r3, r3, r9, lsl #3
   1c1ac:	e8930003 	ldm	r3, {r0, r1}
   1c1b0:	e28d3010 	add	r3, sp, #16
   1c1b4:	e893000c 	ldm	r3, {r2, r3}
   1c1b8:	eb001577 	bl	2179c <__aeabi_dcmpgt>
   1c1bc:	e3500000 	cmp	r0, #0
   1c1c0:	13a0c000 	movne	r12, #0
   1c1c4:	158dc04c 	strne	r12, [sp, #76]	; 0x4c
   1c1c8:	058d004c 	streq	r0, [sp, #76]	; 0x4c
   1c1cc:	12499001 	subne	r9, r9, #1
   1c1d0:	e0677008 	rsb	r7, r7, r8
   1c1d4:	e2577001 	subs	r7, r7, #1
   1c1d8:	42677000 	rsbmi	r7, r7, #0
   1c1dc:	43a0c000 	movmi	r12, #0
   1c1e0:	53a04000 	movpl	r4, #0
   1c1e4:	458d702c 	strmi	r7, [sp, #44]	; 0x2c
   1c1e8:	458dc028 	strmi	r12, [sp, #40]	; 0x28
   1c1ec:	558d7028 	strpl	r7, [sp, #40]	; 0x28
   1c1f0:	558d402c 	strpl	r4, [sp, #44]	; 0x2c
   1c1f4:	e3590000 	cmp	r9, #0
   1c1f8:	ba000184 	blt	1c810 <_dtoa_r+0x890>
   1c1fc:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1c200:	e3a04000 	mov	r4, #0
   1c204:	e08cc009 	add	r12, r12, r9
   1c208:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1c20c:	e58d9048 	str	r9, [sp, #72]	; 0x48
   1c210:	e58d403c 	str	r4, [sp, #60]	; 0x3c
   1c214:	e59d40a0 	ldr	r4, [sp, #160]	; 0xa0
   1c218:	e3540009 	cmp	r4, #9
   1c21c:	8a000022 	bhi	1c2ac <_dtoa_r+0x32c>
   1c220:	e3540005 	cmp	r4, #5
   1c224:	c2444004 	subgt	r4, r4, #4
   1c228:	c58d40a0 	strgt	r4, [sp, #160]	; 0xa0
   1c22c:	e59dc0a0 	ldr	r12, [sp, #160]	; 0xa0
   1c230:	e24c3002 	sub	r3, r12, #2
   1c234:	c3a04000 	movgt	r4, #0
   1c238:	d3a04001 	movle	r4, #1
   1c23c:	e3530003 	cmp	r3, #3
   1c240:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c244:	ea00001a 	b	1c2b4 <_dtoa_r+0x334>
   1c248:	0001c8e8 	.word	0x0001c8e8
   1c24c:	0001cc80 	.word	0x0001cc80
   1c250:	0001cc74 	.word	0x0001cc74
   1c254:	0001cc40 	.word	0x0001cc40
   1c258:	e3ca44ff 	bic	r4, r10, #-16777216	; 0xff000000
   1c25c:	e3c4460f 	bic	r4, r4, #15728640	; 0xf00000
   1c260:	e59f32c8 	ldr	r3, [pc, #712]	; 1c530 <_dtoa_r+0x5b0>
   1c264:	e59f22cc 	ldr	r2, [pc, #716]	; 1c538 <_dtoa_r+0x5b8>
   1c268:	e3540000 	cmp	r4, #0
   1c26c:	01a04002 	moveq	r4, r2
   1c270:	11a04003 	movne	r4, r3
   1c274:	eaffff7e 	b	1c074 <_dtoa_r+0xf4>
   1c278:	e3c534ff 	bic	r3, r5, #-16777216	; 0xff000000
   1c27c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1c280:	e1a00004 	mov	r0, r4
   1c284:	e38335ff 	orr	r3, r3, #1069547520	; 0x3fc00000
   1c288:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
   1c28c:	e3a04000 	mov	r4, #0
   1c290:	e3831603 	orr	r1, r3, #3145728	; 0x300000
   1c294:	e2477003 	sub	r7, r7, #3
   1c298:	e59d8070 	ldr	r8, [sp, #112]	; 0x70
   1c29c:	e58d4060 	str	r4, [sp, #96]	; 0x60
   1c2a0:	eaffff9b 	b	1c114 <_dtoa_r+0x194>
   1c2a4:	e59f4290 	ldr	r4, [pc, #656]	; 1c53c <_dtoa_r+0x5bc>
   1c2a8:	eaffff66 	b	1c048 <_dtoa_r+0xc8>
   1c2ac:	e3a04000 	mov	r4, #0
   1c2b0:	e58d40a0 	str	r4, [sp, #160]	; 0xa0
   1c2b4:	e3a04000 	mov	r4, #0
   1c2b8:	e5864044 	str	r4, [r6, #68]	; 0x44
   1c2bc:	e1a00006 	mov	r0, r6
   1c2c0:	e1a01004 	mov	r1, r4
   1c2c4:	eb000723 	bl	1df58 <_Balloc>
   1c2c8:	e3e0c000 	mvn	r12, #0
   1c2cc:	e58dc044 	str	r12, [sp, #68]	; 0x44
   1c2d0:	e58dc038 	str	r12, [sp, #56]	; 0x38
   1c2d4:	e3a0c001 	mov	r12, #1
   1c2d8:	e58d0024 	str	r0, [sp, #36]	; 0x24
   1c2dc:	e5860040 	str	r0, [r6, #64]	; 0x40
   1c2e0:	e58dc040 	str	r12, [sp, #64]	; 0x40
   1c2e4:	e58d40a4 	str	r4, [sp, #164]	; 0xa4
   1c2e8:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
   1c2ec:	e3530000 	cmp	r3, #0
   1c2f0:	ba0000ab 	blt	1c5a4 <_dtoa_r+0x624>
   1c2f4:	e359000e 	cmp	r9, #14
   1c2f8:	ca0000a9 	bgt	1c5a4 <_dtoa_r+0x624>
   1c2fc:	e59d40a4 	ldr	r4, [sp, #164]	; 0xa4
   1c300:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
   1c304:	e59f3240 	ldr	r3, [pc, #576]	; 1c54c <_dtoa_r+0x5cc>
   1c308:	e1a02fa4 	lsr	r2, r4, #31
   1c30c:	e35c0000 	cmp	r12, #0
   1c310:	c3a02000 	movgt	r2, #0
   1c314:	d2022001 	andle	r2, r2, #1
   1c318:	e0833189 	add	r3, r3, r9, lsl #3
   1c31c:	e3520000 	cmp	r2, #0
   1c320:	e8930006 	ldm	r3, {r1, r2}
   1c324:	e58d1018 	str	r1, [sp, #24]
   1c328:	e58d201c 	str	r2, [sp, #28]
   1c32c:	1a000347 	bne	1d050 <_dtoa_r+0x10d0>
   1c330:	e28d5010 	add	r5, sp, #16
   1c334:	e8950030 	ldm	r5, {r4, r5}
   1c338:	e1a03002 	mov	r3, r2
   1c33c:	e1a00004 	mov	r0, r4
   1c340:	e1a02001 	mov	r2, r1
   1c344:	e1a01005 	mov	r1, r5
   1c348:	eb001445 	bl	21464 <__aeabi_ddiv>
   1c34c:	eb001518 	bl	217b4 <__aeabi_d2iz>
   1c350:	e1a07000 	mov	r7, r0
   1c354:	eb001367 	bl	210f8 <__aeabi_i2d>
   1c358:	e28d3018 	add	r3, sp, #24
   1c35c:	e893000c 	ldm	r3, {r2, r3}
   1c360:	eb00139b 	bl	211d4 <__aeabi_dmul>
   1c364:	e1a03001 	mov	r3, r1
   1c368:	e1a02000 	mov	r2, r0
   1c36c:	e1a01005 	mov	r1, r5
   1c370:	e1a00004 	mov	r0, r4
   1c374:	eb001291 	bl	20dc0 <__aeabi_dsub>
   1c378:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1c37c:	e2873030 	add	r3, r7, #48	; 0x30
   1c380:	e4cc3001 	strb	r3, [r12], #1
   1c384:	e58dc030 	str	r12, [sp, #48]	; 0x30
   1c388:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
   1c38c:	e35c0001 	cmp	r12, #1
   1c390:	e1a04000 	mov	r4, r0
   1c394:	e1a05001 	mov	r5, r1
   1c398:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
   1c39c:	0a000039 	beq	1c488 <_dtoa_r+0x508>
   1c3a0:	e3a02000 	mov	r2, #0
   1c3a4:	e59f31ac 	ldr	r3, [pc, #428]	; 1c558 <_dtoa_r+0x5d8>
   1c3a8:	eb001389 	bl	211d4 <__aeabi_dmul>
   1c3ac:	e3a02000 	mov	r2, #0
   1c3b0:	e3a03000 	mov	r3, #0
   1c3b4:	e1a04000 	mov	r4, r0
   1c3b8:	e1a05001 	mov	r5, r1
   1c3bc:	eb0014de 	bl	2173c <__aeabi_dcmpeq>
   1c3c0:	e3500000 	cmp	r0, #0
   1c3c4:	1a00047f 	bne	1d5c8 <_dtoa_r+0x1648>
   1c3c8:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1c3cc:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1c3d0:	e08c8001 	add	r8, r12, r1
   1c3d4:	e58d9020 	str	r9, [sp, #32]
   1c3d8:	e58d8010 	str	r8, [sp, #16]
   1c3dc:	e28ca002 	add	r10, r12, #2
   1c3e0:	e28d9018 	add	r9, sp, #24
   1c3e4:	e8990300 	ldm	r9, {r8, r9}
   1c3e8:	e58d6028 	str	r6, [sp, #40]	; 0x28
   1c3ec:	ea000008 	b	1c414 <_dtoa_r+0x494>
   1c3f0:	eb001377 	bl	211d4 <__aeabi_dmul>
   1c3f4:	e3a02000 	mov	r2, #0
   1c3f8:	e3a03000 	mov	r3, #0
   1c3fc:	e1a04000 	mov	r4, r0
   1c400:	e1a05001 	mov	r5, r1
   1c404:	eb0014cc 	bl	2173c <__aeabi_dcmpeq>
   1c408:	e3500000 	cmp	r0, #0
   1c40c:	e28aa001 	add	r10, r10, #1
   1c410:	1a0003af 	bne	1d2d4 <_dtoa_r+0x1354>
   1c414:	e1a02008 	mov	r2, r8
   1c418:	e1a03009 	mov	r3, r9
   1c41c:	e1a00004 	mov	r0, r4
   1c420:	e1a01005 	mov	r1, r5
   1c424:	eb00140e 	bl	21464 <__aeabi_ddiv>
   1c428:	eb0014e1 	bl	217b4 <__aeabi_d2iz>
   1c42c:	e1a07000 	mov	r7, r0
   1c430:	eb001330 	bl	210f8 <__aeabi_i2d>
   1c434:	e1a02008 	mov	r2, r8
   1c438:	e1a03009 	mov	r3, r9
   1c43c:	eb001364 	bl	211d4 <__aeabi_dmul>
   1c440:	e1a02000 	mov	r2, r0
   1c444:	e1a03001 	mov	r3, r1
   1c448:	e1a00004 	mov	r0, r4
   1c44c:	e1a01005 	mov	r1, r5
   1c450:	eb00125a 	bl	20dc0 <__aeabi_dsub>
   1c454:	e59dc010 	ldr	r12, [sp, #16]
   1c458:	e15a000c 	cmp	r10, r12
   1c45c:	e287c030 	add	r12, r7, #48	; 0x30
   1c460:	e1a04000 	mov	r4, r0
   1c464:	e1a05001 	mov	r5, r1
   1c468:	e3a02000 	mov	r2, #0
   1c46c:	e59f30e4 	ldr	r3, [pc, #228]	; 1c558 <_dtoa_r+0x5d8>
   1c470:	e54ac001 	strb	r12, [r10, #-1]
   1c474:	e1a0600a 	mov	r6, r10
   1c478:	1affffdc 	bne	1c3f0 <_dtoa_r+0x470>
   1c47c:	e59d9020 	ldr	r9, [sp, #32]
   1c480:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1c484:	e1a0c00a 	mov	r12, r10
   1c488:	e1a02004 	mov	r2, r4
   1c48c:	e1a03005 	mov	r3, r5
   1c490:	e1a00004 	mov	r0, r4
   1c494:	e1a01005 	mov	r1, r5
   1c498:	e58dc008 	str	r12, [sp, #8]
   1c49c:	eb001248 	bl	20dc4 <__adddf3>
   1c4a0:	e1a04000 	mov	r4, r0
   1c4a4:	e1a05001 	mov	r5, r1
   1c4a8:	e1a02004 	mov	r2, r4
   1c4ac:	e28d1018 	add	r1, sp, #24
   1c4b0:	e8910003 	ldm	r1, {r0, r1}
   1c4b4:	e1a03005 	mov	r3, r5
   1c4b8:	eb0014a5 	bl	21754 <__aeabi_dcmplt>
   1c4bc:	e3500000 	cmp	r0, #0
   1c4c0:	e59dc008 	ldr	r12, [sp, #8]
   1c4c4:	1a00000a 	bne	1c4f4 <_dtoa_r+0x574>
   1c4c8:	e28d1018 	add	r1, sp, #24
   1c4cc:	e8910003 	ldm	r1, {r0, r1}
   1c4d0:	e1a02004 	mov	r2, r4
   1c4d4:	e1a03005 	mov	r3, r5
   1c4d8:	e58dc008 	str	r12, [sp, #8]
   1c4dc:	eb001496 	bl	2173c <__aeabi_dcmpeq>
   1c4e0:	e3500000 	cmp	r0, #0
   1c4e4:	e59dc008 	ldr	r12, [sp, #8]
   1c4e8:	0a00037c 	beq	1d2e0 <_dtoa_r+0x1360>
   1c4ec:	e3170001 	tst	r7, #1
   1c4f0:	0a00037a 	beq	1d2e0 <_dtoa_r+0x1360>
   1c4f4:	e55c8001 	ldrb	r8, [r12, #-1]
   1c4f8:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1c4fc:	e58d9064 	str	r9, [sp, #100]	; 0x64
   1c500:	e1a0900c 	mov	r9, r12
   1c504:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1c508:	ea000017 	b	1c56c <_dtoa_r+0x5ec>
   1c50c:	e1a00000 	nop			; (mov r0, r0)
   1c510:	636f4361 	.word	0x636f4361
   1c514:	3fd287a7 	.word	0x3fd287a7
   1c518:	8b60c8b3 	.word	0x8b60c8b3
   1c51c:	3fc68a28 	.word	0x3fc68a28
   1c520:	509f79fb 	.word	0x509f79fb
   1c524:	3fd34413 	.word	0x3fd34413
   1c528:	0002285d 	.word	0x0002285d
   1c52c:	0000270f 	.word	0x0000270f
   1c530:	0002286c 	.word	0x0002286c
   1c534:	3ff80000 	.word	0x3ff80000
   1c538:	00022860 	.word	0x00022860
   1c53c:	0002285c 	.word	0x0002285c
   1c540:	fffffbee 	.word	0xfffffbee
   1c544:	3ff00000 	.word	0x3ff00000
   1c548:	00022980 	.word	0x00022980
   1c54c:	00022890 	.word	0x00022890
   1c550:	40140000 	.word	0x40140000
   1c554:	7ff00000 	.word	0x7ff00000
   1c558:	40240000 	.word	0x40240000
   1c55c:	401c0000 	.word	0x401c0000
   1c560:	3fe00000 	.word	0x3fe00000
   1c564:	e5598002 	ldrb	r8, [r9, #-2]
   1c568:	e1a09003 	mov	r9, r3
   1c56c:	e3580039 	cmp	r8, #57	; 0x39
   1c570:	e1a02009 	mov	r2, r9
   1c574:	e2493001 	sub	r3, r9, #1
   1c578:	1a0003c2 	bne	1d488 <_dtoa_r+0x1508>
   1c57c:	e1590001 	cmp	r9, r1
   1c580:	1afffff7 	bne	1c564 <_dtoa_r+0x5e4>
   1c584:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1c588:	e59dc064 	ldr	r12, [sp, #100]	; 0x64
   1c58c:	e3a02030 	mov	r2, #48	; 0x30
   1c590:	e5c32000 	strb	r2, [r3]
   1c594:	e28c9001 	add	r9, r12, #1
   1c598:	e3a08031 	mov	r8, #49	; 0x31
   1c59c:	e5c38000 	strb	r8, [r3]
   1c5a0:	ea00008b 	b	1c7d4 <_dtoa_r+0x854>
   1c5a4:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
   1c5a8:	e3540000 	cmp	r4, #0
   1c5ac:	1a0000ac 	bne	1c864 <_dtoa_r+0x8e4>
   1c5b0:	e59d503c 	ldr	r5, [sp, #60]	; 0x3c
   1c5b4:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1c5b8:	e59da040 	ldr	r10, [sp, #64]	; 0x40
   1c5bc:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1c5c0:	e35c0000 	cmp	r12, #0
   1c5c4:	c3540000 	cmpgt	r4, #0
   1c5c8:	da000009 	ble	1c5f4 <_dtoa_r+0x674>
   1c5cc:	e1a0300c 	mov	r3, r12
   1c5d0:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1c5d4:	e1530004 	cmp	r3, r4
   1c5d8:	a1a03004 	movge	r3, r4
   1c5dc:	e063c00c 	rsb	r12, r3, r12
   1c5e0:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1c5e4:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1c5e8:	e063c00c 	rsb	r12, r3, r12
   1c5ec:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1c5f0:	e0634004 	rsb	r4, r3, r4
   1c5f4:	e59dc03c 	ldr	r12, [sp, #60]	; 0x3c
   1c5f8:	e35c0000 	cmp	r12, #0
   1c5fc:	da000015 	ble	1c658 <_dtoa_r+0x6d8>
   1c600:	e59dc040 	ldr	r12, [sp, #64]	; 0x40
   1c604:	e35c0000 	cmp	r12, #0
   1c608:	0a00032b 	beq	1d2bc <_dtoa_r+0x133c>
   1c60c:	e3550000 	cmp	r5, #0
   1c610:	da00000d 	ble	1c64c <_dtoa_r+0x6cc>
   1c614:	e1a0100a 	mov	r1, r10
   1c618:	e1a02005 	mov	r2, r5
   1c61c:	e1a00006 	mov	r0, r6
   1c620:	eb0007a4 	bl	1e4b8 <__pow5mult>
   1c624:	e1a0a000 	mov	r10, r0
   1c628:	e1a0200b 	mov	r2, r11
   1c62c:	e1a0100a 	mov	r1, r10
   1c630:	e1a00006 	mov	r0, r6
   1c634:	eb000726 	bl	1e2d4 <__multiply>
   1c638:	e1a0100b 	mov	r1, r11
   1c63c:	e1a07000 	mov	r7, r0
   1c640:	e1a00006 	mov	r0, r6
   1c644:	eb000666 	bl	1dfe4 <_Bfree>
   1c648:	e1a0b007 	mov	r11, r7
   1c64c:	e59dc03c 	ldr	r12, [sp, #60]	; 0x3c
   1c650:	e05c2005 	subs	r2, r12, r5
   1c654:	1a00035d 	bne	1d3d0 <_dtoa_r+0x1450>
   1c658:	e1a00006 	mov	r0, r6
   1c65c:	e3a01001 	mov	r1, #1
   1c660:	eb000712 	bl	1e2b0 <__i2b>
   1c664:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1c668:	e35c0000 	cmp	r12, #0
   1c66c:	e1a07000 	mov	r7, r0
   1c670:	da000004 	ble	1c688 <_dtoa_r+0x708>
   1c674:	e1a01007 	mov	r1, r7
   1c678:	e1a00006 	mov	r0, r6
   1c67c:	e1a0200c 	mov	r2, r12
   1c680:	eb00078c 	bl	1e4b8 <__pow5mult>
   1c684:	e1a07000 	mov	r7, r0
   1c688:	e59dc0a0 	ldr	r12, [sp, #160]	; 0xa0
   1c68c:	e35c0001 	cmp	r12, #1
   1c690:	da00027e 	ble	1d090 <_dtoa_r+0x1110>
   1c694:	e3a05000 	mov	r5, #0
   1c698:	e59dc048 	ldr	r12, [sp, #72]	; 0x48
   1c69c:	e35c0000 	cmp	r12, #0
   1c6a0:	03a00001 	moveq	r0, #1
   1c6a4:	1a000247 	bne	1cfc8 <_dtoa_r+0x1048>
   1c6a8:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1c6ac:	e080300c 	add	r3, r0, r12
   1c6b0:	e213301f 	ands	r3, r3, #31
   1c6b4:	0a0001d4 	beq	1ce0c <_dtoa_r+0xe8c>
   1c6b8:	e2632020 	rsb	r2, r3, #32
   1c6bc:	e3520004 	cmp	r2, #4
   1c6c0:	da0003dc 	ble	1d638 <_dtoa_r+0x16b8>
   1c6c4:	e263301c 	rsb	r3, r3, #28
   1c6c8:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1c6cc:	e08cc003 	add	r12, r12, r3
   1c6d0:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1c6d4:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1c6d8:	e08cc003 	add	r12, r12, r3
   1c6dc:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1c6e0:	e0844003 	add	r4, r4, r3
   1c6e4:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1c6e8:	e35c0000 	cmp	r12, #0
   1c6ec:	da000004 	ble	1c704 <_dtoa_r+0x784>
   1c6f0:	e1a0100b 	mov	r1, r11
   1c6f4:	e1a00006 	mov	r0, r6
   1c6f8:	e1a0200c 	mov	r2, r12
   1c6fc:	eb0007aa 	bl	1e5ac <__lshift>
   1c700:	e1a0b000 	mov	r11, r0
   1c704:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1c708:	e35c0000 	cmp	r12, #0
   1c70c:	da000004 	ble	1c724 <_dtoa_r+0x7a4>
   1c710:	e1a01007 	mov	r1, r7
   1c714:	e1a00006 	mov	r0, r6
   1c718:	e1a0200c 	mov	r2, r12
   1c71c:	eb0007a2 	bl	1e5ac <__lshift>
   1c720:	e1a07000 	mov	r7, r0
   1c724:	e59dc04c 	ldr	r12, [sp, #76]	; 0x4c
   1c728:	e35c0000 	cmp	r12, #0
   1c72c:	1a00022b 	bne	1cfe0 <_dtoa_r+0x1060>
   1c730:	e59dc0a0 	ldr	r12, [sp, #160]	; 0xa0
   1c734:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1c738:	e35c0002 	cmp	r12, #2
   1c73c:	d3a03000 	movle	r3, #0
   1c740:	c3a03001 	movgt	r3, #1
   1c744:	e3510000 	cmp	r1, #0
   1c748:	c3a03000 	movgt	r3, #0
   1c74c:	e3530000 	cmp	r3, #0
   1c750:	0a000170 	beq	1cd18 <_dtoa_r+0xd98>
   1c754:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   1c758:	e3540000 	cmp	r4, #0
   1c75c:	1a000168 	bne	1cd04 <_dtoa_r+0xd84>
   1c760:	e1a01007 	mov	r1, r7
   1c764:	e3a02005 	mov	r2, #5
   1c768:	e1a03004 	mov	r3, r4
   1c76c:	e1a00006 	mov	r0, r6
   1c770:	eb000622 	bl	1e000 <__multadd>
   1c774:	e1a07000 	mov	r7, r0
   1c778:	e1a01007 	mov	r1, r7
   1c77c:	e1a0000b 	mov	r0, r11
   1c780:	eb0007ca 	bl	1e6b0 <__mcmp>
   1c784:	e3500000 	cmp	r0, #0
   1c788:	da00015d 	ble	1cd04 <_dtoa_r+0xd84>
   1c78c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   1c790:	e3a02031 	mov	r2, #49	; 0x31
   1c794:	e4c32001 	strb	r2, [r3], #1
   1c798:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1c79c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1c7a0:	e2899001 	add	r9, r9, #1
   1c7a4:	e3a05000 	mov	r5, #0
   1c7a8:	e1a00006 	mov	r0, r6
   1c7ac:	e1a01007 	mov	r1, r7
   1c7b0:	eb00060b 	bl	1dfe4 <_Bfree>
   1c7b4:	e35a0000 	cmp	r10, #0
   1c7b8:	0a000005 	beq	1c7d4 <_dtoa_r+0x854>
   1c7bc:	e155000a 	cmp	r5, r10
   1c7c0:	13550000 	cmpne	r5, #0
   1c7c4:	1a000198 	bne	1ce2c <_dtoa_r+0xeac>
   1c7c8:	e1a00006 	mov	r0, r6
   1c7cc:	e1a0100a 	mov	r1, r10
   1c7d0:	eb000603 	bl	1dfe4 <_Bfree>
   1c7d4:	e1a00006 	mov	r0, r6
   1c7d8:	e1a0100b 	mov	r1, r11
   1c7dc:	eb000600 	bl	1dfe4 <_Bfree>
   1c7e0:	e59dc0b0 	ldr	r12, [sp, #176]	; 0xb0
   1c7e4:	e35c0000 	cmp	r12, #0
   1c7e8:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1c7ec:	e3a02000 	mov	r2, #0
   1c7f0:	e5cc2000 	strb	r2, [r12]
   1c7f4:	e59dc0a8 	ldr	r12, [sp, #168]	; 0xa8
   1c7f8:	e2893001 	add	r3, r9, #1
   1c7fc:	e58c3000 	str	r3, [r12]
   1c800:	159dc024 	ldrne	r12, [sp, #36]	; 0x24
   1c804:	159d10b0 	ldrne	r1, [sp, #176]	; 0xb0
   1c808:	1581c000 	strne	r12, [r1]
   1c80c:	eafffe0d 	b	1c048 <_dtoa_r+0xc8>
   1c810:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1c814:	e069c00c 	rsb	r12, r9, r12
   1c818:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1c81c:	e2694000 	rsb	r4, r9, #0
   1c820:	e3a0c000 	mov	r12, #0
   1c824:	e58d403c 	str	r4, [sp, #60]	; 0x3c
   1c828:	e58dc048 	str	r12, [sp, #72]	; 0x48
   1c82c:	eafffe78 	b	1c214 <_dtoa_r+0x294>
   1c830:	e1a00009 	mov	r0, r9
   1c834:	eb00122f 	bl	210f8 <__aeabi_i2d>
   1c838:	e1a02004 	mov	r2, r4
   1c83c:	e1a03005 	mov	r3, r5
   1c840:	eb0013bd 	bl	2173c <__aeabi_dcmpeq>
   1c844:	e3500000 	cmp	r0, #0
   1c848:	02499001 	subeq	r9, r9, #1
   1c84c:	eafffe50 	b	1c194 <_dtoa_r+0x214>
   1c850:	e51f0318 	ldr	r0, [pc, #-792]	; 1c540 <_dtoa_r+0x5c0>
   1c854:	e59d1010 	ldr	r1, [sp, #16]
   1c858:	e0670000 	rsb	r0, r7, r0
   1c85c:	e1a00011 	lsl	r0, r1, r0
   1c860:	eafffe26 	b	1c100 <_dtoa_r+0x180>
   1c864:	e59dc0a0 	ldr	r12, [sp, #160]	; 0xa0
   1c868:	e35c0001 	cmp	r12, #1
   1c86c:	da0002dc 	ble	1d3e4 <_dtoa_r+0x1464>
   1c870:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
   1c874:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
   1c878:	e24c5001 	sub	r5, r12, #1
   1c87c:	e1540005 	cmp	r4, r5
   1c880:	b59dc03c 	ldrlt	r12, [sp, #60]	; 0x3c
   1c884:	b59d4048 	ldrlt	r4, [sp, #72]	; 0x48
   1c888:	b06c3005 	rsblt	r3, r12, r5
   1c88c:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
   1c890:	b0844003 	addlt	r4, r4, r3
   1c894:	a0655004 	rsbge	r5, r5, r4
   1c898:	b58d4048 	strlt	r4, [sp, #72]	; 0x48
   1c89c:	b58d503c 	strlt	r5, [sp, #60]	; 0x3c
   1c8a0:	b3a05000 	movlt	r5, #0
   1c8a4:	e35c0000 	cmp	r12, #0
   1c8a8:	b59d102c 	ldrlt	r1, [sp, #44]	; 0x2c
   1c8ac:	a59d402c 	ldrge	r4, [sp, #44]	; 0x2c
   1c8b0:	a59d3038 	ldrge	r3, [sp, #56]	; 0x38
   1c8b4:	b06c4001 	rsblt	r4, r12, r1
   1c8b8:	b3a03000 	movlt	r3, #0
   1c8bc:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1c8c0:	e08cc003 	add	r12, r12, r3
   1c8c4:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1c8c8:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1c8cc:	e1a00006 	mov	r0, r6
   1c8d0:	e08cc003 	add	r12, r12, r3
   1c8d4:	e3a01001 	mov	r1, #1
   1c8d8:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1c8dc:	eb000673 	bl	1e2b0 <__i2b>
   1c8e0:	e1a0a000 	mov	r10, r0
   1c8e4:	eaffff34 	b	1c5bc <_dtoa_r+0x63c>
   1c8e8:	e3a0c000 	mov	r12, #0
   1c8ec:	e58dc040 	str	r12, [sp, #64]	; 0x40
   1c8f0:	e59d10a4 	ldr	r1, [sp, #164]	; 0xa4
   1c8f4:	e3510000 	cmp	r1, #0
   1c8f8:	da000262 	ble	1d288 <_dtoa_r+0x1308>
   1c8fc:	e58d1044 	str	r1, [sp, #68]	; 0x44
   1c900:	e58d1038 	str	r1, [sp, #56]	; 0x38
   1c904:	e1a08001 	mov	r8, r1
   1c908:	e351000e 	cmp	r1, #14
   1c90c:	83a04000 	movhi	r4, #0
   1c910:	92044001 	andls	r4, r4, #1
   1c914:	e3a01000 	mov	r1, #0
   1c918:	e3580017 	cmp	r8, #23
   1c91c:	e5861044 	str	r1, [r6, #68]	; 0x44
   1c920:	9a000008 	bls	1c948 <_dtoa_r+0x9c8>
   1c924:	e3a02001 	mov	r2, #1
   1c928:	e3a03004 	mov	r3, #4
   1c92c:	e1a03083 	lsl	r3, r3, #1
   1c930:	e2830014 	add	r0, r3, #20
   1c934:	e1500008 	cmp	r0, r8
   1c938:	e1a01002 	mov	r1, r2
   1c93c:	e2822001 	add	r2, r2, #1
   1c940:	9afffff9 	bls	1c92c <_dtoa_r+0x9ac>
   1c944:	e5861044 	str	r1, [r6, #68]	; 0x44
   1c948:	e1a00006 	mov	r0, r6
   1c94c:	eb000581 	bl	1df58 <_Balloc>
   1c950:	e3540000 	cmp	r4, #0
   1c954:	e58d0024 	str	r0, [sp, #36]	; 0x24
   1c958:	e5860040 	str	r0, [r6, #64]	; 0x40
   1c95c:	0afffe61 	beq	1c2e8 <_dtoa_r+0x368>
   1c960:	e3590000 	cmp	r9, #0
   1c964:	da000134 	ble	1ce3c <_dtoa_r+0xebc>
   1c968:	e51f2424 	ldr	r2, [pc, #-1060]	; 1c54c <_dtoa_r+0x5cc>
   1c96c:	e209300f 	and	r3, r9, #15
   1c970:	e1a07249 	asr	r7, r9, #4
   1c974:	e0823183 	add	r3, r2, r3, lsl #3
   1c978:	e3170010 	tst	r7, #16
   1c97c:	e8930030 	ldm	r3, {r4, r5}
   1c980:	0a000123 	beq	1ce14 <_dtoa_r+0xe94>
   1c984:	e51f3444 	ldr	r3, [pc, #-1092]	; 1c548 <_dtoa_r+0x5c8>
   1c988:	e28d1010 	add	r1, sp, #16
   1c98c:	e8910003 	ldm	r1, {r0, r1}
   1c990:	e2833020 	add	r3, r3, #32
   1c994:	e893000c 	ldm	r3, {r2, r3}
   1c998:	eb0012b1 	bl	21464 <__aeabi_ddiv>
   1c99c:	e58d0030 	str	r0, [sp, #48]	; 0x30
   1c9a0:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1c9a4:	e207700f 	and	r7, r7, #15
   1c9a8:	e3a08003 	mov	r8, #3
   1c9ac:	e3570000 	cmp	r7, #0
   1c9b0:	0a00000c 	beq	1c9e8 <_dtoa_r+0xa68>
   1c9b4:	e51fa474 	ldr	r10, [pc, #-1140]	; 1c548 <_dtoa_r+0x5c8>
   1c9b8:	e1a00004 	mov	r0, r4
   1c9bc:	e1a01005 	mov	r1, r5
   1c9c0:	e3170001 	tst	r7, #1
   1c9c4:	0a000002 	beq	1c9d4 <_dtoa_r+0xa54>
   1c9c8:	e89a000c 	ldm	r10, {r2, r3}
   1c9cc:	eb001200 	bl	211d4 <__aeabi_dmul>
   1c9d0:	e2888001 	add	r8, r8, #1
   1c9d4:	e1b070c7 	asrs	r7, r7, #1
   1c9d8:	e28aa008 	add	r10, r10, #8
   1c9dc:	1afffff7 	bne	1c9c0 <_dtoa_r+0xa40>
   1c9e0:	e1a04000 	mov	r4, r0
   1c9e4:	e1a05001 	mov	r5, r1
   1c9e8:	e28d1030 	add	r1, sp, #48	; 0x30
   1c9ec:	e8910003 	ldm	r1, {r0, r1}
   1c9f0:	e1a02004 	mov	r2, r4
   1c9f4:	e1a03005 	mov	r3, r5
   1c9f8:	eb001299 	bl	21464 <__aeabi_ddiv>
   1c9fc:	e58d0030 	str	r0, [sp, #48]	; 0x30
   1ca00:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1ca04:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1ca08:	e3540000 	cmp	r4, #0
   1ca0c:	0a000006 	beq	1ca2c <_dtoa_r+0xaac>
   1ca10:	e28d1030 	add	r1, sp, #48	; 0x30
   1ca14:	e8910003 	ldm	r1, {r0, r1}
   1ca18:	e3a02000 	mov	r2, #0
   1ca1c:	e51f34e0 	ldr	r3, [pc, #-1248]	; 1c544 <_dtoa_r+0x5c4>
   1ca20:	eb00134b 	bl	21754 <__aeabi_dcmplt>
   1ca24:	e3500000 	cmp	r0, #0
   1ca28:	1a000235 	bne	1d304 <_dtoa_r+0x1384>
   1ca2c:	e1a00008 	mov	r0, r8
   1ca30:	eb0011b0 	bl	210f8 <__aeabi_i2d>
   1ca34:	e28d3030 	add	r3, sp, #48	; 0x30
   1ca38:	e893000c 	ldm	r3, {r2, r3}
   1ca3c:	eb0011e4 	bl	211d4 <__aeabi_dmul>
   1ca40:	e3a02000 	mov	r2, #0
   1ca44:	e51f34f0 	ldr	r3, [pc, #-1264]	; 1c55c <_dtoa_r+0x5dc>
   1ca48:	eb0010dd 	bl	20dc4 <__adddf3>
   1ca4c:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
   1ca50:	e35c0000 	cmp	r12, #0
   1ca54:	e1a04000 	mov	r4, r0
   1ca58:	e241550d 	sub	r5, r1, #54525952	; 0x3400000
   1ca5c:	0a000094 	beq	1ccb4 <_dtoa_r+0xd34>
   1ca60:	e58d9064 	str	r9, [sp, #100]	; 0x64
   1ca64:	e59da038 	ldr	r10, [sp, #56]	; 0x38
   1ca68:	e59dc040 	ldr	r12, [sp, #64]	; 0x40
   1ca6c:	e35c0000 	cmp	r12, #0
   1ca70:	0a00010f 	beq	1ceb4 <_dtoa_r+0xf34>
   1ca74:	e51f3530 	ldr	r3, [pc, #-1328]	; 1c54c <_dtoa_r+0x5cc>
   1ca78:	e083318a 	add	r3, r3, r10, lsl #3
   1ca7c:	e913000c 	ldmdb	r3, {r2, r3}
   1ca80:	e3a00000 	mov	r0, #0
   1ca84:	e51f152c 	ldr	r1, [pc, #-1324]	; 1c560 <_dtoa_r+0x5e0>
   1ca88:	eb001275 	bl	21464 <__aeabi_ddiv>
   1ca8c:	e1a02004 	mov	r2, r4
   1ca90:	e1a03005 	mov	r3, r5
   1ca94:	eb0010c9 	bl	20dc0 <__aeabi_dsub>
   1ca98:	e58d0050 	str	r0, [sp, #80]	; 0x50
   1ca9c:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1caa0:	e28d1030 	add	r1, sp, #48	; 0x30
   1caa4:	e8910003 	ldm	r1, {r0, r1}
   1caa8:	eb001341 	bl	217b4 <__aeabi_d2iz>
   1caac:	e1a07000 	mov	r7, r0
   1cab0:	eb001190 	bl	210f8 <__aeabi_i2d>
   1cab4:	e1a02000 	mov	r2, r0
   1cab8:	e1a03001 	mov	r3, r1
   1cabc:	e28d1030 	add	r1, sp, #48	; 0x30
   1cac0:	e8910003 	ldm	r1, {r0, r1}
   1cac4:	eb0010bd 	bl	20dc0 <__aeabi_dsub>
   1cac8:	e2877030 	add	r7, r7, #48	; 0x30
   1cacc:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1cad0:	e20780ff 	and	r8, r7, #255	; 0xff
   1cad4:	e4cc8001 	strb	r8, [r12], #1
   1cad8:	e1a04000 	mov	r4, r0
   1cadc:	e1a05001 	mov	r5, r1
   1cae0:	e1a02004 	mov	r2, r4
   1cae4:	e28d1050 	add	r1, sp, #80	; 0x50
   1cae8:	e8910003 	ldm	r1, {r0, r1}
   1caec:	e1a03005 	mov	r3, r5
   1caf0:	e58dc030 	str	r12, [sp, #48]	; 0x30
   1caf4:	eb001328 	bl	2179c <__aeabi_dcmpgt>
   1caf8:	e3500000 	cmp	r0, #0
   1cafc:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
   1cb00:	1a0002c7 	bne	1d624 <_dtoa_r+0x16a4>
   1cb04:	e1a02004 	mov	r2, r4
   1cb08:	e1a03005 	mov	r3, r5
   1cb0c:	e3a00000 	mov	r0, #0
   1cb10:	e51f15d4 	ldr	r1, [pc, #-1492]	; 1c544 <_dtoa_r+0x5c4>
   1cb14:	e58dc008 	str	r12, [sp, #8]
   1cb18:	eb0010a8 	bl	20dc0 <__aeabi_dsub>
   1cb1c:	e1a02000 	mov	r2, r0
   1cb20:	e1a03001 	mov	r3, r1
   1cb24:	e28d1050 	add	r1, sp, #80	; 0x50
   1cb28:	e8910003 	ldm	r1, {r0, r1}
   1cb2c:	eb00131a 	bl	2179c <__aeabi_dcmpgt>
   1cb30:	e3500000 	cmp	r0, #0
   1cb34:	e59dc008 	ldr	r12, [sp, #8]
   1cb38:	1a000250 	bne	1d480 <_dtoa_r+0x1500>
   1cb3c:	e35a0001 	cmp	r10, #1
   1cb40:	dafffde8 	ble	1c2e8 <_dtoa_r+0x368>
   1cb44:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1cb48:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1cb4c:	e08ca00a 	add	r10, r12, r10
   1cb50:	e58d906c 	str	r9, [sp, #108]	; 0x6c
   1cb54:	e58d6068 	str	r6, [sp, #104]	; 0x68
   1cb58:	e1a0900a 	mov	r9, r10
   1cb5c:	e58db058 	str	r11, [sp, #88]	; 0x58
   1cb60:	e1a0a007 	mov	r10, r7
   1cb64:	e28d7050 	add	r7, sp, #80	; 0x50
   1cb68:	e89700c0 	ldm	r7, {r6, r7}
   1cb6c:	ea000007 	b	1cb90 <_dtoa_r+0xc10>
   1cb70:	eb001092 	bl	20dc0 <__aeabi_dsub>
   1cb74:	e1a02006 	mov	r2, r6
   1cb78:	e1a03007 	mov	r3, r7
   1cb7c:	eb0012f4 	bl	21754 <__aeabi_dcmplt>
   1cb80:	e3500000 	cmp	r0, #0
   1cb84:	1a00023a 	bne	1d474 <_dtoa_r+0x14f4>
   1cb88:	e15a0009 	cmp	r10, r9
   1cb8c:	0a000241 	beq	1d498 <_dtoa_r+0x1518>
   1cb90:	e3a02000 	mov	r2, #0
   1cb94:	e51f3644 	ldr	r3, [pc, #-1604]	; 1c558 <_dtoa_r+0x5d8>
   1cb98:	e1a00006 	mov	r0, r6
   1cb9c:	e1a01007 	mov	r1, r7
   1cba0:	eb00118b 	bl	211d4 <__aeabi_dmul>
   1cba4:	e3a02000 	mov	r2, #0
   1cba8:	e51f3658 	ldr	r3, [pc, #-1624]	; 1c558 <_dtoa_r+0x5d8>
   1cbac:	e1a06000 	mov	r6, r0
   1cbb0:	e1a07001 	mov	r7, r1
   1cbb4:	e1a00004 	mov	r0, r4
   1cbb8:	e1a01005 	mov	r1, r5
   1cbbc:	eb001184 	bl	211d4 <__aeabi_dmul>
   1cbc0:	e1a05001 	mov	r5, r1
   1cbc4:	e1a04000 	mov	r4, r0
   1cbc8:	eb0012f9 	bl	217b4 <__aeabi_d2iz>
   1cbcc:	e1a08000 	mov	r8, r0
   1cbd0:	eb001148 	bl	210f8 <__aeabi_i2d>
   1cbd4:	e1a02000 	mov	r2, r0
   1cbd8:	e1a03001 	mov	r3, r1
   1cbdc:	e1a00004 	mov	r0, r4
   1cbe0:	e1a01005 	mov	r1, r5
   1cbe4:	eb001075 	bl	20dc0 <__aeabi_dsub>
   1cbe8:	e2888030 	add	r8, r8, #48	; 0x30
   1cbec:	e20880ff 	and	r8, r8, #255	; 0xff
   1cbf0:	e4ca8001 	strb	r8, [r10], #1
   1cbf4:	e1a02006 	mov	r2, r6
   1cbf8:	e1a03007 	mov	r3, r7
   1cbfc:	e1a05001 	mov	r5, r1
   1cc00:	e1a04000 	mov	r4, r0
   1cc04:	eb0012d2 	bl	21754 <__aeabi_dcmplt>
   1cc08:	e3500000 	cmp	r0, #0
   1cc0c:	e1a02004 	mov	r2, r4
   1cc10:	e1a03005 	mov	r3, r5
   1cc14:	e3a00000 	mov	r0, #0
   1cc18:	e51f16dc 	ldr	r1, [pc, #-1756]	; 1c544 <_dtoa_r+0x5c4>
   1cc1c:	e1a0b00a 	mov	r11, r10
   1cc20:	0affffd2 	beq	1cb70 <_dtoa_r+0xbf0>
   1cc24:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1cc28:	e1a0700a 	mov	r7, r10
   1cc2c:	e59db058 	ldr	r11, [sp, #88]	; 0x58
   1cc30:	e59d6068 	ldr	r6, [sp, #104]	; 0x68
   1cc34:	e59d9064 	ldr	r9, [sp, #100]	; 0x64
   1cc38:	e58da024 	str	r10, [sp, #36]	; 0x24
   1cc3c:	eafffee4 	b	1c7d4 <_dtoa_r+0x854>
   1cc40:	e3a0c001 	mov	r12, #1
   1cc44:	e58dc040 	str	r12, [sp, #64]	; 0x40
   1cc48:	e59dc0a4 	ldr	r12, [sp, #164]	; 0xa4
   1cc4c:	e08cc009 	add	r12, r12, r9
   1cc50:	e28c8001 	add	r8, r12, #1
   1cc54:	e3580000 	cmp	r8, #0
   1cc58:	e58dc044 	str	r12, [sp, #68]	; 0x44
   1cc5c:	da000191 	ble	1d2a8 <_dtoa_r+0x1328>
   1cc60:	e358000e 	cmp	r8, #14
   1cc64:	83a04000 	movhi	r4, #0
   1cc68:	92044001 	andls	r4, r4, #1
   1cc6c:	e58d8038 	str	r8, [sp, #56]	; 0x38
   1cc70:	eaffff27 	b	1c914 <_dtoa_r+0x994>
   1cc74:	e3a0c001 	mov	r12, #1
   1cc78:	e58dc040 	str	r12, [sp, #64]	; 0x40
   1cc7c:	eaffff1b 	b	1c8f0 <_dtoa_r+0x970>
   1cc80:	e3a0c000 	mov	r12, #0
   1cc84:	e58dc040 	str	r12, [sp, #64]	; 0x40
   1cc88:	eaffffee 	b	1cc48 <_dtoa_r+0xcc8>
   1cc8c:	e1a00008 	mov	r0, r8
   1cc90:	eb001118 	bl	210f8 <__aeabi_i2d>
   1cc94:	e28d3030 	add	r3, sp, #48	; 0x30
   1cc98:	e893000c 	ldm	r3, {r2, r3}
   1cc9c:	eb00114c 	bl	211d4 <__aeabi_dmul>
   1cca0:	e3a02000 	mov	r2, #0
   1cca4:	e51f3750 	ldr	r3, [pc, #-1872]	; 1c55c <_dtoa_r+0x5dc>
   1cca8:	eb001045 	bl	20dc4 <__adddf3>
   1ccac:	e1a04000 	mov	r4, r0
   1ccb0:	e241550d 	sub	r5, r1, #54525952	; 0x3400000
   1ccb4:	e3a02000 	mov	r2, #0
   1ccb8:	e51f3770 	ldr	r3, [pc, #-1904]	; 1c550 <_dtoa_r+0x5d0>
   1ccbc:	e28d1030 	add	r1, sp, #48	; 0x30
   1ccc0:	e8910003 	ldm	r1, {r0, r1}
   1ccc4:	eb00103d 	bl	20dc0 <__aeabi_dsub>
   1ccc8:	e1a02004 	mov	r2, r4
   1cccc:	e1a03005 	mov	r3, r5
   1ccd0:	e1a07000 	mov	r7, r0
   1ccd4:	e1a08001 	mov	r8, r1
   1ccd8:	eb0012af 	bl	2179c <__aeabi_dcmpgt>
   1ccdc:	e250a000 	subs	r10, r0, #0
   1cce0:	1a000070 	bne	1cea8 <_dtoa_r+0xf28>
   1cce4:	e1a02004 	mov	r2, r4
   1cce8:	e2853102 	add	r3, r5, #-2147483648	; 0x80000000
   1ccec:	e1a00007 	mov	r0, r7
   1ccf0:	e1a01008 	mov	r1, r8
   1ccf4:	eb001296 	bl	21754 <__aeabi_dcmplt>
   1ccf8:	e3500000 	cmp	r0, #0
   1ccfc:	0afffd79 	beq	1c2e8 <_dtoa_r+0x368>
   1cd00:	e1a0700a 	mov	r7, r10
   1cd04:	e59dc0a4 	ldr	r12, [sp, #164]	; 0xa4
   1cd08:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1cd0c:	e1e0900c 	mvn	r9, r12
   1cd10:	e3a05000 	mov	r5, #0
   1cd14:	eafffea3 	b	1c7a8 <_dtoa_r+0x828>
   1cd18:	e59dc040 	ldr	r12, [sp, #64]	; 0x40
   1cd1c:	e35c0000 	cmp	r12, #0
   1cd20:	1a0000ee 	bne	1d0e0 <_dtoa_r+0x1160>
   1cd24:	e3a04000 	mov	r4, #0
   1cd28:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
   1cd2c:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
   1cd30:	ea000005 	b	1cd4c <_dtoa_r+0xdcc>
   1cd34:	e1a0100b 	mov	r1, r11
   1cd38:	e1a00006 	mov	r0, r6
   1cd3c:	e3a0200a 	mov	r2, #10
   1cd40:	e3a03000 	mov	r3, #0
   1cd44:	eb0004ad 	bl	1e000 <__multadd>
   1cd48:	e1a0b000 	mov	r11, r0
   1cd4c:	e1a01007 	mov	r1, r7
   1cd50:	e1a0000b 	mov	r0, r11
   1cd54:	ebfffc11 	bl	1bda0 <quorem>
   1cd58:	e2800030 	add	r0, r0, #48	; 0x30
   1cd5c:	e7c80004 	strb	r0, [r8, r4]
   1cd60:	e2844001 	add	r4, r4, #1
   1cd64:	e1540005 	cmp	r4, r5
   1cd68:	bafffff1 	blt	1cd34 <_dtoa_r+0xdb4>
   1cd6c:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1cd70:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   1cd74:	e1a03000 	mov	r3, r0
   1cd78:	e3540001 	cmp	r4, #1
   1cd7c:	a08cc004 	addge	r12, r12, r4
   1cd80:	b28cc001 	addlt	r12, r12, #1
   1cd84:	e3a05000 	mov	r5, #0
   1cd88:	e1a0100b 	mov	r1, r11
   1cd8c:	e3a02001 	mov	r2, #1
   1cd90:	e1a00006 	mov	r0, r6
   1cd94:	e58d300c 	str	r3, [sp, #12]
   1cd98:	e58dc008 	str	r12, [sp, #8]
   1cd9c:	eb000602 	bl	1e5ac <__lshift>
   1cda0:	e1a01007 	mov	r1, r7
   1cda4:	e1a0b000 	mov	r11, r0
   1cda8:	eb000640 	bl	1e6b0 <__mcmp>
   1cdac:	e3500000 	cmp	r0, #0
   1cdb0:	e59d300c 	ldr	r3, [sp, #12]
   1cdb4:	e59dc008 	ldr	r12, [sp, #8]
   1cdb8:	da0001ba 	ble	1d4a8 <_dtoa_r+0x1528>
   1cdbc:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1cdc0:	e2844001 	add	r4, r4, #1
   1cdc4:	e55c3001 	ldrb	r3, [r12, #-1]
   1cdc8:	e58d4030 	str	r4, [sp, #48]	; 0x30
   1cdcc:	e1a0100c 	mov	r1, r12
   1cdd0:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   1cdd4:	ea000001 	b	1cde0 <_dtoa_r+0xe60>
   1cdd8:	e5513002 	ldrb	r3, [r1, #-2]
   1cddc:	e1a01002 	mov	r1, r2
   1cde0:	e3530039 	cmp	r3, #57	; 0x39
   1cde4:	e2412001 	sub	r2, r1, #1
   1cde8:	1a0001cd 	bne	1d524 <_dtoa_r+0x15a4>
   1cdec:	e1510000 	cmp	r1, r0
   1cdf0:	1afffff8 	bne	1cdd8 <_dtoa_r+0xe58>
   1cdf4:	e3a03031 	mov	r3, #49	; 0x31
   1cdf8:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1cdfc:	e2899001 	add	r9, r9, #1
   1ce00:	e5c23000 	strb	r3, [r2]
   1ce04:	e58d1024 	str	r1, [sp, #36]	; 0x24
   1ce08:	eafffe66 	b	1c7a8 <_dtoa_r+0x828>
   1ce0c:	e3a0301c 	mov	r3, #28
   1ce10:	eafffe2c 	b	1c6c8 <_dtoa_r+0x748>
   1ce14:	e28d3010 	add	r3, sp, #16
   1ce18:	e893000c 	ldm	r3, {r2, r3}
   1ce1c:	e3a08002 	mov	r8, #2
   1ce20:	e58d2030 	str	r2, [sp, #48]	; 0x30
   1ce24:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1ce28:	eafffedf 	b	1c9ac <_dtoa_r+0xa2c>
   1ce2c:	e1a00006 	mov	r0, r6
   1ce30:	e1a01005 	mov	r1, r5
   1ce34:	eb00046a 	bl	1dfe4 <_Bfree>
   1ce38:	eafffe62 	b	1c7c8 <_dtoa_r+0x848>
   1ce3c:	e2694000 	rsb	r4, r9, #0
   1ce40:	e3540000 	cmp	r4, #0
   1ce44:	0a000128 	beq	1d2ec <_dtoa_r+0x136c>
   1ce48:	e51f3904 	ldr	r3, [pc, #-2308]	; 1c54c <_dtoa_r+0x5cc>
   1ce4c:	e204200f 	and	r2, r4, #15
   1ce50:	e0833182 	add	r3, r3, r2, lsl #3
   1ce54:	e28d1010 	add	r1, sp, #16
   1ce58:	e8910003 	ldm	r1, {r0, r1}
   1ce5c:	e893000c 	ldm	r3, {r2, r3}
   1ce60:	eb0010db 	bl	211d4 <__aeabi_dmul>
   1ce64:	e1b04244 	asrs	r4, r4, #4
   1ce68:	e58d0030 	str	r0, [sp, #48]	; 0x30
   1ce6c:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1ce70:	0a0001d2 	beq	1d5c0 <_dtoa_r+0x1640>
   1ce74:	e51f5934 	ldr	r5, [pc, #-2356]	; 1c548 <_dtoa_r+0x5c8>
   1ce78:	e3a08002 	mov	r8, #2
   1ce7c:	e3140001 	tst	r4, #1
   1ce80:	0a000002 	beq	1ce90 <_dtoa_r+0xf10>
   1ce84:	e895000c 	ldm	r5, {r2, r3}
   1ce88:	eb0010d1 	bl	211d4 <__aeabi_dmul>
   1ce8c:	e2888001 	add	r8, r8, #1
   1ce90:	e1b040c4 	asrs	r4, r4, #1
   1ce94:	e2855008 	add	r5, r5, #8
   1ce98:	1afffff7 	bne	1ce7c <_dtoa_r+0xefc>
   1ce9c:	e58d0030 	str	r0, [sp, #48]	; 0x30
   1cea0:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1cea4:	eafffed6 	b	1ca04 <_dtoa_r+0xa84>
   1cea8:	e3a07000 	mov	r7, #0
   1ceac:	e1a0a007 	mov	r10, r7
   1ceb0:	eafffe35 	b	1c78c <_dtoa_r+0x80c>
   1ceb4:	e51f1970 	ldr	r1, [pc, #-2416]	; 1c54c <_dtoa_r+0x5cc>
   1ceb8:	e24ac001 	sub	r12, r10, #1
   1cebc:	e081118c 	add	r1, r1, r12, lsl #3
   1cec0:	e1a02004 	mov	r2, r4
   1cec4:	e1a03005 	mov	r3, r5
   1cec8:	e8910003 	ldm	r1, {r0, r1}
   1cecc:	e58dc050 	str	r12, [sp, #80]	; 0x50
   1ced0:	eb0010bf 	bl	211d4 <__aeabi_dmul>
   1ced4:	e58d0058 	str	r0, [sp, #88]	; 0x58
   1ced8:	e58d105c 	str	r1, [sp, #92]	; 0x5c
   1cedc:	e28d1030 	add	r1, sp, #48	; 0x30
   1cee0:	e8910003 	ldm	r1, {r0, r1}
   1cee4:	eb001232 	bl	217b4 <__aeabi_d2iz>
   1cee8:	e1a07000 	mov	r7, r0
   1ceec:	eb001081 	bl	210f8 <__aeabi_i2d>
   1cef0:	e1a02000 	mov	r2, r0
   1cef4:	e1a03001 	mov	r3, r1
   1cef8:	e28d1030 	add	r1, sp, #48	; 0x30
   1cefc:	e8910003 	ldm	r1, {r0, r1}
   1cf00:	eb000fae 	bl	20dc0 <__aeabi_dsub>
   1cf04:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1cf08:	e2877030 	add	r7, r7, #48	; 0x30
   1cf0c:	e4cc7001 	strb	r7, [r12], #1
   1cf10:	e35a0001 	cmp	r10, #1
   1cf14:	e1a04000 	mov	r4, r0
   1cf18:	e1a05001 	mov	r5, r1
   1cf1c:	e58dc030 	str	r12, [sp, #48]	; 0x30
   1cf20:	0a000019 	beq	1cf8c <_dtoa_r+0x100c>
   1cf24:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1cf28:	e24c3001 	sub	r3, r12, #1
   1cf2c:	e1a0700c 	mov	r7, r12
   1cf30:	e083a00a 	add	r10, r3, r10
   1cf34:	e3a02000 	mov	r2, #0
   1cf38:	e51f39e8 	ldr	r3, [pc, #-2536]	; 1c558 <_dtoa_r+0x5d8>
   1cf3c:	eb0010a4 	bl	211d4 <__aeabi_dmul>
   1cf40:	e1a05001 	mov	r5, r1
   1cf44:	e1a04000 	mov	r4, r0
   1cf48:	eb001219 	bl	217b4 <__aeabi_d2iz>
   1cf4c:	e1a08000 	mov	r8, r0
   1cf50:	eb001068 	bl	210f8 <__aeabi_i2d>
   1cf54:	e2888030 	add	r8, r8, #48	; 0x30
   1cf58:	e1a02000 	mov	r2, r0
   1cf5c:	e1a03001 	mov	r3, r1
   1cf60:	e1a00004 	mov	r0, r4
   1cf64:	e1a01005 	mov	r1, r5
   1cf68:	eb000f94 	bl	20dc0 <__aeabi_dsub>
   1cf6c:	e5e78001 	strb	r8, [r7, #1]!
   1cf70:	e157000a 	cmp	r7, r10
   1cf74:	1affffee 	bne	1cf34 <_dtoa_r+0xfb4>
   1cf78:	e1a05001 	mov	r5, r1
   1cf7c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1cf80:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1cf84:	e1a04000 	mov	r4, r0
   1cf88:	e081c002 	add	r12, r1, r2
   1cf8c:	e3a02000 	mov	r2, #0
   1cf90:	e51f3a38 	ldr	r3, [pc, #-2616]	; 1c560 <_dtoa_r+0x5e0>
   1cf94:	e28d1058 	add	r1, sp, #88	; 0x58
   1cf98:	e8910003 	ldm	r1, {r0, r1}
   1cf9c:	e58dc008 	str	r12, [sp, #8]
   1cfa0:	eb000f87 	bl	20dc4 <__adddf3>
   1cfa4:	e1a02004 	mov	r2, r4
   1cfa8:	e1a03005 	mov	r3, r5
   1cfac:	eb0011e8 	bl	21754 <__aeabi_dcmplt>
   1cfb0:	e3500000 	cmp	r0, #0
   1cfb4:	e59dc008 	ldr	r12, [sp, #8]
   1cfb8:	0a0000ee 	beq	1d378 <_dtoa_r+0x13f8>
   1cfbc:	e55c8001 	ldrb	r8, [r12, #-1]
   1cfc0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1cfc4:	eafffd4d 	b	1c500 <_dtoa_r+0x580>
   1cfc8:	e5973010 	ldr	r3, [r7, #16]
   1cfcc:	e0873103 	add	r3, r7, r3, lsl #2
   1cfd0:	e5930010 	ldr	r0, [r3, #16]
   1cfd4:	eb00047c 	bl	1e1cc <__hi0bits>
   1cfd8:	e2600020 	rsb	r0, r0, #32
   1cfdc:	eafffdb1 	b	1c6a8 <_dtoa_r+0x728>
   1cfe0:	e1a0000b 	mov	r0, r11
   1cfe4:	e1a01007 	mov	r1, r7
   1cfe8:	eb0005b0 	bl	1e6b0 <__mcmp>
   1cfec:	e3500000 	cmp	r0, #0
   1cff0:	aafffdce 	bge	1c730 <_dtoa_r+0x7b0>
   1cff4:	e1a0100b 	mov	r1, r11
   1cff8:	e1a00006 	mov	r0, r6
   1cffc:	e3a0200a 	mov	r2, #10
   1d000:	e3a03000 	mov	r3, #0
   1d004:	eb0003fd 	bl	1e000 <__multadd>
   1d008:	e59dc040 	ldr	r12, [sp, #64]	; 0x40
   1d00c:	e35c0000 	cmp	r12, #0
   1d010:	e1a0b000 	mov	r11, r0
   1d014:	e2499001 	sub	r9, r9, #1
   1d018:	1a00016e 	bne	1d5d8 <_dtoa_r+0x1658>
   1d01c:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
   1d020:	e59dc0a0 	ldr	r12, [sp, #160]	; 0xa0
   1d024:	e3540000 	cmp	r4, #0
   1d028:	c3a03000 	movgt	r3, #0
   1d02c:	d3a03001 	movle	r3, #1
   1d030:	e35c0002 	cmp	r12, #2
   1d034:	d3a03000 	movle	r3, #0
   1d038:	e3530000 	cmp	r3, #0
   1d03c:	058d4038 	streq	r4, [sp, #56]	; 0x38
   1d040:	0affff37 	beq	1cd24 <_dtoa_r+0xda4>
   1d044:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
   1d048:	e58dc038 	str	r12, [sp, #56]	; 0x38
   1d04c:	eafffdc0 	b	1c754 <_dtoa_r+0x7d4>
   1d050:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   1d054:	e3540000 	cmp	r4, #0
   1d058:	1a00011e 	bne	1d4d8 <_dtoa_r+0x1558>
   1d05c:	e3a02000 	mov	r2, #0
   1d060:	e51f3b18 	ldr	r3, [pc, #-2840]	; 1c550 <_dtoa_r+0x5d0>
   1d064:	e28d1018 	add	r1, sp, #24
   1d068:	e8910003 	ldm	r1, {r0, r1}
   1d06c:	eb001058 	bl	211d4 <__aeabi_dmul>
   1d070:	e28d3010 	add	r3, sp, #16
   1d074:	e893000c 	ldm	r3, {r2, r3}
   1d078:	eb0011c1 	bl	21784 <__aeabi_dcmpge>
   1d07c:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
   1d080:	e3500000 	cmp	r0, #0
   1d084:	e1a0a007 	mov	r10, r7
   1d088:	1affff1d 	bne	1cd04 <_dtoa_r+0xd84>
   1d08c:	eafffdbe 	b	1c78c <_dtoa_r+0x80c>
   1d090:	e59d1010 	ldr	r1, [sp, #16]
   1d094:	e3510000 	cmp	r1, #0
   1d098:	1afffd7d 	bne	1c694 <_dtoa_r+0x714>
   1d09c:	e59d3014 	ldr	r3, [sp, #20]
   1d0a0:	e3c324ff 	bic	r2, r3, #-16777216	; 0xff000000
   1d0a4:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
   1d0a8:	e3520000 	cmp	r2, #0
   1d0ac:	1a000121 	bne	1d538 <_dtoa_r+0x15b8>
   1d0b0:	e51f5b64 	ldr	r5, [pc, #-2916]	; 1c554 <_dtoa_r+0x5d4>
   1d0b4:	e0035005 	and	r5, r3, r5
   1d0b8:	e3550000 	cmp	r5, #0
   1d0bc:	0afffd75 	beq	1c698 <_dtoa_r+0x718>
   1d0c0:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1d0c4:	e28cc001 	add	r12, r12, #1
   1d0c8:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1d0cc:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1d0d0:	e28cc001 	add	r12, r12, #1
   1d0d4:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1d0d8:	e3a05001 	mov	r5, #1
   1d0dc:	eafffd6d 	b	1c698 <_dtoa_r+0x718>
   1d0e0:	e3540000 	cmp	r4, #0
   1d0e4:	da000004 	ble	1d0fc <_dtoa_r+0x117c>
   1d0e8:	e1a0100a 	mov	r1, r10
   1d0ec:	e1a00006 	mov	r0, r6
   1d0f0:	e1a02004 	mov	r2, r4
   1d0f4:	eb00052c 	bl	1e5ac <__lshift>
   1d0f8:	e1a0a000 	mov	r10, r0
   1d0fc:	e3550000 	cmp	r5, #0
   1d100:	01a0800a 	moveq	r8, r10
   1d104:	1a0000f6 	bne	1d4e4 <_dtoa_r+0x1564>
   1d108:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1d10c:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1d110:	e08cc001 	add	r12, r12, r1
   1d114:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d118:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1d11c:	e59dc010 	ldr	r12, [sp, #16]
   1d120:	e2844001 	add	r4, r4, #1
   1d124:	e20cc001 	and	r12, r12, #1
   1d128:	e58d4030 	str	r4, [sp, #48]	; 0x30
   1d12c:	e1a0500a 	mov	r5, r10
   1d130:	e58dc020 	str	r12, [sp, #32]
   1d134:	e58d9038 	str	r9, [sp, #56]	; 0x38
   1d138:	ea00002e 	b	1d1f8 <_dtoa_r+0x1278>
   1d13c:	e1a00006 	mov	r0, r6
   1d140:	e1a01003 	mov	r1, r3
   1d144:	e58d200c 	str	r2, [sp, #12]
   1d148:	eb0003a5 	bl	1dfe4 <_Bfree>
   1d14c:	e59d200c 	ldr	r2, [sp, #12]
   1d150:	e59dc0a0 	ldr	r12, [sp, #160]	; 0xa0
   1d154:	e192c00c 	orrs	r12, r2, r12
   1d158:	1a000002 	bne	1d168 <_dtoa_r+0x11e8>
   1d15c:	e59dc020 	ldr	r12, [sp, #32]
   1d160:	e35c0000 	cmp	r12, #0
   1d164:	0a000109 	beq	1d590 <_dtoa_r+0x1610>
   1d168:	e35a0000 	cmp	r10, #0
   1d16c:	ba0000a6 	blt	1d40c <_dtoa_r+0x148c>
   1d170:	e59dc0a0 	ldr	r12, [sp, #160]	; 0xa0
   1d174:	e19ac00c 	orrs	r12, r10, r12
   1d178:	1a000002 	bne	1d188 <_dtoa_r+0x1208>
   1d17c:	e59dc020 	ldr	r12, [sp, #32]
   1d180:	e35c0000 	cmp	r12, #0
   1d184:	0a0000a0 	beq	1d40c <_dtoa_r+0x148c>
   1d188:	e3520000 	cmp	r2, #0
   1d18c:	ca0000eb 	bgt	1d540 <_dtoa_r+0x15c0>
   1d190:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1d194:	e154000c 	cmp	r4, r12
   1d198:	e5449001 	strb	r9, [r4, #-1]
   1d19c:	e1a0c004 	mov	r12, r4
   1d1a0:	0a0000f1 	beq	1d56c <_dtoa_r+0x15ec>
   1d1a4:	e1a0100b 	mov	r1, r11
   1d1a8:	e1a00006 	mov	r0, r6
   1d1ac:	e3a0200a 	mov	r2, #10
   1d1b0:	e3a03000 	mov	r3, #0
   1d1b4:	eb000391 	bl	1e000 <__multadd>
   1d1b8:	e1550008 	cmp	r5, r8
   1d1bc:	e1a0b000 	mov	r11, r0
   1d1c0:	0a000028 	beq	1d268 <_dtoa_r+0x12e8>
   1d1c4:	e1a01005 	mov	r1, r5
   1d1c8:	e3a0200a 	mov	r2, #10
   1d1cc:	e3a03000 	mov	r3, #0
   1d1d0:	e1a00006 	mov	r0, r6
   1d1d4:	eb000389 	bl	1e000 <__multadd>
   1d1d8:	e1a01008 	mov	r1, r8
   1d1dc:	e1a05000 	mov	r5, r0
   1d1e0:	e3a0200a 	mov	r2, #10
   1d1e4:	e1a00006 	mov	r0, r6
   1d1e8:	e3a03000 	mov	r3, #0
   1d1ec:	eb000383 	bl	1e000 <__multadd>
   1d1f0:	e1a08000 	mov	r8, r0
   1d1f4:	e2844001 	add	r4, r4, #1
   1d1f8:	e1a01007 	mov	r1, r7
   1d1fc:	e1a0000b 	mov	r0, r11
   1d200:	ebfffae6 	bl	1bda0 <quorem>
   1d204:	e1a01005 	mov	r1, r5
   1d208:	e58d0010 	str	r0, [sp, #16]
   1d20c:	e1a0000b 	mov	r0, r11
   1d210:	eb000526 	bl	1e6b0 <__mcmp>
   1d214:	e1a02008 	mov	r2, r8
   1d218:	e1a0a000 	mov	r10, r0
   1d21c:	e1a01007 	mov	r1, r7
   1d220:	e1a00006 	mov	r0, r6
   1d224:	eb00053a 	bl	1e714 <__mdiff>
   1d228:	e244c001 	sub	r12, r4, #1
   1d22c:	e590200c 	ldr	r2, [r0, #12]
   1d230:	e58dc028 	str	r12, [sp, #40]	; 0x28
   1d234:	e59dc010 	ldr	r12, [sp, #16]
   1d238:	e3520000 	cmp	r2, #0
   1d23c:	e1a03000 	mov	r3, r0
   1d240:	e28c9030 	add	r9, r12, #48	; 0x30
   1d244:	13a02001 	movne	r2, #1
   1d248:	1affffbb 	bne	1d13c <_dtoa_r+0x11bc>
   1d24c:	e1a01003 	mov	r1, r3
   1d250:	e1a0000b 	mov	r0, r11
   1d254:	e58d300c 	str	r3, [sp, #12]
   1d258:	eb000514 	bl	1e6b0 <__mcmp>
   1d25c:	e59d300c 	ldr	r3, [sp, #12]
   1d260:	e1a02000 	mov	r2, r0
   1d264:	eaffffb4 	b	1d13c <_dtoa_r+0x11bc>
   1d268:	e1a01005 	mov	r1, r5
   1d26c:	e1a00006 	mov	r0, r6
   1d270:	e3a0200a 	mov	r2, #10
   1d274:	e3a03000 	mov	r3, #0
   1d278:	eb000360 	bl	1e000 <__multadd>
   1d27c:	e1a05000 	mov	r5, r0
   1d280:	e1a08000 	mov	r8, r0
   1d284:	eaffffda 	b	1d1f4 <_dtoa_r+0x1274>
   1d288:	e3a03001 	mov	r3, #1
   1d28c:	e58d3044 	str	r3, [sp, #68]	; 0x44
   1d290:	e58d3038 	str	r3, [sp, #56]	; 0x38
   1d294:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   1d298:	e3a01000 	mov	r1, #0
   1d29c:	e5861044 	str	r1, [r6, #68]	; 0x44
   1d2a0:	e0034004 	and	r4, r3, r4
   1d2a4:	eafffda7 	b	1c948 <_dtoa_r+0x9c8>
   1d2a8:	e358000e 	cmp	r8, #14
   1d2ac:	83a03000 	movhi	r3, #0
   1d2b0:	93a03001 	movls	r3, #1
   1d2b4:	e58d8038 	str	r8, [sp, #56]	; 0x38
   1d2b8:	eafffff6 	b	1d298 <_dtoa_r+0x1318>
   1d2bc:	e1a0100b 	mov	r1, r11
   1d2c0:	e1a00006 	mov	r0, r6
   1d2c4:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   1d2c8:	eb00047a 	bl	1e4b8 <__pow5mult>
   1d2cc:	e1a0b000 	mov	r11, r0
   1d2d0:	eafffce0 	b	1c658 <_dtoa_r+0x6d8>
   1d2d4:	e1a0c006 	mov	r12, r6
   1d2d8:	e59d9020 	ldr	r9, [sp, #32]
   1d2dc:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1d2e0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d2e4:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1d2e8:	eafffd39 	b	1c7d4 <_dtoa_r+0x854>
   1d2ec:	e28d4010 	add	r4, sp, #16
   1d2f0:	e8940018 	ldm	r4, {r3, r4}
   1d2f4:	e3a08002 	mov	r8, #2
   1d2f8:	e58d3030 	str	r3, [sp, #48]	; 0x30
   1d2fc:	e58d4034 	str	r4, [sp, #52]	; 0x34
   1d300:	eafffdbf 	b	1ca04 <_dtoa_r+0xa84>
   1d304:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
   1d308:	e35c0000 	cmp	r12, #0
   1d30c:	0afffe5e 	beq	1cc8c <_dtoa_r+0xd0c>
   1d310:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
   1d314:	e3540000 	cmp	r4, #0
   1d318:	dafffbf2 	ble	1c2e8 <_dtoa_r+0x368>
   1d31c:	e3a02000 	mov	r2, #0
   1d320:	e51f3dd0 	ldr	r3, [pc, #-3536]	; 1c558 <_dtoa_r+0x5d8>
   1d324:	e28d1030 	add	r1, sp, #48	; 0x30
   1d328:	e8910003 	ldm	r1, {r0, r1}
   1d32c:	eb000fa8 	bl	211d4 <__aeabi_dmul>
   1d330:	e58d0030 	str	r0, [sp, #48]	; 0x30
   1d334:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1d338:	e2880001 	add	r0, r8, #1
   1d33c:	eb000f6d 	bl	210f8 <__aeabi_i2d>
   1d340:	e1a02000 	mov	r2, r0
   1d344:	e1a03001 	mov	r3, r1
   1d348:	e28d1030 	add	r1, sp, #48	; 0x30
   1d34c:	e8910003 	ldm	r1, {r0, r1}
   1d350:	eb000f9f 	bl	211d4 <__aeabi_dmul>
   1d354:	e3a02000 	mov	r2, #0
   1d358:	e51f3e04 	ldr	r3, [pc, #-3588]	; 1c55c <_dtoa_r+0x5dc>
   1d35c:	eb000e98 	bl	20dc4 <__adddf3>
   1d360:	e249c001 	sub	r12, r9, #1
   1d364:	e1a04000 	mov	r4, r0
   1d368:	e58dc064 	str	r12, [sp, #100]	; 0x64
   1d36c:	e241550d 	sub	r5, r1, #54525952	; 0x3400000
   1d370:	e59da044 	ldr	r10, [sp, #68]	; 0x44
   1d374:	eafffdbb 	b	1ca68 <_dtoa_r+0xae8>
   1d378:	e28d3058 	add	r3, sp, #88	; 0x58
   1d37c:	e893000c 	ldm	r3, {r2, r3}
   1d380:	e3a00000 	mov	r0, #0
   1d384:	e51f1e2c 	ldr	r1, [pc, #-3628]	; 1c560 <_dtoa_r+0x5e0>
   1d388:	e58dc008 	str	r12, [sp, #8]
   1d38c:	eb000e8b 	bl	20dc0 <__aeabi_dsub>
   1d390:	e1a02004 	mov	r2, r4
   1d394:	e1a03005 	mov	r3, r5
   1d398:	eb0010ff 	bl	2179c <__aeabi_dcmpgt>
   1d39c:	e3500000 	cmp	r0, #0
   1d3a0:	e59dc008 	ldr	r12, [sp, #8]
   1d3a4:	0afffbcf 	beq	1c2e8 <_dtoa_r+0x368>
   1d3a8:	e1a0900c 	mov	r9, r12
   1d3ac:	e5592001 	ldrb	r2, [r9, #-1]
   1d3b0:	e3520030 	cmp	r2, #48	; 0x30
   1d3b4:	e1a03009 	mov	r3, r9
   1d3b8:	e2499001 	sub	r9, r9, #1
   1d3bc:	0afffffa 	beq	1d3ac <_dtoa_r+0x142c>
   1d3c0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d3c4:	e59d9064 	ldr	r9, [sp, #100]	; 0x64
   1d3c8:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1d3cc:	eafffd00 	b	1c7d4 <_dtoa_r+0x854>
   1d3d0:	e1a0100b 	mov	r1, r11
   1d3d4:	e1a00006 	mov	r0, r6
   1d3d8:	eb000436 	bl	1e4b8 <__pow5mult>
   1d3dc:	e1a0b000 	mov	r11, r0
   1d3e0:	eafffc9c 	b	1c658 <_dtoa_r+0x6d8>
   1d3e4:	e59d4060 	ldr	r4, [sp, #96]	; 0x60
   1d3e8:	e3540000 	cmp	r4, #0
   1d3ec:	059d3070 	ldreq	r3, [sp, #112]	; 0x70
   1d3f0:	12833e43 	addne	r3, r3, #1072	; 0x430
   1d3f4:	12833003 	addne	r3, r3, #3
   1d3f8:	159d503c 	ldrne	r5, [sp, #60]	; 0x3c
   1d3fc:	059d503c 	ldreq	r5, [sp, #60]	; 0x3c
   1d400:	02633036 	rsbeq	r3, r3, #54	; 0x36
   1d404:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1d408:	eafffd2b 	b	1c8bc <_dtoa_r+0x93c>
   1d40c:	e1a03009 	mov	r3, r9
   1d410:	e3520000 	cmp	r2, #0
   1d414:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   1d418:	e1a04003 	mov	r4, r3
   1d41c:	da00000e 	ble	1d45c <_dtoa_r+0x14dc>
   1d420:	e1a0100b 	mov	r1, r11
   1d424:	e3a02001 	mov	r2, #1
   1d428:	e1a00006 	mov	r0, r6
   1d42c:	e58d300c 	str	r3, [sp, #12]
   1d430:	eb00045d 	bl	1e5ac <__lshift>
   1d434:	e1a01007 	mov	r1, r7
   1d438:	e1a0b000 	mov	r11, r0
   1d43c:	eb00049b 	bl	1e6b0 <__mcmp>
   1d440:	e3500000 	cmp	r0, #0
   1d444:	e59d300c 	ldr	r3, [sp, #12]
   1d448:	da000058 	ble	1d5b0 <_dtoa_r+0x1630>
   1d44c:	e3540039 	cmp	r4, #57	; 0x39
   1d450:	e59d4010 	ldr	r4, [sp, #16]
   1d454:	e2843031 	add	r3, r4, #49	; 0x31
   1d458:	0a000047 	beq	1d57c <_dtoa_r+0x15fc>
   1d45c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1d460:	e4c23001 	strb	r3, [r2], #1
   1d464:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d468:	e1a0a008 	mov	r10, r8
   1d46c:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1d470:	eafffccc 	b	1c7a8 <_dtoa_r+0x828>
   1d474:	e1a0c00b 	mov	r12, r11
   1d478:	e59d6068 	ldr	r6, [sp, #104]	; 0x68
   1d47c:	e59db058 	ldr	r11, [sp, #88]	; 0x58
   1d480:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d484:	eafffc1d 	b	1c500 <_dtoa_r+0x580>
   1d488:	e58d9024 	str	r9, [sp, #36]	; 0x24
   1d48c:	e2888001 	add	r8, r8, #1
   1d490:	e59d9064 	ldr	r9, [sp, #100]	; 0x64
   1d494:	eafffc40 	b	1c59c <_dtoa_r+0x61c>
   1d498:	e59d906c 	ldr	r9, [sp, #108]	; 0x6c
   1d49c:	e59db058 	ldr	r11, [sp, #88]	; 0x58
   1d4a0:	e59d6068 	ldr	r6, [sp, #104]	; 0x68
   1d4a4:	eafffb8f 	b	1c2e8 <_dtoa_r+0x368>
   1d4a8:	1a000001 	bne	1d4b4 <_dtoa_r+0x1534>
   1d4ac:	e3130001 	tst	r3, #1
   1d4b0:	1afffe41 	bne	1cdbc <_dtoa_r+0xe3c>
   1d4b4:	e1a0100c 	mov	r1, r12
   1d4b8:	e5512001 	ldrb	r2, [r1, #-1]
   1d4bc:	e3520030 	cmp	r2, #48	; 0x30
   1d4c0:	e1a03001 	mov	r3, r1
   1d4c4:	e2411001 	sub	r1, r1, #1
   1d4c8:	0afffffa 	beq	1d4b8 <_dtoa_r+0x1538>
   1d4cc:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d4d0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1d4d4:	eafffcb3 	b	1c7a8 <_dtoa_r+0x828>
   1d4d8:	e3a07000 	mov	r7, #0
   1d4dc:	e1a0a007 	mov	r10, r7
   1d4e0:	eafffe07 	b	1cd04 <_dtoa_r+0xd84>
   1d4e4:	e59a1004 	ldr	r1, [r10, #4]
   1d4e8:	e1a00006 	mov	r0, r6
   1d4ec:	eb000299 	bl	1df58 <_Balloc>
   1d4f0:	e59a2010 	ldr	r2, [r10, #16]
   1d4f4:	e2822002 	add	r2, r2, #2
   1d4f8:	e1a04000 	mov	r4, r0
   1d4fc:	e1a02102 	lsl	r2, r2, #2
   1d500:	e28a100c 	add	r1, r10, #12
   1d504:	e280000c 	add	r0, r0, #12
   1d508:	ebfff006 	bl	19528 <memcpy>
   1d50c:	e1a00006 	mov	r0, r6
   1d510:	e1a01004 	mov	r1, r4
   1d514:	e3a02001 	mov	r2, #1
   1d518:	eb000423 	bl	1e5ac <__lshift>
   1d51c:	e1a08000 	mov	r8, r0
   1d520:	eafffef8 	b	1d108 <_dtoa_r+0x1188>
   1d524:	e2833001 	add	r3, r3, #1
   1d528:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d52c:	e5c23000 	strb	r3, [r2]
   1d530:	e58d1024 	str	r1, [sp, #36]	; 0x24
   1d534:	eafffc9b 	b	1c7a8 <_dtoa_r+0x828>
   1d538:	e59d5010 	ldr	r5, [sp, #16]
   1d53c:	eafffc55 	b	1c698 <_dtoa_r+0x718>
   1d540:	e1a03009 	mov	r3, r9
   1d544:	e3530039 	cmp	r3, #57	; 0x39
   1d548:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   1d54c:	0a00000a 	beq	1d57c <_dtoa_r+0x15fc>
   1d550:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1d554:	e2833001 	add	r3, r3, #1
   1d558:	e4c23001 	strb	r3, [r2], #1
   1d55c:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d560:	e1a0a008 	mov	r10, r8
   1d564:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1d568:	eafffc8e 	b	1c7a8 <_dtoa_r+0x828>
   1d56c:	e1a03009 	mov	r3, r9
   1d570:	e1a0a008 	mov	r10, r8
   1d574:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   1d578:	eafffe02 	b	1cd88 <_dtoa_r+0xe08>
   1d57c:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
   1d580:	e3a03039 	mov	r3, #57	; 0x39
   1d584:	e4cc3001 	strb	r3, [r12], #1
   1d588:	e1a0a008 	mov	r10, r8
   1d58c:	eafffe0e 	b	1cdcc <_dtoa_r+0xe4c>
   1d590:	e1a03009 	mov	r3, r9
   1d594:	e3530039 	cmp	r3, #57	; 0x39
   1d598:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   1d59c:	0afffff6 	beq	1d57c <_dtoa_r+0x15fc>
   1d5a0:	e35a0000 	cmp	r10, #0
   1d5a4:	c59d4010 	ldrgt	r4, [sp, #16]
   1d5a8:	c2843031 	addgt	r3, r4, #49	; 0x31
   1d5ac:	eaffffaa 	b	1d45c <_dtoa_r+0x14dc>
   1d5b0:	1affffa9 	bne	1d45c <_dtoa_r+0x14dc>
   1d5b4:	e3130001 	tst	r3, #1
   1d5b8:	0affffa7 	beq	1d45c <_dtoa_r+0x14dc>
   1d5bc:	eaffffa2 	b	1d44c <_dtoa_r+0x14cc>
   1d5c0:	e3a08002 	mov	r8, #2
   1d5c4:	eafffd0e 	b	1ca04 <_dtoa_r+0xa84>
   1d5c8:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
   1d5cc:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d5d0:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1d5d4:	eafffc7e 	b	1c7d4 <_dtoa_r+0x854>
   1d5d8:	e3a03000 	mov	r3, #0
   1d5dc:	e1a0100a 	mov	r1, r10
   1d5e0:	e1a00006 	mov	r0, r6
   1d5e4:	e3a0200a 	mov	r2, #10
   1d5e8:	eb000284 	bl	1e000 <__multadd>
   1d5ec:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
   1d5f0:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
   1d5f4:	e35c0000 	cmp	r12, #0
   1d5f8:	c3a03000 	movgt	r3, #0
   1d5fc:	d3a03001 	movle	r3, #1
   1d600:	e3510002 	cmp	r1, #2
   1d604:	d3a03000 	movle	r3, #0
   1d608:	e3530000 	cmp	r3, #0
   1d60c:	e1a0a000 	mov	r10, r0
   1d610:	058dc038 	streq	r12, [sp, #56]	; 0x38
   1d614:	0afffeb1 	beq	1d0e0 <_dtoa_r+0x1160>
   1d618:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
   1d61c:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1d620:	eafffc4b 	b	1c754 <_dtoa_r+0x7d4>
   1d624:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
   1d628:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1d62c:	e59d9064 	ldr	r9, [sp, #100]	; 0x64
   1d630:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1d634:	eafffc66 	b	1c7d4 <_dtoa_r+0x854>
   1d638:	1263303c 	rsbne	r3, r3, #60	; 0x3c
   1d63c:	0afffc28 	beq	1c6e4 <_dtoa_r+0x764>
   1d640:	eafffc20 	b	1c6c8 <_dtoa_r+0x748>
   1d644:	e1a00000 	nop			; (mov r0, r0)

0001d648 <_setlocale_r>:
   1d648:	e92d4010 	push	{r4, lr}
   1d64c:	e2524000 	subs	r4, r2, #0
   1d650:	0a000004 	beq	1d668 <_setlocale_r+0x20>
   1d654:	e1a00004 	mov	r0, r4
   1d658:	e59f1048 	ldr	r1, [pc, #72]	; 1d6a8 <_setlocale_r+0x60>
   1d65c:	eb0005b0 	bl	1ed24 <strcmp>
   1d660:	e3500000 	cmp	r0, #0
   1d664:	1a000002 	bne	1d674 <_setlocale_r+0x2c>
   1d668:	e59f003c 	ldr	r0, [pc, #60]	; 1d6ac <_setlocale_r+0x64>
   1d66c:	e8bd4010 	pop	{r4, lr}
   1d670:	e12fff1e 	bx	lr
   1d674:	e1a00004 	mov	r0, r4
   1d678:	e59f102c 	ldr	r1, [pc, #44]	; 1d6ac <_setlocale_r+0x64>
   1d67c:	eb0005a8 	bl	1ed24 <strcmp>
   1d680:	e3500000 	cmp	r0, #0
   1d684:	0afffff7 	beq	1d668 <_setlocale_r+0x20>
   1d688:	e1a00004 	mov	r0, r4
   1d68c:	e59f101c 	ldr	r1, [pc, #28]	; 1d6b0 <_setlocale_r+0x68>
   1d690:	eb0005a3 	bl	1ed24 <strcmp>
   1d694:	e59f3010 	ldr	r3, [pc, #16]	; 1d6ac <_setlocale_r+0x64>
   1d698:	e3500000 	cmp	r0, #0
   1d69c:	01a00003 	moveq	r0, r3
   1d6a0:	13a00000 	movne	r0, #0
   1d6a4:	eafffff0 	b	1d66c <_setlocale_r+0x24>
   1d6a8:	00022870 	.word	0x00022870
   1d6ac:	0002280c 	.word	0x0002280c
   1d6b0:	00022788 	.word	0x00022788

0001d6b4 <__locale_charset>:
   1d6b4:	e59f0000 	ldr	r0, [pc]	; 1d6bc <__locale_charset+0x8>
   1d6b8:	e12fff1e 	bx	lr
   1d6bc:	00023018 	.word	0x00023018

0001d6c0 <__locale_mb_cur_max>:
   1d6c0:	e59f3004 	ldr	r3, [pc, #4]	; 1d6cc <__locale_mb_cur_max+0xc>
   1d6c4:	e5930020 	ldr	r0, [r3, #32]
   1d6c8:	e12fff1e 	bx	lr
   1d6cc:	00023018 	.word	0x00023018

0001d6d0 <__locale_msgcharset>:
   1d6d0:	e59f0000 	ldr	r0, [pc]	; 1d6d8 <__locale_msgcharset+0x8>
   1d6d4:	e12fff1e 	bx	lr
   1d6d8:	0002303c 	.word	0x0002303c

0001d6dc <__locale_cjk_lang>:
   1d6dc:	e3a00000 	mov	r0, #0
   1d6e0:	e12fff1e 	bx	lr

0001d6e4 <_localeconv_r>:
   1d6e4:	e59f0000 	ldr	r0, [pc]	; 1d6ec <_localeconv_r+0x8>
   1d6e8:	e12fff1e 	bx	lr
   1d6ec:	0002305c 	.word	0x0002305c

0001d6f0 <setlocale>:
   1d6f0:	e1a02001 	mov	r2, r1
   1d6f4:	e59f100c 	ldr	r1, [pc, #12]	; 1d708 <setlocale+0x18>
   1d6f8:	e1a03000 	mov	r3, r0
   1d6fc:	e5910000 	ldr	r0, [r1]
   1d700:	e1a01003 	mov	r1, r3
   1d704:	eaffffcf 	b	1d648 <_setlocale_r>
   1d708:	00022be8 	.word	0x00022be8

0001d70c <localeconv>:
   1d70c:	e59f0000 	ldr	r0, [pc]	; 1d714 <localeconv+0x8>
   1d710:	e12fff1e 	bx	lr
   1d714:	0002305c 	.word	0x0002305c

0001d718 <_malloc_r>:
   1d718:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1d71c:	e281500b 	add	r5, r1, #11
   1d720:	e3550016 	cmp	r5, #22
   1d724:	83c55007 	bichi	r5, r5, #7
   1d728:	81a03fa5 	lsrhi	r3, r5, #31
   1d72c:	93a03000 	movls	r3, #0
   1d730:	93a05010 	movls	r5, #16
   1d734:	e1550001 	cmp	r5, r1
   1d738:	21a01003 	movcs	r1, r3
   1d73c:	33831001 	orrcc	r1, r3, #1
   1d740:	e3510000 	cmp	r1, #0
   1d744:	13a0300c 	movne	r3, #12
   1d748:	e24dd00c 	sub	sp, sp, #12
   1d74c:	e1a06000 	mov	r6, r0
   1d750:	15803000 	strne	r3, [r0]
   1d754:	13a04000 	movne	r4, #0
   1d758:	1a000015 	bne	1d7b4 <_malloc_r+0x9c>
   1d75c:	eb0001fb 	bl	1df50 <__malloc_lock>
   1d760:	e3550f7e 	cmp	r5, #504	; 0x1f8
   1d764:	2a000016 	bcs	1d7c4 <_malloc_r+0xac>
   1d768:	e59f76b8 	ldr	r7, [pc, #1720]	; 1de28 <_malloc_r+0x710>
   1d76c:	e1a0e1a5 	lsr	lr, r5, #3
   1d770:	e087318e 	add	r3, r7, lr, lsl #3
   1d774:	e593400c 	ldr	r4, [r3, #12]
   1d778:	e1540003 	cmp	r4, r3
   1d77c:	0a00014b 	beq	1dcb0 <_malloc_r+0x598>
   1d780:	e5943004 	ldr	r3, [r4, #4]
   1d784:	e3c33003 	bic	r3, r3, #3
   1d788:	e0843003 	add	r3, r4, r3
   1d78c:	e5930004 	ldr	r0, [r3, #4]
   1d790:	e2841008 	add	r1, r4, #8
   1d794:	e8910006 	ldm	r1, {r1, r2}
   1d798:	e3800001 	orr	r0, r0, #1
   1d79c:	e5830004 	str	r0, [r3, #4]
   1d7a0:	e581200c 	str	r2, [r1, #12]
   1d7a4:	e5821008 	str	r1, [r2, #8]
   1d7a8:	e1a00006 	mov	r0, r6
   1d7ac:	eb0001e8 	bl	1df54 <__malloc_unlock>
   1d7b0:	e2844008 	add	r4, r4, #8
   1d7b4:	e1a00004 	mov	r0, r4
   1d7b8:	e28dd00c 	add	sp, sp, #12
   1d7bc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1d7c0:	e12fff1e 	bx	lr
   1d7c4:	e1b0e4a5 	lsrs	lr, r5, #9
   1d7c8:	01a0e1a5 	lsreq	lr, r5, #3
   1d7cc:	01a0108e 	lsleq	r1, lr, #1
   1d7d0:	1a000061 	bne	1d95c <_malloc_r+0x244>
   1d7d4:	e59f764c 	ldr	r7, [pc, #1612]	; 1de28 <_malloc_r+0x710>
   1d7d8:	e0871101 	add	r1, r7, r1, lsl #2
   1d7dc:	e591400c 	ldr	r4, [r1, #12]
   1d7e0:	e1510004 	cmp	r1, r4
   1d7e4:	1a000005 	bne	1d800 <_malloc_r+0xe8>
   1d7e8:	ea00000a 	b	1d818 <_malloc_r+0x100>
   1d7ec:	e3530000 	cmp	r3, #0
   1d7f0:	aa0000d7 	bge	1db54 <_malloc_r+0x43c>
   1d7f4:	e594400c 	ldr	r4, [r4, #12]
   1d7f8:	e1510004 	cmp	r1, r4
   1d7fc:	0a000005 	beq	1d818 <_malloc_r+0x100>
   1d800:	e5942004 	ldr	r2, [r4, #4]
   1d804:	e3c22003 	bic	r2, r2, #3
   1d808:	e0653002 	rsb	r3, r5, r2
   1d80c:	e353000f 	cmp	r3, #15
   1d810:	dafffff5 	ble	1d7ec <_malloc_r+0xd4>
   1d814:	e24ee001 	sub	lr, lr, #1
   1d818:	e28ee001 	add	lr, lr, #1
   1d81c:	e59f3604 	ldr	r3, [pc, #1540]	; 1de28 <_malloc_r+0x710>
   1d820:	e5974010 	ldr	r4, [r7, #16]
   1d824:	e2838008 	add	r8, r3, #8
   1d828:	e1540008 	cmp	r4, r8
   1d82c:	05931004 	ldreq	r1, [r3, #4]
   1d830:	0a000016 	beq	1d890 <_malloc_r+0x178>
   1d834:	e5942004 	ldr	r2, [r4, #4]
   1d838:	e3c22003 	bic	r2, r2, #3
   1d83c:	e0651002 	rsb	r1, r5, r2
   1d840:	e351000f 	cmp	r1, #15
   1d844:	ca0000f7 	bgt	1dc28 <_malloc_r+0x510>
   1d848:	e3510000 	cmp	r1, #0
   1d84c:	e5838014 	str	r8, [r3, #20]
   1d850:	e5838010 	str	r8, [r3, #16]
   1d854:	aa000046 	bge	1d974 <_malloc_r+0x25c>
   1d858:	e3520c02 	cmp	r2, #512	; 0x200
   1d85c:	2a0000d2 	bcs	1dbac <_malloc_r+0x494>
   1d860:	e5930004 	ldr	r0, [r3, #4]
   1d864:	e1a021a2 	lsr	r2, r2, #3
   1d868:	e1a01142 	asr	r1, r2, #2
   1d86c:	e3a0c001 	mov	r12, #1
   1d870:	e180111c 	orr	r1, r0, r12, lsl r1
   1d874:	e0832182 	add	r2, r3, r2, lsl #3
   1d878:	e5920008 	ldr	r0, [r2, #8]
   1d87c:	e584200c 	str	r2, [r4, #12]
   1d880:	e5840008 	str	r0, [r4, #8]
   1d884:	e5831004 	str	r1, [r3, #4]
   1d888:	e5824008 	str	r4, [r2, #8]
   1d88c:	e580400c 	str	r4, [r0, #12]
   1d890:	e1a0014e 	asr	r0, lr, #2
   1d894:	e3a03001 	mov	r3, #1
   1d898:	e1a00013 	lsl	r0, r3, r0
   1d89c:	e1500001 	cmp	r0, r1
   1d8a0:	8a00003b 	bhi	1d994 <_malloc_r+0x27c>
   1d8a4:	e1110000 	tst	r1, r0
   1d8a8:	1a000008 	bne	1d8d0 <_malloc_r+0x1b8>
   1d8ac:	e1a00310 	lsl	r0, r0, r3
   1d8b0:	e3cee003 	bic	lr, lr, #3
   1d8b4:	e1110000 	tst	r1, r0
   1d8b8:	e28ee004 	add	lr, lr, #4
   1d8bc:	1a000003 	bne	1d8d0 <_malloc_r+0x1b8>
   1d8c0:	e1a00080 	lsl	r0, r0, #1
   1d8c4:	e1110000 	tst	r1, r0
   1d8c8:	e28ee004 	add	lr, lr, #4
   1d8cc:	0afffffb 	beq	1d8c0 <_malloc_r+0x1a8>
   1d8d0:	e087a18e 	add	r10, r7, lr, lsl #3
   1d8d4:	e1a0c00a 	mov	r12, r10
   1d8d8:	e1a0400e 	mov	r4, lr
   1d8dc:	e59c300c 	ldr	r3, [r12, #12]
   1d8e0:	e15c0003 	cmp	r12, r3
   1d8e4:	1a000005 	bne	1d900 <_malloc_r+0x1e8>
   1d8e8:	ea0000db 	b	1dc5c <_malloc_r+0x544>
   1d8ec:	e3520000 	cmp	r2, #0
   1d8f0:	aa0000f4 	bge	1dcc8 <_malloc_r+0x5b0>
   1d8f4:	e593300c 	ldr	r3, [r3, #12]
   1d8f8:	e15c0003 	cmp	r12, r3
   1d8fc:	0a0000d6 	beq	1dc5c <_malloc_r+0x544>
   1d900:	e5931004 	ldr	r1, [r3, #4]
   1d904:	e3c11003 	bic	r1, r1, #3
   1d908:	e0652001 	rsb	r2, r5, r1
   1d90c:	e352000f 	cmp	r2, #15
   1d910:	dafffff5 	ble	1d8ec <_malloc_r+0x1d4>
   1d914:	e1a04003 	mov	r4, r3
   1d918:	e593000c 	ldr	r0, [r3, #12]
   1d91c:	e5b4c008 	ldr	r12, [r4, #8]!
   1d920:	e0831005 	add	r1, r3, r5
   1d924:	e382e001 	orr	lr, r2, #1
   1d928:	e3855001 	orr	r5, r5, #1
   1d92c:	e58c000c 	str	r0, [r12, #12]
   1d930:	e580c008 	str	r12, [r0, #8]
   1d934:	e5835004 	str	r5, [r3, #4]
   1d938:	e5871014 	str	r1, [r7, #20]
   1d93c:	e5871010 	str	r1, [r7, #16]
   1d940:	e581800c 	str	r8, [r1, #12]
   1d944:	e5818008 	str	r8, [r1, #8]
   1d948:	e581e004 	str	lr, [r1, #4]
   1d94c:	e7812002 	str	r2, [r1, r2]
   1d950:	e1a00006 	mov	r0, r6
   1d954:	eb00017e 	bl	1df54 <__malloc_unlock>
   1d958:	eaffff95 	b	1d7b4 <_malloc_r+0x9c>
   1d95c:	e35e0004 	cmp	lr, #4
   1d960:	8a000087 	bhi	1db84 <_malloc_r+0x46c>
   1d964:	e1a0e325 	lsr	lr, r5, #6
   1d968:	e28ee038 	add	lr, lr, #56	; 0x38
   1d96c:	e1a0108e 	lsl	r1, lr, #1
   1d970:	eaffff97 	b	1d7d4 <_malloc_r+0xbc>
   1d974:	e0842002 	add	r2, r4, r2
   1d978:	e5923004 	ldr	r3, [r2, #4]
   1d97c:	e3833001 	orr	r3, r3, #1
   1d980:	e5823004 	str	r3, [r2, #4]
   1d984:	e1a00006 	mov	r0, r6
   1d988:	eb000171 	bl	1df54 <__malloc_unlock>
   1d98c:	e2844008 	add	r4, r4, #8
   1d990:	eaffff87 	b	1d7b4 <_malloc_r+0x9c>
   1d994:	e5974008 	ldr	r4, [r7, #8]
   1d998:	e594a004 	ldr	r10, [r4, #4]
   1d99c:	e3caa003 	bic	r10, r10, #3
   1d9a0:	e155000a 	cmp	r5, r10
   1d9a4:	8a000002 	bhi	1d9b4 <_malloc_r+0x29c>
   1d9a8:	e065300a 	rsb	r3, r5, r10
   1d9ac:	e353000f 	cmp	r3, #15
   1d9b0:	ca00005d 	bgt	1db2c <_malloc_r+0x414>
   1d9b4:	e59f9470 	ldr	r9, [pc, #1136]	; 1de2c <_malloc_r+0x714>
   1d9b8:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
   1d9bc:	e599b000 	ldr	r11, [r9]
   1d9c0:	e3730001 	cmn	r3, #1
   1d9c4:	e085b00b 	add	r11, r5, r11
   1d9c8:	128bba01 	addne	r11, r11, #4096	; 0x1000
   1d9cc:	128bb00f 	addne	r11, r11, #15
   1d9d0:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
   1d9d4:	028bb010 	addeq	r11, r11, #16
   1d9d8:	13cbb00f 	bicne	r11, r11, #15
   1d9dc:	e084200a 	add	r2, r4, r10
   1d9e0:	e1a00006 	mov	r0, r6
   1d9e4:	e1a0100b 	mov	r1, r11
   1d9e8:	e58d2004 	str	r2, [sp, #4]
   1d9ec:	eb0004bc 	bl	1ece4 <_sbrk_r>
   1d9f0:	e3700001 	cmn	r0, #1
   1d9f4:	e1a08000 	mov	r8, r0
   1d9f8:	e59d2004 	ldr	r2, [sp, #4]
   1d9fc:	0a0000e2 	beq	1dd8c <_malloc_r+0x674>
   1da00:	e1520000 	cmp	r2, r0
   1da04:	8a0000bf 	bhi	1dd08 <_malloc_r+0x5f0>
   1da08:	e5993004 	ldr	r3, [r9, #4]
   1da0c:	e1520008 	cmp	r2, r8
   1da10:	e08b3003 	add	r3, r11, r3
   1da14:	e5893004 	str	r3, [r9, #4]
   1da18:	0a0000df 	beq	1dd9c <_malloc_r+0x684>
   1da1c:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
   1da20:	e3710001 	cmn	r1, #1
   1da24:	10622008 	rsbne	r2, r2, r8
   1da28:	059f33f8 	ldreq	r3, [pc, #1016]	; 1de28 <_malloc_r+0x710>
   1da2c:	10833002 	addne	r3, r3, r2
   1da30:	05838408 	streq	r8, [r3, #1032]	; 0x408
   1da34:	15893004 	strne	r3, [r9, #4]
   1da38:	e2183007 	ands	r3, r8, #7
   1da3c:	12632008 	rsbne	r2, r3, #8
   1da40:	10888002 	addne	r8, r8, r2
   1da44:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
   1da48:	12832008 	addne	r2, r3, #8
   1da4c:	e088300b 	add	r3, r8, r11
   1da50:	03a02a01 	moveq	r2, #4096	; 0x1000
   1da54:	e1a03a03 	lsl	r3, r3, #20
   1da58:	e042ba23 	sub	r11, r2, r3, lsr #20
   1da5c:	e1a0100b 	mov	r1, r11
   1da60:	e1a00006 	mov	r0, r6
   1da64:	eb00049e 	bl	1ece4 <_sbrk_r>
   1da68:	e3700001 	cmn	r0, #1
   1da6c:	10682000 	rsbne	r2, r8, r0
   1da70:	e5993004 	ldr	r3, [r9, #4]
   1da74:	108b2002 	addne	r2, r11, r2
   1da78:	03a0b000 	moveq	r11, #0
   1da7c:	13822001 	orrne	r2, r2, #1
   1da80:	03a02001 	moveq	r2, #1
   1da84:	e08b3003 	add	r3, r11, r3
   1da88:	e1540007 	cmp	r4, r7
   1da8c:	e5893004 	str	r3, [r9, #4]
   1da90:	e5878008 	str	r8, [r7, #8]
   1da94:	e5882004 	str	r2, [r8, #4]
   1da98:	0a00000d 	beq	1dad4 <_malloc_r+0x3bc>
   1da9c:	e35a000f 	cmp	r10, #15
   1daa0:	9a0000ac 	bls	1dd58 <_malloc_r+0x640>
   1daa4:	e594c004 	ldr	r12, [r4, #4]
   1daa8:	e24a200c 	sub	r2, r10, #12
   1daac:	e3c22007 	bic	r2, r2, #7
   1dab0:	e20cc001 	and	r12, r12, #1
   1dab4:	e0841002 	add	r1, r4, r2
   1dab8:	e3a00005 	mov	r0, #5
   1dabc:	e182c00c 	orr	r12, r2, r12
   1dac0:	e352000f 	cmp	r2, #15
   1dac4:	e584c004 	str	r12, [r4, #4]
   1dac8:	e5810004 	str	r0, [r1, #4]
   1dacc:	e5810008 	str	r0, [r1, #8]
   1dad0:	8a0000b8 	bhi	1ddb8 <_malloc_r+0x6a0>
   1dad4:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
   1dad8:	e1530002 	cmp	r3, r2
   1dadc:	859f2348 	ldrhi	r2, [pc, #840]	; 1de2c <_malloc_r+0x714>
   1dae0:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
   1dae4:	e5992030 	ldr	r2, [r9, #48]	; 0x30
   1dae8:	e5974008 	ldr	r4, [r7, #8]
   1daec:	e1530002 	cmp	r3, r2
   1daf0:	95943004 	ldrls	r3, [r4, #4]
   1daf4:	85942004 	ldrhi	r2, [r4, #4]
   1daf8:	859f132c 	ldrhi	r1, [pc, #812]	; 1de2c <_malloc_r+0x714>
   1dafc:	93c33003 	bicls	r3, r3, #3
   1db00:	85813030 	strhi	r3, [r1, #48]	; 0x30
   1db04:	83c23003 	bichi	r3, r2, #3
   1db08:	e1550003 	cmp	r5, r3
   1db0c:	e0653003 	rsb	r3, r5, r3
   1db10:	8a000001 	bhi	1db1c <_malloc_r+0x404>
   1db14:	e353000f 	cmp	r3, #15
   1db18:	ca000003 	bgt	1db2c <_malloc_r+0x414>
   1db1c:	e1a00006 	mov	r0, r6
   1db20:	eb00010b 	bl	1df54 <__malloc_unlock>
   1db24:	e3a04000 	mov	r4, #0
   1db28:	eaffff21 	b	1d7b4 <_malloc_r+0x9c>
   1db2c:	e0842005 	add	r2, r4, r5
   1db30:	e3833001 	orr	r3, r3, #1
   1db34:	e3855001 	orr	r5, r5, #1
   1db38:	e5845004 	str	r5, [r4, #4]
   1db3c:	e1a00006 	mov	r0, r6
   1db40:	e5823004 	str	r3, [r2, #4]
   1db44:	e5872008 	str	r2, [r7, #8]
   1db48:	e2844008 	add	r4, r4, #8
   1db4c:	eb000100 	bl	1df54 <__malloc_unlock>
   1db50:	eaffff17 	b	1d7b4 <_malloc_r+0x9c>
   1db54:	e0842002 	add	r2, r4, r2
   1db58:	e5920004 	ldr	r0, [r2, #4]
   1db5c:	e2841008 	add	r1, r4, #8
   1db60:	e891000a 	ldm	r1, {r1, r3}
   1db64:	e3800001 	orr	r0, r0, #1
   1db68:	e5820004 	str	r0, [r2, #4]
   1db6c:	e581300c 	str	r3, [r1, #12]
   1db70:	e5831008 	str	r1, [r3, #8]
   1db74:	e1a00006 	mov	r0, r6
   1db78:	eb0000f5 	bl	1df54 <__malloc_unlock>
   1db7c:	e2844008 	add	r4, r4, #8
   1db80:	eaffff0b 	b	1d7b4 <_malloc_r+0x9c>
   1db84:	e35e0014 	cmp	lr, #20
   1db88:	928ee05b 	addls	lr, lr, #91	; 0x5b
   1db8c:	91a0108e 	lslls	r1, lr, #1
   1db90:	9affff0f 	bls	1d7d4 <_malloc_r+0xbc>
   1db94:	e35e0054 	cmp	lr, #84	; 0x54
   1db98:	8a000061 	bhi	1dd24 <_malloc_r+0x60c>
   1db9c:	e1a0e625 	lsr	lr, r5, #12
   1dba0:	e28ee06e 	add	lr, lr, #110	; 0x6e
   1dba4:	e1a0108e 	lsl	r1, lr, #1
   1dba8:	eaffff09 	b	1d7d4 <_malloc_r+0xbc>
   1dbac:	e1a034a2 	lsr	r3, r2, #9
   1dbb0:	e3530004 	cmp	r3, #4
   1dbb4:	9a00004f 	bls	1dcf8 <_malloc_r+0x5e0>
   1dbb8:	e3530014 	cmp	r3, #20
   1dbbc:	9283a05b 	addls	r10, r3, #91	; 0x5b
   1dbc0:	91a0008a 	lslls	r0, r10, #1
   1dbc4:	9a000004 	bls	1dbdc <_malloc_r+0x4c4>
   1dbc8:	e3530054 	cmp	r3, #84	; 0x54
   1dbcc:	8a00007f 	bhi	1ddd0 <_malloc_r+0x6b8>
   1dbd0:	e1a0a622 	lsr	r10, r2, #12
   1dbd4:	e28aa06e 	add	r10, r10, #110	; 0x6e
   1dbd8:	e1a0008a 	lsl	r0, r10, #1
   1dbdc:	e0870100 	add	r0, r7, r0, lsl #2
   1dbe0:	e5903008 	ldr	r3, [r0, #8]
   1dbe4:	e1530000 	cmp	r3, r0
   1dbe8:	e59fc238 	ldr	r12, [pc, #568]	; 1de28 <_malloc_r+0x710>
   1dbec:	0a000052 	beq	1dd3c <_malloc_r+0x624>
   1dbf0:	e5931004 	ldr	r1, [r3, #4]
   1dbf4:	e3c11003 	bic	r1, r1, #3
   1dbf8:	e1520001 	cmp	r2, r1
   1dbfc:	2a000002 	bcs	1dc0c <_malloc_r+0x4f4>
   1dc00:	e5933008 	ldr	r3, [r3, #8]
   1dc04:	e1500003 	cmp	r0, r3
   1dc08:	1afffff8 	bne	1dbf0 <_malloc_r+0x4d8>
   1dc0c:	e593200c 	ldr	r2, [r3, #12]
   1dc10:	e5971004 	ldr	r1, [r7, #4]
   1dc14:	e584200c 	str	r2, [r4, #12]
   1dc18:	e5843008 	str	r3, [r4, #8]
   1dc1c:	e583400c 	str	r4, [r3, #12]
   1dc20:	e5824008 	str	r4, [r2, #8]
   1dc24:	eaffff19 	b	1d890 <_malloc_r+0x178>
   1dc28:	e0842005 	add	r2, r4, r5
   1dc2c:	e3810001 	orr	r0, r1, #1
   1dc30:	e3855001 	orr	r5, r5, #1
   1dc34:	e5845004 	str	r5, [r4, #4]
   1dc38:	e5832014 	str	r2, [r3, #20]
   1dc3c:	e5832010 	str	r2, [r3, #16]
   1dc40:	e582800c 	str	r8, [r2, #12]
   1dc44:	e9820101 	stmib	r2, {r0, r8}
   1dc48:	e7821001 	str	r1, [r2, r1]
   1dc4c:	e1a00006 	mov	r0, r6
   1dc50:	eb0000bf 	bl	1df54 <__malloc_unlock>
   1dc54:	e2844008 	add	r4, r4, #8
   1dc58:	eafffed5 	b	1d7b4 <_malloc_r+0x9c>
   1dc5c:	e2844001 	add	r4, r4, #1
   1dc60:	e3140003 	tst	r4, #3
   1dc64:	e28cc008 	add	r12, r12, #8
   1dc68:	1affff1b 	bne	1d8dc <_malloc_r+0x1c4>
   1dc6c:	e31e0003 	tst	lr, #3
   1dc70:	e24a3008 	sub	r3, r10, #8
   1dc74:	0a000062 	beq	1de04 <_malloc_r+0x6ec>
   1dc78:	e59aa000 	ldr	r10, [r10]
   1dc7c:	e15a0003 	cmp	r10, r3
   1dc80:	e24ee001 	sub	lr, lr, #1
   1dc84:	0afffff8 	beq	1dc6c <_malloc_r+0x554>
   1dc88:	e5973004 	ldr	r3, [r7, #4]
   1dc8c:	e1a00080 	lsl	r0, r0, #1
   1dc90:	e1500003 	cmp	r0, r3
   1dc94:	8affff3e 	bhi	1d994 <_malloc_r+0x27c>
   1dc98:	e3500000 	cmp	r0, #0
   1dc9c:	0affff3c 	beq	1d994 <_malloc_r+0x27c>
   1dca0:	e1130000 	tst	r3, r0
   1dca4:	0a00005a 	beq	1de14 <_malloc_r+0x6fc>
   1dca8:	e1a0e004 	mov	lr, r4
   1dcac:	eaffff07 	b	1d8d0 <_malloc_r+0x1b8>
   1dcb0:	e2843008 	add	r3, r4, #8
   1dcb4:	e5944014 	ldr	r4, [r4, #20]
   1dcb8:	e1530004 	cmp	r3, r4
   1dcbc:	028ee002 	addeq	lr, lr, #2
   1dcc0:	0afffed5 	beq	1d81c <_malloc_r+0x104>
   1dcc4:	eafffead 	b	1d780 <_malloc_r+0x68>
   1dcc8:	e0831001 	add	r1, r3, r1
   1dccc:	e5910004 	ldr	r0, [r1, #4]
   1dcd0:	e1a04003 	mov	r4, r3
   1dcd4:	e5b42008 	ldr	r2, [r4, #8]!
   1dcd8:	e593300c 	ldr	r3, [r3, #12]
   1dcdc:	e3800001 	orr	r0, r0, #1
   1dce0:	e5810004 	str	r0, [r1, #4]
   1dce4:	e582300c 	str	r3, [r2, #12]
   1dce8:	e5832008 	str	r2, [r3, #8]
   1dcec:	e1a00006 	mov	r0, r6
   1dcf0:	eb000097 	bl	1df54 <__malloc_unlock>
   1dcf4:	eafffeae 	b	1d7b4 <_malloc_r+0x9c>
   1dcf8:	e1a0a322 	lsr	r10, r2, #6
   1dcfc:	e28aa038 	add	r10, r10, #56	; 0x38
   1dd00:	e1a0008a 	lsl	r0, r10, #1
   1dd04:	eaffffb4 	b	1dbdc <_malloc_r+0x4c4>
   1dd08:	e1540007 	cmp	r4, r7
   1dd0c:	0affff3d 	beq	1da08 <_malloc_r+0x2f0>
   1dd10:	e59f3110 	ldr	r3, [pc, #272]	; 1de28 <_malloc_r+0x710>
   1dd14:	e5934008 	ldr	r4, [r3, #8]
   1dd18:	e5943004 	ldr	r3, [r4, #4]
   1dd1c:	e3c33003 	bic	r3, r3, #3
   1dd20:	eaffff78 	b	1db08 <_malloc_r+0x3f0>
   1dd24:	e35e0f55 	cmp	lr, #340	; 0x154
   1dd28:	8a00000f 	bhi	1dd6c <_malloc_r+0x654>
   1dd2c:	e1a0e7a5 	lsr	lr, r5, #15
   1dd30:	e28ee077 	add	lr, lr, #119	; 0x77
   1dd34:	e1a0108e 	lsl	r1, lr, #1
   1dd38:	eafffea5 	b	1d7d4 <_malloc_r+0xbc>
   1dd3c:	e59c2004 	ldr	r2, [r12, #4]
   1dd40:	e1a0a14a 	asr	r10, r10, #2
   1dd44:	e3a01001 	mov	r1, #1
   1dd48:	e1821a11 	orr	r1, r2, r1, lsl r10
   1dd4c:	e1a02003 	mov	r2, r3
   1dd50:	e58c1004 	str	r1, [r12, #4]
   1dd54:	eaffffae 	b	1dc14 <_malloc_r+0x4fc>
   1dd58:	e3a03001 	mov	r3, #1
   1dd5c:	e5883004 	str	r3, [r8, #4]
   1dd60:	e1a04008 	mov	r4, r8
   1dd64:	e3a03000 	mov	r3, #0
   1dd68:	eaffff66 	b	1db08 <_malloc_r+0x3f0>
   1dd6c:	e59f30bc 	ldr	r3, [pc, #188]	; 1de30 <_malloc_r+0x718>
   1dd70:	e15e0003 	cmp	lr, r3
   1dd74:	91a0e925 	lsrls	lr, r5, #18
   1dd78:	928ee07c 	addls	lr, lr, #124	; 0x7c
   1dd7c:	91a0108e 	lslls	r1, lr, #1
   1dd80:	83a010fc 	movhi	r1, #252	; 0xfc
   1dd84:	83a0e07e 	movhi	lr, #126	; 0x7e
   1dd88:	eafffe91 	b	1d7d4 <_malloc_r+0xbc>
   1dd8c:	e5974008 	ldr	r4, [r7, #8]
   1dd90:	e5943004 	ldr	r3, [r4, #4]
   1dd94:	e3c33003 	bic	r3, r3, #3
   1dd98:	eaffff5a 	b	1db08 <_malloc_r+0x3f0>
   1dd9c:	e1b01a02 	lsls	r1, r2, #20
   1dda0:	1affff1d 	bne	1da1c <_malloc_r+0x304>
   1dda4:	e5972008 	ldr	r2, [r7, #8]
   1dda8:	e08b100a 	add	r1, r11, r10
   1ddac:	e3811001 	orr	r1, r1, #1
   1ddb0:	e5821004 	str	r1, [r2, #4]
   1ddb4:	eaffff46 	b	1dad4 <_malloc_r+0x3bc>
   1ddb8:	e1a00006 	mov	r0, r6
   1ddbc:	e2841008 	add	r1, r4, #8
   1ddc0:	eb000950 	bl	20308 <_free_r>
   1ddc4:	e59f3060 	ldr	r3, [pc, #96]	; 1de2c <_malloc_r+0x714>
   1ddc8:	e5933004 	ldr	r3, [r3, #4]
   1ddcc:	eaffff40 	b	1dad4 <_malloc_r+0x3bc>
   1ddd0:	e3530f55 	cmp	r3, #340	; 0x154
   1ddd4:	91a0a7a2 	lsrls	r10, r2, #15
   1ddd8:	928aa077 	addls	r10, r10, #119	; 0x77
   1dddc:	91a0008a 	lslls	r0, r10, #1
   1dde0:	9affff7d 	bls	1dbdc <_malloc_r+0x4c4>
   1dde4:	e59f1044 	ldr	r1, [pc, #68]	; 1de30 <_malloc_r+0x718>
   1dde8:	e1530001 	cmp	r3, r1
   1ddec:	91a0a922 	lsrls	r10, r2, #18
   1ddf0:	928aa07c 	addls	r10, r10, #124	; 0x7c
   1ddf4:	91a0008a 	lslls	r0, r10, #1
   1ddf8:	83a000fc 	movhi	r0, #252	; 0xfc
   1ddfc:	83a0a07e 	movhi	r10, #126	; 0x7e
   1de00:	eaffff75 	b	1dbdc <_malloc_r+0x4c4>
   1de04:	e5973004 	ldr	r3, [r7, #4]
   1de08:	e1c33000 	bic	r3, r3, r0
   1de0c:	e5873004 	str	r3, [r7, #4]
   1de10:	eaffff9d 	b	1dc8c <_malloc_r+0x574>
   1de14:	e1a00080 	lsl	r0, r0, #1
   1de18:	e1130000 	tst	r3, r0
   1de1c:	e2844004 	add	r4, r4, #4
   1de20:	1affffa0 	bne	1dca8 <_malloc_r+0x590>
   1de24:	eafffffa 	b	1de14 <_malloc_r+0x6fc>
   1de28:	00023094 	.word	0x00023094
   1de2c:	26758c50 	.word	0x26758c50
   1de30:	00000554 	.word	0x00000554

0001de34 <memchr>:
   1de34:	e3100003 	tst	r0, #3
   1de38:	e92d0070 	push	{r4, r5, r6}
   1de3c:	e20110ff 	and	r1, r1, #255	; 0xff
   1de40:	0a00003c 	beq	1df38 <memchr+0x104>
   1de44:	e3520000 	cmp	r2, #0
   1de48:	e242c001 	sub	r12, r2, #1
   1de4c:	0a00003b 	beq	1df40 <memchr+0x10c>
   1de50:	e5d03000 	ldrb	r3, [r0]
   1de54:	e1530001 	cmp	r3, r1
   1de58:	0a00001f 	beq	1dedc <memchr+0xa8>
   1de5c:	e2803001 	add	r3, r0, #1
   1de60:	ea000006 	b	1de80 <memchr+0x4c>
   1de64:	e35c0000 	cmp	r12, #0
   1de68:	0a00001d 	beq	1dee4 <memchr+0xb0>
   1de6c:	e5d02000 	ldrb	r2, [r0]
   1de70:	e1520001 	cmp	r2, r1
   1de74:	e2833001 	add	r3, r3, #1
   1de78:	e24cc001 	sub	r12, r12, #1
   1de7c:	0a000016 	beq	1dedc <memchr+0xa8>
   1de80:	e3130003 	tst	r3, #3
   1de84:	e1a00003 	mov	r0, r3
   1de88:	1afffff5 	bne	1de64 <memchr+0x30>
   1de8c:	e35c0003 	cmp	r12, #3
   1de90:	8a000015 	bhi	1deec <memchr+0xb8>
   1de94:	e35c0000 	cmp	r12, #0
   1de98:	e24c4001 	sub	r4, r12, #1
   1de9c:	0a000010 	beq	1dee4 <memchr+0xb0>
   1dea0:	e5d03000 	ldrb	r3, [r0]
   1dea4:	e1530001 	cmp	r3, r1
   1dea8:	0a00000b 	beq	1dedc <memchr+0xa8>
   1deac:	e2802001 	add	r2, r0, #1
   1deb0:	e3a03000 	mov	r3, #0
   1deb4:	ea000004 	b	1decc <memchr+0x98>
   1deb8:	e5d0c000 	ldrb	r12, [r0]
   1debc:	e15c0001 	cmp	r12, r1
   1dec0:	e2822001 	add	r2, r2, #1
   1dec4:	e2833001 	add	r3, r3, #1
   1dec8:	0a000003 	beq	1dedc <memchr+0xa8>
   1decc:	e1540003 	cmp	r4, r3
   1ded0:	e1a00002 	mov	r0, r2
   1ded4:	1afffff7 	bne	1deb8 <memchr+0x84>
   1ded8:	e3a00000 	mov	r0, #0
   1dedc:	e8bd0070 	pop	{r4, r5, r6}
   1dee0:	e12fff1e 	bx	lr
   1dee4:	e1a0000c 	mov	r0, r12
   1dee8:	eafffffb 	b	1dedc <memchr+0xa8>
   1deec:	e1816401 	orr	r6, r1, r1, lsl #8
   1def0:	e1866806 	orr	r6, r6, r6, lsl #16
   1def4:	e5903000 	ldr	r3, [r0]
   1def8:	e59f4048 	ldr	r4, [pc, #72]	; 1df48 <memchr+0x114>
   1defc:	e0263003 	eor	r3, r6, r3
   1df00:	e0834004 	add	r4, r3, r4
   1df04:	e59f2040 	ldr	r2, [pc, #64]	; 1df4c <memchr+0x118>
   1df08:	e1c44003 	bic	r4, r4, r3
   1df0c:	e0042002 	and	r2, r4, r2
   1df10:	e3520000 	cmp	r2, #0
   1df14:	e1a05000 	mov	r5, r0
   1df18:	e2800004 	add	r0, r0, #4
   1df1c:	1a000003 	bne	1df30 <memchr+0xfc>
   1df20:	e24cc004 	sub	r12, r12, #4
   1df24:	e35c0003 	cmp	r12, #3
   1df28:	8afffff1 	bhi	1def4 <memchr+0xc0>
   1df2c:	eaffffd8 	b	1de94 <memchr+0x60>
   1df30:	e1a00005 	mov	r0, r5
   1df34:	eaffffd6 	b	1de94 <memchr+0x60>
   1df38:	e1a0c002 	mov	r12, r2
   1df3c:	eaffffd2 	b	1de8c <memchr+0x58>
   1df40:	e1a00002 	mov	r0, r2
   1df44:	eaffffe4 	b	1dedc <memchr+0xa8>
   1df48:	fefefeff 	.word	0xfefefeff
   1df4c:	80808080 	.word	0x80808080

0001df50 <__malloc_lock>:
   1df50:	e12fff1e 	bx	lr

0001df54 <__malloc_unlock>:
   1df54:	e12fff1e 	bx	lr

0001df58 <_Balloc>:
   1df58:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1df5c:	e3530000 	cmp	r3, #0
   1df60:	e92d4070 	push	{r4, r5, r6, lr}
   1df64:	e1a05000 	mov	r5, r0
   1df68:	e1a04001 	mov	r4, r1
   1df6c:	0a000009 	beq	1df98 <_Balloc+0x40>
   1df70:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   1df74:	e3500000 	cmp	r0, #0
   1df78:	0a00000f 	beq	1dfbc <_Balloc+0x64>
   1df7c:	e5902000 	ldr	r2, [r0]
   1df80:	e7832104 	str	r2, [r3, r4, lsl #2]
   1df84:	e3a03000 	mov	r3, #0
   1df88:	e5803010 	str	r3, [r0, #16]
   1df8c:	e580300c 	str	r3, [r0, #12]
   1df90:	e8bd4070 	pop	{r4, r5, r6, lr}
   1df94:	e12fff1e 	bx	lr
   1df98:	e3a01004 	mov	r1, #4
   1df9c:	e3a02021 	mov	r2, #33	; 0x21
   1dfa0:	eb000874 	bl	20178 <_calloc_r>
   1dfa4:	e3500000 	cmp	r0, #0
   1dfa8:	e1a03000 	mov	r3, r0
   1dfac:	e585004c 	str	r0, [r5, #76]	; 0x4c
   1dfb0:	1affffee 	bne	1df70 <_Balloc+0x18>
   1dfb4:	e3a00000 	mov	r0, #0
   1dfb8:	eafffff4 	b	1df90 <_Balloc+0x38>
   1dfbc:	e3a01001 	mov	r1, #1
   1dfc0:	e1a06411 	lsl	r6, r1, r4
   1dfc4:	e2862005 	add	r2, r6, #5
   1dfc8:	e1a00005 	mov	r0, r5
   1dfcc:	e1a02102 	lsl	r2, r2, #2
   1dfd0:	eb000868 	bl	20178 <_calloc_r>
   1dfd4:	e3500000 	cmp	r0, #0
   1dfd8:	0afffff5 	beq	1dfb4 <_Balloc+0x5c>
   1dfdc:	e9800050 	stmib	r0, {r4, r6}
   1dfe0:	eaffffe7 	b	1df84 <_Balloc+0x2c>

0001dfe4 <_Bfree>:
   1dfe4:	e3510000 	cmp	r1, #0
   1dfe8:	1590304c 	ldrne	r3, [r0, #76]	; 0x4c
   1dfec:	15912004 	ldrne	r2, [r1, #4]
   1dff0:	17930102 	ldrne	r0, [r3, r2, lsl #2]
   1dff4:	15810000 	strne	r0, [r1]
   1dff8:	17831102 	strne	r1, [r3, r2, lsl #2]
   1dffc:	e12fff1e 	bx	lr

0001e000 <__multadd>:
   1e000:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
   1e004:	e5917010 	ldr	r7, [r1, #16]
   1e008:	e24dd00c 	sub	sp, sp, #12
   1e00c:	e1a08001 	mov	r8, r1
   1e010:	e1a0a000 	mov	r10, r0
   1e014:	e2814014 	add	r4, r1, #20
   1e018:	e3a0c000 	mov	r12, #0
   1e01c:	e5946000 	ldr	r6, [r4]
   1e020:	e1a05806 	lsl	r5, r6, #16
   1e024:	e1a05825 	lsr	r5, r5, #16
   1e028:	e0253592 	mla	r5, r2, r5, r3
   1e02c:	e1a03826 	lsr	r3, r6, #16
   1e030:	e0030392 	mul	r3, r2, r3
   1e034:	e1a01805 	lsl	r1, r5, #16
   1e038:	e0833825 	add	r3, r3, r5, lsr #16
   1e03c:	e1a01821 	lsr	r1, r1, #16
   1e040:	e28cc001 	add	r12, r12, #1
   1e044:	e0811803 	add	r1, r1, r3, lsl #16
   1e048:	e157000c 	cmp	r7, r12
   1e04c:	e1a03823 	lsr	r3, r3, #16
   1e050:	e4841004 	str	r1, [r4], #4
   1e054:	cafffff0 	bgt	1e01c <__multadd+0x1c>
   1e058:	e3530000 	cmp	r3, #0
   1e05c:	0a000006 	beq	1e07c <__multadd+0x7c>
   1e060:	e5982008 	ldr	r2, [r8, #8]
   1e064:	e1570002 	cmp	r7, r2
   1e068:	aa000007 	bge	1e08c <__multadd+0x8c>
   1e06c:	e0882107 	add	r2, r8, r7, lsl #2
   1e070:	e2877001 	add	r7, r7, #1
   1e074:	e5823014 	str	r3, [r2, #20]
   1e078:	e5887010 	str	r7, [r8, #16]
   1e07c:	e1a00008 	mov	r0, r8
   1e080:	e28dd00c 	add	sp, sp, #12
   1e084:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, r10, lr}
   1e088:	e12fff1e 	bx	lr
   1e08c:	e5981004 	ldr	r1, [r8, #4]
   1e090:	e1a0000a 	mov	r0, r10
   1e094:	e2811001 	add	r1, r1, #1
   1e098:	e58d3004 	str	r3, [sp, #4]
   1e09c:	ebffffad 	bl	1df58 <_Balloc>
   1e0a0:	e5982010 	ldr	r2, [r8, #16]
   1e0a4:	e2822002 	add	r2, r2, #2
   1e0a8:	e288100c 	add	r1, r8, #12
   1e0ac:	e1a04000 	mov	r4, r0
   1e0b0:	e1a02102 	lsl	r2, r2, #2
   1e0b4:	e280000c 	add	r0, r0, #12
   1e0b8:	ebffed1a 	bl	19528 <memcpy>
   1e0bc:	e5981004 	ldr	r1, [r8, #4]
   1e0c0:	e59a204c 	ldr	r2, [r10, #76]	; 0x4c
   1e0c4:	e7920101 	ldr	r0, [r2, r1, lsl #2]
   1e0c8:	e59d3004 	ldr	r3, [sp, #4]
   1e0cc:	e5880000 	str	r0, [r8]
   1e0d0:	e7828101 	str	r8, [r2, r1, lsl #2]
   1e0d4:	e1a08004 	mov	r8, r4
   1e0d8:	eaffffe3 	b	1e06c <__multadd+0x6c>

0001e0dc <__s2b>:
   1e0dc:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
   1e0e0:	e283c008 	add	r12, r3, #8
   1e0e4:	e1a07003 	mov	r7, r3
   1e0e8:	e59f30d8 	ldr	r3, [pc, #216]	; 1e1c8 <__s2b+0xec>
   1e0ec:	e0c3e39c 	smull	lr, r3, r12, r3
   1e0f0:	e1a0cfcc 	asr	r12, r12, #31
   1e0f4:	e06c30c3 	rsb	r3, r12, r3, asr #1
   1e0f8:	e3530001 	cmp	r3, #1
   1e0fc:	e1a05000 	mov	r5, r0
   1e100:	e1a04001 	mov	r4, r1
   1e104:	e1a08002 	mov	r8, r2
   1e108:	da00002c 	ble	1e1c0 <__s2b+0xe4>
   1e10c:	e3a0c001 	mov	r12, #1
   1e110:	e3a01000 	mov	r1, #0
   1e114:	e1a0c08c 	lsl	r12, r12, #1
   1e118:	e153000c 	cmp	r3, r12
   1e11c:	e2811001 	add	r1, r1, #1
   1e120:	cafffffb 	bgt	1e114 <__s2b+0x38>
   1e124:	e1a00005 	mov	r0, r5
   1e128:	ebffff8a 	bl	1df58 <_Balloc>
   1e12c:	e59d3020 	ldr	r3, [sp, #32]
   1e130:	e3580009 	cmp	r8, #9
   1e134:	e5803014 	str	r3, [r0, #20]
   1e138:	e3a03001 	mov	r3, #1
   1e13c:	e1a01000 	mov	r1, r0
   1e140:	e5803010 	str	r3, [r0, #16]
   1e144:	d284400a 	addle	r4, r4, #10
   1e148:	d3a08009 	movle	r8, #9
   1e14c:	da00000c 	ble	1e184 <__s2b+0xa8>
   1e150:	e284a009 	add	r10, r4, #9
   1e154:	e1a0600a 	mov	r6, r10
   1e158:	e0844008 	add	r4, r4, r8
   1e15c:	e4d63001 	ldrb	r3, [r6], #1
   1e160:	e1a00005 	mov	r0, r5
   1e164:	e3a0200a 	mov	r2, #10
   1e168:	e2433030 	sub	r3, r3, #48	; 0x30
   1e16c:	ebffffa3 	bl	1e000 <__multadd>
   1e170:	e1560004 	cmp	r6, r4
   1e174:	e1a01000 	mov	r1, r0
   1e178:	1afffff7 	bne	1e15c <__s2b+0x80>
   1e17c:	e08a4008 	add	r4, r10, r8
   1e180:	e2444008 	sub	r4, r4, #8
   1e184:	e1570008 	cmp	r7, r8
   1e188:	da000009 	ble	1e1b4 <__s2b+0xd8>
   1e18c:	e0687007 	rsb	r7, r8, r7
   1e190:	e0847007 	add	r7, r4, r7
   1e194:	e4d43001 	ldrb	r3, [r4], #1
   1e198:	e1a00005 	mov	r0, r5
   1e19c:	e3a0200a 	mov	r2, #10
   1e1a0:	e2433030 	sub	r3, r3, #48	; 0x30
   1e1a4:	ebffff95 	bl	1e000 <__multadd>
   1e1a8:	e1540007 	cmp	r4, r7
   1e1ac:	e1a01000 	mov	r1, r0
   1e1b0:	1afffff7 	bne	1e194 <__s2b+0xb8>
   1e1b4:	e1a00001 	mov	r0, r1
   1e1b8:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
   1e1bc:	e12fff1e 	bx	lr
   1e1c0:	e3a01000 	mov	r1, #0
   1e1c4:	eaffffd6 	b	1e124 <__s2b+0x48>
   1e1c8:	38e38e39 	.word	0x38e38e39

0001e1cc <__hi0bits>:
   1e1cc:	e1b02820 	lsrs	r2, r0, #16
   1e1d0:	e1a03000 	mov	r3, r0
   1e1d4:	01a03800 	lsleq	r3, r0, #16
   1e1d8:	13a00000 	movne	r0, #0
   1e1dc:	03a00010 	moveq	r0, #16
   1e1e0:	e31304ff 	tst	r3, #-16777216	; 0xff000000
   1e1e4:	01a03403 	lsleq	r3, r3, #8
   1e1e8:	02800008 	addeq	r0, r0, #8
   1e1ec:	e313020f 	tst	r3, #-268435456	; 0xf0000000
   1e1f0:	01a03203 	lsleq	r3, r3, #4
   1e1f4:	02800004 	addeq	r0, r0, #4
   1e1f8:	e3130103 	tst	r3, #-1073741824	; 0xc0000000
   1e1fc:	01a03103 	lsleq	r3, r3, #2
   1e200:	02800002 	addeq	r0, r0, #2
   1e204:	e3530000 	cmp	r3, #0
   1e208:	b12fff1e 	bxlt	lr
   1e20c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1e210:	12800001 	addne	r0, r0, #1
   1e214:	03a00020 	moveq	r0, #32
   1e218:	e12fff1e 	bx	lr

0001e21c <__lo0bits>:
   1e21c:	e5903000 	ldr	r3, [r0]
   1e220:	e1a02000 	mov	r2, r0
   1e224:	e2130007 	ands	r0, r3, #7
   1e228:	0a000009 	beq	1e254 <__lo0bits+0x38>
   1e22c:	e3130001 	tst	r3, #1
   1e230:	1a00001c 	bne	1e2a8 <__lo0bits+0x8c>
   1e234:	e3130002 	tst	r3, #2
   1e238:	11a030a3 	lsrne	r3, r3, #1
   1e23c:	01a03123 	lsreq	r3, r3, #2
   1e240:	13a00001 	movne	r0, #1
   1e244:	15823000 	strne	r3, [r2]
   1e248:	05823000 	streq	r3, [r2]
   1e24c:	03a00002 	moveq	r0, #2
   1e250:	e12fff1e 	bx	lr
   1e254:	e1b01803 	lsls	r1, r3, #16
   1e258:	01a03823 	lsreq	r3, r3, #16
   1e25c:	03a00010 	moveq	r0, #16
   1e260:	e31300ff 	tst	r3, #255	; 0xff
   1e264:	01a03423 	lsreq	r3, r3, #8
   1e268:	02800008 	addeq	r0, r0, #8
   1e26c:	e313000f 	tst	r3, #15
   1e270:	01a03223 	lsreq	r3, r3, #4
   1e274:	02800004 	addeq	r0, r0, #4
   1e278:	e3130003 	tst	r3, #3
   1e27c:	01a03123 	lsreq	r3, r3, #2
   1e280:	02800002 	addeq	r0, r0, #2
   1e284:	e3130001 	tst	r3, #1
   1e288:	1a000004 	bne	1e2a0 <__lo0bits+0x84>
   1e28c:	e1b030a3 	lsrs	r3, r3, #1
   1e290:	1a000001 	bne	1e29c <__lo0bits+0x80>
   1e294:	e3a00020 	mov	r0, #32
   1e298:	e12fff1e 	bx	lr
   1e29c:	e2800001 	add	r0, r0, #1
   1e2a0:	e5823000 	str	r3, [r2]
   1e2a4:	e12fff1e 	bx	lr
   1e2a8:	e3a00000 	mov	r0, #0
   1e2ac:	e12fff1e 	bx	lr

0001e2b0 <__i2b>:
   1e2b0:	e92d4010 	push	{r4, lr}
   1e2b4:	e1a04001 	mov	r4, r1
   1e2b8:	e3a01001 	mov	r1, #1
   1e2bc:	ebffff25 	bl	1df58 <_Balloc>
   1e2c0:	e3a02001 	mov	r2, #1
   1e2c4:	e5804014 	str	r4, [r0, #20]
   1e2c8:	e5802010 	str	r2, [r0, #16]
   1e2cc:	e8bd4010 	pop	{r4, lr}
   1e2d0:	e12fff1e 	bx	lr

0001e2d4 <__multiply>:
   1e2d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1e2d8:	e5918010 	ldr	r8, [r1, #16]
   1e2dc:	e592a010 	ldr	r10, [r2, #16]
   1e2e0:	e158000a 	cmp	r8, r10
   1e2e4:	e24dd014 	sub	sp, sp, #20
   1e2e8:	e1a06001 	mov	r6, r1
   1e2ec:	e1a04002 	mov	r4, r2
   1e2f0:	aa000004 	bge	1e308 <__multiply+0x34>
   1e2f4:	e1a02008 	mov	r2, r8
   1e2f8:	e1a06004 	mov	r6, r4
   1e2fc:	e1a0800a 	mov	r8, r10
   1e300:	e1a04001 	mov	r4, r1
   1e304:	e1a0a002 	mov	r10, r2
   1e308:	e5963008 	ldr	r3, [r6, #8]
   1e30c:	e088500a 	add	r5, r8, r10
   1e310:	e5961004 	ldr	r1, [r6, #4]
   1e314:	e1550003 	cmp	r5, r3
   1e318:	c2811001 	addgt	r1, r1, #1
   1e31c:	ebffff0d 	bl	1df58 <_Balloc>
   1e320:	e0807105 	add	r7, r0, r5, lsl #2
   1e324:	e2803014 	add	r3, r0, #20
   1e328:	e2877014 	add	r7, r7, #20
   1e32c:	e1530007 	cmp	r3, r7
   1e330:	e58d0004 	str	r0, [sp, #4]
   1e334:	33a00000 	movcc	r0, #0
   1e338:	2a000002 	bcs	1e348 <__multiply+0x74>
   1e33c:	e4830004 	str	r0, [r3], #4
   1e340:	e1570003 	cmp	r7, r3
   1e344:	8afffffc 	bhi	1e33c <__multiply+0x68>
   1e348:	e084a10a 	add	r10, r4, r10, lsl #2
   1e34c:	e28aa014 	add	r10, r10, #20
   1e350:	e2844014 	add	r4, r4, #20
   1e354:	e086c108 	add	r12, r6, r8, lsl #2
   1e358:	e154000a 	cmp	r4, r10
   1e35c:	e2863014 	add	r3, r6, #20
   1e360:	e28cc014 	add	r12, r12, #20
   1e364:	2a000041 	bcs	1e470 <__multiply+0x19c>
   1e368:	e59d2004 	ldr	r2, [sp, #4]
   1e36c:	e58d7008 	str	r7, [sp, #8]
   1e370:	e58d500c 	str	r5, [sp, #12]
   1e374:	e2826018 	add	r6, r2, #24
   1e378:	e1a0700a 	mov	r7, r10
   1e37c:	e1a05003 	mov	r5, r3
   1e380:	e4948004 	ldr	r8, [r4], #4
   1e384:	e1a0a808 	lsl	r10, r8, #16
   1e388:	e1b0a82a 	lsrs	r10, r10, #16
   1e38c:	0a000017 	beq	1e3f0 <__multiply+0x11c>
   1e390:	e1a02005 	mov	r2, r5
   1e394:	e2463004 	sub	r3, r6, #4
   1e398:	e3a08000 	mov	r8, #0
   1e39c:	e4920004 	ldr	r0, [r2], #4
   1e3a0:	e5931000 	ldr	r1, [r3]
   1e3a4:	e1a0b800 	lsl	r11, r0, #16
   1e3a8:	e1a09801 	lsl	r9, r1, #16
   1e3ac:	e1a0b82b 	lsr	r11, r11, #16
   1e3b0:	e1a09829 	lsr	r9, r9, #16
   1e3b4:	e0299b9a 	mla	r9, r10, r11, r9
   1e3b8:	e1a01821 	lsr	r1, r1, #16
   1e3bc:	e1a00820 	lsr	r0, r0, #16
   1e3c0:	e020109a 	mla	r0, r10, r0, r1
   1e3c4:	e0898008 	add	r8, r9, r8
   1e3c8:	e1a01808 	lsl	r1, r8, #16
   1e3cc:	e1a01821 	lsr	r1, r1, #16
   1e3d0:	e0808828 	add	r8, r0, r8, lsr #16
   1e3d4:	e1811808 	orr	r1, r1, r8, lsl #16
   1e3d8:	e15c0002 	cmp	r12, r2
   1e3dc:	e1a08828 	lsr	r8, r8, #16
   1e3e0:	e4831004 	str	r1, [r3], #4
   1e3e4:	8affffec 	bhi	1e39c <__multiply+0xc8>
   1e3e8:	e5838000 	str	r8, [r3]
   1e3ec:	e5148004 	ldr	r8, [r4, #-4]
   1e3f0:	e1b08828 	lsrs	r8, r8, #16
   1e3f4:	0a000018 	beq	1e45c <__multiply+0x188>
   1e3f8:	e516a004 	ldr	r10, [r6, #-4]
   1e3fc:	e1a02005 	mov	r2, r5
   1e400:	e1a03006 	mov	r3, r6
   1e404:	e1a0100a 	mov	r1, r10
   1e408:	e3a09000 	mov	r9, #0
   1e40c:	e1d200b0 	ldrh	r0, [r2]
   1e410:	e1a01821 	lsr	r1, r1, #16
   1e414:	e0211098 	mla	r1, r8, r0, r1
   1e418:	e1a0a80a 	lsl	r10, r10, #16
   1e41c:	e0819009 	add	r9, r1, r9
   1e420:	e1a0a82a 	lsr	r10, r10, #16
   1e424:	e18aa809 	orr	r10, r10, r9, lsl #16
   1e428:	e503a004 	str	r10, [r3, #-4]
   1e42c:	e1a0b003 	mov	r11, r3
   1e430:	e4931004 	ldr	r1, [r3], #4
   1e434:	e492a004 	ldr	r10, [r2], #4
   1e438:	e1a00801 	lsl	r0, r1, #16
   1e43c:	e1a0a82a 	lsr	r10, r10, #16
   1e440:	e1a00820 	lsr	r0, r0, #16
   1e444:	e02a0a98 	mla	r10, r8, r10, r0
   1e448:	e15c0002 	cmp	r12, r2
   1e44c:	e08aa829 	add	r10, r10, r9, lsr #16
   1e450:	e1a0982a 	lsr	r9, r10, #16
   1e454:	8affffec 	bhi	1e40c <__multiply+0x138>
   1e458:	e58ba000 	str	r10, [r11]
   1e45c:	e1570004 	cmp	r7, r4
   1e460:	e2866004 	add	r6, r6, #4
   1e464:	8affffc5 	bhi	1e380 <__multiply+0xac>
   1e468:	e59d7008 	ldr	r7, [sp, #8]
   1e46c:	e59d500c 	ldr	r5, [sp, #12]
   1e470:	e3550000 	cmp	r5, #0
   1e474:	da000009 	ble	1e4a0 <__multiply+0x1cc>
   1e478:	e5173004 	ldr	r3, [r7, #-4]
   1e47c:	e3530000 	cmp	r3, #0
   1e480:	e2477004 	sub	r7, r7, #4
   1e484:	0a000003 	beq	1e498 <__multiply+0x1c4>
   1e488:	ea000004 	b	1e4a0 <__multiply+0x1cc>
   1e48c:	e5373004 	ldr	r3, [r7, #-4]!
   1e490:	e3530000 	cmp	r3, #0
   1e494:	1a000001 	bne	1e4a0 <__multiply+0x1cc>
   1e498:	e2555001 	subs	r5, r5, #1
   1e49c:	1afffffa 	bne	1e48c <__multiply+0x1b8>
   1e4a0:	e59d3004 	ldr	r3, [sp, #4]
   1e4a4:	e5835010 	str	r5, [r3, #16]
   1e4a8:	e1a00003 	mov	r0, r3
   1e4ac:	e28dd014 	add	sp, sp, #20
   1e4b0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1e4b4:	e12fff1e 	bx	lr

0001e4b8 <__pow5mult>:
   1e4b8:	e2123003 	ands	r3, r2, #3
   1e4bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e4c0:	e1a04002 	mov	r4, r2
   1e4c4:	e1a08000 	mov	r8, r0
   1e4c8:	e1a07001 	mov	r7, r1
   1e4cc:	1a000025 	bne	1e568 <__pow5mult+0xb0>
   1e4d0:	e1b04144 	asrs	r4, r4, #2
   1e4d4:	0a000018 	beq	1e53c <__pow5mult+0x84>
   1e4d8:	e5986048 	ldr	r6, [r8, #72]	; 0x48
   1e4dc:	e3560000 	cmp	r6, #0
   1e4e0:	1a000006 	bne	1e500 <__pow5mult+0x48>
   1e4e4:	ea000026 	b	1e584 <__pow5mult+0xcc>
   1e4e8:	e1b040c4 	asrs	r4, r4, #1
   1e4ec:	0a000012 	beq	1e53c <__pow5mult+0x84>
   1e4f0:	e5965000 	ldr	r5, [r6]
   1e4f4:	e3550000 	cmp	r5, #0
   1e4f8:	11a06005 	movne	r6, r5
   1e4fc:	0a000011 	beq	1e548 <__pow5mult+0x90>
   1e500:	e3140001 	tst	r4, #1
   1e504:	0afffff7 	beq	1e4e8 <__pow5mult+0x30>
   1e508:	e1a01007 	mov	r1, r7
   1e50c:	e1a02006 	mov	r2, r6
   1e510:	e1a00008 	mov	r0, r8
   1e514:	ebffff6e 	bl	1e2d4 <__multiply>
   1e518:	e3570000 	cmp	r7, #0
   1e51c:	15972004 	ldrne	r2, [r7, #4]
   1e520:	1598304c 	ldrne	r3, [r8, #76]	; 0x4c
   1e524:	17931102 	ldrne	r1, [r3, r2, lsl #2]
   1e528:	15871000 	strne	r1, [r7]
   1e52c:	17837102 	strne	r7, [r3, r2, lsl #2]
   1e530:	e1b040c4 	asrs	r4, r4, #1
   1e534:	e1a07000 	mov	r7, r0
   1e538:	1affffec 	bne	1e4f0 <__pow5mult+0x38>
   1e53c:	e1a00007 	mov	r0, r7
   1e540:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1e544:	e12fff1e 	bx	lr
   1e548:	e1a01006 	mov	r1, r6
   1e54c:	e1a02006 	mov	r2, r6
   1e550:	e1a00008 	mov	r0, r8
   1e554:	ebffff5e 	bl	1e2d4 <__multiply>
   1e558:	e5860000 	str	r0, [r6]
   1e55c:	e5805000 	str	r5, [r0]
   1e560:	e1a06000 	mov	r6, r0
   1e564:	eaffffe5 	b	1e500 <__pow5mult+0x48>
   1e568:	e59f2034 	ldr	r2, [pc, #52]	; 1e5a4 <__pow5mult+0xec>
   1e56c:	e2433001 	sub	r3, r3, #1
   1e570:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   1e574:	e3a03000 	mov	r3, #0
   1e578:	ebfffea0 	bl	1e000 <__multadd>
   1e57c:	e1a07000 	mov	r7, r0
   1e580:	eaffffd2 	b	1e4d0 <__pow5mult+0x18>
   1e584:	e1a00008 	mov	r0, r8
   1e588:	e59f1018 	ldr	r1, [pc, #24]	; 1e5a8 <__pow5mult+0xf0>
   1e58c:	ebffff47 	bl	1e2b0 <__i2b>
   1e590:	e3a03000 	mov	r3, #0
   1e594:	e5880048 	str	r0, [r8, #72]	; 0x48
   1e598:	e1a06000 	mov	r6, r0
   1e59c:	e5803000 	str	r3, [r0]
   1e5a0:	eaffffd6 	b	1e500 <__pow5mult+0x48>
   1e5a4:	00022880 	.word	0x00022880
   1e5a8:	00000271 	.word	0x00000271

0001e5ac <__lshift>:
   1e5ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   1e5b0:	e591a010 	ldr	r10, [r1, #16]
   1e5b4:	e1a042c2 	asr	r4, r2, #5
   1e5b8:	e5913008 	ldr	r3, [r1, #8]
   1e5bc:	e084a00a 	add	r10, r4, r10
   1e5c0:	e28a5001 	add	r5, r10, #1
   1e5c4:	e1550003 	cmp	r5, r3
   1e5c8:	e1a07001 	mov	r7, r1
   1e5cc:	e1a09002 	mov	r9, r2
   1e5d0:	e1a08000 	mov	r8, r0
   1e5d4:	e5911004 	ldr	r1, [r1, #4]
   1e5d8:	da000003 	ble	1e5ec <__lshift+0x40>
   1e5dc:	e1a03083 	lsl	r3, r3, #1
   1e5e0:	e1550003 	cmp	r5, r3
   1e5e4:	e2811001 	add	r1, r1, #1
   1e5e8:	cafffffb 	bgt	1e5dc <__lshift+0x30>
   1e5ec:	e1a00008 	mov	r0, r8
   1e5f0:	ebfffe58 	bl	1df58 <_Balloc>
   1e5f4:	e3540000 	cmp	r4, #0
   1e5f8:	e280c014 	add	r12, r0, #20
   1e5fc:	da000007 	ble	1e620 <__lshift+0x74>
   1e600:	e3a03000 	mov	r3, #0
   1e604:	e1a06003 	mov	r6, r3
   1e608:	e2833001 	add	r3, r3, #1
   1e60c:	e1530004 	cmp	r3, r4
   1e610:	e48c6004 	str	r6, [r12], #4
   1e614:	1afffffb 	bne	1e608 <__lshift+0x5c>
   1e618:	e0803103 	add	r3, r0, r3, lsl #2
   1e61c:	e283c014 	add	r12, r3, #20
   1e620:	e5972010 	ldr	r2, [r7, #16]
   1e624:	e219901f 	ands	r9, r9, #31
   1e628:	e0872102 	add	r2, r7, r2, lsl #2
   1e62c:	e2874014 	add	r4, r7, #20
   1e630:	e2822014 	add	r2, r2, #20
   1e634:	0a000014 	beq	1e68c <__lshift+0xe0>
   1e638:	e2693020 	rsb	r3, r9, #32
   1e63c:	e3a01000 	mov	r1, #0
   1e640:	e5946000 	ldr	r6, [r4]
   1e644:	e1811916 	orr	r1, r1, r6, lsl r9
   1e648:	e48c1004 	str	r1, [r12], #4
   1e64c:	e4941004 	ldr	r1, [r4], #4
   1e650:	e1520004 	cmp	r2, r4
   1e654:	e1a01331 	lsr	r1, r1, r3
   1e658:	8afffff8 	bhi	1e640 <__lshift+0x94>
   1e65c:	e3510000 	cmp	r1, #0
   1e660:	e58c1000 	str	r1, [r12]
   1e664:	128a5002 	addne	r5, r10, #2
   1e668:	e598304c 	ldr	r3, [r8, #76]	; 0x4c
   1e66c:	e5972004 	ldr	r2, [r7, #4]
   1e670:	e7931102 	ldr	r1, [r3, r2, lsl #2]
   1e674:	e2455001 	sub	r5, r5, #1
   1e678:	e5805010 	str	r5, [r0, #16]
   1e67c:	e5871000 	str	r1, [r7]
   1e680:	e7837102 	str	r7, [r3, r2, lsl #2]
   1e684:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
   1e688:	e12fff1e 	bx	lr
   1e68c:	e4943004 	ldr	r3, [r4], #4
   1e690:	e1520004 	cmp	r2, r4
   1e694:	e48c3004 	str	r3, [r12], #4
   1e698:	9afffff2 	bls	1e668 <__lshift+0xbc>
   1e69c:	e4943004 	ldr	r3, [r4], #4
   1e6a0:	e1520004 	cmp	r2, r4
   1e6a4:	e48c3004 	str	r3, [r12], #4
   1e6a8:	8afffff7 	bhi	1e68c <__lshift+0xe0>
   1e6ac:	eaffffed 	b	1e668 <__lshift+0xbc>

0001e6b0 <__mcmp>:
   1e6b0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   1e6b4:	e5913010 	ldr	r3, [r1, #16]
   1e6b8:	e1a04000 	mov	r4, r0
   1e6bc:	e5900010 	ldr	r0, [r0, #16]
   1e6c0:	e0500003 	subs	r0, r0, r3
   1e6c4:	1a00000c 	bne	1e6fc <__mcmp+0x4c>
   1e6c8:	e2833004 	add	r3, r3, #4
   1e6cc:	e1a02103 	lsl	r2, r3, #2
   1e6d0:	e0843002 	add	r3, r4, r2
   1e6d4:	e0811002 	add	r1, r1, r2
   1e6d8:	e2844014 	add	r4, r4, #20
   1e6dc:	e2833004 	add	r3, r3, #4
   1e6e0:	e2811004 	add	r1, r1, #4
   1e6e4:	e5332004 	ldr	r2, [r3, #-4]!
   1e6e8:	e531c004 	ldr	r12, [r1, #-4]!
   1e6ec:	e152000c 	cmp	r2, r12
   1e6f0:	1a000003 	bne	1e704 <__mcmp+0x54>
   1e6f4:	e1540003 	cmp	r4, r3
   1e6f8:	3afffff9 	bcc	1e6e4 <__mcmp+0x34>
   1e6fc:	e8bd0010 	ldmfd	sp!, {r4}
   1e700:	e12fff1e 	bx	lr
   1e704:	e15c0002 	cmp	r12, r2
   1e708:	93a00001 	movls	r0, #1
   1e70c:	83e00000 	mvnhi	r0, #0
   1e710:	eafffff9 	b	1e6fc <__mcmp+0x4c>

0001e714 <__mdiff>:
   1e714:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   1e718:	e1a06001 	mov	r6, r1
   1e71c:	e1a05000 	mov	r5, r0
   1e720:	e1a01002 	mov	r1, r2
   1e724:	e1a00006 	mov	r0, r6
   1e728:	e1a04002 	mov	r4, r2
   1e72c:	ebffffdf 	bl	1e6b0 <__mcmp>
   1e730:	e2507000 	subs	r7, r0, #0
   1e734:	0a000042 	beq	1e844 <__mdiff+0x130>
   1e738:	b1a03006 	movlt	r3, r6
   1e73c:	b1a06004 	movlt	r6, r4
   1e740:	e5961004 	ldr	r1, [r6, #4]
   1e744:	e1a00005 	mov	r0, r5
   1e748:	b1a04003 	movlt	r4, r3
   1e74c:	a3a09000 	movge	r9, #0
   1e750:	b3a09001 	movlt	r9, #1
   1e754:	ebfffdff 	bl	1df58 <_Balloc>
   1e758:	e5967010 	ldr	r7, [r6, #16]
   1e75c:	e594a010 	ldr	r10, [r4, #16]
   1e760:	e0868107 	add	r8, r6, r7, lsl #2
   1e764:	e084a10a 	add	r10, r4, r10, lsl #2
   1e768:	e580900c 	str	r9, [r0, #12]
   1e76c:	e2888014 	add	r8, r8, #20
   1e770:	e28aa014 	add	r10, r10, #20
   1e774:	e2866014 	add	r6, r6, #20
   1e778:	e2842014 	add	r2, r4, #20
   1e77c:	e2801014 	add	r1, r0, #20
   1e780:	e3a05000 	mov	r5, #0
   1e784:	e496c004 	ldr	r12, [r6], #4
   1e788:	e4924004 	ldr	r4, [r2], #4
   1e78c:	e1a0380c 	lsl	r3, r12, #16
   1e790:	e0855823 	add	r5, r5, r3, lsr #16
   1e794:	e1a09804 	lsl	r9, r4, #16
   1e798:	e0453829 	sub	r3, r5, r9, lsr #16
   1e79c:	e1a05824 	lsr	r5, r4, #16
   1e7a0:	e065582c 	rsb	r5, r5, r12, lsr #16
   1e7a4:	e1a04803 	lsl	r4, r3, #16
   1e7a8:	e0855843 	add	r5, r5, r3, asr #16
   1e7ac:	e1a04824 	lsr	r4, r4, #16
   1e7b0:	e1a03001 	mov	r3, r1
   1e7b4:	e1844805 	orr	r4, r4, r5, lsl #16
   1e7b8:	e4834004 	str	r4, [r3], #4
   1e7bc:	e15a0002 	cmp	r10, r2
   1e7c0:	e1a0c006 	mov	r12, r6
   1e7c4:	e1a05845 	asr	r5, r5, #16
   1e7c8:	e1a01003 	mov	r1, r3
   1e7cc:	8affffec 	bhi	1e784 <__mdiff+0x70>
   1e7d0:	e1580006 	cmp	r8, r6
   1e7d4:	9a000010 	bls	1e81c <__mdiff+0x108>
   1e7d8:	e49c2004 	ldr	r2, [r12], #4
   1e7dc:	e1a04802 	lsl	r4, r2, #16
   1e7e0:	e0855824 	add	r5, r5, r4, lsr #16
   1e7e4:	e1a04805 	lsl	r4, r5, #16
   1e7e8:	e1a02822 	lsr	r2, r2, #16
   1e7ec:	e0825845 	add	r5, r2, r5, asr #16
   1e7f0:	e1a04824 	lsr	r4, r4, #16
   1e7f4:	e1844805 	orr	r4, r4, r5, lsl #16
   1e7f8:	e158000c 	cmp	r8, r12
   1e7fc:	e1a05845 	asr	r5, r5, #16
   1e800:	e4834004 	str	r4, [r3], #4
   1e804:	8afffff3 	bhi	1e7d8 <__mdiff+0xc4>
   1e808:	e1e03006 	mvn	r3, r6
   1e80c:	e0833008 	add	r3, r3, r8
   1e810:	e3c33003 	bic	r3, r3, #3
   1e814:	e2833004 	add	r3, r3, #4
   1e818:	e0813003 	add	r3, r1, r3
   1e81c:	e3540000 	cmp	r4, #0
   1e820:	e2433004 	sub	r3, r3, #4
   1e824:	1a000003 	bne	1e838 <__mdiff+0x124>
   1e828:	e5332004 	ldr	r2, [r3, #-4]!
   1e82c:	e3520000 	cmp	r2, #0
   1e830:	e2477001 	sub	r7, r7, #1
   1e834:	0afffffb 	beq	1e828 <__mdiff+0x114>
   1e838:	e5807010 	str	r7, [r0, #16]
   1e83c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
   1e840:	e12fff1e 	bx	lr
   1e844:	e1a00005 	mov	r0, r5
   1e848:	e1a01007 	mov	r1, r7
   1e84c:	ebfffdc1 	bl	1df58 <_Balloc>
   1e850:	e3a03001 	mov	r3, #1
   1e854:	e5803010 	str	r3, [r0, #16]
   1e858:	e5807014 	str	r7, [r0, #20]
   1e85c:	eafffff6 	b	1e83c <__mdiff+0x128>

0001e860 <__ulp>:
   1e860:	e59f3058 	ldr	r3, [pc, #88]	; 1e8c0 <__ulp+0x60>
   1e864:	e0013003 	and	r3, r1, r3
   1e868:	e243350d 	sub	r3, r3, #54525952	; 0x3400000
   1e86c:	e3530000 	cmp	r3, #0
   1e870:	da000002 	ble	1e880 <__ulp+0x20>
   1e874:	e1a01003 	mov	r1, r3
   1e878:	e3a00000 	mov	r0, #0
   1e87c:	e12fff1e 	bx	lr
   1e880:	e2633000 	rsb	r3, r3, #0
   1e884:	e1a03a43 	asr	r3, r3, #20
   1e888:	e3530013 	cmp	r3, #19
   1e88c:	da000007 	ble	1e8b0 <__ulp+0x50>
   1e890:	e3530032 	cmp	r3, #50	; 0x32
   1e894:	d2633033 	rsble	r3, r3, #51	; 0x33
   1e898:	d3a02001 	movle	r2, #1
   1e89c:	d1a03312 	lslle	r3, r2, r3
   1e8a0:	c3a03001 	movgt	r3, #1
   1e8a4:	e3a01000 	mov	r1, #0
   1e8a8:	e1a00003 	mov	r0, r3
   1e8ac:	e12fff1e 	bx	lr
   1e8b0:	e3a02702 	mov	r2, #524288	; 0x80000
   1e8b4:	e1a01352 	asr	r1, r2, r3
   1e8b8:	e3a00000 	mov	r0, #0
   1e8bc:	e12fff1e 	bx	lr
   1e8c0:	7ff00000 	.word	0x7ff00000

0001e8c4 <__b2d>:
   1e8c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e8c8:	e5906010 	ldr	r6, [r0, #16]
   1e8cc:	e2866004 	add	r6, r6, #4
   1e8d0:	e0806106 	add	r6, r0, r6, lsl #2
   1e8d4:	e1a04006 	mov	r4, r6
   1e8d8:	e4945004 	ldr	r5, [r4], #4
   1e8dc:	e1a03000 	mov	r3, r0
   1e8e0:	e1a00005 	mov	r0, r5
   1e8e4:	e1a08001 	mov	r8, r1
   1e8e8:	e2837014 	add	r7, r3, #20
   1e8ec:	ebfffe36 	bl	1e1cc <__hi0bits>
   1e8f0:	e2603020 	rsb	r3, r0, #32
   1e8f4:	e350000a 	cmp	r0, #10
   1e8f8:	e1a0c006 	mov	r12, r6
   1e8fc:	e5883000 	str	r3, [r8]
   1e900:	ca00000d 	bgt	1e93c <__b2d+0x78>
   1e904:	e260100b 	rsb	r1, r0, #11
   1e908:	e1a0c135 	lsr	r12, r5, r1
   1e90c:	e1570006 	cmp	r7, r6
   1e910:	e38cc5ff 	orr	r12, r12, #1069547520	; 0x3fc00000
   1e914:	e38c3603 	orr	r3, r12, #3145728	; 0x300000
   1e918:	3514c008 	ldrcc	r12, [r4, #-8]
   1e91c:	31a0113c 	lsrcc	r1, r12, r1
   1e920:	23a01000 	movcs	r1, #0
   1e924:	e2800015 	add	r0, r0, #21
   1e928:	e1812015 	orr	r2, r1, r5, lsl r0
   1e92c:	e1a00002 	mov	r0, r2
   1e930:	e1a01003 	mov	r1, r3
   1e934:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1e938:	e12fff1e 	bx	lr
   1e93c:	e1570006 	cmp	r7, r6
   1e940:	3246c004 	subcc	r12, r6, #4
   1e944:	35141008 	ldrcc	r1, [r4, #-8]
   1e948:	23a01000 	movcs	r1, #0
   1e94c:	e250400b 	subs	r4, r0, #11
   1e950:	0a00000a 	beq	1e980 <__b2d+0xbc>
   1e954:	e1a05415 	lsl	r5, r5, r4
   1e958:	e15c0007 	cmp	r12, r7
   1e95c:	e38555ff 	orr	r5, r5, #1069547520	; 0x3fc00000
   1e960:	851cc004 	ldrhi	r12, [r12, #-4]
   1e964:	e260002b 	rsb	r0, r0, #43	; 0x2b
   1e968:	e3855603 	orr	r5, r5, #3145728	; 0x300000
   1e96c:	e1853031 	orr	r3, r5, r1, lsr r0
   1e970:	81a0003c 	lsrhi	r0, r12, r0
   1e974:	93a00000 	movls	r0, #0
   1e978:	e1802411 	orr	r2, r0, r1, lsl r4
   1e97c:	eaffffea 	b	1e92c <__b2d+0x68>
   1e980:	e38555ff 	orr	r5, r5, #1069547520	; 0x3fc00000
   1e984:	e3853603 	orr	r3, r5, #3145728	; 0x300000
   1e988:	e1a02001 	mov	r2, r1
   1e98c:	eaffffe6 	b	1e92c <__b2d+0x68>

0001e990 <__d2b>:
   1e990:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
   1e994:	e3a01001 	mov	r1, #1
   1e998:	e24dd00c 	sub	sp, sp, #12
   1e99c:	e1a04002 	mov	r4, r2
   1e9a0:	e1a05003 	mov	r5, r3
   1e9a4:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
   1e9a8:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
   1e9ac:	ebfffd69 	bl	1df58 <_Balloc>
   1e9b0:	e3c53102 	bic	r3, r5, #-2147483648	; 0x80000000
   1e9b4:	e3c524ff 	bic	r2, r5, #-16777216	; 0xff000000
   1e9b8:	e1b0aa23 	lsrs	r10, r3, #20
   1e9bc:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
   1e9c0:	13822601 	orrne	r2, r2, #1048576	; 0x100000
   1e9c4:	e3540000 	cmp	r4, #0
   1e9c8:	e1a06000 	mov	r6, r0
   1e9cc:	e58d2004 	str	r2, [sp, #4]
   1e9d0:	0a000020 	beq	1ea58 <__d2b+0xc8>
   1e9d4:	e28d0008 	add	r0, sp, #8
   1e9d8:	e5204008 	str	r4, [r0, #-8]!
   1e9dc:	e1a0000d 	mov	r0, sp
   1e9e0:	ebfffe0d 	bl	1e21c <__lo0bits>
   1e9e4:	e3500000 	cmp	r0, #0
   1e9e8:	e59d3004 	ldr	r3, [sp, #4]
   1e9ec:	159d1000 	ldrne	r1, [sp]
   1e9f0:	12602020 	rsbne	r2, r0, #32
   1e9f4:	11812213 	orrne	r2, r1, r3, lsl r2
   1e9f8:	11a03033 	lsrne	r3, r3, r0
   1e9fc:	059d2000 	ldreq	r2, [sp]
   1ea00:	15862014 	strne	r2, [r6, #20]
   1ea04:	158d3004 	strne	r3, [sp, #4]
   1ea08:	05862014 	streq	r2, [r6, #20]
   1ea0c:	e3530000 	cmp	r3, #0
   1ea10:	03a04001 	moveq	r4, #1
   1ea14:	13a04002 	movne	r4, #2
   1ea18:	e35a0000 	cmp	r10, #0
   1ea1c:	e5863018 	str	r3, [r6, #24]
   1ea20:	e5864010 	str	r4, [r6, #16]
   1ea24:	1a000014 	bne	1ea7c <__d2b+0xec>
   1ea28:	e2400e43 	sub	r0, r0, #1072	; 0x430
   1ea2c:	e2403002 	sub	r3, r0, #2
   1ea30:	e0862104 	add	r2, r6, r4, lsl #2
   1ea34:	e5920010 	ldr	r0, [r2, #16]
   1ea38:	e5883000 	str	r3, [r8]
   1ea3c:	ebfffde2 	bl	1e1cc <__hi0bits>
   1ea40:	e0600284 	rsb	r0, r0, r4, lsl #5
   1ea44:	e5870000 	str	r0, [r7]
   1ea48:	e1a00006 	mov	r0, r6
   1ea4c:	e28dd00c 	add	sp, sp, #12
   1ea50:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, r10, lr}
   1ea54:	e12fff1e 	bx	lr
   1ea58:	e28d0004 	add	r0, sp, #4
   1ea5c:	ebfffdee 	bl	1e21c <__lo0bits>
   1ea60:	e59d3004 	ldr	r3, [sp, #4]
   1ea64:	e3a04001 	mov	r4, #1
   1ea68:	e35a0000 	cmp	r10, #0
   1ea6c:	e5863014 	str	r3, [r6, #20]
   1ea70:	e5864010 	str	r4, [r6, #16]
   1ea74:	e2800020 	add	r0, r0, #32
   1ea78:	0affffea 	beq	1ea28 <__d2b+0x98>
   1ea7c:	e24aae43 	sub	r10, r10, #1072	; 0x430
   1ea80:	e24aa003 	sub	r10, r10, #3
   1ea84:	e08aa000 	add	r10, r10, r0
   1ea88:	e2600035 	rsb	r0, r0, #53	; 0x35
   1ea8c:	e588a000 	str	r10, [r8]
   1ea90:	e5870000 	str	r0, [r7]
   1ea94:	eaffffeb 	b	1ea48 <__d2b+0xb8>

0001ea98 <__ratio>:
   1ea98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ea9c:	e24dd00c 	sub	sp, sp, #12
   1eaa0:	e1a06001 	mov	r6, r1
   1eaa4:	e1a0100d 	mov	r1, sp
   1eaa8:	e1a07000 	mov	r7, r0
   1eaac:	ebffff84 	bl	1e8c4 <__b2d>
   1eab0:	e1a05001 	mov	r5, r1
   1eab4:	e1a04000 	mov	r4, r0
   1eab8:	e28d1004 	add	r1, sp, #4
   1eabc:	e1a00006 	mov	r0, r6
   1eac0:	ebffff7f 	bl	1e8c4 <__b2d>
   1eac4:	e597c010 	ldr	r12, [r7, #16]
   1eac8:	e1a03001 	mov	r3, r1
   1eacc:	e1a02000 	mov	r2, r0
   1ead0:	e59d1004 	ldr	r1, [sp, #4]
   1ead4:	e5960010 	ldr	r0, [r6, #16]
   1ead8:	e59de000 	ldr	lr, [sp]
   1eadc:	e060c00c 	rsb	r12, r0, r12
   1eae0:	e061100e 	rsb	r1, r1, lr
   1eae4:	e081c28c 	add	r12, r1, r12, lsl #5
   1eae8:	e35c0000 	cmp	r12, #0
   1eaec:	e1a01005 	mov	r1, r5
   1eaf0:	c0851a0c 	addgt	r1, r5, r12, lsl #20
   1eaf4:	e1a07003 	mov	r7, r3
   1eaf8:	c1a04004 	movgt	r4, r4
   1eafc:	c1a05001 	movgt	r5, r1
   1eb00:	d0437a0c 	suble	r7, r3, r12, lsl #20
   1eb04:	e1a06002 	mov	r6, r2
   1eb08:	d1a03007 	movle	r3, r7
   1eb0c:	d1a02002 	movle	r2, r2
   1eb10:	e1a00004 	mov	r0, r4
   1eb14:	e1a01005 	mov	r1, r5
   1eb18:	eb000a51 	bl	21464 <__aeabi_ddiv>
   1eb1c:	e28dd00c 	add	sp, sp, #12
   1eb20:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   1eb24:	e12fff1e 	bx	lr

0001eb28 <_mprec_log10>:
   1eb28:	e3500017 	cmp	r0, #23
   1eb2c:	e92d4010 	push	{r4, lr}
   1eb30:	e1a04000 	mov	r4, r0
   1eb34:	da000008 	ble	1eb5c <_mprec_log10+0x34>
   1eb38:	e59f1030 	ldr	r1, [pc, #48]	; 1eb70 <_mprec_log10+0x48>
   1eb3c:	e3a00000 	mov	r0, #0
   1eb40:	e3a02000 	mov	r2, #0
   1eb44:	e59f3028 	ldr	r3, [pc, #40]	; 1eb74 <_mprec_log10+0x4c>
   1eb48:	eb0009a1 	bl	211d4 <__aeabi_dmul>
   1eb4c:	e2544001 	subs	r4, r4, #1
   1eb50:	1afffffa 	bne	1eb40 <_mprec_log10+0x18>
   1eb54:	e8bd4010 	pop	{r4, lr}
   1eb58:	e12fff1e 	bx	lr
   1eb5c:	e59f3014 	ldr	r3, [pc, #20]	; 1eb78 <_mprec_log10+0x50>
   1eb60:	e0834180 	add	r4, r3, r0, lsl #3
   1eb64:	e2841010 	add	r1, r4, #16
   1eb68:	e8910003 	ldm	r1, {r0, r1}
   1eb6c:	eafffff8 	b	1eb54 <_mprec_log10+0x2c>
   1eb70:	3ff00000 	.word	0x3ff00000
   1eb74:	40240000 	.word	0x40240000
   1eb78:	00022880 	.word	0x00022880

0001eb7c <__copybits>:
   1eb7c:	e92d0030 	push	{r4, r5}
   1eb80:	e5924010 	ldr	r4, [r2, #16]
   1eb84:	e2411001 	sub	r1, r1, #1
   1eb88:	e0824104 	add	r4, r2, r4, lsl #2
   1eb8c:	e1a052c1 	asr	r5, r1, #5
   1eb90:	e2823014 	add	r3, r2, #20
   1eb94:	e2844014 	add	r4, r4, #20
   1eb98:	e2855001 	add	r5, r5, #1
   1eb9c:	e1530004 	cmp	r3, r4
   1eba0:	e0805105 	add	r5, r0, r5, lsl #2
   1eba4:	2a000009 	bcs	1ebd0 <__copybits+0x54>
   1eba8:	e1a01000 	mov	r1, r0
   1ebac:	e493c004 	ldr	r12, [r3], #4
   1ebb0:	e1540003 	cmp	r4, r3
   1ebb4:	e481c004 	str	r12, [r1], #4
   1ebb8:	8afffffb 	bhi	1ebac <__copybits+0x30>
   1ebbc:	e0623004 	rsb	r3, r2, r4
   1ebc0:	e2433015 	sub	r3, r3, #21
   1ebc4:	e3c33003 	bic	r3, r3, #3
   1ebc8:	e2833004 	add	r3, r3, #4
   1ebcc:	e0800003 	add	r0, r0, r3
   1ebd0:	e1550000 	cmp	r5, r0
   1ebd4:	9a000003 	bls	1ebe8 <__copybits+0x6c>
   1ebd8:	e3a03000 	mov	r3, #0
   1ebdc:	e4803004 	str	r3, [r0], #4
   1ebe0:	e1550000 	cmp	r5, r0
   1ebe4:	8afffffc 	bhi	1ebdc <__copybits+0x60>
   1ebe8:	e8bd0030 	pop	{r4, r5}
   1ebec:	e12fff1e 	bx	lr

0001ebf0 <__any_on>:
   1ebf0:	e590c010 	ldr	r12, [r0, #16]
   1ebf4:	e1a032c1 	asr	r3, r1, #5
   1ebf8:	e15c0003 	cmp	r12, r3
   1ebfc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   1ec00:	e2802014 	add	r2, r0, #20
   1ec04:	b1a0300c 	movlt	r3, r12
   1ec08:	ba000000 	blt	1ec10 <__any_on+0x20>
   1ec0c:	ca00000f 	bgt	1ec50 <__any_on+0x60>
   1ec10:	e2833004 	add	r3, r3, #4
   1ec14:	e0800103 	add	r0, r0, r3, lsl #2
   1ec18:	e2803004 	add	r3, r0, #4
   1ec1c:	e1520003 	cmp	r2, r3
   1ec20:	2a000012 	bcs	1ec70 <__any_on+0x80>
   1ec24:	e5133004 	ldr	r3, [r3, #-4]
   1ec28:	e3530000 	cmp	r3, #0
   1ec2c:	1a000004 	bne	1ec44 <__any_on+0x54>
   1ec30:	e1520000 	cmp	r2, r0
   1ec34:	2a00000d 	bcs	1ec70 <__any_on+0x80>
   1ec38:	e5303004 	ldr	r3, [r0, #-4]!
   1ec3c:	e3530000 	cmp	r3, #0
   1ec40:	0afffffa 	beq	1ec30 <__any_on+0x40>
   1ec44:	e3a00001 	mov	r0, #1
   1ec48:	e8bd0010 	ldmfd	sp!, {r4}
   1ec4c:	e12fff1e 	bx	lr
   1ec50:	e211101f 	ands	r1, r1, #31
   1ec54:	0affffed 	beq	1ec10 <__any_on+0x20>
   1ec58:	e080c103 	add	r12, r0, r3, lsl #2
   1ec5c:	e59cc014 	ldr	r12, [r12, #20]
   1ec60:	e1a0413c 	lsr	r4, r12, r1
   1ec64:	e15c0114 	cmp	r12, r4, lsl r1
   1ec68:	1afffff5 	bne	1ec44 <__any_on+0x54>
   1ec6c:	eaffffe7 	b	1ec10 <__any_on+0x20>
   1ec70:	e3a00000 	mov	r0, #0
   1ec74:	eafffff3 	b	1ec48 <__any_on+0x58>

0001ec78 <__fpclassifyd>:
   1ec78:	e1902001 	orrs	r2, r0, r1
   1ec7c:	1a000001 	bne	1ec88 <__fpclassifyd+0x10>
   1ec80:	e3a00002 	mov	r0, #2
   1ec84:	e12fff1e 	bx	lr
   1ec88:	e2702001 	rsbs	r2, r0, #1
   1ec8c:	33a02000 	movcc	r2, #0
   1ec90:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   1ec94:	03500000 	cmpeq	r0, #0
   1ec98:	0afffff8 	beq	1ec80 <__fpclassifyd+0x8>
   1ec9c:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
   1eca0:	e59f1034 	ldr	r1, [pc, #52]	; 1ecdc <__fpclassifyd+0x64>
   1eca4:	e2430601 	sub	r0, r3, #1048576	; 0x100000
   1eca8:	e1500001 	cmp	r0, r1
   1ecac:	8a000001 	bhi	1ecb8 <__fpclassifyd+0x40>
   1ecb0:	e3a00004 	mov	r0, #4
   1ecb4:	e12fff1e 	bx	lr
   1ecb8:	e3530601 	cmp	r3, #1048576	; 0x100000
   1ecbc:	2a000001 	bcs	1ecc8 <__fpclassifyd+0x50>
   1ecc0:	e3a00003 	mov	r0, #3
   1ecc4:	e12fff1e 	bx	lr
   1ecc8:	e59f0010 	ldr	r0, [pc, #16]	; 1ece0 <__fpclassifyd+0x68>
   1eccc:	e1530000 	cmp	r3, r0
   1ecd0:	13a00000 	movne	r0, #0
   1ecd4:	02020001 	andeq	r0, r2, #1
   1ecd8:	e12fff1e 	bx	lr
   1ecdc:	7fdfffff 	.word	0x7fdfffff
   1ece0:	7ff00000 	.word	0x7ff00000

0001ece4 <_sbrk_r>:
   1ece4:	e92d4038 	push	{r3, r4, r5, lr}
   1ece8:	e59f4030 	ldr	r4, [pc, #48]	; 1ed20 <_sbrk_r+0x3c>
   1ecec:	e3a03000 	mov	r3, #0
   1ecf0:	e1a05000 	mov	r5, r0
   1ecf4:	e1a00001 	mov	r0, r1
   1ecf8:	e5843000 	str	r3, [r4]
   1ecfc:	eb000adc 	bl	21874 <_sbrk>
   1ed00:	e3700001 	cmn	r0, #1
   1ed04:	0a000001 	beq	1ed10 <_sbrk_r+0x2c>
   1ed08:	e8bd4038 	pop	{r3, r4, r5, lr}
   1ed0c:	e12fff1e 	bx	lr
   1ed10:	e5943000 	ldr	r3, [r4]
   1ed14:	e3530000 	cmp	r3, #0
   1ed18:	15853000 	strne	r3, [r5]
   1ed1c:	eafffff9 	b	1ed08 <_sbrk_r+0x24>
   1ed20:	26758c84 	.word	0x26758c84

0001ed24 <strcmp>:
   1ed24:	e0202001 	eor	r2, r0, r1
   1ed28:	e3120003 	tst	r2, #3
   1ed2c:	1a000021 	bne	1edb8 <strcmp_unaligned>
   1ed30:	e2102003 	ands	r2, r0, #3
   1ed34:	e3c00003 	bic	r0, r0, #3
   1ed38:	e3c11003 	bic	r1, r1, #3
   1ed3c:	e490c004 	ldr	r12, [r0], #4
   1ed40:	04913004 	ldreq	r3, [r1], #4
   1ed44:	0a000006 	beq	1ed64 <strcmp+0x40>
   1ed48:	e2222003 	eor	r2, r2, #3
   1ed4c:	e1a02182 	lsl	r2, r2, #3
   1ed50:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
   1ed54:	e1a02233 	lsr	r2, r3, r2
   1ed58:	e4913004 	ldr	r3, [r1], #4
   1ed5c:	e18cc002 	orr	r12, r12, r2
   1ed60:	e1833002 	orr	r3, r3, r2
   1ed64:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   1ed68:	e3a04001 	mov	r4, #1
   1ed6c:	e1844404 	orr	r4, r4, r4, lsl #8
   1ed70:	e1844804 	orr	r4, r4, r4, lsl #16
   1ed74:	e04c2004 	sub	r2, r12, r4
   1ed78:	e15c0003 	cmp	r12, r3
   1ed7c:	01c2200c 	biceq	r2, r2, r12
   1ed80:	01120384 	tsteq	r2, r4, lsl #7
   1ed84:	0490c004 	ldreq	r12, [r0], #4
   1ed88:	04913004 	ldreq	r3, [r1], #4
   1ed8c:	0afffff8 	beq	1ed74 <strcmp+0x50>
   1ed90:	e1a00c0c 	lsl	r0, r12, #24
   1ed94:	e1a0c42c 	lsr	r12, r12, #8
   1ed98:	e3500001 	cmp	r0, #1
   1ed9c:	21500c03 	cmpcs	r0, r3, lsl #24
   1eda0:	01a03423 	lsreq	r3, r3, #8
   1eda4:	0afffff9 	beq	1ed90 <strcmp+0x6c>
   1eda8:	e20330ff 	and	r3, r3, #255	; 0xff
   1edac:	e0630c20 	rsb	r0, r3, r0, lsr #24
   1edb0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   1edb4:	e12fff1e 	bx	lr

0001edb8 <strcmp_unaligned>:
   1edb8:	e3100003 	tst	r0, #3
   1edbc:	0a000006 	beq	1eddc <strcmp_unaligned+0x24>
   1edc0:	e4d02001 	ldrb	r2, [r0], #1
   1edc4:	e4d13001 	ldrb	r3, [r1], #1
   1edc8:	e3520001 	cmp	r2, #1
   1edcc:	21520003 	cmpcs	r2, r3
   1edd0:	0afffff8 	beq	1edb8 <strcmp_unaligned>
   1edd4:	e0420003 	sub	r0, r2, r3
   1edd8:	e12fff1e 	bx	lr
   1eddc:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
   1ede0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   1ede4:	e3a02001 	mov	r2, #1
   1ede8:	e1822402 	orr	r2, r2, r2, lsl #8
   1edec:	e1822802 	orr	r2, r2, r2, lsl #16
   1edf0:	e201c003 	and	r12, r1, #3
   1edf4:	e3c11003 	bic	r1, r1, #3
   1edf8:	e4904004 	ldr	r4, [r0], #4
   1edfc:	e4915004 	ldr	r5, [r1], #4
   1ee00:	e35c0002 	cmp	r12, #2
   1ee04:	0a000017 	beq	1ee68 <strcmp_unaligned+0xb0>
   1ee08:	8a00002d 	bhi	1eec4 <strcmp_unaligned+0x10c>
   1ee0c:	e3c4c4ff 	bic	r12, r4, #-16777216	; 0xff000000
   1ee10:	e15c0425 	cmp	r12, r5, lsr #8
   1ee14:	e0443002 	sub	r3, r4, r2
   1ee18:	e1c33004 	bic	r3, r3, r4
   1ee1c:	1a000007 	bne	1ee40 <strcmp_unaligned+0x88>
   1ee20:	e0133382 	ands	r3, r3, r2, lsl #7
   1ee24:	04915004 	ldreq	r5, [r1], #4
   1ee28:	1a000006 	bne	1ee48 <strcmp_unaligned+0x90>
   1ee2c:	e02cc004 	eor	r12, r12, r4
   1ee30:	e15c0c05 	cmp	r12, r5, lsl #24
   1ee34:	1a000008 	bne	1ee5c <strcmp_unaligned+0xa4>
   1ee38:	e4904004 	ldr	r4, [r0], #4
   1ee3c:	eafffff2 	b	1ee0c <strcmp_unaligned+0x54>
   1ee40:	e1a05425 	lsr	r5, r5, #8
   1ee44:	ea000037 	b	1ef28 <strcmp_unaligned+0x170>
   1ee48:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
   1ee4c:	1a000031 	bne	1ef18 <strcmp_unaligned+0x160>
   1ee50:	e5d15000 	ldrb	r5, [r1]
   1ee54:	e1a0cc24 	lsr	r12, r4, #24
   1ee58:	ea000032 	b	1ef28 <strcmp_unaligned+0x170>
   1ee5c:	e1a0cc24 	lsr	r12, r4, #24
   1ee60:	e20550ff 	and	r5, r5, #255	; 0xff
   1ee64:	ea00002f 	b	1ef28 <strcmp_unaligned+0x170>
   1ee68:	e1a0c804 	lsl	r12, r4, #16
   1ee6c:	e0443002 	sub	r3, r4, r2
   1ee70:	e1a0c82c 	lsr	r12, r12, #16
   1ee74:	e1c33004 	bic	r3, r3, r4
   1ee78:	e15c0825 	cmp	r12, r5, lsr #16
   1ee7c:	1a00000e 	bne	1eebc <strcmp_unaligned+0x104>
   1ee80:	e0133382 	ands	r3, r3, r2, lsl #7
   1ee84:	04915004 	ldreq	r5, [r1], #4
   1ee88:	1a000004 	bne	1eea0 <strcmp_unaligned+0xe8>
   1ee8c:	e02cc004 	eor	r12, r12, r4
   1ee90:	e15c0805 	cmp	r12, r5, lsl #16
   1ee94:	1a000006 	bne	1eeb4 <strcmp_unaligned+0xfc>
   1ee98:	e4904004 	ldr	r4, [r0], #4
   1ee9c:	eafffff1 	b	1ee68 <strcmp_unaligned+0xb0>
   1eea0:	e1b03803 	lsls	r3, r3, #16
   1eea4:	1a00001b 	bne	1ef18 <strcmp_unaligned+0x160>
   1eea8:	e1d150b0 	ldrh	r5, [r1]
   1eeac:	e1a0c824 	lsr	r12, r4, #16
   1eeb0:	ea00001c 	b	1ef28 <strcmp_unaligned+0x170>
   1eeb4:	e1a05805 	lsl	r5, r5, #16
   1eeb8:	e1a0c824 	lsr	r12, r4, #16
   1eebc:	e1a05825 	lsr	r5, r5, #16
   1eec0:	ea000018 	b	1ef28 <strcmp_unaligned+0x170>
   1eec4:	e204c0ff 	and	r12, r4, #255	; 0xff
   1eec8:	e15c0c25 	cmp	r12, r5, lsr #24
   1eecc:	e0443002 	sub	r3, r4, r2
   1eed0:	e1c33004 	bic	r3, r3, r4
   1eed4:	1a000007 	bne	1eef8 <strcmp_unaligned+0x140>
   1eed8:	e0133382 	ands	r3, r3, r2, lsl #7
   1eedc:	04915004 	ldreq	r5, [r1], #4
   1eee0:	1a000006 	bne	1ef00 <strcmp_unaligned+0x148>
   1eee4:	e02cc004 	eor	r12, r12, r4
   1eee8:	e15c0405 	cmp	r12, r5, lsl #8
   1eeec:	1a000006 	bne	1ef0c <strcmp_unaligned+0x154>
   1eef0:	e4904004 	ldr	r4, [r0], #4
   1eef4:	eafffff2 	b	1eec4 <strcmp_unaligned+0x10c>
   1eef8:	e1a05c25 	lsr	r5, r5, #24
   1eefc:	ea000009 	b	1ef28 <strcmp_unaligned+0x170>
   1ef00:	e31400ff 	tst	r4, #255	; 0xff
   1ef04:	0a000003 	beq	1ef18 <strcmp_unaligned+0x160>
   1ef08:	e4915004 	ldr	r5, [r1], #4
   1ef0c:	e1a0c424 	lsr	r12, r4, #8
   1ef10:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
   1ef14:	ea000003 	b	1ef28 <strcmp_unaligned+0x170>
   1ef18:	e3a00000 	mov	r0, #0
   1ef1c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   1ef20:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
   1ef24:	e12fff1e 	bx	lr
   1ef28:	e20c20ff 	and	r2, r12, #255	; 0xff
   1ef2c:	e20500ff 	and	r0, r5, #255	; 0xff
   1ef30:	e3500001 	cmp	r0, #1
   1ef34:	21500002 	cmpcs	r0, r2
   1ef38:	01a0c42c 	lsreq	r12, r12, #8
   1ef3c:	01a05425 	lsreq	r5, r5, #8
   1ef40:	0afffff8 	beq	1ef28 <strcmp_unaligned+0x170>
   1ef44:	e0420000 	sub	r0, r2, r0
   1ef48:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   1ef4c:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
   1ef50:	e12fff1e 	bx	lr

0001ef54 <__ssprint_r>:
   1ef54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1ef58:	e5924008 	ldr	r4, [r2, #8]
   1ef5c:	e3540000 	cmp	r4, #0
   1ef60:	e24dd00c 	sub	sp, sp, #12
   1ef64:	e1a09002 	mov	r9, r2
   1ef68:	e1a0a000 	mov	r10, r0
   1ef6c:	e1a05001 	mov	r5, r1
   1ef70:	e5927000 	ldr	r7, [r2]
   1ef74:	0a00005a 	beq	1f0e4 <__ssprint_r+0x190>
   1ef78:	e3a0b000 	mov	r11, #0
   1ef7c:	e1a0400b 	mov	r4, r11
   1ef80:	e3540000 	cmp	r4, #0
   1ef84:	e5910000 	ldr	r0, [r1]
   1ef88:	e5913008 	ldr	r3, [r1, #8]
   1ef8c:	0a000038 	beq	1f074 <__ssprint_r+0x120>
   1ef90:	e1540003 	cmp	r4, r3
   1ef94:	e1a06003 	mov	r6, r3
   1ef98:	e1a08003 	mov	r8, r3
   1ef9c:	3a00003d 	bcc	1f098 <__ssprint_r+0x144>
   1efa0:	e1d530bc 	ldrh	r3, [r5, #12]
   1efa4:	e3130d12 	tst	r3, #1152	; 0x480
   1efa8:	0a000023 	beq	1f03c <__ssprint_r+0xe8>
   1efac:	e2851010 	add	r1, r5, #16
   1efb0:	e8910042 	ldm	r1, {r1, r6}
   1efb4:	e0866086 	add	r6, r6, r6, lsl #1
   1efb8:	e0618000 	rsb	r8, r1, r0
   1efbc:	e0866fa6 	add	r6, r6, r6, lsr #31
   1efc0:	e2840001 	add	r0, r4, #1
   1efc4:	e1a060c6 	asr	r6, r6, #1
   1efc8:	e0800008 	add	r0, r0, r8
   1efcc:	e1560000 	cmp	r6, r0
   1efd0:	e1a02006 	mov	r2, r6
   1efd4:	31a06000 	movcc	r6, r0
   1efd8:	31a02006 	movcc	r2, r6
   1efdc:	e3130b01 	tst	r3, #1024	; 0x400
   1efe0:	e1a0000a 	mov	r0, r10
   1efe4:	0a00002e 	beq	1f0a4 <__ssprint_r+0x150>
   1efe8:	e1a01002 	mov	r1, r2
   1efec:	ebfff9c9 	bl	1d718 <_malloc_r>
   1eff0:	e2503000 	subs	r3, r0, #0
   1eff4:	0a000030 	beq	1f0bc <__ssprint_r+0x168>
   1eff8:	e5951010 	ldr	r1, [r5, #16]
   1effc:	e1a02008 	mov	r2, r8
   1f000:	e58d3004 	str	r3, [sp, #4]
   1f004:	ebffe947 	bl	19528 <memcpy>
   1f008:	e1d520bc 	ldrh	r2, [r5, #12]
   1f00c:	e3c22d12 	bic	r2, r2, #1152	; 0x480
   1f010:	e3822080 	orr	r2, r2, #128	; 0x80
   1f014:	e1c520bc 	strh	r2, [r5, #12]
   1f018:	e59d3004 	ldr	r3, [sp, #4]
   1f01c:	e0830008 	add	r0, r3, r8
   1f020:	e5853010 	str	r3, [r5, #16]
   1f024:	e0688006 	rsb	r8, r8, r6
   1f028:	e5850000 	str	r0, [r5]
   1f02c:	e5856014 	str	r6, [r5, #20]
   1f030:	e5858008 	str	r8, [r5, #8]
   1f034:	e1a06004 	mov	r6, r4
   1f038:	e1a08004 	mov	r8, r4
   1f03c:	e1a02008 	mov	r2, r8
   1f040:	e1a0100b 	mov	r1, r11
   1f044:	eb00054a 	bl	20574 <memmove>
   1f048:	e5992008 	ldr	r2, [r9, #8]
   1f04c:	e5953008 	ldr	r3, [r5, #8]
   1f050:	e5950000 	ldr	r0, [r5]
   1f054:	e0644002 	rsb	r4, r4, r2
   1f058:	e0663003 	rsb	r3, r6, r3
   1f05c:	e0800008 	add	r0, r0, r8
   1f060:	e3540000 	cmp	r4, #0
   1f064:	e5853008 	str	r3, [r5, #8]
   1f068:	e5850000 	str	r0, [r5]
   1f06c:	e5894008 	str	r4, [r9, #8]
   1f070:	0a00001b 	beq	1f0e4 <__ssprint_r+0x190>
   1f074:	e5974004 	ldr	r4, [r7, #4]
   1f078:	e3540000 	cmp	r4, #0
   1f07c:	e597b000 	ldr	r11, [r7]
   1f080:	e2877008 	add	r7, r7, #8
   1f084:	0afffffa 	beq	1f074 <__ssprint_r+0x120>
   1f088:	e1540003 	cmp	r4, r3
   1f08c:	e1a06003 	mov	r6, r3
   1f090:	e1a08003 	mov	r8, r3
   1f094:	2affffc1 	bcs	1efa0 <__ssprint_r+0x4c>
   1f098:	e1a06004 	mov	r6, r4
   1f09c:	e1a08004 	mov	r8, r4
   1f0a0:	eaffffe5 	b	1f03c <__ssprint_r+0xe8>
   1f0a4:	eb00057f 	bl	206a8 <_realloc_r>
   1f0a8:	e2503000 	subs	r3, r0, #0
   1f0ac:	1affffda 	bne	1f01c <__ssprint_r+0xc8>
   1f0b0:	e1a0000a 	mov	r0, r10
   1f0b4:	e5951010 	ldr	r1, [r5, #16]
   1f0b8:	eb000492 	bl	20308 <_free_r>
   1f0bc:	e1d520bc 	ldrh	r2, [r5, #12]
   1f0c0:	e3a0300c 	mov	r3, #12
   1f0c4:	e58a3000 	str	r3, [r10]
   1f0c8:	e3822040 	orr	r2, r2, #64	; 0x40
   1f0cc:	e3a03000 	mov	r3, #0
   1f0d0:	e1c520bc 	strh	r2, [r5, #12]
   1f0d4:	e3e00000 	mvn	r0, #0
   1f0d8:	e5893008 	str	r3, [r9, #8]
   1f0dc:	e5893004 	str	r3, [r9, #4]
   1f0e0:	ea000001 	b	1f0ec <__ssprint_r+0x198>
   1f0e4:	e5894004 	str	r4, [r9, #4]
   1f0e8:	e1a00004 	mov	r0, r4
   1f0ec:	e28dd00c 	add	sp, sp, #12
   1f0f0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1f0f4:	e12fff1e 	bx	lr

0001f0f8 <_svfiprintf_r>:
   1f0f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1f0fc:	e24dd0c4 	sub	sp, sp, #196	; 0xc4
   1f100:	e58d1018 	str	r1, [sp, #24]
   1f104:	e1d110bc 	ldrh	r1, [r1, #12]
   1f108:	e3110080 	tst	r1, #128	; 0x80
   1f10c:	e58d0020 	str	r0, [sp, #32]
   1f110:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1f114:	0a000003 	beq	1f128 <_svfiprintf_r+0x30>
   1f118:	e59dc018 	ldr	r12, [sp, #24]
   1f11c:	e59c3010 	ldr	r3, [r12, #16]
   1f120:	e3530000 	cmp	r3, #0
   1f124:	0a0003e5 	beq	200c0 <_svfiprintf_r+0xfc8>
   1f128:	e28dc080 	add	r12, sp, #128	; 0x80
   1f12c:	e58dc00c 	str	r12, [sp, #12]
   1f130:	e28dc07f 	add	r12, sp, #127	; 0x7f
   1f134:	e3a03000 	mov	r3, #0
   1f138:	e58dc008 	str	r12, [sp, #8]
   1f13c:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1f140:	e58d3054 	str	r3, [sp, #84]	; 0x54
   1f144:	e58d3050 	str	r3, [sp, #80]	; 0x50
   1f148:	e58d3010 	str	r3, [sp, #16]
   1f14c:	e59d3008 	ldr	r3, [sp, #8]
   1f150:	e28d1080 	add	r1, sp, #128	; 0x80
   1f154:	e1a08002 	mov	r8, r2
   1f158:	e0632001 	rsb	r2, r3, r1
   1f15c:	e58d104c 	str	r1, [sp, #76]	; 0x4c
   1f160:	e58d203c 	str	r2, [sp, #60]	; 0x3c
   1f164:	e1a04001 	mov	r4, r1
   1f168:	e5d83000 	ldrb	r3, [r8]
   1f16c:	e3530000 	cmp	r3, #0
   1f170:	13530025 	cmpne	r3, #37	; 0x25
   1f174:	0a0002a7 	beq	1fc18 <_svfiprintf_r+0xb20>
   1f178:	e2883001 	add	r3, r8, #1
   1f17c:	e1a05003 	mov	r5, r3
   1f180:	e5d33000 	ldrb	r3, [r3]
   1f184:	e3530025 	cmp	r3, #37	; 0x25
   1f188:	13530000 	cmpne	r3, #0
   1f18c:	e2853001 	add	r3, r5, #1
   1f190:	1afffff9 	bne	1f17c <_svfiprintf_r+0x84>
   1f194:	e0556008 	subs	r6, r5, r8
   1f198:	0a00000d 	beq	1f1d4 <_svfiprintf_r+0xdc>
   1f19c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1f1a0:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1f1a4:	e2822001 	add	r2, r2, #1
   1f1a8:	e0811006 	add	r1, r1, r6
   1f1ac:	e3520007 	cmp	r2, #7
   1f1b0:	e5848000 	str	r8, [r4]
   1f1b4:	e5846004 	str	r6, [r4, #4]
   1f1b8:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1f1bc:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1f1c0:	d2844008 	addle	r4, r4, #8
   1f1c4:	ca000304 	bgt	1fddc <_svfiprintf_r+0xce4>
   1f1c8:	e59dc010 	ldr	r12, [sp, #16]
   1f1cc:	e08cc006 	add	r12, r12, r6
   1f1d0:	e58dc010 	str	r12, [sp, #16]
   1f1d4:	e5d53000 	ldrb	r3, [r5]
   1f1d8:	e3530000 	cmp	r3, #0
   1f1dc:	0a000299 	beq	1fc48 <_svfiprintf_r+0xb50>
   1f1e0:	e3a03000 	mov	r3, #0
   1f1e4:	e1a01003 	mov	r1, r3
   1f1e8:	e58d101c 	str	r1, [sp, #28]
   1f1ec:	e2858001 	add	r8, r5, #1
   1f1f0:	e5cd3047 	strb	r3, [sp, #71]	; 0x47
   1f1f4:	e3e09000 	mvn	r9, #0
   1f1f8:	e5d53001 	ldrb	r3, [r5, #1]
   1f1fc:	e1a05001 	mov	r5, r1
   1f200:	e2888001 	add	r8, r8, #1
   1f204:	e2432020 	sub	r2, r3, #32
   1f208:	e3520058 	cmp	r2, #88	; 0x58
   1f20c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   1f210:	ea00017a 	b	1f800 <_svfiprintf_r+0x708>
   1f214:	0001f7f0 	.word	0x0001f7f0
   1f218:	0001f800 	.word	0x0001f800
   1f21c:	0001f800 	.word	0x0001f800
   1f220:	0001f7e4 	.word	0x0001f7e4
   1f224:	0001f800 	.word	0x0001f800
   1f228:	0001f800 	.word	0x0001f800
   1f22c:	0001f800 	.word	0x0001f800
   1f230:	0001f800 	.word	0x0001f800
   1f234:	0001f800 	.word	0x0001f800
   1f238:	0001f800 	.word	0x0001f800
   1f23c:	0001f480 	.word	0x0001f480
   1f240:	0001f910 	.word	0x0001f910
   1f244:	0001f800 	.word	0x0001f800
   1f248:	0001f4ac 	.word	0x0001f4ac
   1f24c:	0001f91c 	.word	0x0001f91c
   1f250:	0001f800 	.word	0x0001f800
   1f254:	0001f904 	.word	0x0001f904
   1f258:	0001f8d4 	.word	0x0001f8d4
   1f25c:	0001f8d4 	.word	0x0001f8d4
   1f260:	0001f8d4 	.word	0x0001f8d4
   1f264:	0001f8d4 	.word	0x0001f8d4
   1f268:	0001f8d4 	.word	0x0001f8d4
   1f26c:	0001f8d4 	.word	0x0001f8d4
   1f270:	0001f8d4 	.word	0x0001f8d4
   1f274:	0001f8d4 	.word	0x0001f8d4
   1f278:	0001f8d4 	.word	0x0001f8d4
   1f27c:	0001f800 	.word	0x0001f800
   1f280:	0001f800 	.word	0x0001f800
   1f284:	0001f800 	.word	0x0001f800
   1f288:	0001f800 	.word	0x0001f800
   1f28c:	0001f800 	.word	0x0001f800
   1f290:	0001f800 	.word	0x0001f800
   1f294:	0001f800 	.word	0x0001f800
   1f298:	0001f800 	.word	0x0001f800
   1f29c:	0001f800 	.word	0x0001f800
   1f2a0:	0001f800 	.word	0x0001f800
   1f2a4:	0001f86c 	.word	0x0001f86c
   1f2a8:	0001f800 	.word	0x0001f800
   1f2ac:	0001f800 	.word	0x0001f800
   1f2b0:	0001f800 	.word	0x0001f800
   1f2b4:	0001f800 	.word	0x0001f800
   1f2b8:	0001f800 	.word	0x0001f800
   1f2bc:	0001f800 	.word	0x0001f800
   1f2c0:	0001f800 	.word	0x0001f800
   1f2c4:	0001f800 	.word	0x0001f800
   1f2c8:	0001f800 	.word	0x0001f800
   1f2cc:	0001f800 	.word	0x0001f800
   1f2d0:	0001f448 	.word	0x0001f448
   1f2d4:	0001f800 	.word	0x0001f800
   1f2d8:	0001f800 	.word	0x0001f800
   1f2dc:	0001f800 	.word	0x0001f800
   1f2e0:	0001f800 	.word	0x0001f800
   1f2e4:	0001f800 	.word	0x0001f800
   1f2e8:	0001f378 	.word	0x0001f378
   1f2ec:	0001f800 	.word	0x0001f800
   1f2f0:	0001f800 	.word	0x0001f800
   1f2f4:	0001f738 	.word	0x0001f738
   1f2f8:	0001f800 	.word	0x0001f800
   1f2fc:	0001f800 	.word	0x0001f800
   1f300:	0001f800 	.word	0x0001f800
   1f304:	0001f800 	.word	0x0001f800
   1f308:	0001f800 	.word	0x0001f800
   1f30c:	0001f800 	.word	0x0001f800
   1f310:	0001f800 	.word	0x0001f800
   1f314:	0001f800 	.word	0x0001f800
   1f318:	0001f800 	.word	0x0001f800
   1f31c:	0001f800 	.word	0x0001f800
   1f320:	0001f5c4 	.word	0x0001f5c4
   1f324:	0001f574 	.word	0x0001f574
   1f328:	0001f800 	.word	0x0001f800
   1f32c:	0001f800 	.word	0x0001f800
   1f330:	0001f800 	.word	0x0001f800
   1f334:	0001f7a0 	.word	0x0001f7a0
   1f338:	0001f574 	.word	0x0001f574
   1f33c:	0001f800 	.word	0x0001f800
   1f340:	0001f800 	.word	0x0001f800
   1f344:	0001f780 	.word	0x0001f780
   1f348:	0001f800 	.word	0x0001f800
   1f34c:	0001f7ac 	.word	0x0001f7ac
   1f350:	0001f44c 	.word	0x0001f44c
   1f354:	0001f530 	.word	0x0001f530
   1f358:	0001f524 	.word	0x0001f524
   1f35c:	0001f800 	.word	0x0001f800
   1f360:	0001f4b8 	.word	0x0001f4b8
   1f364:	0001f800 	.word	0x0001f800
   1f368:	0001f37c 	.word	0x0001f37c
   1f36c:	0001f800 	.word	0x0001f800
   1f370:	0001f800 	.word	0x0001f800
   1f374:	0001f82c 	.word	0x0001f82c
   1f378:	e3855010 	orr	r5, r5, #16
   1f37c:	e3150020 	tst	r5, #32
   1f380:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f384:	0a0002e6 	beq	1ff24 <_svfiprintf_r+0xe2c>
   1f388:	e28c3007 	add	r3, r12, #7
   1f38c:	e3c33007 	bic	r3, r3, #7
   1f390:	e89300c0 	ldm	r3, {r6, r7}
   1f394:	e2833008 	add	r3, r3, #8
   1f398:	e1961007 	orrs	r1, r6, r7
   1f39c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1f3a0:	03a02000 	moveq	r2, #0
   1f3a4:	13a02001 	movne	r2, #1
   1f3a8:	e3a03001 	mov	r3, #1
   1f3ac:	e3a0a000 	mov	r10, #0
   1f3b0:	e5cda047 	strb	r10, [sp, #71]	; 0x47
   1f3b4:	e3590000 	cmp	r9, #0
   1f3b8:	a3c55080 	bicge	r5, r5, #128	; 0x80
   1f3bc:	e3590000 	cmp	r9, #0
   1f3c0:	13822001 	orrne	r2, r2, #1
   1f3c4:	e3520000 	cmp	r2, #0
   1f3c8:	0a000214 	beq	1fc20 <_svfiprintf_r+0xb28>
   1f3cc:	e3530001 	cmp	r3, #1
   1f3d0:	0a0002a1 	beq	1fe5c <_svfiprintf_r+0xd64>
   1f3d4:	e3530002 	cmp	r3, #2
   1f3d8:	e28d007f 	add	r0, sp, #127	; 0x7f
   1f3dc:	0a0002bb 	beq	1fed0 <_svfiprintf_r+0xdd8>
   1f3e0:	e3a0b007 	mov	r11, #7
   1f3e4:	e1a011a6 	lsr	r1, r6, #3
   1f3e8:	e1811e87 	orr	r1, r1, r7, lsl #29
   1f3ec:	e006200b 	and	r2, r6, r11
   1f3f0:	e1a031a7 	lsr	r3, r7, #3
   1f3f4:	e1a07003 	mov	r7, r3
   1f3f8:	e1a06001 	mov	r6, r1
   1f3fc:	e2822030 	add	r2, r2, #48	; 0x30
   1f400:	e20220ff 	and	r2, r2, #255	; 0xff
   1f404:	e1961007 	orrs	r1, r6, r7
   1f408:	e1a03000 	mov	r3, r0
   1f40c:	e5c02000 	strb	r2, [r0]
   1f410:	e2400001 	sub	r0, r0, #1
   1f414:	1afffff2 	bne	1f3e4 <_svfiprintf_r+0x2ec>
   1f418:	e3150001 	tst	r5, #1
   1f41c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   1f420:	1a0002eb 	bne	1ffd4 <_svfiprintf_r+0xedc>
   1f424:	e59dc00c 	ldr	r12, [sp, #12]
   1f428:	e063700c 	rsb	r7, r3, r12
   1f42c:	e58d9014 	str	r9, [sp, #20]
   1f430:	e59d6014 	ldr	r6, [sp, #20]
   1f434:	e1560007 	cmp	r6, r7
   1f438:	b1a06007 	movlt	r6, r7
   1f43c:	e35a0000 	cmp	r10, #0
   1f440:	12866001 	addne	r6, r6, #1
   1f444:	ea00006c 	b	1f5fc <_svfiprintf_r+0x504>
   1f448:	e3855010 	orr	r5, r5, #16
   1f44c:	e2153020 	ands	r3, r5, #32
   1f450:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f454:	0a0002bd 	beq	1ff50 <_svfiprintf_r+0xe58>
   1f458:	e28c3007 	add	r3, r12, #7
   1f45c:	e3c33007 	bic	r3, r3, #7
   1f460:	e89300c0 	ldm	r3, {r6, r7}
   1f464:	e2833008 	add	r3, r3, #8
   1f468:	e1961007 	orrs	r1, r6, r7
   1f46c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1f470:	03a02000 	moveq	r2, #0
   1f474:	13a02001 	movne	r2, #1
   1f478:	e3a03000 	mov	r3, #0
   1f47c:	eaffffca 	b	1f3ac <_svfiprintf_r+0x2b4>
   1f480:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f484:	e59cc000 	ldr	r12, [r12]
   1f488:	e58dc01c 	str	r12, [sp, #28]
   1f48c:	e35c0000 	cmp	r12, #0
   1f490:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f494:	e28c2004 	add	r2, r12, #4
   1f498:	aa0002c2 	bge	1ffa8 <_svfiprintf_r+0xeb0>
   1f49c:	e59dc01c 	ldr	r12, [sp, #28]
   1f4a0:	e26cc000 	rsb	r12, r12, #0
   1f4a4:	e58dc01c 	str	r12, [sp, #28]
   1f4a8:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1f4ac:	e3855004 	orr	r5, r5, #4
   1f4b0:	e5d83000 	ldrb	r3, [r8]
   1f4b4:	eaffff51 	b	1f200 <_svfiprintf_r+0x108>
   1f4b8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   1f4bc:	e5933000 	ldr	r3, [r3]
   1f4c0:	e3a06000 	mov	r6, #0
   1f4c4:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f4c8:	e1530006 	cmp	r3, r6
   1f4cc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   1f4d0:	e5cd6047 	strb	r6, [sp, #71]	; 0x47
   1f4d4:	e28cb004 	add	r11, r12, #4
   1f4d8:	0a000305 	beq	200f4 <_svfiprintf_r+0xffc>
   1f4dc:	e3590000 	cmp	r9, #0
   1f4e0:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1f4e4:	ba0002e9 	blt	20090 <_svfiprintf_r+0xf98>
   1f4e8:	e1a01006 	mov	r1, r6
   1f4ec:	e1a02009 	mov	r2, r9
   1f4f0:	ebfffa4f 	bl	1de34 <memchr>
   1f4f4:	e3500000 	cmp	r0, #0
   1f4f8:	0a000305 	beq	20114 <_svfiprintf_r+0x101c>
   1f4fc:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1f500:	e06c7000 	rsb	r7, r12, r0
   1f504:	e1570009 	cmp	r7, r9
   1f508:	e5dda047 	ldrb	r10, [sp, #71]	; 0x47
   1f50c:	e58db024 	str	r11, [sp, #36]	; 0x24
   1f510:	c1a07009 	movgt	r7, r9
   1f514:	c58d6014 	strgt	r6, [sp, #20]
   1f518:	caffffc4 	bgt	1f430 <_svfiprintf_r+0x338>
   1f51c:	e58d6014 	str	r6, [sp, #20]
   1f520:	eaffffc2 	b	1f430 <_svfiprintf_r+0x338>
   1f524:	e3855020 	orr	r5, r5, #32
   1f528:	e5d83000 	ldrb	r3, [r8]
   1f52c:	eaffff33 	b	1f200 <_svfiprintf_r+0x108>
   1f530:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   1f534:	e5932000 	ldr	r2, [r3]
   1f538:	e283c004 	add	r12, r3, #4
   1f53c:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1f540:	e3a03030 	mov	r3, #48	; 0x30
   1f544:	e3a07000 	mov	r7, #0
   1f548:	e59fcc14 	ldr	r12, [pc, #3092]	; 20164 <_svfiprintf_r+0x106c>
   1f54c:	e1a06002 	mov	r6, r2
   1f550:	e5cd3048 	strb	r3, [sp, #72]	; 0x48
   1f554:	e0522007 	subs	r2, r2, r7
   1f558:	e3a03078 	mov	r3, #120	; 0x78
   1f55c:	e5cd3049 	strb	r3, [sp, #73]	; 0x49
   1f560:	e3855002 	orr	r5, r5, #2
   1f564:	13a02001 	movne	r2, #1
   1f568:	e58dc034 	str	r12, [sp, #52]	; 0x34
   1f56c:	e3a03002 	mov	r3, #2
   1f570:	eaffff8d 	b	1f3ac <_svfiprintf_r+0x2b4>
   1f574:	e3150020 	tst	r5, #32
   1f578:	e5cd1047 	strb	r1, [sp, #71]	; 0x47
   1f57c:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f580:	0a0000be 	beq	1f880 <_svfiprintf_r+0x788>
   1f584:	e28c1007 	add	r1, r12, #7
   1f588:	e3c11007 	bic	r1, r1, #7
   1f58c:	e891000c 	ldm	r1, {r2, r3}
   1f590:	e2811008 	add	r1, r1, #8
   1f594:	e58d1024 	str	r1, [sp, #36]	; 0x24
   1f598:	e3520000 	cmp	r2, #0
   1f59c:	e2d31000 	sbcs	r1, r3, #0
   1f5a0:	e1a06002 	mov	r6, r2
   1f5a4:	e1a07003 	mov	r7, r3
   1f5a8:	ba0000c0 	blt	1f8b0 <_svfiprintf_r+0x7b8>
   1f5ac:	e1962007 	orrs	r2, r6, r7
   1f5b0:	e5dda047 	ldrb	r10, [sp, #71]	; 0x47
   1f5b4:	03a02000 	moveq	r2, #0
   1f5b8:	13a02001 	movne	r2, #1
   1f5bc:	e3a03001 	mov	r3, #1
   1f5c0:	eaffff7b 	b	1f3b4 <_svfiprintf_r+0x2bc>
   1f5c4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   1f5c8:	e5933000 	ldr	r3, [r3]
   1f5cc:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f5d0:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
   1f5d4:	e3a03000 	mov	r3, #0
   1f5d8:	e28cc004 	add	r12, r12, #4
   1f5dc:	e5cd3047 	strb	r3, [sp, #71]	; 0x47
   1f5e0:	e28d3058 	add	r3, sp, #88	; 0x58
   1f5e4:	e3a06001 	mov	r6, #1
   1f5e8:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1f5ec:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   1f5f0:	e1a07006 	mov	r7, r6
   1f5f4:	e3a03000 	mov	r3, #0
   1f5f8:	e58d3014 	str	r3, [sp, #20]
   1f5fc:	e2159002 	ands	r9, r5, #2
   1f600:	12866002 	addne	r6, r6, #2
   1f604:	e2153084 	ands	r3, r5, #132	; 0x84
   1f608:	e58d3028 	str	r3, [sp, #40]	; 0x28
   1f60c:	1a0000d5 	bne	1f968 <_svfiprintf_r+0x870>
   1f610:	e59dc01c 	ldr	r12, [sp, #28]
   1f614:	e066b00c 	rsb	r11, r6, r12
   1f618:	e35b0000 	cmp	r11, #0
   1f61c:	da0000d1 	ble	1f968 <_svfiprintf_r+0x870>
   1f620:	e35b0010 	cmp	r11, #16
   1f624:	d59f3b3c 	ldrle	r3, [pc, #2876]	; 20168 <_svfiprintf_r+0x1070>
   1f628:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1f62c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1f630:	d58d3030 	strle	r3, [sp, #48]	; 0x30
   1f634:	da00002b 	ble	1f6e8 <_svfiprintf_r+0x5f0>
   1f638:	e59fcb28 	ldr	r12, [pc, #2856]	; 20168 <_svfiprintf_r+0x1070>
   1f63c:	e1a0300b 	mov	r3, r11
   1f640:	e58d5038 	str	r5, [sp, #56]	; 0x38
   1f644:	e1a00004 	mov	r0, r4
   1f648:	e1a0b009 	mov	r11, r9
   1f64c:	e58dc030 	str	r12, [sp, #48]	; 0x30
   1f650:	e1a09007 	mov	r9, r7
   1f654:	e3a0a010 	mov	r10, #16
   1f658:	e1a07006 	mov	r7, r6
   1f65c:	e59d4020 	ldr	r4, [sp, #32]
   1f660:	e59d5018 	ldr	r5, [sp, #24]
   1f664:	e1a06003 	mov	r6, r3
   1f668:	ea000002 	b	1f678 <_svfiprintf_r+0x580>
   1f66c:	e2466010 	sub	r6, r6, #16
   1f670:	e3560010 	cmp	r6, #16
   1f674:	da000014 	ble	1f6cc <_svfiprintf_r+0x5d4>
   1f678:	e2822001 	add	r2, r2, #1
   1f67c:	e59f3ae4 	ldr	r3, [pc, #2788]	; 20168 <_svfiprintf_r+0x1070>
   1f680:	e2811010 	add	r1, r1, #16
   1f684:	e3520007 	cmp	r2, #7
   1f688:	e8800408 	stm	r0, {r3, r10}
   1f68c:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1f690:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1f694:	d2800008 	addle	r0, r0, #8
   1f698:	dafffff3 	ble	1f66c <_svfiprintf_r+0x574>
   1f69c:	e1a00004 	mov	r0, r4
   1f6a0:	e1a01005 	mov	r1, r5
   1f6a4:	e28d204c 	add	r2, sp, #76	; 0x4c
   1f6a8:	ebfffe29 	bl	1ef54 <__ssprint_r>
   1f6ac:	e3500000 	cmp	r0, #0
   1f6b0:	1a00016a 	bne	1fc60 <_svfiprintf_r+0xb68>
   1f6b4:	e2466010 	sub	r6, r6, #16
   1f6b8:	e3560010 	cmp	r6, #16
   1f6bc:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1f6c0:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1f6c4:	e28d0080 	add	r0, sp, #128	; 0x80
   1f6c8:	caffffea 	bgt	1f678 <_svfiprintf_r+0x580>
   1f6cc:	e1a03006 	mov	r3, r6
   1f6d0:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
   1f6d4:	e1a06007 	mov	r6, r7
   1f6d8:	e1a04000 	mov	r4, r0
   1f6dc:	e1a07009 	mov	r7, r9
   1f6e0:	e1a0900b 	mov	r9, r11
   1f6e4:	e1a0b003 	mov	r11, r3
   1f6e8:	e2822001 	add	r2, r2, #1
   1f6ec:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
   1f6f0:	e081100b 	add	r1, r1, r11
   1f6f4:	e3520007 	cmp	r2, #7
   1f6f8:	e584c000 	str	r12, [r4]
   1f6fc:	e584b004 	str	r11, [r4, #4]
   1f700:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1f704:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1f708:	d2844008 	addle	r4, r4, #8
   1f70c:	da000097 	ble	1f970 <_svfiprintf_r+0x878>
   1f710:	e59d0020 	ldr	r0, [sp, #32]
   1f714:	e59d1018 	ldr	r1, [sp, #24]
   1f718:	e28d204c 	add	r2, sp, #76	; 0x4c
   1f71c:	ebfffe0c 	bl	1ef54 <__ssprint_r>
   1f720:	e3500000 	cmp	r0, #0
   1f724:	1a00014d 	bne	1fc60 <_svfiprintf_r+0xb68>
   1f728:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1f72c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1f730:	e28d4080 	add	r4, sp, #128	; 0x80
   1f734:	ea00008d 	b	1f970 <_svfiprintf_r+0x878>
   1f738:	e59fca2c 	ldr	r12, [pc, #2604]	; 2016c <_svfiprintf_r+0x1074>
   1f73c:	e3150020 	tst	r5, #32
   1f740:	e58dc034 	str	r12, [sp, #52]	; 0x34
   1f744:	e5cd1047 	strb	r1, [sp, #71]	; 0x47
   1f748:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f74c:	0a00003c 	beq	1f844 <_svfiprintf_r+0x74c>
   1f750:	e28c2007 	add	r2, r12, #7
   1f754:	e3c22007 	bic	r2, r2, #7
   1f758:	e282c008 	add	r12, r2, #8
   1f75c:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1f760:	e89200c0 	ldm	r2, {r6, r7}
   1f764:	e3150001 	tst	r5, #1
   1f768:	1a000205 	bne	1ff84 <_svfiprintf_r+0xe8c>
   1f76c:	e1961007 	orrs	r1, r6, r7
   1f770:	03a02000 	moveq	r2, #0
   1f774:	13a02001 	movne	r2, #1
   1f778:	e3a03002 	mov	r3, #2
   1f77c:	eaffff0a 	b	1f3ac <_svfiprintf_r+0x2b4>
   1f780:	e5d83000 	ldrb	r3, [r8]
   1f784:	e1a02008 	mov	r2, r8
   1f788:	e353006c 	cmp	r3, #108	; 0x6c
   1f78c:	02888001 	addeq	r8, r8, #1
   1f790:	03855020 	orreq	r5, r5, #32
   1f794:	05d23001 	ldrbeq	r3, [r2, #1]
   1f798:	13855010 	orrne	r5, r5, #16
   1f79c:	eafffe97 	b	1f200 <_svfiprintf_r+0x108>
   1f7a0:	e3855040 	orr	r5, r5, #64	; 0x40
   1f7a4:	e5d83000 	ldrb	r3, [r8]
   1f7a8:	eafffe94 	b	1f200 <_svfiprintf_r+0x108>
   1f7ac:	e3150020 	tst	r5, #32
   1f7b0:	e5cd1047 	strb	r1, [sp, #71]	; 0x47
   1f7b4:	1a00022c 	bne	2006c <_svfiprintf_r+0xf74>
   1f7b8:	e3150010 	tst	r5, #16
   1f7bc:	1a000238 	bne	200a4 <_svfiprintf_r+0xfac>
   1f7c0:	e3150040 	tst	r5, #64	; 0x40
   1f7c4:	0a000236 	beq	200a4 <_svfiprintf_r+0xfac>
   1f7c8:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f7cc:	e59c3000 	ldr	r3, [r12]
   1f7d0:	e28cc004 	add	r12, r12, #4
   1f7d4:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1f7d8:	e59dc010 	ldr	r12, [sp, #16]
   1f7dc:	e1c3c0b0 	strh	r12, [r3]
   1f7e0:	eafffe60 	b	1f168 <_svfiprintf_r+0x70>
   1f7e4:	e3855001 	orr	r5, r5, #1
   1f7e8:	e5d83000 	ldrb	r3, [r8]
   1f7ec:	eafffe83 	b	1f200 <_svfiprintf_r+0x108>
   1f7f0:	e3510000 	cmp	r1, #0
   1f7f4:	e5d83000 	ldrb	r3, [r8]
   1f7f8:	03a01020 	moveq	r1, #32
   1f7fc:	eafffe7f 	b	1f200 <_svfiprintf_r+0x108>
   1f800:	e3530000 	cmp	r3, #0
   1f804:	e5cd1047 	strb	r1, [sp, #71]	; 0x47
   1f808:	0a00010e 	beq	1fc48 <_svfiprintf_r+0xb50>
   1f80c:	e3a06001 	mov	r6, #1
   1f810:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
   1f814:	e28dc058 	add	r12, sp, #88	; 0x58
   1f818:	e3a03000 	mov	r3, #0
   1f81c:	e5cd3047 	strb	r3, [sp, #71]	; 0x47
   1f820:	e1a07006 	mov	r7, r6
   1f824:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1f828:	eaffff71 	b	1f5f4 <_svfiprintf_r+0x4fc>
   1f82c:	e59fc930 	ldr	r12, [pc, #2352]	; 20164 <_svfiprintf_r+0x106c>
   1f830:	e3150020 	tst	r5, #32
   1f834:	e58dc034 	str	r12, [sp, #52]	; 0x34
   1f838:	e5cd1047 	strb	r1, [sp, #71]	; 0x47
   1f83c:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f840:	1affffc2 	bne	1f750 <_svfiprintf_r+0x658>
   1f844:	e3150010 	tst	r5, #16
   1f848:	1a0001f1 	bne	20014 <_svfiprintf_r+0xf1c>
   1f84c:	e3150040 	tst	r5, #64	; 0x40
   1f850:	0a0001ef 	beq	20014 <_svfiprintf_r+0xf1c>
   1f854:	e1dc20b0 	ldrh	r2, [r12]
   1f858:	e28cc004 	add	r12, r12, #4
   1f85c:	e1a06002 	mov	r6, r2
   1f860:	e3a07000 	mov	r7, #0
   1f864:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1f868:	eaffffbd 	b	1f764 <_svfiprintf_r+0x66c>
   1f86c:	e3855010 	orr	r5, r5, #16
   1f870:	e3150020 	tst	r5, #32
   1f874:	e5cd1047 	strb	r1, [sp, #71]	; 0x47
   1f878:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   1f87c:	1affff40 	bne	1f584 <_svfiprintf_r+0x48c>
   1f880:	e3150010 	tst	r5, #16
   1f884:	0a0001f0 	beq	2004c <_svfiprintf_r+0xf54>
   1f888:	e59c3000 	ldr	r3, [r12]
   1f88c:	e1a07fc3 	asr	r7, r3, #31
   1f890:	e1a02003 	mov	r2, r3
   1f894:	e1a06003 	mov	r6, r3
   1f898:	e1a03007 	mov	r3, r7
   1f89c:	e28cc004 	add	r12, r12, #4
   1f8a0:	e3520000 	cmp	r2, #0
   1f8a4:	e2d31000 	sbcs	r1, r3, #0
   1f8a8:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1f8ac:	aaffff3e 	bge	1f5ac <_svfiprintf_r+0x4b4>
   1f8b0:	e2766000 	rsbs	r6, r6, #0
   1f8b4:	e2e77000 	rsc	r7, r7, #0
   1f8b8:	e1963007 	orrs	r3, r6, r7
   1f8bc:	e3a0a02d 	mov	r10, #45	; 0x2d
   1f8c0:	e5cda047 	strb	r10, [sp, #71]	; 0x47
   1f8c4:	03a02000 	moveq	r2, #0
   1f8c8:	13a02001 	movne	r2, #1
   1f8cc:	e3a03001 	mov	r3, #1
   1f8d0:	eafffeb7 	b	1f3b4 <_svfiprintf_r+0x2bc>
   1f8d4:	e1a00008 	mov	r0, r8
   1f8d8:	e3a02000 	mov	r2, #0
   1f8dc:	e243c030 	sub	r12, r3, #48	; 0x30
   1f8e0:	e4d03001 	ldrb	r3, [r0], #1
   1f8e4:	e2436030 	sub	r6, r3, #48	; 0x30
   1f8e8:	e0822102 	add	r2, r2, r2, lsl #2
   1f8ec:	e3560009 	cmp	r6, #9
   1f8f0:	e08c2082 	add	r2, r12, r2, lsl #1
   1f8f4:	e1a08000 	mov	r8, r0
   1f8f8:	9afffff7 	bls	1f8dc <_svfiprintf_r+0x7e4>
   1f8fc:	e58d201c 	str	r2, [sp, #28]
   1f900:	eafffe3f 	b	1f204 <_svfiprintf_r+0x10c>
   1f904:	e3855080 	orr	r5, r5, #128	; 0x80
   1f908:	e5d83000 	ldrb	r3, [r8]
   1f90c:	eafffe3b 	b	1f200 <_svfiprintf_r+0x108>
   1f910:	e5d83000 	ldrb	r3, [r8]
   1f914:	e3a0102b 	mov	r1, #43	; 0x2b
   1f918:	eafffe38 	b	1f200 <_svfiprintf_r+0x108>
   1f91c:	e1a00008 	mov	r0, r8
   1f920:	e4d03001 	ldrb	r3, [r0], #1
   1f924:	e353002a 	cmp	r3, #42	; 0x2a
   1f928:	0a0001fe 	beq	20128 <_svfiprintf_r+0x1030>
   1f92c:	e2432030 	sub	r2, r3, #48	; 0x30
   1f930:	e3520009 	cmp	r2, #9
   1f934:	81a08000 	movhi	r8, r0
   1f938:	83a09000 	movhi	r9, #0
   1f93c:	8afffe30 	bhi	1f204 <_svfiprintf_r+0x10c>
   1f940:	e3a09000 	mov	r9, #0
   1f944:	e4d03001 	ldrb	r3, [r0], #1
   1f948:	e0899109 	add	r9, r9, r9, lsl #2
   1f94c:	e0829089 	add	r9, r2, r9, lsl #1
   1f950:	e2432030 	sub	r2, r3, #48	; 0x30
   1f954:	e3520009 	cmp	r2, #9
   1f958:	e1a08000 	mov	r8, r0
   1f95c:	9afffff8 	bls	1f944 <_svfiprintf_r+0x84c>
   1f960:	e1899fc9 	orr	r9, r9, r9, asr #31
   1f964:	eafffe26 	b	1f204 <_svfiprintf_r+0x10c>
   1f968:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1f96c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1f970:	e5dd3047 	ldrb	r3, [sp, #71]	; 0x47
   1f974:	e3530000 	cmp	r3, #0
   1f978:	0a00000a 	beq	1f9a8 <_svfiprintf_r+0x8b0>
   1f97c:	e2822001 	add	r2, r2, #1
   1f980:	e28d3047 	add	r3, sp, #71	; 0x47
   1f984:	e5843000 	str	r3, [r4]
   1f988:	e2811001 	add	r1, r1, #1
   1f98c:	e3520007 	cmp	r2, #7
   1f990:	e3a03001 	mov	r3, #1
   1f994:	e5843004 	str	r3, [r4, #4]
   1f998:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1f99c:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1f9a0:	d2844008 	addle	r4, r4, #8
   1f9a4:	ca000114 	bgt	1fdfc <_svfiprintf_r+0xd04>
   1f9a8:	e3590000 	cmp	r9, #0
   1f9ac:	0a00000a 	beq	1f9dc <_svfiprintf_r+0x8e4>
   1f9b0:	e2822001 	add	r2, r2, #1
   1f9b4:	e28d3048 	add	r3, sp, #72	; 0x48
   1f9b8:	e5843000 	str	r3, [r4]
   1f9bc:	e2811002 	add	r1, r1, #2
   1f9c0:	e3520007 	cmp	r2, #7
   1f9c4:	e3a03002 	mov	r3, #2
   1f9c8:	e5843004 	str	r3, [r4, #4]
   1f9cc:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1f9d0:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1f9d4:	d2844008 	addle	r4, r4, #8
   1f9d8:	ca000111 	bgt	1fe24 <_svfiprintf_r+0xd2c>
   1f9dc:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1f9e0:	e3530080 	cmp	r3, #128	; 0x80
   1f9e4:	0a0000a7 	beq	1fc88 <_svfiprintf_r+0xb90>
   1f9e8:	e59d3014 	ldr	r3, [sp, #20]
   1f9ec:	e0679003 	rsb	r9, r7, r3
   1f9f0:	e3590000 	cmp	r9, #0
   1f9f4:	da00003b 	ble	1fae8 <_svfiprintf_r+0x9f0>
   1f9f8:	e3590010 	cmp	r9, #16
   1f9fc:	e59fa76c 	ldr	r10, [pc, #1900]	; 20170 <_svfiprintf_r+0x1078>
   1fa00:	da000026 	ble	1faa0 <_svfiprintf_r+0x9a8>
   1fa04:	e1a0300a 	mov	r3, r10
   1fa08:	e58d5014 	str	r5, [sp, #20]
   1fa0c:	e1a00004 	mov	r0, r4
   1fa10:	e1a0a007 	mov	r10, r7
   1fa14:	e3a0b010 	mov	r11, #16
   1fa18:	e1a07006 	mov	r7, r6
   1fa1c:	e59d4020 	ldr	r4, [sp, #32]
   1fa20:	e59d5018 	ldr	r5, [sp, #24]
   1fa24:	e1a06003 	mov	r6, r3
   1fa28:	ea000002 	b	1fa38 <_svfiprintf_r+0x940>
   1fa2c:	e2499010 	sub	r9, r9, #16
   1fa30:	e3590010 	cmp	r9, #16
   1fa34:	da000013 	ble	1fa88 <_svfiprintf_r+0x990>
   1fa38:	e2822001 	add	r2, r2, #1
   1fa3c:	e2811010 	add	r1, r1, #16
   1fa40:	e3520007 	cmp	r2, #7
   1fa44:	e8800840 	stm	r0, {r6, r11}
   1fa48:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1fa4c:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1fa50:	d2800008 	addle	r0, r0, #8
   1fa54:	dafffff4 	ble	1fa2c <_svfiprintf_r+0x934>
   1fa58:	e1a00004 	mov	r0, r4
   1fa5c:	e1a01005 	mov	r1, r5
   1fa60:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fa64:	ebfffd3a 	bl	1ef54 <__ssprint_r>
   1fa68:	e3500000 	cmp	r0, #0
   1fa6c:	1a00007b 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fa70:	e2499010 	sub	r9, r9, #16
   1fa74:	e3590010 	cmp	r9, #16
   1fa78:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1fa7c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1fa80:	e28d0080 	add	r0, sp, #128	; 0x80
   1fa84:	caffffeb 	bgt	1fa38 <_svfiprintf_r+0x940>
   1fa88:	e1a03006 	mov	r3, r6
   1fa8c:	e59d5014 	ldr	r5, [sp, #20]
   1fa90:	e1a06007 	mov	r6, r7
   1fa94:	e1a04000 	mov	r4, r0
   1fa98:	e1a0700a 	mov	r7, r10
   1fa9c:	e1a0a003 	mov	r10, r3
   1faa0:	e2822001 	add	r2, r2, #1
   1faa4:	e0811009 	add	r1, r1, r9
   1faa8:	e3520007 	cmp	r2, #7
   1faac:	e584a000 	str	r10, [r4]
   1fab0:	e5849004 	str	r9, [r4, #4]
   1fab4:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1fab8:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1fabc:	d2844008 	addle	r4, r4, #8
   1fac0:	da000008 	ble	1fae8 <_svfiprintf_r+0x9f0>
   1fac4:	e59d0020 	ldr	r0, [sp, #32]
   1fac8:	e59d1018 	ldr	r1, [sp, #24]
   1facc:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fad0:	ebfffd1f 	bl	1ef54 <__ssprint_r>
   1fad4:	e3500000 	cmp	r0, #0
   1fad8:	1a000060 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fadc:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1fae0:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1fae4:	e28d4080 	add	r4, sp, #128	; 0x80
   1fae8:	e2822001 	add	r2, r2, #1
   1faec:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
   1faf0:	e0811007 	add	r1, r1, r7
   1faf4:	e3520007 	cmp	r2, #7
   1faf8:	e584c000 	str	r12, [r4]
   1fafc:	e5847004 	str	r7, [r4, #4]
   1fb00:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1fb04:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1fb08:	d2844008 	addle	r4, r4, #8
   1fb0c:	ca00009e 	bgt	1fd8c <_svfiprintf_r+0xc94>
   1fb10:	e3150004 	tst	r5, #4
   1fb14:	0a000030 	beq	1fbdc <_svfiprintf_r+0xae4>
   1fb18:	e59dc01c 	ldr	r12, [sp, #28]
   1fb1c:	e066500c 	rsb	r5, r6, r12
   1fb20:	e3550000 	cmp	r5, #0
   1fb24:	da00002c 	ble	1fbdc <_svfiprintf_r+0xae4>
   1fb28:	e3550010 	cmp	r5, #16
   1fb2c:	d59f3634 	ldrle	r3, [pc, #1588]	; 20168 <_svfiprintf_r+0x1070>
   1fb30:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1fb34:	d58d3030 	strle	r3, [sp, #48]	; 0x30
   1fb38:	da00001f 	ble	1fbbc <_svfiprintf_r+0xac4>
   1fb3c:	e59fc624 	ldr	r12, [pc, #1572]	; 20168 <_svfiprintf_r+0x1070>
   1fb40:	e3a07010 	mov	r7, #16
   1fb44:	e58dc030 	str	r12, [sp, #48]	; 0x30
   1fb48:	e59da020 	ldr	r10, [sp, #32]
   1fb4c:	e59d9018 	ldr	r9, [sp, #24]
   1fb50:	e1a03001 	mov	r3, r1
   1fb54:	ea000002 	b	1fb64 <_svfiprintf_r+0xa6c>
   1fb58:	e2455010 	sub	r5, r5, #16
   1fb5c:	e3550010 	cmp	r5, #16
   1fb60:	da000014 	ble	1fbb8 <_svfiprintf_r+0xac0>
   1fb64:	e2822001 	add	r2, r2, #1
   1fb68:	e59f15f8 	ldr	r1, [pc, #1528]	; 20168 <_svfiprintf_r+0x1070>
   1fb6c:	e2833010 	add	r3, r3, #16
   1fb70:	e3520007 	cmp	r2, #7
   1fb74:	e8840082 	stm	r4, {r1, r7}
   1fb78:	e58d3054 	str	r3, [sp, #84]	; 0x54
   1fb7c:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1fb80:	d2844008 	addle	r4, r4, #8
   1fb84:	dafffff3 	ble	1fb58 <_svfiprintf_r+0xa60>
   1fb88:	e1a0000a 	mov	r0, r10
   1fb8c:	e1a01009 	mov	r1, r9
   1fb90:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fb94:	ebfffcee 	bl	1ef54 <__ssprint_r>
   1fb98:	e3500000 	cmp	r0, #0
   1fb9c:	1a00002f 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fba0:	e2455010 	sub	r5, r5, #16
   1fba4:	e28d2050 	add	r2, sp, #80	; 0x50
   1fba8:	e3550010 	cmp	r5, #16
   1fbac:	e892000c 	ldm	r2, {r2, r3}
   1fbb0:	e28d4080 	add	r4, sp, #128	; 0x80
   1fbb4:	caffffea 	bgt	1fb64 <_svfiprintf_r+0xa6c>
   1fbb8:	e1a01003 	mov	r1, r3
   1fbbc:	e2822001 	add	r2, r2, #1
   1fbc0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   1fbc4:	e0851001 	add	r1, r5, r1
   1fbc8:	e3520007 	cmp	r2, #7
   1fbcc:	e8840028 	stm	r4, {r3, r5}
   1fbd0:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1fbd4:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1fbd8:	ca0000f5 	bgt	1ffb4 <_svfiprintf_r+0xebc>
   1fbdc:	e59dc010 	ldr	r12, [sp, #16]
   1fbe0:	e59d201c 	ldr	r2, [sp, #28]
   1fbe4:	e1560002 	cmp	r6, r2
   1fbe8:	a08cc006 	addge	r12, r12, r6
   1fbec:	b08cc002 	addlt	r12, r12, r2
   1fbf0:	e3510000 	cmp	r1, #0
   1fbf4:	e58dc010 	str	r12, [sp, #16]
   1fbf8:	1a00006c 	bne	1fdb0 <_svfiprintf_r+0xcb8>
   1fbfc:	e3a03000 	mov	r3, #0
   1fc00:	e58d3050 	str	r3, [sp, #80]	; 0x50
   1fc04:	e5d83000 	ldrb	r3, [r8]
   1fc08:	e3530000 	cmp	r3, #0
   1fc0c:	13530025 	cmpne	r3, #37	; 0x25
   1fc10:	e28d4080 	add	r4, sp, #128	; 0x80
   1fc14:	1afffd57 	bne	1f178 <_svfiprintf_r+0x80>
   1fc18:	e1a05008 	mov	r5, r8
   1fc1c:	eafffd6c 	b	1f1d4 <_svfiprintf_r+0xdc>
   1fc20:	e3530000 	cmp	r3, #0
   1fc24:	1a000068 	bne	1fdcc <_svfiprintf_r+0xcd4>
   1fc28:	e3150001 	tst	r5, #1
   1fc2c:	0a000086 	beq	1fe4c <_svfiprintf_r+0xd54>
   1fc30:	e3a03030 	mov	r3, #48	; 0x30
   1fc34:	e5cd307f 	strb	r3, [sp, #127]	; 0x7f
   1fc38:	e28d307f 	add	r3, sp, #127	; 0x7f
   1fc3c:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
   1fc40:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   1fc44:	eafffdf8 	b	1f42c <_svfiprintf_r+0x334>
   1fc48:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   1fc4c:	e3530000 	cmp	r3, #0
   1fc50:	159d0020 	ldrne	r0, [sp, #32]
   1fc54:	159d1018 	ldrne	r1, [sp, #24]
   1fc58:	128d204c 	addne	r2, sp, #76	; 0x4c
   1fc5c:	1bfffcbc 	blne	1ef54 <__ssprint_r>
   1fc60:	e59dc018 	ldr	r12, [sp, #24]
   1fc64:	e1dc30bc 	ldrh	r3, [r12, #12]
   1fc68:	e59dc010 	ldr	r12, [sp, #16]
   1fc6c:	e3130040 	tst	r3, #64	; 0x40
   1fc70:	13e0c000 	mvnne	r12, #0
   1fc74:	e58dc010 	str	r12, [sp, #16]
   1fc78:	e59d0010 	ldr	r0, [sp, #16]
   1fc7c:	e28dd0c4 	add	sp, sp, #196	; 0xc4
   1fc80:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   1fc84:	e12fff1e 	bx	lr
   1fc88:	e59dc01c 	ldr	r12, [sp, #28]
   1fc8c:	e066900c 	rsb	r9, r6, r12
   1fc90:	e3590000 	cmp	r9, #0
   1fc94:	daffff53 	ble	1f9e8 <_svfiprintf_r+0x8f0>
   1fc98:	e3590010 	cmp	r9, #16
   1fc9c:	e59fa4cc 	ldr	r10, [pc, #1228]	; 20170 <_svfiprintf_r+0x1078>
   1fca0:	da000026 	ble	1fd40 <_svfiprintf_r+0xc48>
   1fca4:	e1a0300a 	mov	r3, r10
   1fca8:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1fcac:	e1a00004 	mov	r0, r4
   1fcb0:	e1a0a007 	mov	r10, r7
   1fcb4:	e3a0b010 	mov	r11, #16
   1fcb8:	e1a07006 	mov	r7, r6
   1fcbc:	e59d4020 	ldr	r4, [sp, #32]
   1fcc0:	e59d5018 	ldr	r5, [sp, #24]
   1fcc4:	e1a06003 	mov	r6, r3
   1fcc8:	ea000002 	b	1fcd8 <_svfiprintf_r+0xbe0>
   1fccc:	e2499010 	sub	r9, r9, #16
   1fcd0:	e3590010 	cmp	r9, #16
   1fcd4:	da000013 	ble	1fd28 <_svfiprintf_r+0xc30>
   1fcd8:	e2822001 	add	r2, r2, #1
   1fcdc:	e2811010 	add	r1, r1, #16
   1fce0:	e3520007 	cmp	r2, #7
   1fce4:	e8800840 	stm	r0, {r6, r11}
   1fce8:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1fcec:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1fcf0:	d2800008 	addle	r0, r0, #8
   1fcf4:	dafffff4 	ble	1fccc <_svfiprintf_r+0xbd4>
   1fcf8:	e1a00004 	mov	r0, r4
   1fcfc:	e1a01005 	mov	r1, r5
   1fd00:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fd04:	ebfffc92 	bl	1ef54 <__ssprint_r>
   1fd08:	e3500000 	cmp	r0, #0
   1fd0c:	1affffd3 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fd10:	e2499010 	sub	r9, r9, #16
   1fd14:	e3590010 	cmp	r9, #16
   1fd18:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1fd1c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1fd20:	e28d0080 	add	r0, sp, #128	; 0x80
   1fd24:	caffffeb 	bgt	1fcd8 <_svfiprintf_r+0xbe0>
   1fd28:	e1a03006 	mov	r3, r6
   1fd2c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1fd30:	e1a06007 	mov	r6, r7
   1fd34:	e1a04000 	mov	r4, r0
   1fd38:	e1a0700a 	mov	r7, r10
   1fd3c:	e1a0a003 	mov	r10, r3
   1fd40:	e2822001 	add	r2, r2, #1
   1fd44:	e0811009 	add	r1, r1, r9
   1fd48:	e3520007 	cmp	r2, #7
   1fd4c:	e584a000 	str	r10, [r4]
   1fd50:	e5849004 	str	r9, [r4, #4]
   1fd54:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1fd58:	e58d2050 	str	r2, [sp, #80]	; 0x50
   1fd5c:	d2844008 	addle	r4, r4, #8
   1fd60:	daffff20 	ble	1f9e8 <_svfiprintf_r+0x8f0>
   1fd64:	e59d0020 	ldr	r0, [sp, #32]
   1fd68:	e59d1018 	ldr	r1, [sp, #24]
   1fd6c:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fd70:	ebfffc77 	bl	1ef54 <__ssprint_r>
   1fd74:	e3500000 	cmp	r0, #0
   1fd78:	1affffb8 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fd7c:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1fd80:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1fd84:	e28d4080 	add	r4, sp, #128	; 0x80
   1fd88:	eaffff16 	b	1f9e8 <_svfiprintf_r+0x8f0>
   1fd8c:	e59d0020 	ldr	r0, [sp, #32]
   1fd90:	e59d1018 	ldr	r1, [sp, #24]
   1fd94:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fd98:	ebfffc6d 	bl	1ef54 <__ssprint_r>
   1fd9c:	e3500000 	cmp	r0, #0
   1fda0:	1affffae 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fda4:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1fda8:	e28d4080 	add	r4, sp, #128	; 0x80
   1fdac:	eaffff57 	b	1fb10 <_svfiprintf_r+0xa18>
   1fdb0:	e59d0020 	ldr	r0, [sp, #32]
   1fdb4:	e59d1018 	ldr	r1, [sp, #24]
   1fdb8:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fdbc:	ebfffc64 	bl	1ef54 <__ssprint_r>
   1fdc0:	e3500000 	cmp	r0, #0
   1fdc4:	0affff8c 	beq	1fbfc <_svfiprintf_r+0xb04>
   1fdc8:	eaffffa4 	b	1fc60 <_svfiprintf_r+0xb68>
   1fdcc:	e28dc080 	add	r12, sp, #128	; 0x80
   1fdd0:	e1a07002 	mov	r7, r2
   1fdd4:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   1fdd8:	eafffd93 	b	1f42c <_svfiprintf_r+0x334>
   1fddc:	e59d0020 	ldr	r0, [sp, #32]
   1fde0:	e59d1018 	ldr	r1, [sp, #24]
   1fde4:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fde8:	ebfffc59 	bl	1ef54 <__ssprint_r>
   1fdec:	e3500000 	cmp	r0, #0
   1fdf0:	1affff9a 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fdf4:	e28d4080 	add	r4, sp, #128	; 0x80
   1fdf8:	eafffcf2 	b	1f1c8 <_svfiprintf_r+0xd0>
   1fdfc:	e59d0020 	ldr	r0, [sp, #32]
   1fe00:	e59d1018 	ldr	r1, [sp, #24]
   1fe04:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fe08:	ebfffc51 	bl	1ef54 <__ssprint_r>
   1fe0c:	e3500000 	cmp	r0, #0
   1fe10:	1affff92 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fe14:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1fe18:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1fe1c:	e28d4080 	add	r4, sp, #128	; 0x80
   1fe20:	eafffee0 	b	1f9a8 <_svfiprintf_r+0x8b0>
   1fe24:	e59d0020 	ldr	r0, [sp, #32]
   1fe28:	e59d1018 	ldr	r1, [sp, #24]
   1fe2c:	e28d204c 	add	r2, sp, #76	; 0x4c
   1fe30:	ebfffc47 	bl	1ef54 <__ssprint_r>
   1fe34:	e3500000 	cmp	r0, #0
   1fe38:	1affff88 	bne	1fc60 <_svfiprintf_r+0xb68>
   1fe3c:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1fe40:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1fe44:	e28d4080 	add	r4, sp, #128	; 0x80
   1fe48:	eafffee3 	b	1f9dc <_svfiprintf_r+0x8e4>
   1fe4c:	e1a07003 	mov	r7, r3
   1fe50:	e28d3080 	add	r3, sp, #128	; 0x80
   1fe54:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   1fe58:	eafffd73 	b	1f42c <_svfiprintf_r+0x334>
   1fe5c:	e3570000 	cmp	r7, #0
   1fe60:	03560009 	cmpeq	r6, #9
   1fe64:	9a000064 	bls	1fffc <_svfiprintf_r+0xf04>
   1fe68:	e28db07f 	add	r11, sp, #127	; 0x7f
   1fe6c:	e58d4014 	str	r4, [sp, #20]
   1fe70:	e1a0400b 	mov	r4, r11
   1fe74:	e1a00006 	mov	r0, r6
   1fe78:	e1a01007 	mov	r1, r7
   1fe7c:	e3a0200a 	mov	r2, #10
   1fe80:	e3a03000 	mov	r3, #0
   1fe84:	ebffe2f2 	bl	18a54 <__aeabi_uldivmod>
   1fe88:	e2822030 	add	r2, r2, #48	; 0x30
   1fe8c:	e5c42000 	strb	r2, [r4]
   1fe90:	e1a00006 	mov	r0, r6
   1fe94:	e1a01007 	mov	r1, r7
   1fe98:	e3a0200a 	mov	r2, #10
   1fe9c:	e3a03000 	mov	r3, #0
   1fea0:	ebffe2eb 	bl	18a54 <__aeabi_uldivmod>
   1fea4:	e1a06000 	mov	r6, r0
   1fea8:	e1a07001 	mov	r7, r1
   1feac:	e1961007 	orrs	r1, r6, r7
   1feb0:	e1a0b004 	mov	r11, r4
   1feb4:	e2444001 	sub	r4, r4, #1
   1feb8:	1affffed 	bne	1fe74 <_svfiprintf_r+0xd7c>
   1febc:	e59dc00c 	ldr	r12, [sp, #12]
   1fec0:	e58db02c 	str	r11, [sp, #44]	; 0x2c
   1fec4:	e59d4014 	ldr	r4, [sp, #20]
   1fec8:	e06b700c 	rsb	r7, r11, r12
   1fecc:	eafffd56 	b	1f42c <_svfiprintf_r+0x334>
   1fed0:	e58da014 	str	r10, [sp, #20]
   1fed4:	e1a0a004 	mov	r10, r4
   1fed8:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   1fedc:	e3a0b00f 	mov	r11, #15
   1fee0:	e1a01226 	lsr	r1, r6, #4
   1fee4:	e006200b 	and	r2, r6, r11
   1fee8:	e1811e07 	orr	r1, r1, r7, lsl #28
   1feec:	e1a03227 	lsr	r3, r7, #4
   1fef0:	e0842002 	add	r2, r4, r2
   1fef4:	e1a07003 	mov	r7, r3
   1fef8:	e1a06001 	mov	r6, r1
   1fefc:	e5d22000 	ldrb	r2, [r2]
   1ff00:	e1961007 	orrs	r1, r6, r7
   1ff04:	e1a03000 	mov	r3, r0
   1ff08:	e5c02000 	strb	r2, [r0]
   1ff0c:	e2400001 	sub	r0, r0, #1
   1ff10:	1afffff2 	bne	1fee0 <_svfiprintf_r+0xde8>
   1ff14:	e1a0400a 	mov	r4, r10
   1ff18:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   1ff1c:	e59da014 	ldr	r10, [sp, #20]
   1ff20:	eafffd3f 	b	1f424 <_svfiprintf_r+0x32c>
   1ff24:	e3150010 	tst	r5, #16
   1ff28:	0a00004b 	beq	2005c <_svfiprintf_r+0xf64>
   1ff2c:	e59c2000 	ldr	r2, [r12]
   1ff30:	e3a07000 	mov	r7, #0
   1ff34:	e1a06002 	mov	r6, r2
   1ff38:	e28cc004 	add	r12, r12, #4
   1ff3c:	e0522007 	subs	r2, r2, r7
   1ff40:	13a02001 	movne	r2, #1
   1ff44:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1ff48:	e3a03001 	mov	r3, #1
   1ff4c:	eafffd16 	b	1f3ac <_svfiprintf_r+0x2b4>
   1ff50:	e2151010 	ands	r1, r5, #16
   1ff54:	1a000034 	bne	2002c <_svfiprintf_r+0xf34>
   1ff58:	e2153040 	ands	r3, r5, #64	; 0x40
   1ff5c:	0a000032 	beq	2002c <_svfiprintf_r+0xf34>
   1ff60:	e1dc20b0 	ldrh	r2, [r12]
   1ff64:	e3a07000 	mov	r7, #0
   1ff68:	e1a06002 	mov	r6, r2
   1ff6c:	e28cc004 	add	r12, r12, #4
   1ff70:	e0522007 	subs	r2, r2, r7
   1ff74:	13a02001 	movne	r2, #1
   1ff78:	e58dc024 	str	r12, [sp, #36]	; 0x24
   1ff7c:	e1a03001 	mov	r3, r1
   1ff80:	eafffd09 	b	1f3ac <_svfiprintf_r+0x2b4>
   1ff84:	e1962007 	orrs	r2, r6, r7
   1ff88:	13a02030 	movne	r2, #48	; 0x30
   1ff8c:	15cd2048 	strbne	r2, [sp, #72]	; 0x48
   1ff90:	15cd3049 	strbne	r3, [sp, #73]	; 0x49
   1ff94:	13855002 	orrne	r5, r5, #2
   1ff98:	13a02001 	movne	r2, #1
   1ff9c:	03a02000 	moveq	r2, #0
   1ffa0:	e3a03002 	mov	r3, #2
   1ffa4:	eafffd00 	b	1f3ac <_svfiprintf_r+0x2b4>
   1ffa8:	e5d83000 	ldrb	r3, [r8]
   1ffac:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1ffb0:	eafffc92 	b	1f200 <_svfiprintf_r+0x108>
   1ffb4:	e59d0020 	ldr	r0, [sp, #32]
   1ffb8:	e59d1018 	ldr	r1, [sp, #24]
   1ffbc:	e28d204c 	add	r2, sp, #76	; 0x4c
   1ffc0:	ebfffbe3 	bl	1ef54 <__ssprint_r>
   1ffc4:	e3500000 	cmp	r0, #0
   1ffc8:	1affff24 	bne	1fc60 <_svfiprintf_r+0xb68>
   1ffcc:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   1ffd0:	eaffff01 	b	1fbdc <_svfiprintf_r+0xae4>
   1ffd4:	e3520030 	cmp	r2, #48	; 0x30
   1ffd8:	059dc00c 	ldreq	r12, [sp, #12]
   1ffdc:	059d302c 	ldreq	r3, [sp, #44]	; 0x2c
   1ffe0:	13a02030 	movne	r2, #48	; 0x30
   1ffe4:	159dc00c 	ldrne	r12, [sp, #12]
   1ffe8:	15432001 	strbne	r2, [r3, #-1]
   1ffec:	11a03000 	movne	r3, r0
   1fff0:	158d002c 	strne	r0, [sp, #44]	; 0x2c
   1fff4:	e063700c 	rsb	r7, r3, r12
   1fff8:	eafffd0b 	b	1f42c <_svfiprintf_r+0x334>
   1fffc:	e2866030 	add	r6, r6, #48	; 0x30
   20000:	e28dc07f 	add	r12, sp, #127	; 0x7f
   20004:	e5cd607f 	strb	r6, [sp, #127]	; 0x7f
   20008:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
   2000c:	e58dc02c 	str	r12, [sp, #44]	; 0x2c
   20010:	eafffd05 	b	1f42c <_svfiprintf_r+0x334>
   20014:	e59c2000 	ldr	r2, [r12]
   20018:	e28cc004 	add	r12, r12, #4
   2001c:	e1a06002 	mov	r6, r2
   20020:	e3a07000 	mov	r7, #0
   20024:	e58dc024 	str	r12, [sp, #36]	; 0x24
   20028:	eafffdcd 	b	1f764 <_svfiprintf_r+0x66c>
   2002c:	e59c2000 	ldr	r2, [r12]
   20030:	e3a07000 	mov	r7, #0
   20034:	e1a06002 	mov	r6, r2
   20038:	e28cc004 	add	r12, r12, #4
   2003c:	e0522007 	subs	r2, r2, r7
   20040:	13a02001 	movne	r2, #1
   20044:	e58dc024 	str	r12, [sp, #36]	; 0x24
   20048:	eafffcd7 	b	1f3ac <_svfiprintf_r+0x2b4>
   2004c:	e3150040 	tst	r5, #64	; 0x40
   20050:	0afffe0c 	beq	1f888 <_svfiprintf_r+0x790>
   20054:	e1dc30f0 	ldrsh	r3, [r12]
   20058:	eafffe0b 	b	1f88c <_svfiprintf_r+0x794>
   2005c:	e3150040 	tst	r5, #64	; 0x40
   20060:	0affffb1 	beq	1ff2c <_svfiprintf_r+0xe34>
   20064:	e1dc20b0 	ldrh	r2, [r12]
   20068:	eaffffb0 	b	1ff30 <_svfiprintf_r+0xe38>
   2006c:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   20070:	e59d2010 	ldr	r2, [sp, #16]
   20074:	e59c3000 	ldr	r3, [r12]
   20078:	e1a01fc2 	asr	r1, r2, #31
   2007c:	e28cc004 	add	r12, r12, #4
   20080:	e5832000 	str	r2, [r3]
   20084:	e5831004 	str	r1, [r3, #4]
   20088:	e58dc024 	str	r12, [sp, #36]	; 0x24
   2008c:	eafffc35 	b	1f168 <_svfiprintf_r+0x70>
   20090:	ebffe5f4 	bl	19868 <strlen>
   20094:	e5dda047 	ldrb	r10, [sp, #71]	; 0x47
   20098:	e1a07000 	mov	r7, r0
   2009c:	e58db024 	str	r11, [sp, #36]	; 0x24
   200a0:	eafffd1d 	b	1f51c <_svfiprintf_r+0x424>
   200a4:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   200a8:	e59c3000 	ldr	r3, [r12]
   200ac:	e28cc004 	add	r12, r12, #4
   200b0:	e58dc024 	str	r12, [sp, #36]	; 0x24
   200b4:	e59dc010 	ldr	r12, [sp, #16]
   200b8:	e583c000 	str	r12, [r3]
   200bc:	eafffc29 	b	1f168 <_svfiprintf_r+0x70>
   200c0:	e3a01040 	mov	r1, #64	; 0x40
   200c4:	e58d2004 	str	r2, [sp, #4]
   200c8:	ebfff592 	bl	1d718 <_malloc_r>
   200cc:	e59dc018 	ldr	r12, [sp, #24]
   200d0:	e3500000 	cmp	r0, #0
   200d4:	e58c0000 	str	r0, [r12]
   200d8:	e58c0010 	str	r0, [r12, #16]
   200dc:	e59d2004 	ldr	r2, [sp, #4]
   200e0:	0a000019 	beq	2014c <_svfiprintf_r+0x1054>
   200e4:	e59dc018 	ldr	r12, [sp, #24]
   200e8:	e3a03040 	mov	r3, #64	; 0x40
   200ec:	e58c3014 	str	r3, [r12, #20]
   200f0:	eafffc0c 	b	1f128 <_svfiprintf_r+0x30>
   200f4:	e59f3078 	ldr	r3, [pc, #120]	; 20174 <_svfiprintf_r+0x107c>
   200f8:	e3590006 	cmp	r9, #6
   200fc:	31a07009 	movcc	r7, r9
   20100:	23a07006 	movcs	r7, #6
   20104:	e1c76fc7 	bic	r6, r7, r7, asr #31
   20108:	e58db024 	str	r11, [sp, #36]	; 0x24
   2010c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   20110:	eafffd37 	b	1f5f4 <_svfiprintf_r+0x4fc>
   20114:	e5dda047 	ldrb	r10, [sp, #71]	; 0x47
   20118:	e58db024 	str	r11, [sp, #36]	; 0x24
   2011c:	e1a07009 	mov	r7, r9
   20120:	e58d0014 	str	r0, [sp, #20]
   20124:	eafffcc1 	b	1f430 <_svfiprintf_r+0x338>
   20128:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
   2012c:	e59c9000 	ldr	r9, [r12]
   20130:	e28c2004 	add	r2, r12, #4
   20134:	e3590000 	cmp	r9, #0
   20138:	e5d83001 	ldrb	r3, [r8, #1]
   2013c:	e58d2024 	str	r2, [sp, #36]	; 0x24
   20140:	e1a08000 	mov	r8, r0
   20144:	b3e09000 	mvnlt	r9, #0
   20148:	eafffc2c 	b	1f200 <_svfiprintf_r+0x108>
   2014c:	e59dc020 	ldr	r12, [sp, #32]
   20150:	e3a0300c 	mov	r3, #12
   20154:	e58c3000 	str	r3, [r12]
   20158:	e3e0c000 	mvn	r12, #0
   2015c:	e58dc010 	str	r12, [sp, #16]
   20160:	eafffec4 	b	1fc78 <_svfiprintf_r+0xb80>
   20164:	00022840 	.word	0x00022840
   20168:	000229a8 	.word	0x000229a8
   2016c:	000227f4 	.word	0x000227f4
   20170:	000229b8 	.word	0x000229b8
   20174:	00022854 	.word	0x00022854

00020178 <_calloc_r>:
   20178:	e92d4010 	push	{r4, lr}
   2017c:	e0010192 	mul	r1, r2, r1
   20180:	ebfff564 	bl	1d718 <_malloc_r>
   20184:	e2504000 	subs	r4, r0, #0
   20188:	0a00000b 	beq	201bc <_calloc_r+0x44>
   2018c:	e5142004 	ldr	r2, [r4, #-4]
   20190:	e3c22003 	bic	r2, r2, #3
   20194:	e2422004 	sub	r2, r2, #4
   20198:	e3520024 	cmp	r2, #36	; 0x24
   2019c:	8a000017 	bhi	20200 <_calloc_r+0x88>
   201a0:	e3520013 	cmp	r2, #19
   201a4:	91a03004 	movls	r3, r4
   201a8:	8a000006 	bhi	201c8 <_calloc_r+0x50>
   201ac:	e3a02000 	mov	r2, #0
   201b0:	e5832000 	str	r2, [r3]
   201b4:	e5832004 	str	r2, [r3, #4]
   201b8:	e5832008 	str	r2, [r3, #8]
   201bc:	e1a00004 	mov	r0, r4
   201c0:	e8bd4010 	pop	{r4, lr}
   201c4:	e12fff1e 	bx	lr
   201c8:	e3a03000 	mov	r3, #0
   201cc:	e352001b 	cmp	r2, #27
   201d0:	e5843000 	str	r3, [r4]
   201d4:	e5843004 	str	r3, [r4, #4]
   201d8:	92843008 	addls	r3, r4, #8
   201dc:	9afffff2 	bls	201ac <_calloc_r+0x34>
   201e0:	e3520024 	cmp	r2, #36	; 0x24
   201e4:	e5843008 	str	r3, [r4, #8]
   201e8:	e584300c 	str	r3, [r4, #12]
   201ec:	05843010 	streq	r3, [r4, #16]
   201f0:	05843014 	streq	r3, [r4, #20]
   201f4:	12843010 	addne	r3, r4, #16
   201f8:	02843018 	addeq	r3, r4, #24
   201fc:	eaffffea 	b	201ac <_calloc_r+0x34>
   20200:	e3a01000 	mov	r1, #0
   20204:	ebffe54a 	bl	19734 <memset>
   20208:	eaffffeb 	b	201bc <_calloc_r+0x44>

0002020c <_malloc_trim_r>:
   2020c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   20210:	e59f50e4 	ldr	r5, [pc, #228]	; 202fc <_malloc_trim_r+0xf0>
   20214:	e1a07001 	mov	r7, r1
   20218:	e1a04000 	mov	r4, r0
   2021c:	ebfff74b 	bl	1df50 <__malloc_lock>
   20220:	e5953008 	ldr	r3, [r5, #8]
   20224:	e5936004 	ldr	r6, [r3, #4]
   20228:	e3c66003 	bic	r6, r6, #3
   2022c:	e2863efe 	add	r3, r6, #4064	; 0xfe0
   20230:	e283300f 	add	r3, r3, #15
   20234:	e0677003 	rsb	r7, r7, r3
   20238:	e1a07627 	lsr	r7, r7, #12
   2023c:	e2477001 	sub	r7, r7, #1
   20240:	e1a07607 	lsl	r7, r7, #12
   20244:	e3570a01 	cmp	r7, #4096	; 0x1000
   20248:	ba000006 	blt	20268 <_malloc_trim_r+0x5c>
   2024c:	e1a00004 	mov	r0, r4
   20250:	e3a01000 	mov	r1, #0
   20254:	ebfffaa2 	bl	1ece4 <_sbrk_r>
   20258:	e5953008 	ldr	r3, [r5, #8]
   2025c:	e0833006 	add	r3, r3, r6
   20260:	e1500003 	cmp	r0, r3
   20264:	0a000004 	beq	2027c <_malloc_trim_r+0x70>
   20268:	e1a00004 	mov	r0, r4
   2026c:	ebfff738 	bl	1df54 <__malloc_unlock>
   20270:	e3a00000 	mov	r0, #0
   20274:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
   20278:	e12fff1e 	bx	lr
   2027c:	e1a00004 	mov	r0, r4
   20280:	e2671000 	rsb	r1, r7, #0
   20284:	ebfffa96 	bl	1ece4 <_sbrk_r>
   20288:	e3700001 	cmn	r0, #1
   2028c:	0a00000b 	beq	202c0 <_malloc_trim_r+0xb4>
   20290:	e59f3068 	ldr	r3, [pc, #104]	; 20300 <_malloc_trim_r+0xf4>
   20294:	e5952008 	ldr	r2, [r5, #8]
   20298:	e5931000 	ldr	r1, [r3]
   2029c:	e0676006 	rsb	r6, r7, r6
   202a0:	e3866001 	orr	r6, r6, #1
   202a4:	e0677001 	rsb	r7, r7, r1
   202a8:	e1a00004 	mov	r0, r4
   202ac:	e5826004 	str	r6, [r2, #4]
   202b0:	e5837000 	str	r7, [r3]
   202b4:	ebfff726 	bl	1df54 <__malloc_unlock>
   202b8:	e3a00001 	mov	r0, #1
   202bc:	eaffffec 	b	20274 <_malloc_trim_r+0x68>
   202c0:	e1a00004 	mov	r0, r4
   202c4:	e3a01000 	mov	r1, #0
   202c8:	ebfffa85 	bl	1ece4 <_sbrk_r>
   202cc:	e5953008 	ldr	r3, [r5, #8]
   202d0:	e0632000 	rsb	r2, r3, r0
   202d4:	e352000f 	cmp	r2, #15
   202d8:	daffffe2 	ble	20268 <_malloc_trim_r+0x5c>
   202dc:	e59f1020 	ldr	r1, [pc, #32]	; 20304 <_malloc_trim_r+0xf8>
   202e0:	e5911000 	ldr	r1, [r1]
   202e4:	e0610000 	rsb	r0, r1, r0
   202e8:	e59f1010 	ldr	r1, [pc, #16]	; 20300 <_malloc_trim_r+0xf4>
   202ec:	e3822001 	orr	r2, r2, #1
   202f0:	e5810000 	str	r0, [r1]
   202f4:	e5832004 	str	r2, [r3, #4]
   202f8:	eaffffda 	b	20268 <_malloc_trim_r+0x5c>
   202fc:	00023094 	.word	0x00023094
   20300:	26758c54 	.word	0x26758c54
   20304:	0002349c 	.word	0x0002349c

00020308 <_free_r>:
   20308:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   2030c:	e2514000 	subs	r4, r1, #0
   20310:	e1a06000 	mov	r6, r0
   20314:	0a000046 	beq	20434 <_free_r+0x12c>
   20318:	ebfff70c 	bl	1df50 <__malloc_lock>
   2031c:	e514e004 	ldr	lr, [r4, #-4]
   20320:	e59f1238 	ldr	r1, [pc, #568]	; 20560 <_free_r+0x258>
   20324:	e244c008 	sub	r12, r4, #8
   20328:	e3ce3001 	bic	r3, lr, #1
   2032c:	e08c2003 	add	r2, r12, r3
   20330:	e5910008 	ldr	r0, [r1, #8]
   20334:	e5925004 	ldr	r5, [r2, #4]
   20338:	e1500002 	cmp	r0, r2
   2033c:	e3c55003 	bic	r5, r5, #3
   20340:	0a00004a 	beq	20470 <_free_r+0x168>
   20344:	e21ee001 	ands	lr, lr, #1
   20348:	e5825004 	str	r5, [r2, #4]
   2034c:	13a0e000 	movne	lr, #0
   20350:	1a000009 	bne	2037c <_free_r+0x74>
   20354:	e5144008 	ldr	r4, [r4, #-8]
   20358:	e064c00c 	rsb	r12, r4, r12
   2035c:	e59c0008 	ldr	r0, [r12, #8]
   20360:	e2817008 	add	r7, r1, #8
   20364:	e1500007 	cmp	r0, r7
   20368:	e0833004 	add	r3, r3, r4
   2036c:	159c400c 	ldrne	r4, [r12, #12]
   20370:	1580400c 	strne	r4, [r0, #12]
   20374:	15840008 	strne	r0, [r4, #8]
   20378:	03a0e001 	moveq	lr, #1
   2037c:	e0820005 	add	r0, r2, r5
   20380:	e5900004 	ldr	r0, [r0, #4]
   20384:	e3100001 	tst	r0, #1
   20388:	1a000009 	bne	203b4 <_free_r+0xac>
   2038c:	e35e0000 	cmp	lr, #0
   20390:	e5920008 	ldr	r0, [r2, #8]
   20394:	e0833005 	add	r3, r3, r5
   20398:	1a000002 	bne	203a8 <_free_r+0xa0>
   2039c:	e59f41c0 	ldr	r4, [pc, #448]	; 20564 <_free_r+0x25c>
   203a0:	e1500004 	cmp	r0, r4
   203a4:	0a000047 	beq	204c8 <_free_r+0x1c0>
   203a8:	e592200c 	ldr	r2, [r2, #12]
   203ac:	e580200c 	str	r2, [r0, #12]
   203b0:	e5820008 	str	r0, [r2, #8]
   203b4:	e3832001 	orr	r2, r3, #1
   203b8:	e35e0000 	cmp	lr, #0
   203bc:	e58c2004 	str	r2, [r12, #4]
   203c0:	e78c3003 	str	r3, [r12, r3]
   203c4:	1a000018 	bne	2042c <_free_r+0x124>
   203c8:	e3530c02 	cmp	r3, #512	; 0x200
   203cc:	3a00001a 	bcc	2043c <_free_r+0x134>
   203d0:	e1a024a3 	lsr	r2, r3, #9
   203d4:	e3520004 	cmp	r2, #4
   203d8:	8a000042 	bhi	204e8 <_free_r+0x1e0>
   203dc:	e1a0e323 	lsr	lr, r3, #6
   203e0:	e28ee038 	add	lr, lr, #56	; 0x38
   203e4:	e1a0008e 	lsl	r0, lr, #1
   203e8:	e0810100 	add	r0, r1, r0, lsl #2
   203ec:	e5902008 	ldr	r2, [r0, #8]
   203f0:	e1520000 	cmp	r2, r0
   203f4:	e59f1164 	ldr	r1, [pc, #356]	; 20560 <_free_r+0x258>
   203f8:	0a000044 	beq	20510 <_free_r+0x208>
   203fc:	e5921004 	ldr	r1, [r2, #4]
   20400:	e3c11003 	bic	r1, r1, #3
   20404:	e1530001 	cmp	r3, r1
   20408:	2a000002 	bcs	20418 <_free_r+0x110>
   2040c:	e5922008 	ldr	r2, [r2, #8]
   20410:	e1500002 	cmp	r0, r2
   20414:	1afffff8 	bne	203fc <_free_r+0xf4>
   20418:	e592300c 	ldr	r3, [r2, #12]
   2041c:	e58c300c 	str	r3, [r12, #12]
   20420:	e58c2008 	str	r2, [r12, #8]
   20424:	e582c00c 	str	r12, [r2, #12]
   20428:	e583c008 	str	r12, [r3, #8]
   2042c:	e1a00006 	mov	r0, r6
   20430:	ebfff6c7 	bl	1df54 <__malloc_unlock>
   20434:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
   20438:	e12fff1e 	bx	lr
   2043c:	e5912004 	ldr	r2, [r1, #4]
   20440:	e1a031a3 	lsr	r3, r3, #3
   20444:	e1a00143 	asr	r0, r3, #2
   20448:	e3a0e001 	mov	lr, #1
   2044c:	e182001e 	orr	r0, r2, lr, lsl r0
   20450:	e0813183 	add	r3, r1, r3, lsl #3
   20454:	e5932008 	ldr	r2, [r3, #8]
   20458:	e58c300c 	str	r3, [r12, #12]
   2045c:	e58c2008 	str	r2, [r12, #8]
   20460:	e5810004 	str	r0, [r1, #4]
   20464:	e583c008 	str	r12, [r3, #8]
   20468:	e582c00c 	str	r12, [r2, #12]
   2046c:	eaffffee 	b	2042c <_free_r+0x124>
   20470:	e31e0001 	tst	lr, #1
   20474:	e0853003 	add	r3, r5, r3
   20478:	1a000006 	bne	20498 <_free_r+0x190>
   2047c:	e5142008 	ldr	r2, [r4, #-8]
   20480:	e062c00c 	rsb	r12, r2, r12
   20484:	e59c000c 	ldr	r0, [r12, #12]
   20488:	e59ce008 	ldr	lr, [r12, #8]
   2048c:	e58e000c 	str	r0, [lr, #12]
   20490:	e580e008 	str	lr, [r0, #8]
   20494:	e0833002 	add	r3, r3, r2
   20498:	e59f20c8 	ldr	r2, [pc, #200]	; 20568 <_free_r+0x260>
   2049c:	e5920000 	ldr	r0, [r2]
   204a0:	e3832001 	orr	r2, r3, #1
   204a4:	e1530000 	cmp	r3, r0
   204a8:	e58c2004 	str	r2, [r12, #4]
   204ac:	e581c008 	str	r12, [r1, #8]
   204b0:	3affffdd 	bcc	2042c <_free_r+0x124>
   204b4:	e59f30b0 	ldr	r3, [pc, #176]	; 2056c <_free_r+0x264>
   204b8:	e1a00006 	mov	r0, r6
   204bc:	e5931000 	ldr	r1, [r3]
   204c0:	ebffff51 	bl	2020c <_malloc_trim_r>
   204c4:	eaffffd8 	b	2042c <_free_r+0x124>
   204c8:	e3832001 	orr	r2, r3, #1
   204cc:	e581c014 	str	r12, [r1, #20]
   204d0:	e581c010 	str	r12, [r1, #16]
   204d4:	e58c000c 	str	r0, [r12, #12]
   204d8:	e58c0008 	str	r0, [r12, #8]
   204dc:	e58c2004 	str	r2, [r12, #4]
   204e0:	e78c3003 	str	r3, [r12, r3]
   204e4:	eaffffd0 	b	2042c <_free_r+0x124>
   204e8:	e3520014 	cmp	r2, #20
   204ec:	9282e05b 	addls	lr, r2, #91	; 0x5b
   204f0:	91a0008e 	lslls	r0, lr, #1
   204f4:	9affffbb 	bls	203e8 <_free_r+0xe0>
   204f8:	e3520054 	cmp	r2, #84	; 0x54
   204fc:	8a00000a 	bhi	2052c <_free_r+0x224>
   20500:	e1a0e623 	lsr	lr, r3, #12
   20504:	e28ee06e 	add	lr, lr, #110	; 0x6e
   20508:	e1a0008e 	lsl	r0, lr, #1
   2050c:	eaffffb5 	b	203e8 <_free_r+0xe0>
   20510:	e5913004 	ldr	r3, [r1, #4]
   20514:	e1a0e14e 	asr	lr, lr, #2
   20518:	e3a00001 	mov	r0, #1
   2051c:	e1830e10 	orr	r0, r3, r0, lsl lr
   20520:	e1a03002 	mov	r3, r2
   20524:	e5810004 	str	r0, [r1, #4]
   20528:	eaffffbb 	b	2041c <_free_r+0x114>
   2052c:	e3520f55 	cmp	r2, #340	; 0x154
   20530:	91a0e7a3 	lsrls	lr, r3, #15
   20534:	928ee077 	addls	lr, lr, #119	; 0x77
   20538:	91a0008e 	lslls	r0, lr, #1
   2053c:	9affffa9 	bls	203e8 <_free_r+0xe0>
   20540:	e59f0028 	ldr	r0, [pc, #40]	; 20570 <_free_r+0x268>
   20544:	e1520000 	cmp	r2, r0
   20548:	91a0e923 	lsrls	lr, r3, #18
   2054c:	928ee07c 	addls	lr, lr, #124	; 0x7c
   20550:	91a0008e 	lslls	r0, lr, #1
   20554:	83a000fc 	movhi	r0, #252	; 0xfc
   20558:	83a0e07e 	movhi	lr, #126	; 0x7e
   2055c:	eaffffa1 	b	203e8 <_free_r+0xe0>
   20560:	00023094 	.word	0x00023094
   20564:	0002309c 	.word	0x0002309c
   20568:	000234a0 	.word	0x000234a0
   2056c:	26758c50 	.word	0x26758c50
   20570:	00000554 	.word	0x00000554

00020574 <memmove>:
   20574:	e1500001 	cmp	r0, r1
   20578:	e92d00f0 	push	{r4, r5, r6, r7}
   2057c:	9a00000e 	bls	205bc <memmove+0x48>
   20580:	e081c002 	add	r12, r1, r2
   20584:	e150000c 	cmp	r0, r12
   20588:	2a00000b 	bcs	205bc <memmove+0x48>
   2058c:	e3520000 	cmp	r2, #0
   20590:	e0803002 	add	r3, r0, r2
   20594:	e2422001 	sub	r2, r2, #1
   20598:	0a000005 	beq	205b4 <memmove+0x40>
   2059c:	e1a0100c 	mov	r1, r12
   205a0:	e571c001 	ldrb	r12, [r1, #-1]!
   205a4:	e2422001 	sub	r2, r2, #1
   205a8:	e3720001 	cmn	r2, #1
   205ac:	e563c001 	strb	r12, [r3, #-1]!
   205b0:	1afffffa 	bne	205a0 <memmove+0x2c>
   205b4:	e8bd00f0 	pop	{r4, r5, r6, r7}
   205b8:	e12fff1e 	bx	lr
   205bc:	e352000f 	cmp	r2, #15
   205c0:	8a000009 	bhi	205ec <memmove+0x78>
   205c4:	e1a03000 	mov	r3, r0
   205c8:	e3520000 	cmp	r2, #0
   205cc:	0afffff8 	beq	205b4 <memmove+0x40>
   205d0:	e2411001 	sub	r1, r1, #1
   205d4:	e0832002 	add	r2, r3, r2
   205d8:	e5f1c001 	ldrb	r12, [r1, #1]!
   205dc:	e4c3c001 	strb	r12, [r3], #1
   205e0:	e1530002 	cmp	r3, r2
   205e4:	1afffffb 	bne	205d8 <memmove+0x64>
   205e8:	eafffff1 	b	205b4 <memmove+0x40>
   205ec:	e1813000 	orr	r3, r1, r0
   205f0:	e3130003 	tst	r3, #3
   205f4:	1a000027 	bne	20698 <memmove+0x124>
   205f8:	e1a0c001 	mov	r12, r1
   205fc:	e1a03000 	mov	r3, r0
   20600:	e1a04002 	mov	r4, r2
   20604:	e59c5000 	ldr	r5, [r12]
   20608:	e5835000 	str	r5, [r3]
   2060c:	e59c5004 	ldr	r5, [r12, #4]
   20610:	e5835004 	str	r5, [r3, #4]
   20614:	e59c5008 	ldr	r5, [r12, #8]
   20618:	e5835008 	str	r5, [r3, #8]
   2061c:	e2444010 	sub	r4, r4, #16
   20620:	e59c500c 	ldr	r5, [r12, #12]
   20624:	e354000f 	cmp	r4, #15
   20628:	e583500c 	str	r5, [r3, #12]
   2062c:	e28cc010 	add	r12, r12, #16
   20630:	e2833010 	add	r3, r3, #16
   20634:	8afffff2 	bhi	20604 <memmove+0x90>
   20638:	e2424010 	sub	r4, r2, #16
   2063c:	e3c4400f 	bic	r4, r4, #15
   20640:	e202c00f 	and	r12, r2, #15
   20644:	e2844010 	add	r4, r4, #16
   20648:	e35c0003 	cmp	r12, #3
   2064c:	e0803004 	add	r3, r0, r4
   20650:	e0811004 	add	r1, r1, r4
   20654:	9a000011 	bls	206a0 <memmove+0x12c>
   20658:	e24cc004 	sub	r12, r12, #4
   2065c:	e1a0712c 	lsr	r7, r12, #2
   20660:	e0816107 	add	r6, r1, r7, lsl #2
   20664:	e1a0c001 	mov	r12, r1
   20668:	e2866004 	add	r6, r6, #4
   2066c:	e1a04003 	mov	r4, r3
   20670:	e49c5004 	ldr	r5, [r12], #4
   20674:	e15c0006 	cmp	r12, r6
   20678:	e4845004 	str	r5, [r4], #4
   2067c:	1afffffb 	bne	20670 <memmove+0xfc>
   20680:	e287c001 	add	r12, r7, #1
   20684:	e1a0c10c 	lsl	r12, r12, #2
   20688:	e2022003 	and	r2, r2, #3
   2068c:	e081100c 	add	r1, r1, r12
   20690:	e083300c 	add	r3, r3, r12
   20694:	eaffffcb 	b	205c8 <memmove+0x54>
   20698:	e1a03000 	mov	r3, r0
   2069c:	eaffffcb 	b	205d0 <memmove+0x5c>
   206a0:	e1a0200c 	mov	r2, r12
   206a4:	eaffffc7 	b	205c8 <memmove+0x54>

000206a8 <_realloc_r>:
   206a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   206ac:	e2514000 	subs	r4, r1, #0
   206b0:	e24dd00c 	sub	sp, sp, #12
   206b4:	e1a08000 	mov	r8, r0
   206b8:	e1a0b002 	mov	r11, r2
   206bc:	0a0000d1 	beq	20a08 <_realloc_r+0x360>
   206c0:	ebfff622 	bl	1df50 <__malloc_lock>
   206c4:	e28b500b 	add	r5, r11, #11
   206c8:	e3550016 	cmp	r5, #22
   206cc:	83c55007 	bichi	r5, r5, #7
   206d0:	93a01010 	movls	r1, #16
   206d4:	81a06fa5 	lsrhi	r6, r5, #31
   206d8:	93a06000 	movls	r6, #0
   206dc:	91a05001 	movls	r5, r1
   206e0:	e5143004 	ldr	r3, [r4, #-4]
   206e4:	81a01005 	movhi	r1, r5
   206e8:	e155000b 	cmp	r5, r11
   206ec:	33866001 	orrcc	r6, r6, #1
   206f0:	e3560000 	cmp	r6, #0
   206f4:	e3c37003 	bic	r7, r3, #3
   206f8:	13a0300c 	movne	r3, #12
   206fc:	e244a008 	sub	r10, r4, #8
   20700:	15883000 	strne	r3, [r8]
   20704:	13a06000 	movne	r6, #0
   20708:	1a00000f 	bne	2074c <_realloc_r+0xa4>
   2070c:	e1570001 	cmp	r7, r1
   20710:	ba000011 	blt	2075c <_realloc_r+0xb4>
   20714:	e1a06007 	mov	r6, r7
   20718:	e0652006 	rsb	r2, r5, r6
   2071c:	e352000f 	cmp	r2, #15
   20720:	e2033001 	and	r3, r3, #1
   20724:	8a00005e 	bhi	208a4 <_realloc_r+0x1fc>
   20728:	e1833006 	orr	r3, r3, r6
   2072c:	e58a3004 	str	r3, [r10, #4]
   20730:	e08aa006 	add	r10, r10, r6
   20734:	e59a3004 	ldr	r3, [r10, #4]
   20738:	e3833001 	orr	r3, r3, #1
   2073c:	e58a3004 	str	r3, [r10, #4]
   20740:	e1a00008 	mov	r0, r8
   20744:	ebfff602 	bl	1df54 <__malloc_unlock>
   20748:	e1a06004 	mov	r6, r4
   2074c:	e1a00006 	mov	r0, r6
   20750:	e28dd00c 	add	sp, sp, #12
   20754:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   20758:	e12fff1e 	bx	lr
   2075c:	e59f24b4 	ldr	r2, [pc, #1204]	; 20c18 <_realloc_r+0x570>
   20760:	e592c008 	ldr	r12, [r2, #8]
   20764:	e08a0007 	add	r0, r10, r7
   20768:	e15c0000 	cmp	r12, r0
   2076c:	0a0000a9 	beq	20a18 <_realloc_r+0x370>
   20770:	e590e004 	ldr	lr, [r0, #4]
   20774:	e3ce9001 	bic	r9, lr, #1
   20778:	e0809009 	add	r9, r0, r9
   2077c:	e5999004 	ldr	r9, [r9, #4]
   20780:	e3190001 	tst	r9, #1
   20784:	11a0e006 	movne	lr, r6
   20788:	11a0000e 	movne	r0, lr
   2078c:	0a00003b 	beq	20880 <_realloc_r+0x1d8>
   20790:	e3130001 	tst	r3, #1
   20794:	1a00004f 	bne	208d8 <_realloc_r+0x230>
   20798:	e5149008 	ldr	r9, [r4, #-8]
   2079c:	e069900a 	rsb	r9, r9, r10
   207a0:	e5993004 	ldr	r3, [r9, #4]
   207a4:	e3500000 	cmp	r0, #0
   207a8:	e3c33003 	bic	r3, r3, #3
   207ac:	0a000067 	beq	20950 <_realloc_r+0x2a8>
   207b0:	e150000c 	cmp	r0, r12
   207b4:	e083c007 	add	r12, r3, r7
   207b8:	0a0000ce 	beq	20af8 <_realloc_r+0x450>
   207bc:	e08e600c 	add	r6, lr, r12
   207c0:	e1560001 	cmp	r6, r1
   207c4:	ba000062 	blt	20954 <_realloc_r+0x2ac>
   207c8:	e2802008 	add	r2, r0, #8
   207cc:	e892000c 	ldm	r2, {r2, r3}
   207d0:	e5832008 	str	r2, [r3, #8]
   207d4:	e582300c 	str	r3, [r2, #12]
   207d8:	e1a0a009 	mov	r10, r9
   207dc:	e599300c 	ldr	r3, [r9, #12]
   207e0:	e5ba1008 	ldr	r1, [r10, #8]!
   207e4:	e2472004 	sub	r2, r7, #4
   207e8:	e3520024 	cmp	r2, #36	; 0x24
   207ec:	e581300c 	str	r3, [r1, #12]
   207f0:	e5831008 	str	r1, [r3, #8]
   207f4:	8a0000fa 	bhi	20be4 <_realloc_r+0x53c>
   207f8:	e3520013 	cmp	r2, #19
   207fc:	91a0300a 	movls	r3, r10
   20800:	9a000014 	bls	20858 <_realloc_r+0x1b0>
   20804:	e5943000 	ldr	r3, [r4]
   20808:	e5893008 	str	r3, [r9, #8]
   2080c:	e5943004 	ldr	r3, [r4, #4]
   20810:	e352001b 	cmp	r2, #27
   20814:	e589300c 	str	r3, [r9, #12]
   20818:	92844008 	addls	r4, r4, #8
   2081c:	92893010 	addls	r3, r9, #16
   20820:	9a00000c 	bls	20858 <_realloc_r+0x1b0>
   20824:	e5943008 	ldr	r3, [r4, #8]
   20828:	e5893010 	str	r3, [r9, #16]
   2082c:	e594300c 	ldr	r3, [r4, #12]
   20830:	e5893014 	str	r3, [r9, #20]
   20834:	e3520024 	cmp	r2, #36	; 0x24
   20838:	05943010 	ldreq	r3, [r4, #16]
   2083c:	05893018 	streq	r3, [r9, #24]
   20840:	05942014 	ldreq	r2, [r4, #20]
   20844:	0589201c 	streq	r2, [r9, #28]
   20848:	12893018 	addne	r3, r9, #24
   2084c:	12844010 	addne	r4, r4, #16
   20850:	02893020 	addeq	r3, r9, #32
   20854:	02844018 	addeq	r4, r4, #24
   20858:	e5942000 	ldr	r2, [r4]
   2085c:	e5832000 	str	r2, [r3]
   20860:	e5942004 	ldr	r2, [r4, #4]
   20864:	e5832004 	str	r2, [r3, #4]
   20868:	e5942008 	ldr	r2, [r4, #8]
   2086c:	e5832008 	str	r2, [r3, #8]
   20870:	e1a0400a 	mov	r4, r10
   20874:	e5993004 	ldr	r3, [r9, #4]
   20878:	e1a0a009 	mov	r10, r9
   2087c:	eaffffa5 	b	20718 <_realloc_r+0x70>
   20880:	e3cee003 	bic	lr, lr, #3
   20884:	e08e6007 	add	r6, lr, r7
   20888:	e1560001 	cmp	r6, r1
   2088c:	baffffbf 	blt	20790 <_realloc_r+0xe8>
   20890:	e2801008 	add	r1, r0, #8
   20894:	e8910006 	ldm	r1, {r1, r2}
   20898:	e581200c 	str	r2, [r1, #12]
   2089c:	e5821008 	str	r1, [r2, #8]
   208a0:	eaffff9c 	b	20718 <_realloc_r+0x70>
   208a4:	e08a1005 	add	r1, r10, r5
   208a8:	e3820001 	orr	r0, r2, #1
   208ac:	e1835005 	orr	r5, r3, r5
   208b0:	e58a5004 	str	r5, [r10, #4]
   208b4:	e5810004 	str	r0, [r1, #4]
   208b8:	e0812002 	add	r2, r1, r2
   208bc:	e5923004 	ldr	r3, [r2, #4]
   208c0:	e3833001 	orr	r3, r3, #1
   208c4:	e5823004 	str	r3, [r2, #4]
   208c8:	e1a00008 	mov	r0, r8
   208cc:	e2811008 	add	r1, r1, #8
   208d0:	ebfffe8c 	bl	20308 <_free_r>
   208d4:	eaffff99 	b	20740 <_realloc_r+0x98>
   208d8:	e1a00008 	mov	r0, r8
   208dc:	e1a0100b 	mov	r1, r11
   208e0:	ebfff38c 	bl	1d718 <_malloc_r>
   208e4:	e2506000 	subs	r6, r0, #0
   208e8:	0a000015 	beq	20944 <_realloc_r+0x29c>
   208ec:	e5143004 	ldr	r3, [r4, #-4]
   208f0:	e3c32001 	bic	r2, r3, #1
   208f4:	e2461008 	sub	r1, r6, #8
   208f8:	e08a2002 	add	r2, r10, r2
   208fc:	e1510002 	cmp	r1, r2
   20900:	0a0000b3 	beq	20bd4 <_realloc_r+0x52c>
   20904:	e2472004 	sub	r2, r7, #4
   20908:	e3520024 	cmp	r2, #36	; 0x24
   2090c:	8a000076 	bhi	20aec <_realloc_r+0x444>
   20910:	e3520013 	cmp	r2, #19
   20914:	91a03006 	movls	r3, r6
   20918:	91a02004 	movls	r2, r4
   2091c:	8a000052 	bhi	20a6c <_realloc_r+0x3c4>
   20920:	e5921000 	ldr	r1, [r2]
   20924:	e5831000 	str	r1, [r3]
   20928:	e5921004 	ldr	r1, [r2, #4]
   2092c:	e5831004 	str	r1, [r3, #4]
   20930:	e5922008 	ldr	r2, [r2, #8]
   20934:	e5832008 	str	r2, [r3, #8]
   20938:	e1a00008 	mov	r0, r8
   2093c:	e1a01004 	mov	r1, r4
   20940:	ebfffe70 	bl	20308 <_free_r>
   20944:	e1a00008 	mov	r0, r8
   20948:	ebfff581 	bl	1df54 <__malloc_unlock>
   2094c:	eaffff7e 	b	2074c <_realloc_r+0xa4>
   20950:	e083c007 	add	r12, r3, r7
   20954:	e15c0001 	cmp	r12, r1
   20958:	baffffde 	blt	208d8 <_realloc_r+0x230>
   2095c:	e1a06009 	mov	r6, r9
   20960:	e599300c 	ldr	r3, [r9, #12]
   20964:	e5b61008 	ldr	r1, [r6, #8]!
   20968:	e2472004 	sub	r2, r7, #4
   2096c:	e3520024 	cmp	r2, #36	; 0x24
   20970:	e581300c 	str	r3, [r1, #12]
   20974:	e5831008 	str	r1, [r3, #8]
   20978:	8a000051 	bhi	20ac4 <_realloc_r+0x41c>
   2097c:	e3520013 	cmp	r2, #19
   20980:	91a03006 	movls	r3, r6
   20984:	9a000014 	bls	209dc <_realloc_r+0x334>
   20988:	e5943000 	ldr	r3, [r4]
   2098c:	e5893008 	str	r3, [r9, #8]
   20990:	e5943004 	ldr	r3, [r4, #4]
   20994:	e352001b 	cmp	r2, #27
   20998:	e589300c 	str	r3, [r9, #12]
   2099c:	92844008 	addls	r4, r4, #8
   209a0:	92893010 	addls	r3, r9, #16
   209a4:	9a00000c 	bls	209dc <_realloc_r+0x334>
   209a8:	e5943008 	ldr	r3, [r4, #8]
   209ac:	e5893010 	str	r3, [r9, #16]
   209b0:	e594300c 	ldr	r3, [r4, #12]
   209b4:	e5893014 	str	r3, [r9, #20]
   209b8:	e3520024 	cmp	r2, #36	; 0x24
   209bc:	05943010 	ldreq	r3, [r4, #16]
   209c0:	05893018 	streq	r3, [r9, #24]
   209c4:	05942014 	ldreq	r2, [r4, #20]
   209c8:	0589201c 	streq	r2, [r9, #28]
   209cc:	12893018 	addne	r3, r9, #24
   209d0:	12844010 	addne	r4, r4, #16
   209d4:	02893020 	addeq	r3, r9, #32
   209d8:	02844018 	addeq	r4, r4, #24
   209dc:	e5942000 	ldr	r2, [r4]
   209e0:	e5832000 	str	r2, [r3]
   209e4:	e5942004 	ldr	r2, [r4, #4]
   209e8:	e5832004 	str	r2, [r3, #4]
   209ec:	e5942008 	ldr	r2, [r4, #8]
   209f0:	e5832008 	str	r2, [r3, #8]
   209f4:	e1a04006 	mov	r4, r6
   209f8:	e5993004 	ldr	r3, [r9, #4]
   209fc:	e1a0600c 	mov	r6, r12
   20a00:	e1a0a009 	mov	r10, r9
   20a04:	eaffff43 	b	20718 <_realloc_r+0x70>
   20a08:	e1a01002 	mov	r1, r2
   20a0c:	ebfff341 	bl	1d718 <_malloc_r>
   20a10:	e1a06000 	mov	r6, r0
   20a14:	eaffff4c 	b	2074c <_realloc_r+0xa4>
   20a18:	e59ce004 	ldr	lr, [r12, #4]
   20a1c:	e3cee003 	bic	lr, lr, #3
   20a20:	e08e0007 	add	r0, lr, r7
   20a24:	e2856010 	add	r6, r5, #16
   20a28:	e1500006 	cmp	r0, r6
   20a2c:	b1a0000c 	movlt	r0, r12
   20a30:	baffff56 	blt	20790 <_realloc_r+0xe8>
   20a34:	e0653000 	rsb	r3, r5, r0
   20a38:	e08aa005 	add	r10, r10, r5
   20a3c:	e3833001 	orr	r3, r3, #1
   20a40:	e58a3004 	str	r3, [r10, #4]
   20a44:	e5143004 	ldr	r3, [r4, #-4]
   20a48:	e2033001 	and	r3, r3, #1
   20a4c:	e1855003 	orr	r5, r5, r3
   20a50:	e59f31c0 	ldr	r3, [pc, #448]	; 20c18 <_realloc_r+0x570>
   20a54:	e5045004 	str	r5, [r4, #-4]
   20a58:	e1a00008 	mov	r0, r8
   20a5c:	e583a008 	str	r10, [r3, #8]
   20a60:	e1a06004 	mov	r6, r4
   20a64:	ebfff53a 	bl	1df54 <__malloc_unlock>
   20a68:	eaffff37 	b	2074c <_realloc_r+0xa4>
   20a6c:	e5943000 	ldr	r3, [r4]
   20a70:	e5863000 	str	r3, [r6]
   20a74:	e5943004 	ldr	r3, [r4, #4]
   20a78:	e352001b 	cmp	r2, #27
   20a7c:	e5863004 	str	r3, [r6, #4]
   20a80:	92842008 	addls	r2, r4, #8
   20a84:	92863008 	addls	r3, r6, #8
   20a88:	9affffa4 	bls	20920 <_realloc_r+0x278>
   20a8c:	e5943008 	ldr	r3, [r4, #8]
   20a90:	e5863008 	str	r3, [r6, #8]
   20a94:	e594300c 	ldr	r3, [r4, #12]
   20a98:	e586300c 	str	r3, [r6, #12]
   20a9c:	e3520024 	cmp	r2, #36	; 0x24
   20aa0:	05943010 	ldreq	r3, [r4, #16]
   20aa4:	05863010 	streq	r3, [r6, #16]
   20aa8:	05942014 	ldreq	r2, [r4, #20]
   20aac:	12863010 	addne	r3, r6, #16
   20ab0:	05862014 	streq	r2, [r6, #20]
   20ab4:	12842010 	addne	r2, r4, #16
   20ab8:	02863018 	addeq	r3, r6, #24
   20abc:	02842018 	addeq	r2, r4, #24
   20ac0:	eaffff96 	b	20920 <_realloc_r+0x278>
   20ac4:	e1a01004 	mov	r1, r4
   20ac8:	e1a00006 	mov	r0, r6
   20acc:	e58dc004 	str	r12, [sp, #4]
   20ad0:	ebfffea7 	bl	20574 <memmove>
   20ad4:	e59dc004 	ldr	r12, [sp, #4]
   20ad8:	e1a04006 	mov	r4, r6
   20adc:	e5993004 	ldr	r3, [r9, #4]
   20ae0:	e1a0600c 	mov	r6, r12
   20ae4:	e1a0a009 	mov	r10, r9
   20ae8:	eaffff0a 	b	20718 <_realloc_r+0x70>
   20aec:	e1a01004 	mov	r1, r4
   20af0:	ebfffe9f 	bl	20574 <memmove>
   20af4:	eaffff8f 	b	20938 <_realloc_r+0x290>
   20af8:	e08e300c 	add	r3, lr, r12
   20afc:	e2850010 	add	r0, r5, #16
   20b00:	e1530000 	cmp	r3, r0
   20b04:	baffff92 	blt	20954 <_realloc_r+0x2ac>
   20b08:	e1a06009 	mov	r6, r9
   20b0c:	e599100c 	ldr	r1, [r9, #12]
   20b10:	e5b60008 	ldr	r0, [r6, #8]!
   20b14:	e2472004 	sub	r2, r7, #4
   20b18:	e3520024 	cmp	r2, #36	; 0x24
   20b1c:	e580100c 	str	r1, [r0, #12]
   20b20:	e5810008 	str	r0, [r1, #8]
   20b24:	8a000035 	bhi	20c00 <_realloc_r+0x558>
   20b28:	e3520013 	cmp	r2, #19
   20b2c:	91a02006 	movls	r2, r6
   20b30:	9a000014 	bls	20b88 <_realloc_r+0x4e0>
   20b34:	e5941000 	ldr	r1, [r4]
   20b38:	e5891008 	str	r1, [r9, #8]
   20b3c:	e5941004 	ldr	r1, [r4, #4]
   20b40:	e352001b 	cmp	r2, #27
   20b44:	e589100c 	str	r1, [r9, #12]
   20b48:	92892010 	addls	r2, r9, #16
   20b4c:	92844008 	addls	r4, r4, #8
   20b50:	9a00000c 	bls	20b88 <_realloc_r+0x4e0>
   20b54:	e5941008 	ldr	r1, [r4, #8]
   20b58:	e5891010 	str	r1, [r9, #16]
   20b5c:	e594100c 	ldr	r1, [r4, #12]
   20b60:	e5891014 	str	r1, [r9, #20]
   20b64:	e3520024 	cmp	r2, #36	; 0x24
   20b68:	05942010 	ldreq	r2, [r4, #16]
   20b6c:	05892018 	streq	r2, [r9, #24]
   20b70:	05941014 	ldreq	r1, [r4, #20]
   20b74:	0589101c 	streq	r1, [r9, #28]
   20b78:	12892018 	addne	r2, r9, #24
   20b7c:	12844010 	addne	r4, r4, #16
   20b80:	02892020 	addeq	r2, r9, #32
   20b84:	02844018 	addeq	r4, r4, #24
   20b88:	e5941000 	ldr	r1, [r4]
   20b8c:	e5821000 	str	r1, [r2]
   20b90:	e5941004 	ldr	r1, [r4, #4]
   20b94:	e5821004 	str	r1, [r2, #4]
   20b98:	e5941008 	ldr	r1, [r4, #8]
   20b9c:	e5821008 	str	r1, [r2, #8]
   20ba0:	e0653003 	rsb	r3, r5, r3
   20ba4:	e0892005 	add	r2, r9, r5
   20ba8:	e3833001 	orr	r3, r3, #1
   20bac:	e5823004 	str	r3, [r2, #4]
   20bb0:	e5993004 	ldr	r3, [r9, #4]
   20bb4:	e2033001 	and	r3, r3, #1
   20bb8:	e1855003 	orr	r5, r5, r3
   20bbc:	e59f3054 	ldr	r3, [pc, #84]	; 20c18 <_realloc_r+0x570>
   20bc0:	e5895004 	str	r5, [r9, #4]
   20bc4:	e1a00008 	mov	r0, r8
   20bc8:	e5832008 	str	r2, [r3, #8]
   20bcc:	ebfff4e0 	bl	1df54 <__malloc_unlock>
   20bd0:	eafffedd 	b	2074c <_realloc_r+0xa4>
   20bd4:	e5166004 	ldr	r6, [r6, #-4]
   20bd8:	e3c66003 	bic	r6, r6, #3
   20bdc:	e0866007 	add	r6, r6, r7
   20be0:	eafffecc 	b	20718 <_realloc_r+0x70>
   20be4:	e1a01004 	mov	r1, r4
   20be8:	e1a0000a 	mov	r0, r10
   20bec:	ebfffe60 	bl	20574 <memmove>
   20bf0:	e1a0400a 	mov	r4, r10
   20bf4:	e5993004 	ldr	r3, [r9, #4]
   20bf8:	e1a0a009 	mov	r10, r9
   20bfc:	eafffec5 	b	20718 <_realloc_r+0x70>
   20c00:	e1a00006 	mov	r0, r6
   20c04:	e1a01004 	mov	r1, r4
   20c08:	e58d3004 	str	r3, [sp, #4]
   20c0c:	ebfffe58 	bl	20574 <memmove>
   20c10:	e59d3004 	ldr	r3, [sp, #4]
   20c14:	eaffffe1 	b	20ba0 <_realloc_r+0x4f8>
   20c18:	00023094 	.word	0x00023094

00020c1c <cleanup_glue>:
   20c1c:	e92d4038 	push	{r3, r4, r5, lr}
   20c20:	e1a04001 	mov	r4, r1
   20c24:	e5911000 	ldr	r1, [r1]
   20c28:	e3510000 	cmp	r1, #0
   20c2c:	e1a05000 	mov	r5, r0
   20c30:	1bfffff9 	blne	20c1c <cleanup_glue>
   20c34:	e1a00005 	mov	r0, r5
   20c38:	e1a01004 	mov	r1, r4
   20c3c:	ebfffdb1 	bl	20308 <_free_r>
   20c40:	e8bd4038 	pop	{r3, r4, r5, lr}
   20c44:	e12fff1e 	bx	lr

00020c48 <_reclaim_reent>:
   20c48:	e59f30f0 	ldr	r3, [pc, #240]	; 20d40 <_reclaim_reent+0xf8>
   20c4c:	e5933000 	ldr	r3, [r3]
   20c50:	e1500003 	cmp	r0, r3
   20c54:	e92d4070 	push	{r4, r5, r6, lr}
   20c58:	e1a05000 	mov	r5, r0
   20c5c:	0a00002b 	beq	20d10 <_reclaim_reent+0xc8>
   20c60:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   20c64:	e3520000 	cmp	r2, #0
   20c68:	0a000011 	beq	20cb4 <_reclaim_reent+0x6c>
   20c6c:	e3a03000 	mov	r3, #0
   20c70:	e1a06003 	mov	r6, r3
   20c74:	e7921103 	ldr	r1, [r2, r3, lsl #2]
   20c78:	e3510000 	cmp	r1, #0
   20c7c:	0a000005 	beq	20c98 <_reclaim_reent+0x50>
   20c80:	e5914000 	ldr	r4, [r1]
   20c84:	e1a00005 	mov	r0, r5
   20c88:	ebfffd9e 	bl	20308 <_free_r>
   20c8c:	e2541000 	subs	r1, r4, #0
   20c90:	1afffffa 	bne	20c80 <_reclaim_reent+0x38>
   20c94:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
   20c98:	e2866001 	add	r6, r6, #1
   20c9c:	e3560020 	cmp	r6, #32
   20ca0:	e1a03006 	mov	r3, r6
   20ca4:	1afffff2 	bne	20c74 <_reclaim_reent+0x2c>
   20ca8:	e1a00005 	mov	r0, r5
   20cac:	e1a01002 	mov	r1, r2
   20cb0:	ebfffd94 	bl	20308 <_free_r>
   20cb4:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   20cb8:	e3510000 	cmp	r1, #0
   20cbc:	11a00005 	movne	r0, r5
   20cc0:	1bfffd90 	blne	20308 <_free_r>
   20cc4:	e5951148 	ldr	r1, [r5, #328]	; 0x148
   20cc8:	e3510000 	cmp	r1, #0
   20ccc:	0a000008 	beq	20cf4 <_reclaim_reent+0xac>
   20cd0:	e2856f53 	add	r6, r5, #332	; 0x14c
   20cd4:	e1510006 	cmp	r1, r6
   20cd8:	0a000005 	beq	20cf4 <_reclaim_reent+0xac>
   20cdc:	e5914000 	ldr	r4, [r1]
   20ce0:	e1a00005 	mov	r0, r5
   20ce4:	ebfffd87 	bl	20308 <_free_r>
   20ce8:	e1560004 	cmp	r6, r4
   20cec:	e1a01004 	mov	r1, r4
   20cf0:	1afffff9 	bne	20cdc <_reclaim_reent+0x94>
   20cf4:	e5951054 	ldr	r1, [r5, #84]	; 0x54
   20cf8:	e3510000 	cmp	r1, #0
   20cfc:	11a00005 	movne	r0, r5
   20d00:	1bfffd80 	blne	20308 <_free_r>
   20d04:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   20d08:	e3530000 	cmp	r3, #0
   20d0c:	1a000001 	bne	20d18 <_reclaim_reent+0xd0>
   20d10:	e8bd4070 	pop	{r4, r5, r6, lr}
   20d14:	e12fff1e 	bx	lr
   20d18:	e1a00005 	mov	r0, r5
   20d1c:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
   20d20:	e1a0e00f 	mov	lr, pc
   20d24:	e12fff1c 	bx	r12
   20d28:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
   20d2c:	e3510000 	cmp	r1, #0
   20d30:	0afffff6 	beq	20d10 <_reclaim_reent+0xc8>
   20d34:	e1a00005 	mov	r0, r5
   20d38:	e8bd4070 	pop	{r4, r5, r6, lr}
   20d3c:	eaffffb6 	b	20c1c <cleanup_glue>
   20d40:	00022be8 	.word	0x00022be8

00020d44 <_wrapup_reent>:
   20d44:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   20d48:	e2507000 	subs	r7, r0, #0
   20d4c:	059f3060 	ldreq	r3, [pc, #96]	; 20db4 <_wrapup_reent+0x70>
   20d50:	05937000 	ldreq	r7, [r3]
   20d54:	e5976148 	ldr	r6, [r7, #328]	; 0x148
   20d58:	e3560000 	cmp	r6, #0
   20d5c:	0a00000d 	beq	20d98 <_wrapup_reent+0x54>
   20d60:	e5965004 	ldr	r5, [r6, #4]
   20d64:	e2554001 	subs	r4, r5, #1
   20d68:	52855002 	addpl	r5, r5, #2
   20d6c:	50865105 	addpl	r5, r6, r5, lsl #2
   20d70:	4a000005 	bmi	20d8c <_wrapup_reent+0x48>
   20d74:	e5353004 	ldr	r3, [r5, #-4]!
   20d78:	e2444001 	sub	r4, r4, #1
   20d7c:	e1a0e00f 	mov	lr, pc
   20d80:	e12fff13 	bx	r3
   20d84:	e3740001 	cmn	r4, #1
   20d88:	1afffff9 	bne	20d74 <_wrapup_reent+0x30>
   20d8c:	e5966000 	ldr	r6, [r6]
   20d90:	e3560000 	cmp	r6, #0
   20d94:	1afffff1 	bne	20d60 <_wrapup_reent+0x1c>
   20d98:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
   20d9c:	e3530000 	cmp	r3, #0
   20da0:	11a00007 	movne	r0, r7
   20da4:	11a0e00f 	movne	lr, pc
   20da8:	112fff13 	bxne	r3
   20dac:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
   20db0:	e12fff1e 	bx	lr
   20db4:	00022be8 	.word	0x00022be8

00020db8 <__aeabi_drsub>:
   20db8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
   20dbc:	ea000000 	b	20dc4 <__adddf3>

00020dc0 <__aeabi_dsub>:
   20dc0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00020dc4 <__adddf3>:
   20dc4:	e92d4030 	push	{r4, r5, lr}
   20dc8:	e1a04081 	lsl	r4, r1, #1
   20dcc:	e1a05083 	lsl	r5, r3, #1
   20dd0:	e1340005 	teq	r4, r5
   20dd4:	01300002 	teqeq	r0, r2
   20dd8:	1194c000 	orrsne	r12, r4, r0
   20ddc:	1195c002 	orrsne	r12, r5, r2
   20de0:	11f0cac4 	mvnsne	r12, r4, asr #21
   20de4:	11f0cac5 	mvnsne	r12, r5, asr #21
   20de8:	0a00008c 	beq	21020 <__adddf3+0x25c>
   20dec:	e1a04aa4 	lsr	r4, r4, #21
   20df0:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
   20df4:	b2655000 	rsblt	r5, r5, #0
   20df8:	da000006 	ble	20e18 <__adddf3+0x54>
   20dfc:	e0844005 	add	r4, r4, r5
   20e00:	e0202002 	eor	r2, r0, r2
   20e04:	e0213003 	eor	r3, r1, r3
   20e08:	e0220000 	eor	r0, r2, r0
   20e0c:	e0231001 	eor	r1, r3, r1
   20e10:	e0202002 	eor	r2, r0, r2
   20e14:	e0213003 	eor	r3, r1, r3
   20e18:	e3550036 	cmp	r5, #54	; 0x36
   20e1c:	88bd4030 	pophi	{r4, r5, lr}
   20e20:	812fff1e 	bxhi	lr
   20e24:	e3110102 	tst	r1, #-2147483648	; 0x80000000
   20e28:	e1a01601 	lsl	r1, r1, #12
   20e2c:	e3a0c601 	mov	r12, #1048576	; 0x100000
   20e30:	e18c1621 	orr	r1, r12, r1, lsr #12
   20e34:	0a000001 	beq	20e40 <__adddf3+0x7c>
   20e38:	e2700000 	rsbs	r0, r0, #0
   20e3c:	e2e11000 	rsc	r1, r1, #0
   20e40:	e3130102 	tst	r3, #-2147483648	; 0x80000000
   20e44:	e1a03603 	lsl	r3, r3, #12
   20e48:	e18c3623 	orr	r3, r12, r3, lsr #12
   20e4c:	0a000001 	beq	20e58 <__adddf3+0x94>
   20e50:	e2722000 	rsbs	r2, r2, #0
   20e54:	e2e33000 	rsc	r3, r3, #0
   20e58:	e1340005 	teq	r4, r5
   20e5c:	0a000069 	beq	21008 <__adddf3+0x244>
   20e60:	e2444001 	sub	r4, r4, #1
   20e64:	e275e020 	rsbs	lr, r5, #32
   20e68:	ba000005 	blt	20e84 <__adddf3+0xc0>
   20e6c:	e1a0ce12 	lsl	r12, r2, lr
   20e70:	e0900532 	adds	r0, r0, r2, lsr r5
   20e74:	e2a11000 	adc	r1, r1, #0
   20e78:	e0900e13 	adds	r0, r0, r3, lsl lr
   20e7c:	e0b11553 	adcs	r1, r1, r3, asr r5
   20e80:	ea000006 	b	20ea0 <__adddf3+0xdc>
   20e84:	e2455020 	sub	r5, r5, #32
   20e88:	e28ee020 	add	lr, lr, #32
   20e8c:	e3520001 	cmp	r2, #1
   20e90:	e1a0ce13 	lsl	r12, r3, lr
   20e94:	238cc002 	orrcs	r12, r12, #2
   20e98:	e0900553 	adds	r0, r0, r3, asr r5
   20e9c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
   20ea0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
   20ea4:	5a000002 	bpl	20eb4 <__adddf3+0xf0>
   20ea8:	e27cc000 	rsbs	r12, r12, #0
   20eac:	e2f00000 	rscs	r0, r0, #0
   20eb0:	e2e11000 	rsc	r1, r1, #0
   20eb4:	e3510601 	cmp	r1, #1048576	; 0x100000
   20eb8:	3a00000f 	bcc	20efc <__adddf3+0x138>
   20ebc:	e3510602 	cmp	r1, #2097152	; 0x200000
   20ec0:	3a000006 	bcc	20ee0 <__adddf3+0x11c>
   20ec4:	e1b010a1 	lsrs	r1, r1, #1
   20ec8:	e1b00060 	rrxs	r0, r0
   20ecc:	e1a0c06c 	rrx	r12, r12
   20ed0:	e2844001 	add	r4, r4, #1
   20ed4:	e1a02a84 	lsl	r2, r4, #21
   20ed8:	e3720501 	cmn	r2, #4194304	; 0x400000
   20edc:	2a00006b 	bcs	21090 <__adddf3+0x2cc>
   20ee0:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
   20ee4:	01b0c0a0 	lsrseq	r12, r0, #1
   20ee8:	e2b00000 	adcs	r0, r0, #0
   20eec:	e0a11a04 	adc	r1, r1, r4, lsl #20
   20ef0:	e1811005 	orr	r1, r1, r5
   20ef4:	e8bd4030 	pop	{r4, r5, lr}
   20ef8:	e12fff1e 	bx	lr
   20efc:	e1b0c08c 	lsls	r12, r12, #1
   20f00:	e0b00000 	adcs	r0, r0, r0
   20f04:	e0a11001 	adc	r1, r1, r1
   20f08:	e3110601 	tst	r1, #1048576	; 0x100000
   20f0c:	e2444001 	sub	r4, r4, #1
   20f10:	1afffff2 	bne	20ee0 <__adddf3+0x11c>
   20f14:	e3310000 	teq	r1, #0
   20f18:	13a03014 	movne	r3, #20
   20f1c:	03a03034 	moveq	r3, #52	; 0x34
   20f20:	01a01000 	moveq	r1, r0
   20f24:	03a00000 	moveq	r0, #0
   20f28:	e1a02001 	mov	r2, r1
   20f2c:	e3520801 	cmp	r2, #65536	; 0x10000
   20f30:	21a02822 	lsrcs	r2, r2, #16
   20f34:	22433010 	subcs	r3, r3, #16
   20f38:	e3520c01 	cmp	r2, #256	; 0x100
   20f3c:	21a02422 	lsrcs	r2, r2, #8
   20f40:	22433008 	subcs	r3, r3, #8
   20f44:	e3520010 	cmp	r2, #16
   20f48:	21a02222 	lsrcs	r2, r2, #4
   20f4c:	22433004 	subcs	r3, r3, #4
   20f50:	e3520004 	cmp	r2, #4
   20f54:	22433002 	subcs	r3, r3, #2
   20f58:	304330a2 	subcc	r3, r3, r2, lsr #1
   20f5c:	e04331a2 	sub	r3, r3, r2, lsr #3
   20f60:	e2532020 	subs	r2, r3, #32
   20f64:	aa000007 	bge	20f88 <__adddf3+0x1c4>
   20f68:	e292200c 	adds	r2, r2, #12
   20f6c:	da000004 	ble	20f84 <__adddf3+0x1c0>
   20f70:	e282c014 	add	r12, r2, #20
   20f74:	e262200c 	rsb	r2, r2, #12
   20f78:	e1a00c11 	lsl	r0, r1, r12
   20f7c:	e1a01231 	lsr	r1, r1, r2
   20f80:	ea000004 	b	20f98 <__adddf3+0x1d4>
   20f84:	e2822014 	add	r2, r2, #20
   20f88:	d262c020 	rsble	r12, r2, #32
   20f8c:	e1a01211 	lsl	r1, r1, r2
   20f90:	d1811c30 	orrle	r1, r1, r0, lsr r12
   20f94:	d1a00210 	lslle	r0, r0, r2
   20f98:	e0544003 	subs	r4, r4, r3
   20f9c:	a0811a04 	addge	r1, r1, r4, lsl #20
   20fa0:	a1811005 	orrge	r1, r1, r5
   20fa4:	a8bd4030 	popge	{r4, r5, lr}
   20fa8:	a12fff1e 	bxge	lr
   20fac:	e1e04004 	mvn	r4, r4
   20fb0:	e254401f 	subs	r4, r4, #31
   20fb4:	aa00000f 	bge	20ff8 <__adddf3+0x234>
   20fb8:	e294400c 	adds	r4, r4, #12
   20fbc:	ca000006 	bgt	20fdc <__adddf3+0x218>
   20fc0:	e2844014 	add	r4, r4, #20
   20fc4:	e2642020 	rsb	r2, r4, #32
   20fc8:	e1a00430 	lsr	r0, r0, r4
   20fcc:	e1800211 	orr	r0, r0, r1, lsl r2
   20fd0:	e1851431 	orr	r1, r5, r1, lsr r4
   20fd4:	e8bd4030 	pop	{r4, r5, lr}
   20fd8:	e12fff1e 	bx	lr
   20fdc:	e264400c 	rsb	r4, r4, #12
   20fe0:	e2642020 	rsb	r2, r4, #32
   20fe4:	e1a00230 	lsr	r0, r0, r2
   20fe8:	e1800411 	orr	r0, r0, r1, lsl r4
   20fec:	e1a01005 	mov	r1, r5
   20ff0:	e8bd4030 	pop	{r4, r5, lr}
   20ff4:	e12fff1e 	bx	lr
   20ff8:	e1a00431 	lsr	r0, r1, r4
   20ffc:	e1a01005 	mov	r1, r5
   21000:	e8bd4030 	pop	{r4, r5, lr}
   21004:	e12fff1e 	bx	lr
   21008:	e3340000 	teq	r4, #0
   2100c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
   21010:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
   21014:	02844001 	addeq	r4, r4, #1
   21018:	12455001 	subne	r5, r5, #1
   2101c:	eaffff8f 	b	20e60 <__adddf3+0x9c>
   21020:	e1f0cac4 	mvns	r12, r4, asr #21
   21024:	11f0cac5 	mvnsne	r12, r5, asr #21
   21028:	0a00001d 	beq	210a4 <__adddf3+0x2e0>
   2102c:	e1340005 	teq	r4, r5
   21030:	01300002 	teqeq	r0, r2
   21034:	0a000004 	beq	2104c <__adddf3+0x288>
   21038:	e194c000 	orrs	r12, r4, r0
   2103c:	01a01003 	moveq	r1, r3
   21040:	01a00002 	moveq	r0, r2
   21044:	e8bd4030 	pop	{r4, r5, lr}
   21048:	e12fff1e 	bx	lr
   2104c:	e1310003 	teq	r1, r3
   21050:	13a01000 	movne	r1, #0
   21054:	13a00000 	movne	r0, #0
   21058:	18bd4030 	popne	{r4, r5, lr}
   2105c:	112fff1e 	bxne	lr
   21060:	e1b0caa4 	lsrs	r12, r4, #21
   21064:	1a000004 	bne	2107c <__adddf3+0x2b8>
   21068:	e1b00080 	lsls	r0, r0, #1
   2106c:	e0b11001 	adcs	r1, r1, r1
   21070:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
   21074:	e8bd4030 	pop	{r4, r5, lr}
   21078:	e12fff1e 	bx	lr
   2107c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
   21080:	32811601 	addcc	r1, r1, #1048576	; 0x100000
   21084:	38bd4030 	popcc	{r4, r5, lr}
   21088:	312fff1e 	bxcc	lr
   2108c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
   21090:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
   21094:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
   21098:	e3a00000 	mov	r0, #0
   2109c:	e8bd4030 	pop	{r4, r5, lr}
   210a0:	e12fff1e 	bx	lr
   210a4:	e1f0cac4 	mvns	r12, r4, asr #21
   210a8:	11a01003 	movne	r1, r3
   210ac:	11a00002 	movne	r0, r2
   210b0:	01f0cac5 	mvnseq	r12, r5, asr #21
   210b4:	11a03001 	movne	r3, r1
   210b8:	11a02000 	movne	r2, r0
   210bc:	e1904601 	orrs	r4, r0, r1, lsl #12
   210c0:	01925603 	orrseq	r5, r2, r3, lsl #12
   210c4:	01310003 	teqeq	r1, r3
   210c8:	13811702 	orrne	r1, r1, #524288	; 0x80000
   210cc:	e8bd4030 	pop	{r4, r5, lr}
   210d0:	e12fff1e 	bx	lr

000210d4 <__aeabi_ui2d>:
   210d4:	e3300000 	teq	r0, #0
   210d8:	03a01000 	moveq	r1, #0
   210dc:	012fff1e 	bxeq	lr
   210e0:	e92d4030 	push	{r4, r5, lr}
   210e4:	e3a04b01 	mov	r4, #1024	; 0x400
   210e8:	e2844032 	add	r4, r4, #50	; 0x32
   210ec:	e3a05000 	mov	r5, #0
   210f0:	e3a01000 	mov	r1, #0
   210f4:	eaffff86 	b	20f14 <__adddf3+0x150>

000210f8 <__aeabi_i2d>:
   210f8:	e3300000 	teq	r0, #0
   210fc:	03a01000 	moveq	r1, #0
   21100:	012fff1e 	bxeq	lr
   21104:	e92d4030 	push	{r4, r5, lr}
   21108:	e3a04b01 	mov	r4, #1024	; 0x400
   2110c:	e2844032 	add	r4, r4, #50	; 0x32
   21110:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
   21114:	42600000 	rsbmi	r0, r0, #0
   21118:	e3a01000 	mov	r1, #0
   2111c:	eaffff7c 	b	20f14 <__adddf3+0x150>

00021120 <__aeabi_f2d>:
   21120:	e1b02080 	lsls	r2, r0, #1
   21124:	e1a011c2 	asr	r1, r2, #3
   21128:	e1a01061 	rrx	r1, r1
   2112c:	e1a00e02 	lsl	r0, r2, #28
   21130:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
   21134:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   21138:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
   2113c:	112fff1e 	bxne	lr
   21140:	e3320000 	teq	r2, #0
   21144:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   21148:	012fff1e 	bxeq	lr
   2114c:	e92d4030 	push	{r4, r5, lr}
   21150:	e3a04d0e 	mov	r4, #896	; 0x380
   21154:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
   21158:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
   2115c:	eaffff6c 	b	20f14 <__adddf3+0x150>

00021160 <__aeabi_ul2d>:
   21160:	e1902001 	orrs	r2, r0, r1
   21164:	012fff1e 	bxeq	lr
   21168:	e92d4030 	push	{r4, r5, lr}
   2116c:	e3a05000 	mov	r5, #0
   21170:	ea000006 	b	21190 <__aeabi_l2d+0x1c>

00021174 <__aeabi_l2d>:
   21174:	e1902001 	orrs	r2, r0, r1
   21178:	012fff1e 	bxeq	lr
   2117c:	e92d4030 	push	{r4, r5, lr}
   21180:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
   21184:	5a000001 	bpl	21190 <__aeabi_l2d+0x1c>
   21188:	e2700000 	rsbs	r0, r0, #0
   2118c:	e2e11000 	rsc	r1, r1, #0
   21190:	e3a04b01 	mov	r4, #1024	; 0x400
   21194:	e2844032 	add	r4, r4, #50	; 0x32
   21198:	e1b0cb21 	lsrs	r12, r1, #22
   2119c:	0affff44 	beq	20eb4 <__adddf3+0xf0>
   211a0:	e3a02003 	mov	r2, #3
   211a4:	e1b0c1ac 	lsrs	r12, r12, #3
   211a8:	12822003 	addne	r2, r2, #3
   211ac:	e1b0c1ac 	lsrs	r12, r12, #3
   211b0:	12822003 	addne	r2, r2, #3
   211b4:	e08221ac 	add	r2, r2, r12, lsr #3
   211b8:	e2623020 	rsb	r3, r2, #32
   211bc:	e1a0c310 	lsl	r12, r0, r3
   211c0:	e1a00230 	lsr	r0, r0, r2
   211c4:	e1800311 	orr	r0, r0, r1, lsl r3
   211c8:	e1a01231 	lsr	r1, r1, r2
   211cc:	e0844002 	add	r4, r4, r2
   211d0:	eaffff37 	b	20eb4 <__adddf3+0xf0>

000211d4 <__aeabi_dmul>:
   211d4:	e92d4070 	push	{r4, r5, r6, lr}
   211d8:	e3a0c0ff 	mov	r12, #255	; 0xff
   211dc:	e38ccc07 	orr	r12, r12, #1792	; 0x700
   211e0:	e01c4a21 	ands	r4, r12, r1, lsr #20
   211e4:	101c5a23 	andsne	r5, r12, r3, lsr #20
   211e8:	1134000c 	teqne	r4, r12
   211ec:	1135000c 	teqne	r5, r12
   211f0:	0b000075 	bleq	213cc <__aeabi_dmul+0x1f8>
   211f4:	e0844005 	add	r4, r4, r5
   211f8:	e0216003 	eor	r6, r1, r3
   211fc:	e1c11a8c 	bic	r1, r1, r12, lsl #21
   21200:	e1c33a8c 	bic	r3, r3, r12, lsl #21
   21204:	e1905601 	orrs	r5, r0, r1, lsl #12
   21208:	11925603 	orrsne	r5, r2, r3, lsl #12
   2120c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
   21210:	e3833601 	orr	r3, r3, #1048576	; 0x100000
   21214:	0a00001d 	beq	21290 <__aeabi_dmul+0xbc>
   21218:	e08ec290 	umull	r12, lr, r0, r2
   2121c:	e3a05000 	mov	r5, #0
   21220:	e0a5e291 	umlal	lr, r5, r1, r2
   21224:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
   21228:	e0a5e390 	umlal	lr, r5, r0, r3
   2122c:	e3a06000 	mov	r6, #0
   21230:	e0a65391 	umlal	r5, r6, r1, r3
   21234:	e33c0000 	teq	r12, #0
   21238:	138ee001 	orrne	lr, lr, #1
   2123c:	e24440ff 	sub	r4, r4, #255	; 0xff
   21240:	e3560c02 	cmp	r6, #512	; 0x200
   21244:	e2c44c03 	sbc	r4, r4, #768	; 0x300
   21248:	2a000002 	bcs	21258 <__aeabi_dmul+0x84>
   2124c:	e1b0e08e 	lsls	lr, lr, #1
   21250:	e0b55005 	adcs	r5, r5, r5
   21254:	e0a66006 	adc	r6, r6, r6
   21258:	e1821586 	orr	r1, r2, r6, lsl #11
   2125c:	e1811aa5 	orr	r1, r1, r5, lsr #21
   21260:	e1a00585 	lsl	r0, r5, #11
   21264:	e1800aae 	orr	r0, r0, lr, lsr #21
   21268:	e1a0e58e 	lsl	lr, lr, #11
   2126c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
   21270:	835c0c07 	cmphi	r12, #1792	; 0x700
   21274:	8a000011 	bhi	212c0 <__aeabi_dmul+0xec>
   21278:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
   2127c:	01b0e0a0 	lsrseq	lr, r0, #1
   21280:	e2b00000 	adcs	r0, r0, #0
   21284:	e0a11a04 	adc	r1, r1, r4, lsl #20
   21288:	e8bd4070 	pop	{r4, r5, r6, lr}
   2128c:	e12fff1e 	bx	lr
   21290:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
   21294:	e1861001 	orr	r1, r6, r1
   21298:	e1800002 	orr	r0, r0, r2
   2129c:	e0211003 	eor	r1, r1, r3
   212a0:	e05440ac 	subs	r4, r4, r12, lsr #1
   212a4:	c074500c 	rsbsgt	r5, r4, r12
   212a8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
   212ac:	c8bd4070 	popgt	{r4, r5, r6, lr}
   212b0:	c12fff1e 	bxgt	lr
   212b4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
   212b8:	e3a0e000 	mov	lr, #0
   212bc:	e2544001 	subs	r4, r4, #1
   212c0:	ca00005d 	bgt	2143c <__aeabi_dmul+0x268>
   212c4:	e3740036 	cmn	r4, #54	; 0x36
   212c8:	d3a00000 	movle	r0, #0
   212cc:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
   212d0:	d8bd4070 	pople	{r4, r5, r6, lr}
   212d4:	d12fff1e 	bxle	lr
   212d8:	e2644000 	rsb	r4, r4, #0
   212dc:	e2544020 	subs	r4, r4, #32
   212e0:	aa00001a 	bge	21350 <__aeabi_dmul+0x17c>
   212e4:	e294400c 	adds	r4, r4, #12
   212e8:	ca00000c 	bgt	21320 <__aeabi_dmul+0x14c>
   212ec:	e2844014 	add	r4, r4, #20
   212f0:	e2645020 	rsb	r5, r4, #32
   212f4:	e1a03510 	lsl	r3, r0, r5
   212f8:	e1a00430 	lsr	r0, r0, r4
   212fc:	e1800511 	orr	r0, r0, r1, lsl r5
   21300:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
   21304:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
   21308:	e0900fa3 	adds	r0, r0, r3, lsr #31
   2130c:	e0a21431 	adc	r1, r2, r1, lsr r4
   21310:	e19ee083 	orrs	lr, lr, r3, lsl #1
   21314:	01c00fa3 	biceq	r0, r0, r3, lsr #31
   21318:	e8bd4070 	pop	{r4, r5, r6, lr}
   2131c:	e12fff1e 	bx	lr
   21320:	e264400c 	rsb	r4, r4, #12
   21324:	e2645020 	rsb	r5, r4, #32
   21328:	e1a03410 	lsl	r3, r0, r4
   2132c:	e1a00530 	lsr	r0, r0, r5
   21330:	e1800411 	orr	r0, r0, r1, lsl r4
   21334:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
   21338:	e0900fa3 	adds	r0, r0, r3, lsr #31
   2133c:	e2a11000 	adc	r1, r1, #0
   21340:	e19ee083 	orrs	lr, lr, r3, lsl #1
   21344:	01c00fa3 	biceq	r0, r0, r3, lsr #31
   21348:	e8bd4070 	pop	{r4, r5, r6, lr}
   2134c:	e12fff1e 	bx	lr
   21350:	e2645020 	rsb	r5, r4, #32
   21354:	e18ee510 	orr	lr, lr, r0, lsl r5
   21358:	e1a03430 	lsr	r3, r0, r4
   2135c:	e1833511 	orr	r3, r3, r1, lsl r5
   21360:	e1a00431 	lsr	r0, r1, r4
   21364:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
   21368:	e1c00431 	bic	r0, r0, r1, lsr r4
   2136c:	e0800fa3 	add	r0, r0, r3, lsr #31
   21370:	e19ee083 	orrs	lr, lr, r3, lsl #1
   21374:	01c00fa3 	biceq	r0, r0, r3, lsr #31
   21378:	e8bd4070 	pop	{r4, r5, r6, lr}
   2137c:	e12fff1e 	bx	lr
   21380:	e3340000 	teq	r4, #0
   21384:	1a000008 	bne	213ac <__aeabi_dmul+0x1d8>
   21388:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
   2138c:	e1b00080 	lsls	r0, r0, #1
   21390:	e0a11001 	adc	r1, r1, r1
   21394:	e3110601 	tst	r1, #1048576	; 0x100000
   21398:	02444001 	subeq	r4, r4, #1
   2139c:	0afffffa 	beq	2138c <__aeabi_dmul+0x1b8>
   213a0:	e1811006 	orr	r1, r1, r6
   213a4:	e3350000 	teq	r5, #0
   213a8:	112fff1e 	bxne	lr
   213ac:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
   213b0:	e1b02082 	lsls	r2, r2, #1
   213b4:	e0a33003 	adc	r3, r3, r3
   213b8:	e3130601 	tst	r3, #1048576	; 0x100000
   213bc:	02455001 	subeq	r5, r5, #1
   213c0:	0afffffa 	beq	213b0 <__aeabi_dmul+0x1dc>
   213c4:	e1833006 	orr	r3, r3, r6
   213c8:	e12fff1e 	bx	lr
   213cc:	e134000c 	teq	r4, r12
   213d0:	e00c5a23 	and	r5, r12, r3, lsr #20
   213d4:	1135000c 	teqne	r5, r12
   213d8:	0a000007 	beq	213fc <__aeabi_dmul+0x228>
   213dc:	e1906081 	orrs	r6, r0, r1, lsl #1
   213e0:	11926083 	orrsne	r6, r2, r3, lsl #1
   213e4:	1affffe5 	bne	21380 <__aeabi_dmul+0x1ac>
   213e8:	e0211003 	eor	r1, r1, r3
   213ec:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
   213f0:	e3a00000 	mov	r0, #0
   213f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   213f8:	e12fff1e 	bx	lr
   213fc:	e1906081 	orrs	r6, r0, r1, lsl #1
   21400:	01a00002 	moveq	r0, r2
   21404:	01a01003 	moveq	r1, r3
   21408:	11926083 	orrsne	r6, r2, r3, lsl #1
   2140c:	0a000010 	beq	21454 <__aeabi_dmul+0x280>
   21410:	e134000c 	teq	r4, r12
   21414:	1a000001 	bne	21420 <__aeabi_dmul+0x24c>
   21418:	e1906601 	orrs	r6, r0, r1, lsl #12
   2141c:	1a00000c 	bne	21454 <__aeabi_dmul+0x280>
   21420:	e135000c 	teq	r5, r12
   21424:	1a000003 	bne	21438 <__aeabi_dmul+0x264>
   21428:	e1926603 	orrs	r6, r2, r3, lsl #12
   2142c:	11a00002 	movne	r0, r2
   21430:	11a01003 	movne	r1, r3
   21434:	1a000006 	bne	21454 <__aeabi_dmul+0x280>
   21438:	e0211003 	eor	r1, r1, r3
   2143c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
   21440:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
   21444:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
   21448:	e3a00000 	mov	r0, #0
   2144c:	e8bd4070 	pop	{r4, r5, r6, lr}
   21450:	e12fff1e 	bx	lr
   21454:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
   21458:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
   2145c:	e8bd4070 	pop	{r4, r5, r6, lr}
   21460:	e12fff1e 	bx	lr

00021464 <__aeabi_ddiv>:
   21464:	e92d4070 	push	{r4, r5, r6, lr}
   21468:	e3a0c0ff 	mov	r12, #255	; 0xff
   2146c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
   21470:	e01c4a21 	ands	r4, r12, r1, lsr #20
   21474:	101c5a23 	andsne	r5, r12, r3, lsr #20
   21478:	1134000c 	teqne	r4, r12
   2147c:	1135000c 	teqne	r5, r12
   21480:	0b00005e 	bleq	21600 <__aeabi_ddiv+0x19c>
   21484:	e0444005 	sub	r4, r4, r5
   21488:	e021e003 	eor	lr, r1, r3
   2148c:	e1925603 	orrs	r5, r2, r3, lsl #12
   21490:	e1a01601 	lsl	r1, r1, #12
   21494:	0a00004c 	beq	215cc <__aeabi_ddiv+0x168>
   21498:	e1a03603 	lsl	r3, r3, #12
   2149c:	e3a05201 	mov	r5, #268435456	; 0x10000000
   214a0:	e1853223 	orr	r3, r5, r3, lsr #4
   214a4:	e1833c22 	orr	r3, r3, r2, lsr #24
   214a8:	e1a02402 	lsl	r2, r2, #8
   214ac:	e1855221 	orr	r5, r5, r1, lsr #4
   214b0:	e1855c20 	orr	r5, r5, r0, lsr #24
   214b4:	e1a06400 	lsl	r6, r0, #8
   214b8:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
   214bc:	e1550003 	cmp	r5, r3
   214c0:	01560002 	cmpeq	r6, r2
   214c4:	e2a440fd 	adc	r4, r4, #253	; 0xfd
   214c8:	e2844c03 	add	r4, r4, #768	; 0x300
   214cc:	2a000001 	bcs	214d8 <__aeabi_ddiv+0x74>
   214d0:	e1b030a3 	lsrs	r3, r3, #1
   214d4:	e1a02062 	rrx	r2, r2
   214d8:	e0566002 	subs	r6, r6, r2
   214dc:	e0c55003 	sbc	r5, r5, r3
   214e0:	e1b030a3 	lsrs	r3, r3, #1
   214e4:	e1a02062 	rrx	r2, r2
   214e8:	e3a00601 	mov	r0, #1048576	; 0x100000
   214ec:	e3a0c702 	mov	r12, #524288	; 0x80000
   214f0:	e056e002 	subs	lr, r6, r2
   214f4:	e0d5e003 	sbcs	lr, r5, r3
   214f8:	20466002 	subcs	r6, r6, r2
   214fc:	21a0500e 	movcs	r5, lr
   21500:	2180000c 	orrcs	r0, r0, r12
   21504:	e1b030a3 	lsrs	r3, r3, #1
   21508:	e1a02062 	rrx	r2, r2
   2150c:	e056e002 	subs	lr, r6, r2
   21510:	e0d5e003 	sbcs	lr, r5, r3
   21514:	20466002 	subcs	r6, r6, r2
   21518:	21a0500e 	movcs	r5, lr
   2151c:	218000ac 	orrcs	r0, r0, r12, lsr #1
   21520:	e1b030a3 	lsrs	r3, r3, #1
   21524:	e1a02062 	rrx	r2, r2
   21528:	e056e002 	subs	lr, r6, r2
   2152c:	e0d5e003 	sbcs	lr, r5, r3
   21530:	20466002 	subcs	r6, r6, r2
   21534:	21a0500e 	movcs	r5, lr
   21538:	2180012c 	orrcs	r0, r0, r12, lsr #2
   2153c:	e1b030a3 	lsrs	r3, r3, #1
   21540:	e1a02062 	rrx	r2, r2
   21544:	e056e002 	subs	lr, r6, r2
   21548:	e0d5e003 	sbcs	lr, r5, r3
   2154c:	20466002 	subcs	r6, r6, r2
   21550:	21a0500e 	movcs	r5, lr
   21554:	218001ac 	orrcs	r0, r0, r12, lsr #3
   21558:	e195e006 	orrs	lr, r5, r6
   2155c:	0a00000d 	beq	21598 <__aeabi_ddiv+0x134>
   21560:	e1a05205 	lsl	r5, r5, #4
   21564:	e1855e26 	orr	r5, r5, r6, lsr #28
   21568:	e1a06206 	lsl	r6, r6, #4
   2156c:	e1a03183 	lsl	r3, r3, #3
   21570:	e1833ea2 	orr	r3, r3, r2, lsr #29
   21574:	e1a02182 	lsl	r2, r2, #3
   21578:	e1b0c22c 	lsrs	r12, r12, #4
   2157c:	1affffdb 	bne	214f0 <__aeabi_ddiv+0x8c>
   21580:	e3110601 	tst	r1, #1048576	; 0x100000
   21584:	1a000006 	bne	215a4 <__aeabi_ddiv+0x140>
   21588:	e1811000 	orr	r1, r1, r0
   2158c:	e3a00000 	mov	r0, #0
   21590:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
   21594:	eaffffd5 	b	214f0 <__aeabi_ddiv+0x8c>
   21598:	e3110601 	tst	r1, #1048576	; 0x100000
   2159c:	01811000 	orreq	r1, r1, r0
   215a0:	03a00000 	moveq	r0, #0
   215a4:	e254c0fd 	subs	r12, r4, #253	; 0xfd
   215a8:	835c0c07 	cmphi	r12, #1792	; 0x700
   215ac:	8affff43 	bhi	212c0 <__aeabi_dmul+0xec>
   215b0:	e055c003 	subs	r12, r5, r3
   215b4:	0056c002 	subseq	r12, r6, r2
   215b8:	01b0c0a0 	lsrseq	r12, r0, #1
   215bc:	e2b00000 	adcs	r0, r0, #0
   215c0:	e0a11a04 	adc	r1, r1, r4, lsl #20
   215c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   215c8:	e12fff1e 	bx	lr
   215cc:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
   215d0:	e18e1621 	orr	r1, lr, r1, lsr #12
   215d4:	e09440ac 	adds	r4, r4, r12, lsr #1
   215d8:	c074500c 	rsbsgt	r5, r4, r12
   215dc:	c1811a04 	orrgt	r1, r1, r4, lsl #20
   215e0:	c8bd4070 	popgt	{r4, r5, r6, lr}
   215e4:	c12fff1e 	bxgt	lr
   215e8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
   215ec:	e3a0e000 	mov	lr, #0
   215f0:	e2544001 	subs	r4, r4, #1
   215f4:	eaffff31 	b	212c0 <__aeabi_dmul+0xec>
   215f8:	e185e006 	orr	lr, r5, r6
   215fc:	eaffff2f 	b	212c0 <__aeabi_dmul+0xec>
   21600:	e00c5a23 	and	r5, r12, r3, lsr #20
   21604:	e134000c 	teq	r4, r12
   21608:	0135000c 	teqeq	r5, r12
   2160c:	0affff90 	beq	21454 <__aeabi_dmul+0x280>
   21610:	e134000c 	teq	r4, r12
   21614:	1a000006 	bne	21634 <__aeabi_ddiv+0x1d0>
   21618:	e1904601 	orrs	r4, r0, r1, lsl #12
   2161c:	1affff8c 	bne	21454 <__aeabi_dmul+0x280>
   21620:	e135000c 	teq	r5, r12
   21624:	1affff83 	bne	21438 <__aeabi_dmul+0x264>
   21628:	e1a00002 	mov	r0, r2
   2162c:	e1a01003 	mov	r1, r3
   21630:	eaffff87 	b	21454 <__aeabi_dmul+0x280>
   21634:	e135000c 	teq	r5, r12
   21638:	1a000004 	bne	21650 <__aeabi_ddiv+0x1ec>
   2163c:	e1925603 	orrs	r5, r2, r3, lsl #12
   21640:	0affff68 	beq	213e8 <__aeabi_dmul+0x214>
   21644:	e1a00002 	mov	r0, r2
   21648:	e1a01003 	mov	r1, r3
   2164c:	eaffff80 	b	21454 <__aeabi_dmul+0x280>
   21650:	e1906081 	orrs	r6, r0, r1, lsl #1
   21654:	11926083 	orrsne	r6, r2, r3, lsl #1
   21658:	1affff48 	bne	21380 <__aeabi_dmul+0x1ac>
   2165c:	e1904081 	orrs	r4, r0, r1, lsl #1
   21660:	1affff74 	bne	21438 <__aeabi_dmul+0x264>
   21664:	e1925083 	orrs	r5, r2, r3, lsl #1
   21668:	1affff5e 	bne	213e8 <__aeabi_dmul+0x214>
   2166c:	eaffff78 	b	21454 <__aeabi_dmul+0x280>

00021670 <__gedf2>:
   21670:	e3e0c000 	mvn	r12, #0
   21674:	ea000002 	b	21684 <__cmpdf2+0x4>

00021678 <__ledf2>:
   21678:	e3a0c001 	mov	r12, #1
   2167c:	ea000000 	b	21684 <__cmpdf2+0x4>

00021680 <__cmpdf2>:
   21680:	e3a0c001 	mov	r12, #1
   21684:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
   21688:	e1a0c081 	lsl	r12, r1, #1
   2168c:	e1f0cacc 	mvns	r12, r12, asr #21
   21690:	e1a0c083 	lsl	r12, r3, #1
   21694:	11f0cacc 	mvnsne	r12, r12, asr #21
   21698:	0a00000e 	beq	216d8 <__cmpdf2+0x58>
   2169c:	e28dd004 	add	sp, sp, #4
   216a0:	e190c081 	orrs	r12, r0, r1, lsl #1
   216a4:	0192c083 	orrseq	r12, r2, r3, lsl #1
   216a8:	11310003 	teqne	r1, r3
   216ac:	01300002 	teqeq	r0, r2
   216b0:	03a00000 	moveq	r0, #0
   216b4:	012fff1e 	bxeq	lr
   216b8:	e3700000 	cmn	r0, #0
   216bc:	e1310003 	teq	r1, r3
   216c0:	51510003 	cmppl	r1, r3
   216c4:	01500002 	cmpeq	r0, r2
   216c8:	21a00fc3 	asrcs	r0, r3, #31
   216cc:	31e00fc3 	mvncc	r0, r3, asr #31
   216d0:	e3800001 	orr	r0, r0, #1
   216d4:	e12fff1e 	bx	lr
   216d8:	e1a0c081 	lsl	r12, r1, #1
   216dc:	e1f0cacc 	mvns	r12, r12, asr #21
   216e0:	1a000001 	bne	216ec <__cmpdf2+0x6c>
   216e4:	e190c601 	orrs	r12, r0, r1, lsl #12
   216e8:	1a000004 	bne	21700 <__cmpdf2+0x80>
   216ec:	e1a0c083 	lsl	r12, r3, #1
   216f0:	e1f0cacc 	mvns	r12, r12, asr #21
   216f4:	1affffe8 	bne	2169c <__cmpdf2+0x1c>
   216f8:	e192c603 	orrs	r12, r2, r3, lsl #12
   216fc:	0affffe6 	beq	2169c <__cmpdf2+0x1c>
   21700:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   21704:	e12fff1e 	bx	lr

00021708 <__aeabi_cdrcmple>:
   21708:	e1a0c000 	mov	r12, r0
   2170c:	e1a00002 	mov	r0, r2
   21710:	e1a0200c 	mov	r2, r12
   21714:	e1a0c001 	mov	r12, r1
   21718:	e1a01003 	mov	r1, r3
   2171c:	e1a0300c 	mov	r3, r12
   21720:	eaffffff 	b	21724 <__aeabi_cdcmpeq>

00021724 <__aeabi_cdcmpeq>:
   21724:	e92d4001 	push	{r0, lr}
   21728:	ebffffd4 	bl	21680 <__cmpdf2>
   2172c:	e3500000 	cmp	r0, #0
   21730:	43700000 	cmnmi	r0, #0
   21734:	e8bd4001 	pop	{r0, lr}
   21738:	e12fff1e 	bx	lr

0002173c <__aeabi_dcmpeq>:
   2173c:	e52de008 	str	lr, [sp, #-8]!
   21740:	ebfffff7 	bl	21724 <__aeabi_cdcmpeq>
   21744:	03a00001 	moveq	r0, #1
   21748:	13a00000 	movne	r0, #0
   2174c:	e49de008 	ldr	lr, [sp], #8
   21750:	e12fff1e 	bx	lr

00021754 <__aeabi_dcmplt>:
   21754:	e52de008 	str	lr, [sp, #-8]!
   21758:	ebfffff1 	bl	21724 <__aeabi_cdcmpeq>
   2175c:	33a00001 	movcc	r0, #1
   21760:	23a00000 	movcs	r0, #0
   21764:	e49de008 	ldr	lr, [sp], #8
   21768:	e12fff1e 	bx	lr

0002176c <__aeabi_dcmple>:
   2176c:	e52de008 	str	lr, [sp, #-8]!
   21770:	ebffffeb 	bl	21724 <__aeabi_cdcmpeq>
   21774:	93a00001 	movls	r0, #1
   21778:	83a00000 	movhi	r0, #0
   2177c:	e49de008 	ldr	lr, [sp], #8
   21780:	e12fff1e 	bx	lr

00021784 <__aeabi_dcmpge>:
   21784:	e52de008 	str	lr, [sp, #-8]!
   21788:	ebffffde 	bl	21708 <__aeabi_cdrcmple>
   2178c:	93a00001 	movls	r0, #1
   21790:	83a00000 	movhi	r0, #0
   21794:	e49de008 	ldr	lr, [sp], #8
   21798:	e12fff1e 	bx	lr

0002179c <__aeabi_dcmpgt>:
   2179c:	e52de008 	str	lr, [sp, #-8]!
   217a0:	ebffffd8 	bl	21708 <__aeabi_cdrcmple>
   217a4:	33a00001 	movcc	r0, #1
   217a8:	23a00000 	movcs	r0, #0
   217ac:	e49de008 	ldr	lr, [sp], #8
   217b0:	e12fff1e 	bx	lr

000217b4 <__aeabi_d2iz>:
   217b4:	e1a02081 	lsl	r2, r1, #1
   217b8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
   217bc:	2a00000c 	bcs	217f4 <__aeabi_d2iz+0x40>
   217c0:	5a000009 	bpl	217ec <__aeabi_d2iz+0x38>
   217c4:	e3e03e3e 	mvn	r3, #992	; 0x3e0
   217c8:	e0532ac2 	subs	r2, r3, r2, asr #21
   217cc:	9a00000a 	bls	217fc <__aeabi_d2iz+0x48>
   217d0:	e1a03581 	lsl	r3, r1, #11
   217d4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   217d8:	e1833aa0 	orr	r3, r3, r0, lsr #21
   217dc:	e3110102 	tst	r1, #-2147483648	; 0x80000000
   217e0:	e1a00233 	lsr	r0, r3, r2
   217e4:	12600000 	rsbne	r0, r0, #0
   217e8:	e12fff1e 	bx	lr
   217ec:	e3a00000 	mov	r0, #0
   217f0:	e12fff1e 	bx	lr
   217f4:	e1900601 	orrs	r0, r0, r1, lsl #12
   217f8:	1a000002 	bne	21808 <__aeabi_d2iz+0x54>
   217fc:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
   21800:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
   21804:	e12fff1e 	bx	lr
   21808:	e3a00000 	mov	r0, #0
   2180c:	e12fff1e 	bx	lr

00021810 <__cs3_premain>:
   21810:	e92d4008 	push	{r3, lr}
   21814:	eb00003c 	bl	2190c <__libc_init_array>
   21818:	e59f3030 	ldr	r3, [pc, #48]	; 21850 <__cs3_premain+0x40>
   2181c:	e3530000 	cmp	r3, #0
   21820:	15930000 	ldrne	r0, [r3]
   21824:	01a00003 	moveq	r0, r3
   21828:	e59f3024 	ldr	r3, [pc, #36]	; 21854 <__cs3_premain+0x44>
   2182c:	e3530000 	cmp	r3, #0
   21830:	15931000 	ldrne	r1, [r3]
   21834:	01a01003 	moveq	r1, r3
   21838:	e3a02000 	mov	r2, #0
   2183c:	ebff7dee 	bl	ffc <main>
   21840:	e59f3010 	ldr	r3, [pc, #16]	; 21858 <__cs3_premain+0x48>
   21844:	e3530000 	cmp	r3, #0
   21848:	1bffdf29 	blne	194f4 <exit>
   2184c:	eafffffe 	b	2184c <__cs3_premain+0x3c>
	...
   21858:	000194f4 	.word	0x000194f4

0002185c <_exit>:
   2185c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21860:	e3a00018 	mov	r0, #24
   21864:	e59f1004 	ldr	r1, [pc, #4]	; 21870 <_exit+0x14>
   21868:	ef123456 	svc	0x00123456
   2186c:	eafffffe 	b	2186c <_exit+0x10>
   21870:	00020026 	.word	0x00020026

00021874 <_sbrk>:
   21874:	e92d4008 	push	{r3, lr}
   21878:	e59f305c 	ldr	r3, [pc, #92]	; 218dc <_sbrk+0x68>
   2187c:	e59f105c 	ldr	r1, [pc, #92]	; 218e0 <_sbrk+0x6c>
   21880:	e5932000 	ldr	r2, [r3]
   21884:	e5913000 	ldr	r3, [r1]
   21888:	e3520000 	cmp	r2, #0
   2188c:	e0830000 	add	r0, r3, r0
   21890:	0a000002 	beq	218a0 <_sbrk+0x2c>
   21894:	e0602002 	rsb	r2, r0, r2
   21898:	e3520000 	cmp	r2, #0
   2189c:	ba000009 	blt	218c8 <_sbrk+0x54>
   218a0:	e04d2003 	sub	r2, sp, r3
   218a4:	e3520000 	cmp	r2, #0
   218a8:	ba000002 	blt	218b8 <_sbrk+0x44>
   218ac:	e04d2000 	sub	r2, sp, r0
   218b0:	e35200ff 	cmp	r2, #255	; 0xff
   218b4:	da000003 	ble	218c8 <_sbrk+0x54>
   218b8:	e5810000 	str	r0, [r1]
   218bc:	e1a00003 	mov	r0, r3
   218c0:	e8bd4008 	pop	{r3, lr}
   218c4:	e12fff1e 	bx	lr
   218c8:	eb00000b 	bl	218fc <__errno>
   218cc:	e3a0300c 	mov	r3, #12
   218d0:	e5803000 	str	r3, [r0]
   218d4:	e3e03000 	mvn	r3, #0
   218d8:	eafffff7 	b	218bc <_sbrk+0x48>
   218dc:	000234a4 	.word	0x000234a4
   218e0:	000234a8 	.word	0x000234a8

000218e4 <__cs3_isr_interrupt>:
   218e4:	eafffffe 	b	218e4 <__cs3_isr_interrupt>

000218e8 <__cs3_isr_undef>:
   218e8:	eafffffe 	b	218e8 <__cs3_isr_undef>

000218ec <__cs3_isr_swi>:
   218ec:	eafffffe 	b	218ec <__cs3_isr_swi>

000218f0 <__cs3_isr_pabort>:
   218f0:	eafffffe 	b	218f0 <__cs3_isr_pabort>

000218f4 <__cs3_isr_dabort>:
   218f4:	eafffffe 	b	218f4 <__cs3_isr_dabort>

000218f8 <__cs3_isr_fiq>:
   218f8:	eafffffe 	b	218f8 <__cs3_isr_fiq>

000218fc <__errno>:
   218fc:	e59f3004 	ldr	r3, [pc, #4]	; 21908 <__errno+0xc>
   21900:	e5930000 	ldr	r0, [r3]
   21904:	e12fff1e 	bx	lr
   21908:	00022be8 	.word	0x00022be8

0002190c <__libc_init_array>:
   2190c:	e92d4070 	push	{r4, r5, r6, lr}
   21910:	e59f506c 	ldr	r5, [pc, #108]	; 21984 <__libc_init_array+0x78>
   21914:	e59f606c 	ldr	r6, [pc, #108]	; 21988 <__libc_init_array+0x7c>
   21918:	e0656006 	rsb	r6, r5, r6
   2191c:	e1b06146 	asrs	r6, r6, #2
   21920:	12455004 	subne	r5, r5, #4
   21924:	13a04000 	movne	r4, #0
   21928:	0a000005 	beq	21944 <__libc_init_array+0x38>
   2192c:	e5b53004 	ldr	r3, [r5, #4]!
   21930:	e2844001 	add	r4, r4, #1
   21934:	e1a0e00f 	mov	lr, pc
   21938:	e12fff13 	bx	r3
   2193c:	e1560004 	cmp	r6, r4
   21940:	1afffff9 	bne	2192c <__libc_init_array+0x20>
   21944:	e59f5040 	ldr	r5, [pc, #64]	; 2198c <__libc_init_array+0x80>
   21948:	e59f6040 	ldr	r6, [pc, #64]	; 21990 <__libc_init_array+0x84>
   2194c:	e0656006 	rsb	r6, r5, r6
   21950:	eb00041c 	bl	229c8 <_init>
   21954:	e1b06146 	asrs	r6, r6, #2
   21958:	12455004 	subne	r5, r5, #4
   2195c:	13a04000 	movne	r4, #0
   21960:	0a000005 	beq	2197c <__libc_init_array+0x70>
   21964:	e5b53004 	ldr	r3, [r5, #4]!
   21968:	e2844001 	add	r4, r4, #1
   2196c:	e1a0e00f 	mov	lr, pc
   21970:	e12fff13 	bx	r3
   21974:	e1560004 	cmp	r6, r4
   21978:	1afffff9 	bne	21964 <__libc_init_array+0x58>
   2197c:	e8bd4070 	pop	{r4, r5, r6, lr}
   21980:	e12fff1e 	bx	lr
   21984:	000229e0 	.word	0x000229e0
   21988:	000229e0 	.word	0x000229e0
   2198c:	000229e0 	.word	0x000229e0
   21990:	000229e8 	.word	0x000229e8

Disassembly of section .rodata:

000219a0 <SEG_BCD-0x28>:
	...
   219a8:	40000000 	.word	0x40000000
   219ac:	00002003 	.word	0x00002003
   219b0:	00000000 	.word	0x00000000
   219b4:	40000000 	.word	0x40000000
   219b8:	40000000 	.word	0x40000000
   219bc:	c0000000 	.word	0xc0000000
   219c0:	01002003 	.word	0x01002003
   219c4:	00000000 	.word	0x00000000

000219c8 <SEG_BCD>:
   219c8:	0000003f 00000006 0000005b 0000004f     ?.......[...O...
   219d8:	00000066 0000006d 0000007d 00000007     f...m...}.......
   219e8:	0000007f 0000006f 20434d4d 74696e49     ....o...MMC Init
   219f8:	696c6169 6974617a 0a2e6e6f 00000000     ialization......
   21a08:	64726143 666e495f 61632e6f 745f6472     Card_Info.card_t
   21a18:	20657079 6425203d 0000000a 64726143     ype = %d....Card
   21a28:	666e495f 63722e6f 203d2061 000a6425     _Info.rca = %d..
   21a38:	64726143 666e495f 66782e6f 735f7265     Card_Info.xfer_s
   21a48:	64656570 25203d20 00000a64 64726143     peed = %d...Card
   21a58:	666e495f 616d2e6f 5f725f78 6c6b6c62     _Info.max_r_blkl
   21a68:	203d206e 000a6425 64726143 666e495f     n = %d..Card_Inf
   21a78:	616d2e6f 5f775f78 6c6b6c62 203d206e     o.max_w_blkln = 
   21a88:	000a6425 64726143 666e495f 61702e6f     %d..Card_Info.pa
   21a98:	61697472 5f725f6c 6f6c6c61 20646577     rtial_r_allowed 
   21aa8:	6425203d 0000000a 64726143 666e495f     = %d....Card_Inf
   21ab8:	61702e6f 61697472 5f775f6c 6f6c6c61     o.partial_w_allo
   21ac8:	20646577 6425203d 0000000a 64726143     wed = %d....Card
   21ad8:	666e495f 69682e6f 735f6867 64656570     _Info.high_speed
   21ae8:	25203d20 00000a64 64726143 666e495f      = %d...Card_Inf
   21af8:	63732e6f 64735f72 6570735f 203d2063     o.scr_sd_spec = 
   21b08:	000a6425 64726143 666e495f 73632e6f     %d..Card_Info.cs
   21b18:	63635f64 203d2063 000a6425 64726143     d_ccc = %d..Card
   21b28:	666e495f 6c622e6f 756e5f6b 7265626d     _Info.blk_number
   21b38:	6769685f 203d2068 000a6425 64726143     _high = %d..Card
   21b48:	666e495f 6c622e6f 756e5f6b 7265626d     _Info.blk_number
   21b58:	776f6c5f 25203d20 00000a64 5f544c41     _low = %d...ALT_
   21b68:	5f4b4c43 505f4e49 4f5f4e49 20314353     CLK_IN_PIN_OSC1 
   21b78:	6425203d 0000000a 5f544c41 5f4b4c43     = %d....ALT_CLK_
   21b88:	505f4e49 4f5f4e49 20324353 6425203d     IN_PIN_OSC2 = %d
   21b98:	0000000a 5f544c41 5f4b4c43 5f483246     ....ALT_CLK_F2H_
   21ba8:	49524550 525f4850 3d204645 0a642520     PERIPH_REF = %d.
   21bb8:	00000000 5f544c41 5f4b4c43 5f483246     ....ALT_CLK_F2H_
   21bc8:	41524453 45525f4d 203d2046 000a6425     SDRAM_REF = %d..
   21bd8:	5f544c41 5f4b4c43 505f4e49 4a5f4e49     ALT_CLK_IN_PIN_J
   21be8:	20474154 6425203d 0000000a 5f544c41     TAG = %d....ALT_
   21bf8:	5f4b4c43 505f4e49 555f4e49 3049504c     CLK_IN_PIN_ULPI0
   21c08:	25203d20 00000a64 5f544c41 5f4b4c43      = %d...ALT_CLK_
   21c18:	505f4e49 555f4e49 3149504c 25203d20     IN_PIN_ULPI1 = %
   21c28:	00000a64 5f544c41 5f4b4c43 505f4e49     d...ALT_CLK_IN_P
   21c38:	455f4e49 3043414d 2058525f 6425203d     IN_EMAC0_RX = %d
   21c48:	0000000a 5f544c41 5f4b4c43 505f4e49     ....ALT_CLK_IN_P
   21c58:	455f4e49 3143414d 2058525f 6425203d     IN_EMAC1_RX = %d
   21c68:	0000000a 5f544c41 5f4b4c43 4e49414d     ....ALT_CLK_MAIN
   21c78:	4c4c505f 25203d20 00000a64 5f544c41     _PLL = %d...ALT_
   21c88:	5f4b4c43 49524550 52454850 505f4c41     CLK_PERIPHERAL_P
   21c98:	3d204c4c 0a642520 00000000 5f544c41     LL = %d.....ALT_
   21ca8:	5f4b4c43 41524453 4c505f4d 203d204c     CLK_SDRAM_PLL = 
   21cb8:	000a6425 5f544c41 5f4b4c43 3143534f     %d..ALT_CLK_OSC1
   21cc8:	25203d20 00000a64 5f544c41 5f4b4c43      = %d...ALT_CLK_
   21cd8:	4e49414d 4c4c505f 2030435f 6425203d     MAIN_PLL_C0 = %d
   21ce8:	0000000a 5f544c41 5f4b4c43 4e49414d     ....ALT_CLK_MAIN
   21cf8:	4c4c505f 2031435f 6425203d 0000000a     _PLL_C1 = %d....
   21d08:	5f544c41 5f4b4c43 4e49414d 4c4c505f     ALT_CLK_MAIN_PLL
   21d18:	2032435f 6425203d 0000000a 5f544c41     _C2 = %d....ALT_
   21d28:	5f4b4c43 4e49414d 4c4c505f 2033435f     CLK_MAIN_PLL_C3 
   21d38:	6425203d 0000000a 5f544c41 5f4b4c43     = %d....ALT_CLK_
   21d48:	4e49414d 4c4c505f 2034435f 6425203d     MAIN_PLL_C4 = %d
   21d58:	0000000a 5f544c41 5f4b4c43 4e49414d     ....ALT_CLK_MAIN
   21d68:	4c4c505f 2035435f 6425203d 0000000a     _PLL_C5 = %d....
   21d78:	5f544c41 5f4b4c43 2055504d 6425203d     ALT_CLK_MPU = %d
   21d88:	0000000a 5f544c41 5f4b4c43 5f55504d     ....ALT_CLK_MPU_
   21d98:	525f324c 3d204d41 0a642520 00000000     L2_RAM = %d.....
   21da8:	5f544c41 5f4b4c43 5f55504d 49524550     ALT_CLK_MPU_PERI
   21db8:	3d204850 0a642520 00000000 5f544c41     PH = %d.....ALT_
   21dc8:	5f4b4c43 4d5f334c 204e4941 6425203d     CLK_L3_MAIN = %d
   21dd8:	0000000a 5f544c41 5f4b4c43 4d5f334c     ....ALT_CLK_L3_M
   21de8:	203d2050 000a6425 5f544c41 5f4b4c43     P = %d..ALT_CLK_
   21df8:	535f334c 203d2050 000a6425 5f544c41     L3_SP = %d..ALT_
   21e08:	5f4b4c43 4d5f344c 204e4941 6425203d     CLK_L4_MAIN = %d
   21e18:	0000000a 5f544c41 5f4b4c43 4d5f344c     ....ALT_CLK_L4_M
   21e28:	203d2050 000a6425 5f544c41 5f4b4c43     P = %d..ALT_CLK_
   21e38:	535f344c 203d2050 000a6425 5f544c41     L4_SP = %d..ALT_
   21e48:	5f4b4c43 5f474244 45534142 25203d20     CLK_DBG_BASE = %
   21e58:	00000a64 5f544c41 5f4b4c43 5f474244     d...ALT_CLK_DBG_
   21e68:	3d205441 0a642520 00000000 5f544c41     AT = %d.....ALT_
   21e78:	5f4b4c43 5f474244 43415254 203d2045     CLK_DBG_TRACE = 
   21e88:	000a6425 5f544c41 5f4b4c43 5f474244     %d..ALT_CLK_DBG_
   21e98:	454d4954 203d2052 000a6425 5f544c41     TIMER = %d..ALT_
   21ea8:	5f4b4c43 20474244 6425203d 0000000a     CLK_DBG = %d....
   21eb8:	5f544c41 5f4b4c43 4e49414d 5053515f     ALT_CLK_MAIN_QSP
   21ec8:	203d2049 000a6425 5f544c41 5f4b4c43     I = %d..ALT_CLK_
   21ed8:	4e49414d 4e414e5f 44535f44 20434d4d     MAIN_NAND_SDMMC 
   21ee8:	6425203d 0000000a 5f544c41 5f4b4c43     = %d....ALT_CLK_
   21ef8:	20474643 6425203d 0000000a 5f544c41     CFG = %d....ALT_
   21f08:	5f4b4c43 5f463248 52455355 203d2030     CLK_H2F_USER0 = 
   21f18:	000a6425 5f544c41 5f4b4c43 49524550     %d..ALT_CLK_PERI
   21f28:	52454850 505f4c41 435f4c4c 203d2030     PHERAL_PLL_C0 = 
   21f38:	000a6425 5f544c41 5f4b4c43 49524550     %d..ALT_CLK_PERI
   21f48:	52454850 505f4c41 435f4c4c 203d2031     PHERAL_PLL_C1 = 
   21f58:	000a6425 5f544c41 5f4b4c43 49524550     %d..ALT_CLK_PERI
   21f68:	52454850 505f4c41 435f4c4c 203d2032     PHERAL_PLL_C2 = 
   21f78:	000a6425 5f544c41 5f4b4c43 49524550     %d..ALT_CLK_PERI
   21f88:	52454850 505f4c41 435f4c4c 203d2033     PHERAL_PLL_C3 = 
   21f98:	000a6425 5f544c41 5f4b4c43 49524550     %d..ALT_CLK_PERI
   21fa8:	52454850 505f4c41 435f4c4c 203d2034     PHERAL_PLL_C4 = 
   21fb8:	000a6425 5f544c41 5f4b4c43 49524550     %d..ALT_CLK_PERI
   21fc8:	52454850 505f4c41 435f4c4c 203d2035     PHERAL_PLL_C5 = 
   21fd8:	000a6425 5f544c41 5f4b4c43 5f425355     %d..ALT_CLK_USB_
   21fe8:	3d20504d 0a642520 00000000 5f544c41     MP = %d.....ALT_
   21ff8:	5f4b4c43 5f495053 203d204d 000a6425     CLK_SPI_M = %d..
   22008:	5f544c41 5f4b4c43 49505351 25203d20     ALT_CLK_QSPI = %
   22018:	00000a64 5f544c41 5f4b4c43 444e414e     d...ALT_CLK_NAND
   22028:	3d20585f 0a642520 00000000 5f544c41     _X = %d.....ALT_
   22038:	5f4b4c43 444e414e 25203d20 00000a64     CLK_NAND = %d...
   22048:	5f544c41 5f4b4c43 4d4d4453 203d2043     ALT_CLK_SDMMC = 
   22058:	000a6425 5f544c41 5f4b4c43 43414d45     %d..ALT_CLK_EMAC
   22068:	203d2030 000a6425 5f544c41 5f4b4c43     0 = %d..ALT_CLK_
   22078:	43414d45 203d2031 000a6425 5f544c41     EMAC1 = %d..ALT_
   22088:	5f4b4c43 304e4143 25203d20 00000a64     CLK_CAN0 = %d...
   22098:	5f544c41 5f4b4c43 314e4143 25203d20     ALT_CLK_CAN1 = %
   220a8:	00000a64 5f544c41 5f4b4c43 4f495047     d...ALT_CLK_GPIO
   220b8:	2042445f 6425203d 0000000a 5f544c41     _DB = %d....ALT_
   220c8:	5f4b4c43 5f463248 52455355 203d2031     CLK_H2F_USER1 = 
   220d8:	000a6425 5f544c41 5f4b4c43 41524453     %d..ALT_CLK_SDRA
   220e8:	4c505f4d 30435f4c 25203d20 00000a64     M_PLL_C0 = %d...
   220f8:	5f544c41 5f4b4c43 41524453 4c505f4d     ALT_CLK_SDRAM_PL
   22108:	31435f4c 25203d20 00000a64 5f544c41     L_C1 = %d...ALT_
   22118:	5f4b4c43 41524453 4c505f4d 32435f4c     CLK_SDRAM_PLL_C2
   22128:	25203d20 00000a64 5f544c41 5f4b4c43      = %d...ALT_CLK_
   22138:	41524453 4c505f4d 33435f4c 25203d20     SDRAM_PLL_C3 = %
   22148:	00000a64 5f544c41 5f4b4c43 41524453     d...ALT_CLK_SDRA
   22158:	4c505f4d 34435f4c 25203d20 00000a64     M_PLL_C4 = %d...
   22168:	5f544c41 5f4b4c43 41524453 4c505f4d     ALT_CLK_SDRAM_PL
   22178:	35435f4c 25203d20 00000a64 5f544c41     L_C5 = %d...ALT_
   22188:	5f4b4c43 5f524444 20535144 6425203d     CLK_DDR_DQS = %d
   22198:	0000000a 5f544c41 5f4b4c43 5f524444     ....ALT_CLK_DDR_
   221a8:	445f5832 3d205351 0a642520 00000000     2X_DQS = %d.....
   221b8:	5f544c41 5f4b4c43 5f524444 3d205144     ALT_CLK_DDR_DQ =
   221c8:	0a642520 00000000 5f544c41 5f4b4c43      %d.....ALT_CLK_
   221d8:	5f463248 52455355 203d2032 000a6425     H2F_USER2 = %d..
   221e8:	5f544c41 5f4b4c43 5f54554f 5f4e4950     ALT_CLK_OUT_PIN_
   221f8:	43414d45 58545f30 25203d20 00000a64     EMAC0_TX = %d...
   22208:	5f544c41 5f4b4c43 5f54554f 5f4e4950     ALT_CLK_OUT_PIN_
   22218:	43414d45 58545f31 25203d20 00000a64     EMAC1_TX = %d...
   22228:	5f544c41 5f4b4c43 5f54554f 5f4e4950     ALT_CLK_OUT_PIN_
   22238:	4d4d4453 203d2043 000a6425 5f544c41     SDMMC = %d..ALT_
   22248:	5f4b4c43 5f54554f 5f4e4950 30433249     CLK_OUT_PIN_I2C0
   22258:	4c43535f 25203d20 00000a64 5f544c41     _SCL = %d...ALT_
   22268:	5f4b4c43 5f54554f 5f4e4950 31433249     CLK_OUT_PIN_I2C1
   22278:	4c43535f 25203d20 00000a64 5f544c41     _SCL = %d...ALT_
   22288:	5f4b4c43 5f54554f 5f4e4950 32433249     CLK_OUT_PIN_I2C2
   22298:	4c43535f 25203d20 00000a64 5f544c41     _SCL = %d...ALT_
   222a8:	5f4b4c43 5f54554f 5f4e4950 33433249     CLK_OUT_PIN_I2C3
   222b8:	4c43535f 25203d20 00000a64 5f544c41     _SCL = %d...ALT_
   222c8:	5f4b4c43 5f54554f 5f4e4950 4d495053     CLK_OUT_PIN_SPIM
   222d8:	203d2030 000a6425 5f544c41 5f4b4c43     0 = %d..ALT_CLK_
   222e8:	5f54554f 5f4e4950 4d495053 203d2031     OUT_PIN_SPIM1 = 
   222f8:	000a6425 5f544c41 5f4b4c43 5f54554f     %d..ALT_CLK_OUT_
   22308:	5f4e4950 49505351 25203d20 00000a64     PIN_QSPI = %d...
   22318:	4f525245 4d203a52 61696465 74746120     ERROR: Media att
   22328:	20686361 6c696166 000a6465 7365742f     ach failed../tes
   22338:	61725f74 76612e77 00000069 00006272     t_raw.avi...rb..

00022348 <tran_speed_mul_x10.8902>:
   22348:	00000000 0000000a 0000000c 0000000d     ................
   22358:	0000000f 00000014 00000019 0000001e     ................
   22368:	00000023 00000028 0000002d 00000032     #...(...-...2...
   22378:	00000037 0000003c 00000046 00000050     7...<...F...P...

00022388 <freq_unit.8903>:
   22388:	000186a0 000f4240 00989680 05f5e100     ....@B..........
   22398:	5f746c61 6d6d6473 6e695f63 74735f74     alt_sdmmc_int_st
   223a8:	73757461 7465675f 72726520 2578303d     atus_get err=0x%
   223b8:	00000a78 6f6e6241 6c616d72 414d4420     x...Abnormal DMA
   223c8:	70657220 6574726f 000a2e64 656d6954      reported...Time
   223d8:	756f2064 61772074 6e697469 6f662067     d out waiting fo
   223e8:	44532072 20434d4d 62206f74 6d6f6365     r SDMMC to becom
   223f8:	64692065 000a656c 5f746c61 6d6d6473     e idle..alt_sdmm
   22408:	61635f63 635f6472 645f6b6c 62617369     c_card_clk_disab
   22418:	6620656c 656c6961 00000a64 544c410a     le failed....ALT
   22428:	4d44535f 535f434d 425f5445 4b434f4c     _SDMMC_SET_BLOCK
   22438:	204e454c 6c696166 000a6465 6d6f630a     LEN failed...com
   22448:	646e616d 7079745f 6f6e2065 75732074     mand_type not su
   22458:	726f7070 0a646574 00000000 65746e49     pported.....Inte
   22468:	70757272 72652074 20726f72 65746564     rrupt error dete
   22478:	64657463 0000000a 656d6954 756f2064     cted....Timed ou
   22488:	75642074 6f742065 46494620 6f6e204f     t due to FIFO no
   22498:	76612074 616c6961 0a656c62 00000000     t available.....
   224a8:	5f746c61 6d6d6473 61645f63 645f6174     alt_sdmmc_data_d
   224b8:	5f656e6f 74696177 66207265 656c6961     one_waiter faile
   224c8:	00000a64 5f746c61 6d6d6473 72745f63     d...alt_sdmmc_tr
   224d8:	66736e61 685f7265 65706c65 61662072     ansfer_helper fa
   224e8:	64656c69 0000000a 68676948 65707320     iled....High spe
   224f8:	6e206465 7320746f 6f707075 64657472     ed not supported
   22508:	0000000a 68676948 65707320 6e206465     ....High speed n
   22518:	7320746f 6f707075 64657472 00000a2e     ot supported....
   22528:	5f746c61 6d6d6473 61635f63 635f6472     alt_sdmmc_card_c
   22538:	645f6b6c 735f7669 66207465 656c6961     lk_div_set faile
   22548:	00000a64 70736552 65736e6f 6d697420     d...Response tim
   22558:	74756f65 0000000a 78656e55 74636570     eout....Unexpect
   22568:	69206465 7265746e 74707572 6f6e202c     ed interrupt, no
   22578:	69742074 756f656d 00000a74 5f544c41     t timeout...ALT_
   22588:	4d4d4453 46495f43 4e4f435f 61662044     SDMMC_IF_COND fa
   22598:	64656c69 0000000a 5f544c41 4d4d4453     iled....ALT_SDMM
   225a8:	46495f43 4e4f435f 65722044 6e6f7073     C_IF_COND respon
   225b8:	74206573 64656d69 74756f20 0000000a     se timed out....
   225c8:	5f544c41 4d4d4453 46495f43 4e4f435f     ALT_SDMMC_IF_CON
   225d8:	6e692044 72726574 20747075 78656e75     D interrupt unex
   225e8:	74636570 000a6465 5f544c41 4d4d4453     pected..ALT_SDMM
   225f8:	50415f43 4d435f50 69742044 2064656d     C_APP_CMD timed 
   22608:	0a74756f 00000000 5f544c41 4d4d4453     out.....ALT_SDMM
   22618:	50415f43 4d435f50 72652044 20726f72     C_APP_CMD error 
   22628:	20746f6e 656d6974 756f2064 00000a74     not timed out...
   22638:	5f544c41 4d4d4453 45535f43 4f5f444e     ALT_SDMMC_SEND_O
   22648:	4f435f50 7420444e 64656d69 74756f20     P_COND timed out
   22658:	0000000a 74697753 6e696863 6f742067     ....Switching to
   22668:	67696820 70732068 20646565 6c696166      high speed fail
   22678:	202c6465 74697773 665f6863 74636e75     ed, switch_funct
   22688:	5b6e6f69 205d3631 7830203d 000a7825     ion[16] = 0x%x..
   22698:	74697753 6e696863 6f742067 66656420     Switching to def
   226a8:	746c7561 65707320 66206465 656c6961     ault speed faile
   226b8:	00000a64 33544146 00000032 31544146     d...FAT32...FAT1
   226c8:	00000036 20544146 61746564 3a736c69     6...FAT details:
   226d8:	00000a0d 70795420 253d2065 00000073     .... Type =%s...
   226e8:	6f6f5220 69442074 69462072 20747372      Root Dir First 
   226f8:	73756c43 20726574 7825203d 00000a0d     Cluster = %x....
   22708:	54414620 67654220 4c206e69 3d204142      FAT Begin LBA =
   22718:	25783020 000a0d78 756c4320 72657473      0x%x... Cluster
   22728:	67654220 4c206e69 3d204142 25783020      Begin LBA = 0x%
   22738:	000a0d78 63655320 73726f74 72655020     x... Sectors Per
   22748:	756c4320 72657473 25203d20 000a0d64      Cluster = %d...
   22758:	5f544146 203a5346 6f727245 6f632072     FAT_FS: Error co
   22768:	20646c75 20746f6e 64616f6c 54414620     uld not load FAT
   22778:	74656420 736c6961 64252820 0a0d2129      details (%d)!..
   22788:	00000000 00000072 69440a0d 74636572     ....r.....Direct
   22798:	2079726f 0a0d7325 00000000 3c207325     ory %s......%s <
   227a8:	3e524944 00000a0d 5b207325 62206425     DIR>....%s [%d b
   227b8:	73657479 000a0d5d 00000001 00000003     ytes]...........
   227c8:	00000005 00000007 00000009 0000000e     ................
   227d8:	00000010 00000012 00000014 00000016     ................
   227e8:	00000018 0000001c 0000001e 33323130     ............0123
   227f8:	37363534 42413938 46454443 00000000     456789ABCDEF....

00022808 <_global_impure_ptr>:
   22808:	00022bf0 00000043                       .+..C...

00022810 <blanks.6727>:
   22810:	20202020 20202020 20202020 20202020                     

00022820 <zeroes.6728>:
   22820:	30303030 30303030 30303030 30303030     0000000000000000
   22830:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   22840:	33323130 37363534 62613938 66656463     0123456789abcdef
   22850:	00000000 6c756e28 0000296c 00000030     ....(null)..0...
   22860:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   22870:	49534f50 00000058 0000002e 00000000     POSIX...........

00022880 <p05.5249>:
   22880:	00000005 00000019 0000007d 00000000     ........}.......

00022890 <__mprec_tens>:
   22890:	00000000 3ff00000 00000000 40240000     .......?......$@
   228a0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   228b0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   228c0:	00000000 412e8480 00000000 416312d0     .......A......cA
   228d0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   228e0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   228f0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   22900:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   22910:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   22920:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   22930:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   22940:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   22950:	79d99db4 44ea7843                       ...yCx.D

00022958 <__mprec_tinytens>:
   22958:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   22968:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   22978:	64ac6f43 0ac80628                       Co.d(...

00022980 <__mprec_bigtens>:
   22980:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   22990:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   229a0:	7f73bf3c 75154fdd                       <.s..O.u

000229a8 <blanks.6671>:
   229a8:	20202020 20202020 20202020 20202020                     

000229b8 <zeroes.6672>:
   229b8:	30303030 30303030 30303030 30303030     0000000000000000

000229c8 <_init>:
   229c8:	e1a0c00d 	mov	r12, sp
   229cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
   229d0:	e24cb004 	sub	r11, r12, #4
   229d4:	e24bd028 	sub	sp, r11, #40	; 0x28
   229d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
   229dc:	e12fff1e 	bx	lr

000229e0 <__init_array_start>:
   229e0:	00019dbc 	.word	0x00019dbc

000229e4 <__frame_dummy_init_array_entry>:
   229e4:	00000208                                ....

000229e8 <__libc_fini>:
   229e8:	e1a0c00d 	mov	r12, sp
   229ec:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
   229f0:	e24cb004 	sub	r11, r12, #4
   229f4:	e24bd028 	sub	sp, r11, #40	; 0x28
   229f8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
   229fc:	e12fff1e 	bx	lr

00022a00 <__fini_array_start>:
   22a00:	000001c4 	.word	0x000001c4

00022a04 <__cs3_regions>:
	...
   22a10:	000234b0 	.word	0x000234b0
   22a14:	267357d8 	.word	0x267357d8
